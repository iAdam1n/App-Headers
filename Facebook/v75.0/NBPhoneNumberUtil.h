/*
* This header is generated by classdump-dyld 1.0
* on Saturday, December 24, 2016 at 12:21:26 AM Greenwich Mean Time
* Operating System: Version 10.1.1 (Build 14B150)
* Image Source: /var/containers/Bundle/Application/FE7A361D-639E-4E8F-9E98-6A4739748428/Facebook.app/Facebook
* classdump-dyld is licensed under GPLv3, Copyright Â© 2013-2016 by Elias Limneos.
*/


@class NSMutableDictionary, NSDictionary;

@interface NBPhoneNumberUtil : NSObject {

	NSMutableDictionary* _coreMetaData;
	NSMutableDictionary* _mapCCode2CN;
	NSMutableDictionary* _mapCN2CCode;

}

@property (nonatomic,readonly) NSMutableDictionary * coreMetaData;              //@synthesize coreMetaData=_coreMetaData - In the implementation block
@property (nonatomic,retain) NSMutableDictionary * mapCCode2CN;                 //@synthesize mapCCode2CN=_mapCCode2CN - In the implementation block
@property (nonatomic,retain) NSMutableDictionary * mapCN2CCode;                 //@synthesize mapCN2CCode=_mapCN2CCode - In the implementation block
@property (nonatomic,readonly) NSDictionary * DIGIT_MAPPINGS; 
+(id)sharedInstanceForTest;
+(id)stringByTrimming:(id)arg1 ;
+(id)sharedInstance;
-(id)getRegionCodeForCountryCode:(unsigned)arg1 ;
-(unsigned)getCountryCodeForRegion:(id)arg1 ;
-(id)initWithPhoneNumberMetadata:(id)arg1 ;
-(id)initForTest;
-(id)replaceStringByRegex:(id)arg1 regex:(id)arg2 withTemplate:(id)arg3 ;
-(id)matchesByRegex:(id)arg1 regex:(id)arg2 ;
-(NSMutableDictionary *)mapCN2CCode;
-(NSMutableDictionary *)mapCCode2CN;
-(void)initRegularExpressionSet;
-(void)initNormalizationMappings;
-(void)initCC2CN;
-(void)clearCC2CN;
-(void)clearCN2CC;
-(void)setMapCCode2CN:(NSMutableDictionary *)arg1 ;
-(void)setMapCN2CCode:(NSMutableDictionary *)arg1 ;
-(long long)stringPositionByRegex:(id)arg1 regex:(id)arg2 ;
-(BOOL)matchesEntirely:(id)arg1 string:(id)arg2 ;
-(id)normalizeHelper:(id)arg1 normalizationReplacements:(id)arg2 removeNonMatches:(BOOL)arg3 ;
-(id)normalizeDigitsOnly:(id)arg1 ;
-(id)normalizePhoneNumber:(id)arg1 ;
-(NSDictionary *)DIGIT_MAPPINGS;
-(id)stringByReplacingOccurrencesString:(id)arg1 withMap:(id)arg2 removeNonMatches:(BOOL)arg3 ;
-(unsigned long long)getLengthOfGeographicalAreaCode:(id)arg1 ;
-(id)getRegionCodeForNumber:(id)arg1 ;
-(id)getMetadataForRegion:(id)arg1 ;
-(BOOL)isNumberGeographical:(id)arg1 ;
-(unsigned long long)getLengthOfNationalDestinationCode:(id)arg1 ;
-(BOOL)hasValue:(id)arg1 ;
-(id)format:(id)arg1 numberFormat:(int)arg2 ;
-(id)componentsSeparatedByRegex:(id)arg1 regex:(id)arg2 ;
-(id)regionCodeFromCountryCode:(unsigned)arg1 ;
-(int)getNumberType:(id)arg1 ;
-(BOOL)isNaN:(id)arg1 ;
-(id)getNationalSignificantNumber:(id)arg1 ;
-(id)prefixNumberWithCountryCallingCode:(unsigned)arg1 phoneNumberFormat:(int)arg2 formattedNationalNumber:(id)arg3 formattedExtension:(id)arg4 ;
-(BOOL)hasValidCountryCallingCode:(unsigned)arg1 ;
-(id)getMetadataForRegionOrCallingCode:(unsigned)arg1 regionCode:(id)arg2 ;
-(id)maybeGetFormattedExtension:(id)arg1 metadata:(id)arg2 numberFormat:(int)arg3 ;
-(id)formatNsn:(id)arg1 metadata:(id)arg2 phoneNumberFormat:(int)arg3 carrierCode:(id)arg4 ;
-(id)formatByPattern:(id)arg1 numberFormat:(int)arg2 userDefinedFormats:(id)arg3 ;
-(id)chooseFormattingPatternForNumber:(id)arg1 nationalNumber:(id)arg2 ;
-(id)formatNsnUsingPattern:(id)arg1 formattingPattern:(id)arg2 numberFormat:(int)arg3 carrierCode:(id)arg4 ;
-(id)formatNationalNumberWithCarrierCode:(id)arg1 carrierCode:(id)arg2 ;
-(id)getMetadataForNonGeographicalRegion:(unsigned)arg1 ;
-(id)formatNumberForMobileDialing:(id)arg1 regionCallingFrom:(id)arg2 withFormatting:(BOOL)arg3 ;
-(id)formatNationalNumberWithPreferredCarrierCode:(id)arg1 fallbackCarrierCode:(id)arg2 ;
-(BOOL)canBeInternationallyDialled:(id)arg1 ;
-(id)formatOutOfCountryCallingNumber:(id)arg1 regionCallingFrom:(id)arg2 ;
-(BOOL)isValidRegionCode:(id)arg1 ;
-(BOOL)isNANPACountry:(id)arg1 ;
-(unsigned)getCountryCodeForValidRegion:(id)arg1 ;
-(id)formatInOriginalFormat:(id)arg1 regionCallingFrom:(id)arg2 ;
-(BOOL)hasUnexpectedItalianLeadingZero:(id)arg1 ;
-(BOOL)hasFormattingPatternForNumber:(id)arg1 ;
-(id)getNddPrefixForRegion:(id)arg1 stripNonDigits:(BOOL)arg2 ;
-(BOOL)rawInputContainsNationalPrefix:(id)arg1 nationalPrefix:(id)arg2 regionCode:(id)arg3 ;
-(BOOL)isStartingStringByRegex:(id)arg1 regex:(id)arg2 ;
-(id)parse:(id)arg1 defaultRegion:(id)arg2 ;
-(BOOL)isValidNumber:(id)arg1 ;
-(BOOL)isLeadingZeroPossible:(unsigned)arg1 ;
-(id)formatOutOfCountryKeepingAlphaChars:(id)arg1 regionCallingFrom:(id)arg2 ;
-(long long)indexOfStringByString:(id)arg1 target:(id)arg2 ;
-(id)replaceFirstStringByRegex:(id)arg1 regex:(id)arg2 withTemplate:(id)arg3 ;
-(id)getExampleNumber:(id)arg1 ;
-(id)getExampleNumberForType:(id)arg1 type:(int)arg2 ;
-(id)getNumberDescByType:(id)arg1 type:(int)arg2 ;
-(id)getExampleNumberForNonGeoEntity:(unsigned)arg1 ;
-(int)getNumberTypeHelper:(id)arg1 metadata:(id)arg2 ;
-(BOOL)isNumberMatchingDesc:(id)arg1 numberDesc:(id)arg2 ;
-(NSMutableDictionary *)coreMetaData;
-(BOOL)isValidNumberForRegion:(id)arg1 regionCode:(id)arg2 ;
-(id)getRegionCodeForNumberFromRegionList:(id)arg1 regionCodes:(id)arg2 ;
-(unsigned)getCountryCodeForValidRegion:(id)arg1 error:(id*)arg2 ;
-(BOOL)isViablePhoneNumber:(id)arg1 ;
-(id)maybeStripExtension:(id*)arg1 ;
-(BOOL)isPossibleNumber:(id)arg1 ;
-(int)isPossibleNumberWithReason:(id)arg1 ;
-(int)testNumberLengthAgainstPattern:(id)arg1 number:(id)arg2 ;
-(BOOL)isPossibleNumberString:(id)arg1 regionDialingFrom:(id)arg2 ;
-(BOOL)truncateTooLongNumber:(id)arg1 ;
-(unsigned)maybeExtractCountryCode:(id)arg1 metadata:(id)arg2 nationalNumber:(id*)arg3 keepRawInput:(BOOL)arg4 phoneNumber:(id*)arg5 ;
-(int)maybeStripInternationalPrefixAndNormalize:(id*)arg1 possibleIddPrefix:(id)arg2 ;
-(unsigned)extractCountryCode:(id)arg1 nationalNumber:(id*)arg2 ;
-(BOOL)maybeStripNationalPrefixAndCarrierCode:(id*)arg1 metadata:(id)arg2 carrierCode:(id*)arg3 ;
-(void)normalizeSB:(id*)arg1 ;
-(BOOL)parsePrefixAsIdd:(id)arg1 sourceString:(id*)arg2 ;
-(id)matcheFirstByRegex:(id)arg1 regex:(id)arg2 ;
-(id)parseHelper:(id)arg1 defaultRegion:(id)arg2 keepRawInput:(BOOL)arg3 checkRegion:(BOOL)arg4 ;
-(id)countyCodeByCarrier;
-(id)parseAndKeepRawInput:(id)arg1 defaultRegion:(id)arg2 ;
-(id)extractOptionalPauseComponent:(id)arg1 numberLeftToParse:(id*)arg2 ;
-(void)buildNationalNumberForParsing:(id)arg1 nationalNumber:(id*)arg2 ;
-(BOOL)checkRegionForParsing:(id)arg1 defaultRegion:(id)arg2 ;
-(id)extractPossibleNumber:(id)arg1 ;
-(int)isNumberMatch:(id)arg1 second:(id)arg2 ;
-(BOOL)isNationalNumberSuffixOfTheOther:(id)arg1 second:(id)arg2 ;
-(id)matchedStringByRegex:(id)arg1 regex:(id)arg2 ;
-(id)countryCodeFromRegionCode:(id)arg1 ;
-(id)convertAlphaCharactersInNumber:(id)arg1 ;
-(unsigned long long)getLengthOfGeographicalAreaCode:(id)arg1 error:(id*)arg2 ;
-(unsigned long long)getLengthOfNationalDestinationCode:(id)arg1 error:(id*)arg2 ;
-(BOOL)formattingRuleHasFirstGroupOnly:(id)arg1 ;
-(id)format:(id)arg1 numberFormat:(int)arg2 error:(id*)arg3 ;
-(id)formatByPattern:(id)arg1 numberFormat:(int)arg2 userDefinedFormats:(id)arg3 error:(id*)arg4 ;
-(id)formatNationalNumberWithCarrierCode:(id)arg1 carrierCode:(id)arg2 error:(id*)arg3 ;
-(id)formatNationalNumberWithPreferredCarrierCode:(id)arg1 fallbackCarrierCode:(id)arg2 error:(id*)arg3 ;
-(id)formatNumberForMobileDialing:(id)arg1 regionCallingFrom:(id)arg2 withFormatting:(BOOL)arg3 error:(id*)arg4 ;
-(id)formatOutOfCountryCallingNumber:(id)arg1 regionCallingFrom:(id)arg2 error:(id*)arg3 ;
-(id)formatInOriginalFormat:(id)arg1 regionCallingFrom:(id)arg2 error:(id*)arg3 ;
-(id)formatOutOfCountryKeepingAlphaChars:(id)arg1 regionCallingFrom:(id)arg2 error:(id*)arg3 ;
-(id)getExampleNumber:(id)arg1 error:(id*)arg2 ;
-(id)getExampleNumberForType:(id)arg1 type:(int)arg2 error:(id*)arg3 ;
-(id)getExampleNumberForNonGeoEntity:(unsigned)arg1 error:(id*)arg2 ;
-(id)getRegionCodesForCountryCode:(unsigned)arg1 ;
-(BOOL)isAlphaNumber:(id)arg1 ;
-(BOOL)isPossibleNumber:(id)arg1 error:(id*)arg2 ;
-(int)isPossibleNumberWithReason:(id)arg1 error:(id*)arg2 ;
-(BOOL)isPossibleNumberString:(id)arg1 regionDialingFrom:(id)arg2 error:(id*)arg3 ;
-(BOOL)truncateTooLongNumber:(id)arg1 error:(id*)arg2 ;
-(unsigned)maybeExtractCountryCode:(id)arg1 metadata:(id)arg2 nationalNumber:(id*)arg3 keepRawInput:(BOOL)arg4 phoneNumber:(id*)arg5 error:(id*)arg6 ;
-(int)maybeStripInternationalPrefixAndNormalize:(id*)arg1 possibleIddPrefix:(id)arg2 error:(id*)arg3 ;
-(BOOL)maybeStripNationalPrefixAndCarrierCode:(id*)arg1 metadata:(id)arg2 carrierCode:(id*)arg3 error:(id*)arg4 ;
-(id)parse:(id)arg1 defaultRegion:(id)arg2 error:(id*)arg3 ;
-(id)parseWithPhoneCarrierRegion:(id)arg1 error:(id*)arg2 ;
-(id)parseAndKeepRawInput:(id)arg1 defaultRegion:(id)arg2 error:(id*)arg3 ;
-(id)parseHelper:(id)arg1 defaultRegion:(id)arg2 keepRawInput:(BOOL)arg3 checkRegion:(BOOL)arg4 error:(id*)arg5 ;
-(int)isNumberMatch:(id)arg1 second:(id)arg2 error:(id*)arg3 ;
-(BOOL)canBeInternationallyDialled:(id)arg1 error:(id*)arg2 ;
-(id)getAllMetadata;
-(id)init;
-(void)dealloc;
-(id)loadMetadata:(id)arg1 ;
-(id)regularExpressionWithPattern:(id)arg1 options:(unsigned long long)arg2 error:(id*)arg3 ;
@end

