/*
* This header is generated by classdump-dyld 1.0
* on Saturday, December 24, 2016 at 12:21:28 AM Greenwich Mean Time
* Operating System: Version 10.1.1 (Build 14B150)
* Image Source: /var/containers/Bundle/Application/FE7A361D-639E-4E8F-9E98-6A4739748428/Facebook.app/Facebook
* classdump-dyld is licensed under GPLv3, Copyright Â© 2013-2016 by Elias Limneos.
*/


@class NSString, FBCUIntent, NSArray, UIFont, CKComponent, UIImage, UIColor, FBGoodFriendsListCurationCardToolbox, FBFeedAwesomizerCardToolbox, NSNumber, NSAttributedString, NSDictionary, FBComposerDestination, FBComposerTraits, UIView<FBComposerMentionHosting>, CKComponent<FIGCardContentHScrollChildRightCompliant>, FBMemFeedStory, FBVideoViewManager, <FBVideoPresentingDelegate>, FBMemModelObject<FBQueriedNodeFieldsProtocol>, FBFontFoundry, FBTVCastingButtonController, FBFeedbackAnalytics, FBCommentComposerAnalyticsInfo, <FBCommentsModelControllerProviding>, FBMemModelObject<FBQueriedVideoChannelFieldsProtocol>, <FBSwipeableFullscreenPlaylistController>, FBMemModelObject<FBQueriedEntityFieldsProtocol>, <FBVideoPlaybackLoggingDataProviderInitializer>, , FBMediaForceTouchIntentTarget, FBMemModelObject<FBQueriedStoryActionLinkFieldsProtocol>, NSURL, NSError, FBComposerScopeSingletonProvider, FBComposerScopeObjectProvider, UIView<FBLoadingView>, UIView, UICollectionViewFlowLayout, <FBListViewKitScrollEventListener>, <FBDisplayableMediaViewProvider>, NSMutableDictionary, FBNativeArticleController, FBInlineVoiceSwitcherViewModel, FBUFITheme, FBConnectionPageLoadLimits, FBScenePath, <FBWebImageViewLayoutDelegate>, FBDisplayableMediaViewProviderContext, <CKComponentContextDynamicLookup>, CAMediaTimingFunction, NSIndexSet, FBVideoAssetEdits, FBVideoExportConfig, AVAssetReader, AVAssetTrack, AVAssetReaderOutput, AVAssetWriterInput, AVAssetWriter, CKComponentScopeRoot, <NSObject>, FBImageDownloader, NSCharacterSet, <NSLayoutManagerDelegate>, <MNServiceControllable>, NSURLRequest, NSData, FBRtmpSession, FBAACEncoder, <FBVideoEncoder>, FBAACPacketizer, FBH264Packetizer, FBDiskVideoRecorder, NSObject<OS_dispatch_queue>, <SRCollectionLayoutFragment>, AVAssetWriterInputPixelBufferAdaptor, <NSCopying><NSObject>, <FBAttributedStringBuilderMutation>, NSSet, FBSectionComponent, <FBComponentChangesetWriter>;

typedef struct CGPoint {
	double x;
	double y;
} CGPoint;

typedef struct _NSZone* NSZoneRef;

typedef struct FBVideoHomeBrickComponentOptions {
	unsigned long long style;
	BOOL turnOffAutoplay;
	double maxVideoRatio;
} FBVideoHomeBrickComponentOptions;

typedef struct _compressed_pair<unsigned long, std::__1::__map_value_compare<long, std::__1::__value_type<long, std::__1::map<long, id<NSObject>, std::__1::less<long>, std::__1::allocator<std::__1::pair<const long, id<NSObject> > > > >, std::__1::less<long>, true> > {
	unsigned long long __first_;
} compressed_pair<unsigned long, std::__1::__map_value_compare<long, std::__1::__value_type<long, std::__1::map<long, id<NSObject>, std::__1::less<long>, std::__1::allocator<std::__1::pair<const long, id<NSObject> > > > >, std::__1::less<long>, true> >;

typedef struct _tree_end_node<std::__1::__tree_node_base<void *> *> {
	__tree_node_base<void *> __left_;
} tree_end_node<std::__1::__tree_node_base<void *> *>;

typedef struct _compressed_pair<std::__1::__tree_end_node<std::__1::__tree_node_base<void *> *>, std::__1::allocator<std::__1::__tree_node<std::__1::__value_type<long, std::__1::map<long, id<NSObject>, std::__1::less<long>, std::__1::allocator<std::__1::pair<const long, id<NSObject> > > > >, void *> > > {
	tree_end_node<std::__1::__tree_node_base<void *> *> __first_;
} compressed_pair<std::__1::__tree_end_node<std::__1::__tree_node_base<void *> *>, std::__1::allocator<std::__1::__tree_node<std::__1::__value_type<long, std::__1::map<long, id<NSObject>, std::__1::less<long>, std::__1::allocator<std::__1::pair<const long, id<NSObject> > > > >, void *> > >;

typedef struct _tree<std::__1::__value_type<long, std::__1::map<long, id<NSObject>, std::__1::less<long>, std::__1::allocator<std::__1::pair<const long, id<NSObject> > > > >, std::__1::__map_value_compare<long, std::__1::__value_type<long, std::__1::map<long, id<NSObject>, std::__1::less<long>, std::__1::allocator<std::__1::pair<const long, id<NSObject> > > > >, std::__1::less<long>, true>, std::__1::allocator<std::__1::__value_type<long, std::__1::map<long, id<NSObject>, std::__1::less<long>, std::__1::allocator<std::__1::pair<const long, id<NSObject> > > > > > > {
	__tree_node<std::__1::__value_type<long, std::__1::map<long, id<NSObject>, std::__1::less<long>, std::__1::allocator<std::__1::pair<const long, id<NSObject> > > > >, void *> __begin_node_;
	compressed_pair<std::__1::__tree_end_node<std::__1::__tree_node_base<void *> *>, std::__1::allocator<std::__1::__tree_node<std::__1::__value_type<long, std::__1::map<long, id<NSObject>, std::__1::less<long>, std::__1::allocator<std::__1::pair<const long, id<NSObject> > > > >, void *> > > __pair1_;
	compressed_pair<unsigned long, std::__1::__map_value_compare<long, std::__1::__value_type<long, std::__1::map<long, id<NSObject>, std::__1::less<long>, std::__1::allocator<std::__1::pair<const long, id<NSObject> > > > >, std::__1::less<long>, true> > __pair3_;
} tree<std::__1::__value_type<long, std::__1::map<long, id<NSObject>, std::__1::less<long>, std::__1::allocator<std::__1::pair<const long, id<NSObject> > > > >, std::__1::__map_value_compare<long, std::__1::__value_type<long, std::__1::map<long, id<NSObject>, std::__1::less<long>, std::__1::allocator<std::__1::pair<const long, id<NSObject> > > > >, std::__1::less<long>, true>, std::__1::allocator<std::__1::__value_type<long, std::__1::map<long, id<NSObject>, std::__1::less<long>, std::__1::allocator<std::__1::pair<const long, id<NSObject> > > > > > >;

typedef struct map<long, std::__1::map<long, id<NSObject>, std::__1::less<long>, std::__1::allocator<std::__1::pair<const long, id<NSObject> > > >, std::__1::less<long>, std::__1::allocator<std::__1::pair<const long, std::__1::map<long, id<NSObject>, std::__1::less<long>, std::__1::allocator<std::__1::pair<const long, id<NSObject> > > > > > > {
	tree<std::__1::__value_type<long, std::__1::map<long, id<NSObject>, std::__1::less<long>, std::__1::allocator<std::__1::pair<const long, id<NSObject> > > > >, std::__1::__map_value_compare<long, std::__1::__value_type<long, std::__1::map<long, id<NSObject>, std::__1::less<long>, std::__1::allocator<std::__1::pair<const long, id<NSObject> > > > >, std::__1::less<long>, true>, std::__1::allocator<std::__1::__value_type<long, std::__1::map<long, id<NSObject>, std::__1::less<long>, std::__1::allocator<std::__1::pair<const long, id<NSObject> > > > > > > __tree_;
} map<long, std::__1::map<long, id<NSObject>, std::__1::less<long>, std::__1::allocator<std::__1::pair<const long, id<NSObject> > > >, std::__1::less<long>, std::__1::allocator<std::__1::pair<const long, std::__1::map<long, id<NSObject>, std::__1::less<long>, std::__1::allocator<std::__1::pair<const long, id<NSObject> > > > > > >;

typedef struct Items {
	map<long, std::__1::map<long, id<NSObject>, std::__1::less<long>, std::__1::allocator<std::__1::pair<const long, id<NSObject> > > >, std::__1::less<long>, std::__1::allocator<std::__1::pair<const long, std::__1::map<long, id<NSObject>, std::__1::less<long>, std::__1::allocator<std::__1::pair<const long, id<NSObject> > > > > > > _updates;
	map<long, std::__1::map<long, id<NSObject>, std::__1::less<long>, std::__1::allocator<std::__1::pair<const long, id<NSObject> > > >, std::__1::less<long>, std::__1::allocator<std::__1::pair<const long, std::__1::map<long, id<NSObject>, std::__1::less<long>, std::__1::allocator<std::__1::pair<const long, id<NSObject> > > > > > > _removals;
	map<long, std::__1::map<long, id<NSObject>, std::__1::less<long>, std::__1::allocator<std::__1::pair<const long, id<NSObject> > > >, std::__1::less<long>, std::__1::allocator<std::__1::pair<const long, std::__1::map<long, id<NSObject>, std::__1::less<long>, std::__1::allocator<std::__1::pair<const long, id<NSObject> > > > > > > _insertions;
	map<long, std::__1::map<long, id<NSObject>, std::__1::less<long>, std::__1::allocator<std::__1::pair<const long, id<NSObject> > > >, std::__1::less<long>, std::__1::allocator<std::__1::pair<const long, std::__1::map<long, id<NSObject>, std::__1::less<long>, std::__1::allocator<std::__1::pair<const long, id<NSObject> > > > > > > _moves;
} Items;

typedef struct CGSize {
	double width;
	double height;
} CGSize;

typedef struct FBNotificationsComponentsConfiguration {
	Class providerClass;
	BOOL shouldShowRichNotifications;
	CGSize defaultSize;
} FBNotificationsComponentsConfiguration;

typedef struct CKTypedComponentActionValue {
	unsigned long long _variant;
	id _target;
	id _scopeHandle;
	 CKComponentScopeHandle;
	SEL _selector;
} CKTypedComponentActionValue;

typedef struct CKTypedComponentAction<> {
	CKTypedComponentActionValue _internal;
} CKTypedComponentAction<>;

typedef struct CLLocationCoordinate2D {
	double latitude;
	double longitude;
} CLLocationCoordinate2D;

typedef struct UIEdgeInsets {
	double top;
	double left;
	double bottom;
	double right;
} UIEdgeInsets;

typedef struct CGImage* CGImageRef;

typedef struct NSRange {
	unsigned long long location;
	unsigned long long length;
} NSRange;

typedef struct FBFeedPageViewHorizontalPadding {
	double left;
	double right;
} FBFeedPageViewHorizontalPadding;

typedef struct CGColor* CGColorRef;

typedef struct CGRect {
	CGPoint origin;
	CGSize size;
} CGRect;

typedef const struct FBGraphQLFieldSet* FBGraphQLFieldSetRef;

typedef struct FBVoiceSearchState {
	unsigned long long step;
	NSString* recognizedText;
	FBCUIntent* intent;
	NSArray* initialSuggestions;
	unsigned long long errorType;
} FBVoiceSearchState;

typedef struct {
	BOOL field1;
	BOOL field2;
	BOOL field3;
} SCD_Struct_FB22;

typedef struct {
	BOOL field1;
} SCD_Struct_FB23;

typedef struct {
	SCD_Struct_FB22 field1;
	SCD_Struct_FB23 field2;
	BOOL field3;
} SCD_Struct_FB24;

typedef struct {
	BOOL field1;
	BOOL field2;
	BOOL field3;
	BOOL field4;
	BOOL field5;
	BOOL field6;
} SCD_Struct_FB25;

typedef struct FBProfileScrollingBehavior {
	BOOL shouldScrollToTopStory;
	BOOL shouldScrollToOutbox;
	BOOL isStoryRemovedFromOutbox;
	BOOL shouldDisableScrollPositionRestoring;
} FBProfileScrollingBehavior;

typedef struct FBGroupCommerceCompactViewPostTapData {
	NSString* referrer;
	NSString* groupID;
} FBGroupCommerceCompactViewPostTapData;

typedef struct FBThrowbackScatteredPhotosComponentConfiguration {
	unsigned long long entryAnimation;
	BOOL noTreeAppearanceCallbacks;
	NSRange imageSizeRange;
	double contentYOffset;
	double contentPadding;
	BOOL useIPB;
} FBThrowbackScatteredPhotosComponentConfiguration;

typedef struct _compressed_pair<FBThrowbackScatteredPhotosComponentChild *, std::__1::allocator<FBThrowbackScatteredPhotosComponentChild> > {
	FBThrowbackScatteredPhotosComponentChild __first_;
} compressed_pair<FBThrowbackScatteredPhotosComponentChild *, std::__1::allocator<FBThrowbackScatteredPhotosComponentChild> >;

typedef struct vector<FBThrowbackScatteredPhotosComponentChild, std::__1::allocator<FBThrowbackScatteredPhotosComponentChild> > {
	FBThrowbackScatteredPhotosComponentChild __begin_;
	FBThrowbackScatteredPhotosComponentChild __end_;
	compressed_pair<FBThrowbackScatteredPhotosComponentChild *, std::__1::allocator<FBThrowbackScatteredPhotosComponentChild> > __end_cap_;
} vector<FBThrowbackScatteredPhotosComponentChild, std::__1::allocator<FBThrowbackScatteredPhotosComponentChild> >;

typedef struct _compressed_pair<CGPoint *, std::__1::allocator<CGPoint> > {
	CGPoint __first_;
} compressed_pair<CGPoint *, std::__1::allocator<CGPoint> >;

typedef struct vector<CGPoint, std::__1::allocator<CGPoint> > {
	CGPoint __begin_;
	CGPoint __end_;
	compressed_pair<CGPoint *, std::__1::allocator<CGPoint> > __end_cap_;
} vector<CGPoint, std::__1::allocator<CGPoint> >;

typedef struct FBGraphSearchCollapisbleSectionComponentStyle {
	unsigned long long maxNumberOfRows;
	NSString* customSeeMoreText;
	NSString* customSeeAllText;
	BOOL fadeInLastRowBeforeSeeMore;
	BOOL fadeInLastRowBeforeSeeAll;
	BOOL callToAction;
	unsigned long long chevronStyle;
	BOOL hideBottomSeparator;
	unsigned long long unreadBadgeCount;
	UIFont* customSeeMoreFont;
	BOOL useFIGFooter;
} FBGraphSearchCollapisbleSectionComponentStyle;

typedef struct FBSearchResultsStandardModuleContainerInternalComponentStyle {
	CKTypedComponentAction<> tapAction;
	CKComponent* headerAccessoryComponent;
	BOOL animateFooterAppearance;
	BOOL omitModuleBottomHairline;
	BOOL omitModuleBottomSpacing;
	BOOL omitModuleTopSpacing;
	BOOL disableAsyncContainer;
	NSString* footerTitle;
	NSString* headerTitle;
	UIImage* icon;
	BOOL omitBottomDivider;
	BOOL omitTopDivider;
} FBSearchResultsStandardModuleContainerInternalComponentStyle;

typedef struct FBGraphSearchExpandableComponentStyle {
	UIFont* font;
	UIColor* color;
	unsigned long long maximumNumberOfLinesInCollapsedMode;
	unsigned long long numberOfLinesToFade;
	long long horizontalAlignmentMode;
	BOOL showReadMoreFooter;
} FBGraphSearchExpandableComponentStyle;

typedef struct FBSearchResultsNativeVideoPlayerComponentStyle {
	unsigned long long playerType;
	unsigned long long playerOptions;
	CKTypedComponentAction<> openChannelAction;
} FBSearchResultsNativeVideoPlayerComponentStyle;

typedef struct {
	unsigned long long field1;
	unsigned long long field2;
	unsigned long long field3;
	unsigned long long field4;
	unsigned long long field5;
} SCD_Struct_FB37;

typedef struct {
	CGRect field1;
	CGRect field2;
	double field3;
} SCD_Struct_FB38;

typedef struct _compressed_pair<unsigned long, std::__1::__map_value_compare<FBNotificationsUniqueJewelID, std::__1::__value_type<FBNotificationsUniqueJewelID, FBNotificationsImpressionParams>, std::__1::less<FBNotificationsUniqueJewelID>, true> > {
	unsigned long long __first_;
} compressed_pair<unsigned long, std::__1::__map_value_compare<FBNotificationsUniqueJewelID, std::__1::__value_type<FBNotificationsUniqueJewelID, FBNotificationsImpressionParams>, std::__1::less<FBNotificationsUniqueJewelID>, true> >;

typedef struct _compressed_pair<std::__1::__tree_end_node<std::__1::__tree_node_base<void *> *>, std::__1::allocator<std::__1::__tree_node<std::__1::__value_type<FBNotificationsUniqueJewelID, FBNotificationsImpressionParams>, void *> > > {
	tree_end_node<std::__1::__tree_node_base<void *> *> __first_;
} compressed_pair<std::__1::__tree_end_node<std::__1::__tree_node_base<void *> *>, std::__1::allocator<std::__1::__tree_node<std::__1::__value_type<FBNotificationsUniqueJewelID, FBNotificationsImpressionParams>, void *> > >;

typedef struct _tree<std::__1::__value_type<FBNotificationsUniqueJewelID, FBNotificationsImpressionParams>, std::__1::__map_value_compare<FBNotificationsUniqueJewelID, std::__1::__value_type<FBNotificationsUniqueJewelID, FBNotificationsImpressionParams>, std::__1::less<FBNotificationsUniqueJewelID>, true>, std::__1::allocator<std::__1::__value_type<FBNotificationsUniqueJewelID, FBNotificationsImpressionParams> > > {
	__tree_node<std::__1::__value_type<FBNotificationsUniqueJewelID, FBNotificationsImpressionParams>, void *> __begin_node_;
	compressed_pair<std::__1::__tree_end_node<std::__1::__tree_node_base<void *> *>, std::__1::allocator<std::__1::__tree_node<std::__1::__value_type<FBNotificationsUniqueJewelID, FBNotificationsImpressionParams>, void *> > > __pair1_;
	compressed_pair<unsigned long, std::__1::__map_value_compare<FBNotificationsUniqueJewelID, std::__1::__value_type<FBNotificationsUniqueJewelID, FBNotificationsImpressionParams>, std::__1::less<FBNotificationsUniqueJewelID>, true> > __pair3_;
} tree<std::__1::__value_type<FBNotificationsUniqueJewelID, FBNotificationsImpressionParams>, std::__1::__map_value_compare<FBNotificationsUniqueJewelID, std::__1::__value_type<FBNotificationsUniqueJewelID, FBNotificationsImpressionParams>, std::__1::less<FBNotificationsUniqueJewelID>, true>, std::__1::allocator<std::__1::__value_type<FBNotificationsUniqueJewelID, FBNotificationsImpressionParams> > >;

typedef struct map<FBNotificationsUniqueJewelID, FBNotificationsImpressionParams, std::__1::less<FBNotificationsUniqueJewelID>, std::__1::allocator<std::__1::pair<const FBNotificationsUniqueJewelID, FBNotificationsImpressionParams> > > {
	tree<std::__1::__value_type<FBNotificationsUniqueJewelID, FBNotificationsImpressionParams>, std::__1::__map_value_compare<FBNotificationsUniqueJewelID, std::__1::__value_type<FBNotificationsUniqueJewelID, FBNotificationsImpressionParams>, std::__1::less<FBNotificationsUniqueJewelID>, true>, std::__1::allocator<std::__1::__value_type<FBNotificationsUniqueJewelID, FBNotificationsImpressionParams> > > __tree_;
} map<FBNotificationsUniqueJewelID, FBNotificationsImpressionParams, std::__1::less<FBNotificationsUniqueJewelID>, std::__1::allocator<std::__1::pair<const FBNotificationsUniqueJewelID, FBNotificationsImpressionParams> > >;

typedef struct CKRelativeDimension {
	int _type;
	double _value;
} CKRelativeDimension;

typedef struct CKComponentSize {
	CKRelativeDimension width;
	CKRelativeDimension height;
	CKRelativeDimension minWidth;
	CKRelativeDimension minHeight;
	CKRelativeDimension maxWidth;
	CKRelativeDimension maxHeight;
} CKComponentSize;

typedef struct _compressed_pair<CK::ArrayController::Input::Items *, std::__1::allocator<CK::ArrayController::Input::Items> > {
	Items __first_;
} compressed_pair<CK::ArrayController::Input::Items *, std::__1::allocator<CK::ArrayController::Input::Items> >;

typedef struct vector<CK::ArrayController::Input::Items, std::__1::allocator<CK::ArrayController::Input::Items> > {
	Items __begin_;
	Items __end_;
	compressed_pair<CK::ArrayController::Input::Items *, std::__1::allocator<CK::ArrayController::Input::Items> > __end_cap_;
} vector<CK::ArrayController::Input::Items, std::__1::allocator<CK::ArrayController::Input::Items> >;

typedef struct {
	CGPoint field1;
	CLLocationCoordinate2D field2;
} SCD_Struct_FB47;

typedef struct {
	CLLocationCoordinate2D center;
	CGPoint span;
} SCD_Struct_FB48;

typedef struct UIOffset {
	double horizontal;
	double vertical;
} UIOffset;

typedef struct FBEventsDashboardScrollCounts {
	long long home;
	long long calendar;
} FBEventsDashboardScrollCounts;

typedef struct _compressed_pair<CKStackLayoutComponentChild *, std::__1::allocator<CKStackLayoutComponentChild> > {
	CKStackLayoutComponentChild __first_;
} compressed_pair<CKStackLayoutComponentChild *, std::__1::allocator<CKStackLayoutComponentChild> >;

typedef struct vector<CKStackLayoutComponentChild, std::__1::allocator<CKStackLayoutComponentChild> > {
	CKStackLayoutComponentChild __begin_;
	CKStackLayoutComponentChild __end_;
	compressed_pair<CKStackLayoutComponentChild *, std::__1::allocator<CKStackLayoutComponentChild> > __end_cap_;
} vector<CKStackLayoutComponentChild, std::__1::allocator<CKStackLayoutComponentChild> >;

typedef struct {
	CGPoint origin;
	CGPoint size;
} SCD_Struct_FB53;

typedef struct {
	long long numberOfResultsToFetch;
	long long minimumZoomLevel;
	long long maximumNumberOfVisibleAnnotations;
} SCD_Struct_FB54;

typedef struct opaque_pthread_mutex_t {
	long long __sig;
	char __opaque[56];
} opaque_pthread_mutex_t;

typedef struct mutex {
	opaque_pthread_mutex_t __m_;
} mutex;

typedef struct {
	BOOL field1;
	double field2;
} SCD_Struct_FB57;

typedef struct _compressed_pair<unsigned long, std::__1::__map_value_compare<FBNotificationsBackgroundRequestExecutor *, std::__1::__value_type<FBNotificationsBackgroundRequestExecutor *, FBBackgroundFetchRequest *>, std::__1::less<FBNotificationsBackgroundRequestExecutor *>, true> > {
	unsigned long long __first_;
} compressed_pair<unsigned long, std::__1::__map_value_compare<FBNotificationsBackgroundRequestExecutor *, std::__1::__value_type<FBNotificationsBackgroundRequestExecutor *, FBBackgroundFetchRequest *>, std::__1::less<FBNotificationsBackgroundRequestExecutor *>, true> >;

typedef struct _compressed_pair<std::__1::__tree_end_node<std::__1::__tree_node_base<void *> *>, std::__1::allocator<std::__1::__tree_node<std::__1::__value_type<FBNotificationsBackgroundRequestExecutor *, FBBackgroundFetchRequest *>, void *> > > {
	tree_end_node<std::__1::__tree_node_base<void *> *> __first_;
} compressed_pair<std::__1::__tree_end_node<std::__1::__tree_node_base<void *> *>, std::__1::allocator<std::__1::__tree_node<std::__1::__value_type<FBNotificationsBackgroundRequestExecutor *, FBBackgroundFetchRequest *>, void *> > >;

typedef struct _tree<std::__1::__value_type<FBNotificationsBackgroundRequestExecutor *, FBBackgroundFetchRequest *>, std::__1::__map_value_compare<FBNotificationsBackgroundRequestExecutor *, std::__1::__value_type<FBNotificationsBackgroundRequestExecutor *, FBBackgroundFetchRequest *>, std::__1::less<FBNotificationsBackgroundRequestExecutor *>, true>, std::__1::allocator<std::__1::__value_type<FBNotificationsBackgroundRequestExecutor *, FBBackgroundFetchRequest *> > > {
	__tree_node<std::__1::__value_type<FBNotificationsBackgroundRequestExecutor *, FBBackgroundFetchRequest *>, void *> __begin_node_;
	compressed_pair<std::__1::__tree_end_node<std::__1::__tree_node_base<void *> *>, std::__1::allocator<std::__1::__tree_node<std::__1::__value_type<FBNotificationsBackgroundRequestExecutor *, FBBackgroundFetchRequest *>, void *> > > __pair1_;
	compressed_pair<unsigned long, std::__1::__map_value_compare<FBNotificationsBackgroundRequestExecutor *, std::__1::__value_type<FBNotificationsBackgroundRequestExecutor *, FBBackgroundFetchRequest *>, std::__1::less<FBNotificationsBackgroundRequestExecutor *>, true> > __pair3_;
} tree<std::__1::__value_type<FBNotificationsBackgroundRequestExecutor *, FBBackgroundFetchRequest *>, std::__1::__map_value_compare<FBNotificationsBackgroundRequestExecutor *, std::__1::__value_type<FBNotificationsBackgroundRequestExecutor *, FBBackgroundFetchRequest *>, std::__1::less<FBNotificationsBackgroundRequestExecutor *>, true>, std::__1::allocator<std::__1::__value_type<FBNotificationsBackgroundRequestExecutor *, FBBackgroundFetchRequest *> > >;

typedef struct map<FBNotificationsBackgroundRequestExecutor *, FBBackgroundFetchRequest *, std::__1::less<FBNotificationsBackgroundRequestExecutor *>, std::__1::allocator<std::__1::pair<FBNotificationsBackgroundRequestExecutor *const, FBBackgroundFetchRequest *> > > {
	tree<std::__1::__value_type<FBNotificationsBackgroundRequestExecutor *, FBBackgroundFetchRequest *>, std::__1::__map_value_compare<FBNotificationsBackgroundRequestExecutor *, std::__1::__value_type<FBNotificationsBackgroundRequestExecutor *, FBBackgroundFetchRequest *>, std::__1::less<FBNotificationsBackgroundRequestExecutor *>, true>, std::__1::allocator<std::__1::__value_type<FBNotificationsBackgroundRequestExecutor *, FBBackgroundFetchRequest *> > > __tree_;
} map<FBNotificationsBackgroundRequestExecutor *, FBBackgroundFetchRequest *, std::__1::less<FBNotificationsBackgroundRequestExecutor *>, std::__1::allocator<std::__1::pair<FBNotificationsBackgroundRequestExecutor *const, FBBackgroundFetchRequest *> > >;

typedef struct _compressed_pair<unsigned long, std::__1::__map_value_compare<FBNotificationsWildeLoadConfiguration *, std::__1::__value_type<FBNotificationsWildeLoadConfiguration *, NSString *>, std::__1::less<FBNotificationsWildeLoadConfiguration *>, true> > {
	unsigned long long __first_;
} compressed_pair<unsigned long, std::__1::__map_value_compare<FBNotificationsWildeLoadConfiguration *, std::__1::__value_type<FBNotificationsWildeLoadConfiguration *, NSString *>, std::__1::less<FBNotificationsWildeLoadConfiguration *>, true> >;

typedef struct _compressed_pair<std::__1::__tree_end_node<std::__1::__tree_node_base<void *> *>, std::__1::allocator<std::__1::__tree_node<std::__1::__value_type<FBNotificationsWildeLoadConfiguration *, NSString *>, void *> > > {
	tree_end_node<std::__1::__tree_node_base<void *> *> __first_;
} compressed_pair<std::__1::__tree_end_node<std::__1::__tree_node_base<void *> *>, std::__1::allocator<std::__1::__tree_node<std::__1::__value_type<FBNotificationsWildeLoadConfiguration *, NSString *>, void *> > >;

typedef struct _tree<std::__1::__value_type<FBNotificationsWildeLoadConfiguration *, NSString *>, std::__1::__map_value_compare<FBNotificationsWildeLoadConfiguration *, std::__1::__value_type<FBNotificationsWildeLoadConfiguration *, NSString *>, std::__1::less<FBNotificationsWildeLoadConfiguration *>, true>, std::__1::allocator<std::__1::__value_type<FBNotificationsWildeLoadConfiguration *, NSString *> > > {
	__tree_node<std::__1::__value_type<FBNotificationsWildeLoadConfiguration *, NSString *>, void *> __begin_node_;
	compressed_pair<std::__1::__tree_end_node<std::__1::__tree_node_base<void *> *>, std::__1::allocator<std::__1::__tree_node<std::__1::__value_type<FBNotificationsWildeLoadConfiguration *, NSString *>, void *> > > __pair1_;
	compressed_pair<unsigned long, std::__1::__map_value_compare<FBNotificationsWildeLoadConfiguration *, std::__1::__value_type<FBNotificationsWildeLoadConfiguration *, NSString *>, std::__1::less<FBNotificationsWildeLoadConfiguration *>, true> > __pair3_;
} tree<std::__1::__value_type<FBNotificationsWildeLoadConfiguration *, NSString *>, std::__1::__map_value_compare<FBNotificationsWildeLoadConfiguration *, std::__1::__value_type<FBNotificationsWildeLoadConfiguration *, NSString *>, std::__1::less<FBNotificationsWildeLoadConfiguration *>, true>, std::__1::allocator<std::__1::__value_type<FBNotificationsWildeLoadConfiguration *, NSString *> > >;

typedef struct map<FBNotificationsWildeLoadConfiguration *, NSString *, std::__1::less<FBNotificationsWildeLoadConfiguration *>, std::__1::allocator<std::__1::pair<FBNotificationsWildeLoadConfiguration *const, NSString *> > > {
	tree<std::__1::__value_type<FBNotificationsWildeLoadConfiguration *, NSString *>, std::__1::__map_value_compare<FBNotificationsWildeLoadConfiguration *, std::__1::__value_type<FBNotificationsWildeLoadConfiguration *, NSString *>, std::__1::less<FBNotificationsWildeLoadConfiguration *>, true>, std::__1::allocator<std::__1::__value_type<FBNotificationsWildeLoadConfiguration *, NSString *> > > __tree_;
} map<FBNotificationsWildeLoadConfiguration *, NSString *, std::__1::less<FBNotificationsWildeLoadConfiguration *>, std::__1::allocator<std::__1::pair<FBNotificationsWildeLoadConfiguration *const, NSString *> > >;

typedef struct _compressed_pair<NSString *__strong *, std::__1::allocator<NSString *> > {
	id __first_;
} compressed_pair<NSString *__strong *, std::__1::allocator<NSString *> >;

typedef struct vector<NSString *, std::__1::allocator<NSString *> > {
	id __begin_;
	id __end_;
	compressed_pair<NSString *__strong *, std::__1::allocator<NSString *> > __end_cap_;
} vector<NSString *, std::__1::allocator<NSString *> >;

typedef struct _compressed_pair<unsigned long, std::__1::__map_value_compare<FBNotificationsUniqueJewelID, std::__1::__value_type<FBNotificationsUniqueJewelID, double>, std::__1::less<FBNotificationsUniqueJewelID>, true> > {
	unsigned long long __first_;
} compressed_pair<unsigned long, std::__1::__map_value_compare<FBNotificationsUniqueJewelID, std::__1::__value_type<FBNotificationsUniqueJewelID, double>, std::__1::less<FBNotificationsUniqueJewelID>, true> >;

typedef struct _compressed_pair<std::__1::__tree_end_node<std::__1::__tree_node_base<void *> *>, std::__1::allocator<std::__1::__tree_node<std::__1::__value_type<FBNotificationsUniqueJewelID, double>, void *> > > {
	tree_end_node<std::__1::__tree_node_base<void *> *> __first_;
} compressed_pair<std::__1::__tree_end_node<std::__1::__tree_node_base<void *> *>, std::__1::allocator<std::__1::__tree_node<std::__1::__value_type<FBNotificationsUniqueJewelID, double>, void *> > >;

typedef struct _tree<std::__1::__value_type<FBNotificationsUniqueJewelID, double>, std::__1::__map_value_compare<FBNotificationsUniqueJewelID, std::__1::__value_type<FBNotificationsUniqueJewelID, double>, std::__1::less<FBNotificationsUniqueJewelID>, true>, std::__1::allocator<std::__1::__value_type<FBNotificationsUniqueJewelID, double> > > {
	__tree_node<std::__1::__value_type<FBNotificationsUniqueJewelID, double>, void *> __begin_node_;
	compressed_pair<std::__1::__tree_end_node<std::__1::__tree_node_base<void *> *>, std::__1::allocator<std::__1::__tree_node<std::__1::__value_type<FBNotificationsUniqueJewelID, double>, void *> > > __pair1_;
	compressed_pair<unsigned long, std::__1::__map_value_compare<FBNotificationsUniqueJewelID, std::__1::__value_type<FBNotificationsUniqueJewelID, double>, std::__1::less<FBNotificationsUniqueJewelID>, true> > __pair3_;
} tree<std::__1::__value_type<FBNotificationsUniqueJewelID, double>, std::__1::__map_value_compare<FBNotificationsUniqueJewelID, std::__1::__value_type<FBNotificationsUniqueJewelID, double>, std::__1::less<FBNotificationsUniqueJewelID>, true>, std::__1::allocator<std::__1::__value_type<FBNotificationsUniqueJewelID, double> > >;

typedef struct map<FBNotificationsUniqueJewelID, double, std::__1::less<FBNotificationsUniqueJewelID>, std::__1::allocator<std::__1::pair<const FBNotificationsUniqueJewelID, double> > > {
	tree<std::__1::__value_type<FBNotificationsUniqueJewelID, double>, std::__1::__map_value_compare<FBNotificationsUniqueJewelID, std::__1::__value_type<FBNotificationsUniqueJewelID, double>, std::__1::less<FBNotificationsUniqueJewelID>, true>, std::__1::allocator<std::__1::__value_type<FBNotificationsUniqueJewelID, double> > > __tree_;
} map<FBNotificationsUniqueJewelID, double, std::__1::less<FBNotificationsUniqueJewelID>, std::__1::allocator<std::__1::pair<const FBNotificationsUniqueJewelID, double> > >;

typedef struct _compressed_pair<unsigned long, std::__1::__map_value_compare<FBNotificationsUniqueJewelID, std::__1::__value_type<FBNotificationsUniqueJewelID, long>, std::__1::less<FBNotificationsUniqueJewelID>, true> > {
	unsigned long long __first_;
} compressed_pair<unsigned long, std::__1::__map_value_compare<FBNotificationsUniqueJewelID, std::__1::__value_type<FBNotificationsUniqueJewelID, long>, std::__1::less<FBNotificationsUniqueJewelID>, true> >;

typedef struct _compressed_pair<std::__1::__tree_end_node<std::__1::__tree_node_base<void *> *>, std::__1::allocator<std::__1::__tree_node<std::__1::__value_type<FBNotificationsUniqueJewelID, long>, void *> > > {
	tree_end_node<std::__1::__tree_node_base<void *> *> __first_;
} compressed_pair<std::__1::__tree_end_node<std::__1::__tree_node_base<void *> *>, std::__1::allocator<std::__1::__tree_node<std::__1::__value_type<FBNotificationsUniqueJewelID, long>, void *> > >;

typedef struct _tree<std::__1::__value_type<FBNotificationsUniqueJewelID, long>, std::__1::__map_value_compare<FBNotificationsUniqueJewelID, std::__1::__value_type<FBNotificationsUniqueJewelID, long>, std::__1::less<FBNotificationsUniqueJewelID>, true>, std::__1::allocator<std::__1::__value_type<FBNotificationsUniqueJewelID, long> > > {
	__tree_node<std::__1::__value_type<FBNotificationsUniqueJewelID, long>, void *> __begin_node_;
	compressed_pair<std::__1::__tree_end_node<std::__1::__tree_node_base<void *> *>, std::__1::allocator<std::__1::__tree_node<std::__1::__value_type<FBNotificationsUniqueJewelID, long>, void *> > > __pair1_;
	compressed_pair<unsigned long, std::__1::__map_value_compare<FBNotificationsUniqueJewelID, std::__1::__value_type<FBNotificationsUniqueJewelID, long>, std::__1::less<FBNotificationsUniqueJewelID>, true> > __pair3_;
} tree<std::__1::__value_type<FBNotificationsUniqueJewelID, long>, std::__1::__map_value_compare<FBNotificationsUniqueJewelID, std::__1::__value_type<FBNotificationsUniqueJewelID, long>, std::__1::less<FBNotificationsUniqueJewelID>, true>, std::__1::allocator<std::__1::__value_type<FBNotificationsUniqueJewelID, long> > >;

typedef struct map<FBNotificationsUniqueJewelID, long, std::__1::less<FBNotificationsUniqueJewelID>, std::__1::allocator<std::__1::pair<const FBNotificationsUniqueJewelID, long> > > {
	tree<std::__1::__value_type<FBNotificationsUniqueJewelID, long>, std::__1::__map_value_compare<FBNotificationsUniqueJewelID, std::__1::__value_type<FBNotificationsUniqueJewelID, long>, std::__1::less<FBNotificationsUniqueJewelID>, true>, std::__1::allocator<std::__1::__value_type<FBNotificationsUniqueJewelID, long> > > __tree_;
} map<FBNotificationsUniqueJewelID, long, std::__1::less<FBNotificationsUniqueJewelID>, std::__1::allocator<std::__1::pair<const FBNotificationsUniqueJewelID, long> > >;

typedef struct FBNotificationsSyncManagerInitialLoadResult {
	BOOL hasFinishedInitialLoad;
	unsigned long long loadResult;
} FBNotificationsSyncManagerInitialLoadResult;

typedef struct _compressed_pair<unsigned long, std::__1::__map_value_compare<FBGraphQLConnectionLoadLocation *, std::__1::__value_type<FBGraphQLConnectionLoadLocation *, FBStreamLoadType>, std::__1::less<FBGraphQLConnectionLoadLocation *>, true> > {
	unsigned long long __first_;
} compressed_pair<unsigned long, std::__1::__map_value_compare<FBGraphQLConnectionLoadLocation *, std::__1::__value_type<FBGraphQLConnectionLoadLocation *, FBStreamLoadType>, std::__1::less<FBGraphQLConnectionLoadLocation *>, true> >;

typedef struct _compressed_pair<std::__1::__tree_end_node<std::__1::__tree_node_base<void *> *>, std::__1::allocator<std::__1::__tree_node<std::__1::__value_type<FBGraphQLConnectionLoadLocation *, FBStreamLoadType>, void *> > > {
	tree_end_node<std::__1::__tree_node_base<void *> *> __first_;
} compressed_pair<std::__1::__tree_end_node<std::__1::__tree_node_base<void *> *>, std::__1::allocator<std::__1::__tree_node<std::__1::__value_type<FBGraphQLConnectionLoadLocation *, FBStreamLoadType>, void *> > >;

typedef struct _tree<std::__1::__value_type<FBGraphQLConnectionLoadLocation *, FBStreamLoadType>, std::__1::__map_value_compare<FBGraphQLConnectionLoadLocation *, std::__1::__value_type<FBGraphQLConnectionLoadLocation *, FBStreamLoadType>, std::__1::less<FBGraphQLConnectionLoadLocation *>, true>, std::__1::allocator<std::__1::__value_type<FBGraphQLConnectionLoadLocation *, FBStreamLoadType> > > {
	__tree_node<std::__1::__value_type<FBGraphQLConnectionLoadLocation *, FBStreamLoadType>, void *> __begin_node_;
	compressed_pair<std::__1::__tree_end_node<std::__1::__tree_node_base<void *> *>, std::__1::allocator<std::__1::__tree_node<std::__1::__value_type<FBGraphQLConnectionLoadLocation *, FBStreamLoadType>, void *> > > __pair1_;
	compressed_pair<unsigned long, std::__1::__map_value_compare<FBGraphQLConnectionLoadLocation *, std::__1::__value_type<FBGraphQLConnectionLoadLocation *, FBStreamLoadType>, std::__1::less<FBGraphQLConnectionLoadLocation *>, true> > __pair3_;
} tree<std::__1::__value_type<FBGraphQLConnectionLoadLocation *, FBStreamLoadType>, std::__1::__map_value_compare<FBGraphQLConnectionLoadLocation *, std::__1::__value_type<FBGraphQLConnectionLoadLocation *, FBStreamLoadType>, std::__1::less<FBGraphQLConnectionLoadLocation *>, true>, std::__1::allocator<std::__1::__value_type<FBGraphQLConnectionLoadLocation *, FBStreamLoadType> > >;

typedef struct map<FBGraphQLConnectionLoadLocation *, FBStreamLoadType, std::__1::less<FBGraphQLConnectionLoadLocation *>, std::__1::allocator<std::__1::pair<FBGraphQLConnectionLoadLocation *const, FBStreamLoadType> > > {
	tree<std::__1::__value_type<FBGraphQLConnectionLoadLocation *, FBStreamLoadType>, std::__1::__map_value_compare<FBGraphQLConnectionLoadLocation *, std::__1::__value_type<FBGraphQLConnectionLoadLocation *, FBStreamLoadType>, std::__1::less<FBGraphQLConnectionLoadLocation *>, true>, std::__1::allocator<std::__1::__value_type<FBGraphQLConnectionLoadLocation *, FBStreamLoadType> > > __tree_;
} map<FBGraphQLConnectionLoadLocation *, FBStreamLoadType, std::__1::less<FBGraphQLConnectionLoadLocation *>, std::__1::allocator<std::__1::pair<FBGraphQLConnectionLoadLocation *const, FBStreamLoadType> > >;

typedef struct {
	double field1;
	double field2;
	double field3;
	double field4;
	double field5;
	double field6;
	double field7;
} SCD_Struct_FB81;

typedef struct FBCloseFriendsListCurationCardHeaderConfig {
	FBGoodFriendsListCurationCardToolbox* toolbox;
	FBFeedAwesomizerCardToolbox* cardToolbox;
	BOOL usesInlineSearch;
	BOOL doneButtonEnabled;
} FBCloseFriendsListCurationCardHeaderConfig;

typedef struct {
	unsigned long long field1;
	BOOL field2;
	BOOL field3;
	long long field4;
	CKTypedComponentAction<> field5;
} SCD_Struct_FB83;

typedef struct {
	BOOL scrollViewWillBeginDragging;
	BOOL scrollViewDidScroll;
	BOOL scrollViewWillWillEndDraggingWithVelocityTargetContentOffset;
	BOOL scrollViewDidEndDraggingWillDecelerate;
	BOOL scrollViewWillBeginDecelerating;
	BOOL scrollViewDidEndDecelerating;
	BOOL scrollViewDidEndScrollingAnimation;
	BOOL scrollViewShouldScrollToTop;
	BOOL scrollViewDidScrollToTop;
} SCD_Struct_FB84;

typedef struct FBSplitFeedsPageModelConfig {
	BOOL inFeedComposerSupported;
	long long feedType;
	unsigned long long feedStoryStyle;
	unsigned long long feedLayoutIdiom;
} FBSplitFeedsPageModelConfig;

typedef struct {
	BOOL scrollViewWillBeginDragging;
	BOOL scrollViewDidScroll;
	BOOL scrollViewWillWillEndDraggingWithVelocityTargetContentOffset;
	BOOL scrollViewDidEndDraggingWillDecelerate;
	BOOL scrollViewWillBeginDecelerating;
	BOOL scrollViewDidEndDecelerating;
	BOOL scrollViewDidEndScrollingAnimation;
	BOOL scrollViewShouldScrollToTop;
	BOOL scrollViewDidScrollToTop;
	BOOL tableViewWillDisplayCellForRowAtIndexPath;
	BOOL tableViewDidEndDisplayingCellForRowAtIndexPath;
} SCD_Struct_FB86;

typedef struct {
	id field1;
	double field2;
	double field3;
	BOOL field4;
	id field5;
} SCD_Struct_FB87;

typedef struct _compressed_pair<FBCollageLayoutComponentChild *, std::__1::allocator<FBCollageLayoutComponentChild> > {
	FBCollageLayoutComponentChild __first_;
} compressed_pair<FBCollageLayoutComponentChild *, std::__1::allocator<FBCollageLayoutComponentChild> >;

typedef struct vector<FBCollageLayoutComponentChild, std::__1::allocator<FBCollageLayoutComponentChild> > {
	FBCollageLayoutComponentChild __begin_;
	FBCollageLayoutComponentChild __end_;
	compressed_pair<FBCollageLayoutComponentChild *, std::__1::allocator<FBCollageLayoutComponentChild> > __end_cap_;
} vector<FBCollageLayoutComponentChild, std::__1::allocator<FBCollageLayoutComponentChild> >;

typedef struct _compressed_pair<std::__1::pair<NSAttributedString *, id<FBReactionUnitComponentAdapter> > *, std::__1::allocator<std::__1::pair<NSAttributedString *, id<FBReactionUnitComponentAdapter> > > > {
	pair<NSAttributedString *, id<FBReactionUnitComponentAdapter> > __first_;
} compressed_pair<std::__1::pair<NSAttributedString *, id<FBReactionUnitComponentAdapter> > *, std::__1::allocator<std::__1::pair<NSAttributedString *, id<FBReactionUnitComponentAdapter> > > >;

typedef struct vector<std::__1::pair<NSAttributedString *, id<FBReactionUnitComponentAdapter> >, std::__1::allocator<std::__1::pair<NSAttributedString *, id<FBReactionUnitComponentAdapter> > > > {
	pair<NSAttributedString *, id<FBReactionUnitComponentAdapter> > __begin_;
	pair<NSAttributedString *, id<FBReactionUnitComponentAdapter> > __end_;
	compressed_pair<std::__1::pair<NSAttributedString *, id<FBReactionUnitComponentAdapter> > *, std::__1::allocator<std::__1::pair<NSAttributedString *, id<FBReactionUnitComponentAdapter> > > > __end_cap_;
} vector<std::__1::pair<NSAttributedString *, id<FBReactionUnitComponentAdapter> >, std::__1::allocator<std::__1::pair<NSAttributedString *, id<FBReactionUnitComponentAdapter> > > >;

typedef struct _compressed_pair<std::__1::pair<NSAttributedString *, UIView *> *, std::__1::allocator<std::__1::pair<NSAttributedString *, UIView *> > > {
	pair<NSAttributedString *, UIView *> __first_;
} compressed_pair<std::__1::pair<NSAttributedString *, UIView *> *, std::__1::allocator<std::__1::pair<NSAttributedString *, UIView *> > >;

typedef struct vector<std::__1::pair<NSAttributedString *, UIView *>, std::__1::allocator<std::__1::pair<NSAttributedString *, UIView *> > > {
	pair<NSAttributedString *, UIView *> __begin_;
	pair<NSAttributedString *, UIView *> __end_;
	compressed_pair<std::__1::pair<NSAttributedString *, UIView *> *, std::__1::allocator<std::__1::pair<NSAttributedString *, UIView *> > > __end_cap_;
} vector<std::__1::pair<NSAttributedString *, UIView *>, std::__1::allocator<std::__1::pair<NSAttributedString *, UIView *> > >;

typedef struct _compressed_pair<FBAdInterfacesPickerComponentOption *, std::__1::allocator<FBAdInterfacesPickerComponentOption> > {
	FBAdInterfacesPickerComponentOption __first_;
} compressed_pair<FBAdInterfacesPickerComponentOption *, std::__1::allocator<FBAdInterfacesPickerComponentOption> >;

typedef struct vector<FBAdInterfacesPickerComponentOption, std::__1::allocator<FBAdInterfacesPickerComponentOption> > {
	FBAdInterfacesPickerComponentOption __begin_;
	FBAdInterfacesPickerComponentOption __end_;
	compressed_pair<FBAdInterfacesPickerComponentOption *, std::__1::allocator<FBAdInterfacesPickerComponentOption> > __end_cap_;
} vector<FBAdInterfacesPickerComponentOption, std::__1::allocator<FBAdInterfacesPickerComponentOption> >;

typedef struct FBAdInterfacesPickerComponentOption {
	NSString* title;
	id context;
} FBAdInterfacesPickerComponentOption;

typedef struct FBAdInterfacesActiveCampaignStatusConfig {
	BOOL canViewerEdit;
	unsigned long long status;
	CKTypedComponentAction<> resumeAction;
	CKTypedComponentAction<> pauseAction;
} FBAdInterfacesActiveCampaignStatusConfig;

typedef struct {
	NSString* ttiEventName;
	NSString* createPromotionEventName;
	NSString* editPromotionEventName;
	NSString* budgetRecommendationsRequestEventName;
	NSString* customBudgetReachEstimatesRequestEventName;
} SCD_Struct_FB98;

typedef struct {
	id field1;
	id field2;
	id field3;
	id field4;
	id field5;
} SCD_Struct_FB99;

typedef struct {
	long long value;
	int timescale;
	unsigned flags;
	long long epoch;
} SCD_Struct_FB100;

typedef struct {
	SCD_Struct_FB100 start;
	SCD_Struct_FB100 duration;
} SCD_Struct_FB101;

typedef struct ComposerDraftConfigurations {
	BOOL shouldAutofillStatusAndInlineComposer;
	BOOL shouldAutofillPhotoAndCheckIn;
	BOOL showMainComposerWhenAutofillPhotoAndCheckIn;
	unsigned long long allowance;
} ComposerDraftConfigurations;

typedef struct {
	BOOL shouldUserInteractionBeEnabled;
	SEL selectorToInvokeWhenControlTitleIsTapped;
} SCD_Struct_FB103;

typedef struct FBVideoAlbumAttachmentChannelVideoPlayerComponentOptions {
	BOOL logIndividualVideoVPVd;
} FBVideoAlbumAttachmentChannelVideoPlayerComponentOptions;

typedef struct CKTypedComponentAction<UIImage *> {
	CKTypedComponentActionValue _internal;
} CKTypedComponentAction<UIImage *>;

typedef struct {
	BOOL field1;
	BOOL field2;
	id field3;
} SCD_Struct_FB106;

typedef struct FBNativeTemplateShellViewControllerOptions {
	NSString* title;
	BOOL hideSearchInNavBar;
	unsigned long long navigationItemStyle;
} FBNativeTemplateShellViewControllerOptions;

typedef struct FBNativeTemplateTextComponentOptions {
	CKTypedComponentAction<> tapEntityActionOnTruncation;
	BOOL disableTapEntityActionOnTruncation;
} FBNativeTemplateTextComponentOptions;

typedef struct FBInlineComposerPromptConfiguration {
	CKComponent* promptFooterComponent;
	NSArray* actionButtonConfigurations;
	double actionButtonSpacing;
	UIEdgeInsets footerInsets;
	BOOL isEmptyConfigurationOnPurpose;
} FBInlineComposerPromptConfiguration;

typedef struct FBInlineComposerPromptBackgroundConfiguration {
	id backgroundTapContext;
} FBInlineComposerPromptBackgroundConfiguration;

typedef struct FBInlineComposerCardOptions {
	double extraHeight;
	BOOL omitBottomInset;
	BOOL omitTopInset;
} FBInlineComposerCardOptions;

typedef struct FBInlineComposerOptions {
	BOOL isStickyInlineComposer;
	unsigned long long shortcutButton;
	BOOL isCameraShortcutButtonTappable;
	BOOL wrapFillerText;
	BOOL showMinifiedDraftRecoveryPrompt;
	BOOL showDividerBetweenPublisherBarButtons;
	BOOL useGoodFriendsComposer;
} FBInlineComposerOptions;

typedef struct _compressed_pair<FBGoodFriendsComposerTabComponentChild *, std::__1::allocator<FBGoodFriendsComposerTabComponentChild> > {
	FBGoodFriendsComposerTabComponentChild __first_;
} compressed_pair<FBGoodFriendsComposerTabComponentChild *, std::__1::allocator<FBGoodFriendsComposerTabComponentChild> >;

typedef struct vector<FBGoodFriendsComposerTabComponentChild, std::__1::allocator<FBGoodFriendsComposerTabComponentChild> > {
	FBGoodFriendsComposerTabComponentChild __begin_;
	FBGoodFriendsComposerTabComponentChild __end_;
	compressed_pair<FBGoodFriendsComposerTabComponentChild *, std::__1::allocator<FBGoodFriendsComposerTabComponentChild> > __end_cap_;
} vector<FBGoodFriendsComposerTabComponentChild, std::__1::allocator<FBGoodFriendsComposerTabComponentChild> >;

typedef struct CKTypedComponentAction<NSNumber *> {
	CKTypedComponentActionValue _internal;
} CKTypedComponentAction<NSNumber *>;

typedef struct CKTypedComponentAction<FBMemModelObject<FBQueriedActorFieldsProtocol> *> {
	CKTypedComponentActionValue _internal;
} CKTypedComponentAction<FBMemModelObject<FBQueriedActorFieldsProtocol> *>;

typedef struct _compressed_pair<FBFeedUnitNuxPair *, std::__1::allocator<FBFeedUnitNuxPair> > {
	FBFeedUnitNuxPair __first_;
} compressed_pair<FBFeedUnitNuxPair *, std::__1::allocator<FBFeedUnitNuxPair> >;

typedef struct vector<FBFeedUnitNuxPair, std::__1::allocator<FBFeedUnitNuxPair> > {
	FBFeedUnitNuxPair __begin_;
	FBFeedUnitNuxPair __end_;
	compressed_pair<FBFeedUnitNuxPair *, std::__1::allocator<FBFeedUnitNuxPair> > __end_cap_;
} vector<FBFeedUnitNuxPair, std::__1::allocator<FBFeedUnitNuxPair> >;

typedef struct CKTypedComponentAction<NSString *> {
	CKTypedComponentActionValue _internal;
} CKTypedComponentAction<NSString *>;

typedef struct _compressed_pair<unsigned long, std::__1::allocator<std::__1::__hash_node<std::__1::__hash_value_type<NSString *, std::__1::vector<FBFeedAccessibilityComponentAction, std::__1::allocator<FBFeedAccessibilityComponentAction> > >, void *> *> > {
	unsigned long long __first_;
} compressed_pair<unsigned long, std::__1::allocator<std::__1::__hash_node<std::__1::__hash_value_type<NSString *, std::__1::vector<FBFeedAccessibilityComponentAction, std::__1::allocator<FBFeedAccessibilityComponentAction> > >, void *> *> >;

typedef struct _compressed_pair<unsigned long, std::__1::__unordered_map_hasher<NSString *, std::__1::__hash_value_type<NSString *, std::__1::vector<FBFeedAccessibilityComponentAction, std::__1::allocator<FBFeedAccessibilityComponentAction> > >, FB::HashFunctor<NSObject *>, true> > {
	unsigned long long __first_;
} compressed_pair<unsigned long, std::__1::__unordered_map_hasher<NSString *, std::__1::__hash_value_type<NSString *, std::__1::vector<FBFeedAccessibilityComponentAction, std::__1::allocator<FBFeedAccessibilityComponentAction> > >, FB::HashFunctor<NSObject *>, true> >;

typedef struct _compressed_pair<float, std::__1::__unordered_map_equal<NSString *, std::__1::__hash_value_type<NSString *, std::__1::vector<FBFeedAccessibilityComponentAction, std::__1::allocator<FBFeedAccessibilityComponentAction> > >, FB::EqualFunctor<NSObject *>, true> > {
	float __first_;
} compressed_pair<float, std::__1::__unordered_map_equal<NSString *, std::__1::__hash_value_type<NSString *, std::__1::vector<FBFeedAccessibilityComponentAction, std::__1::allocator<FBFeedAccessibilityComponentAction> > >, FB::EqualFunctor<NSObject *>, true> >;

typedef struct _hash_node_base<std::__1::__hash_node<std::__1::__hash_value_type<NSString *, std::__1::vector<FBFeedAccessibilityComponentAction, std::__1::allocator<FBFeedAccessibilityComponentAction> > >, void *> *> {
	__hash_node<std::__1::__hash_value_type<NSString *, std::__1::vector<FBFeedAccessibilityComponentAction, std::__1::allocator<FBFeedAccessibilityComponentAction> > >, void *> __next_;
} hash_node_base<std::__1::__hash_node<std::__1::__hash_value_type<NSString *, std::__1::vector<FBFeedAccessibilityComponentAction, std::__1::allocator<FBFeedAccessibilityComponentAction> > >, void *> *>;

typedef struct _compressed_pair<std::__1::__hash_node_base<std::__1::__hash_node<std::__1::__hash_value_type<NSString *, std::__1::vector<FBFeedAccessibilityComponentAction, std::__1::allocator<FBFeedAccessibilityComponentAction> > >, void *> *>, std::__1::allocator<std::__1::__hash_node<std::__1::__hash_value_type<NSString *, std::__1::vector<FBFeedAccessibilityComponentAction, std::__1::allocator<FBFeedAccessibilityComponentAction> > >, void *> > > {
	hash_node_base<std::__1::__hash_node<std::__1::__hash_value_type<NSString *, std::__1::vector<FBFeedAccessibilityComponentAction, std::__1::allocator<FBFeedAccessibilityComponentAction> > >, void *> *> __first_;
} compressed_pair<std::__1::__hash_node_base<std::__1::__hash_node<std::__1::__hash_value_type<NSString *, std::__1::vector<FBFeedAccessibilityComponentAction, std::__1::allocator<FBFeedAccessibilityComponentAction> > >, void *> *>, std::__1::allocator<std::__1::__hash_node<std::__1::__hash_value_type<NSString *, std::__1::vector<FBFeedAccessibilityComponentAction, std::__1::allocator<FBFeedAccessibilityComponentAction> > >, void *> > >;

typedef struct _bucket_list_deallocator<std::__1::allocator<std::__1::__hash_node<std::__1::__hash_value_type<NSString *, std::__1::vector<FBFeedAccessibilityComponentAction, std::__1::allocator<FBFeedAccessibilityComponentAction> > >, void *> *> > {
	compressed_pair<unsigned long, std::__1::allocator<std::__1::__hash_node<std::__1::__hash_value_type<NSString *, std::__1::vector<FBFeedAccessibilityComponentAction, std::__1::allocator<FBFeedAccessibilityComponentAction> > >, void *> *> > __data_;
} bucket_list_deallocator<std::__1::allocator<std::__1::__hash_node<std::__1::__hash_value_type<NSString *, std::__1::vector<FBFeedAccessibilityComponentAction, std::__1::allocator<FBFeedAccessibilityComponentAction> > >, void *> *> >;

typedef struct _compressed_pair<std::__1::__hash_node<std::__1::__hash_value_type<NSString *, std::__1::vector<FBFeedAccessibilityComponentAction, std::__1::allocator<FBFeedAccessibilityComponentAction> > >, void *> **, std::__1::__bucket_list_deallocator<std::__1::allocator<std::__1::__hash_node<std::__1::__hash_value_type<NSString *, std::__1::vector<FBFeedAccessibilityComponentAction, std::__1::allocator<FBFeedAccessibilityComponentAction> > >, void *> *> > > {
	__hash_node<std::__1::__hash_value_type<NSString *, std::__1::vector<FBFeedAccessibilityComponentAction, std::__1::allocator<FBFeedAccessibilityComponentAction> > >, void *> __first_;
	bucket_list_deallocator<std::__1::allocator<std::__1::__hash_node<std::__1::__hash_value_type<NSString *, std::__1::vector<FBFeedAccessibilityComponentAction, std::__1::allocator<FBFeedAccessibilityComponentAction> > >, void *> *> > __second_;
} compressed_pair<std::__1::__hash_node<std::__1::__hash_value_type<NSString *, std::__1::vector<FBFeedAccessibilityComponentAction, std::__1::allocator<FBFeedAccessibilityComponentAction> > >, void *> **, std::__1::__bucket_list_deallocator<std::__1::allocator<std::__1::__hash_node<std::__1::__hash_value_type<NSString *, std::__1::vector<FBFeedAccessibilityComponentAction, std::__1::allocator<FBFeedAccessibilityComponentAction> > >, void *> *> > >;

typedef struct unique_ptr<std::__1::__hash_node<std::__1::__hash_value_type<NSString *, std::__1::vector<FBFeedAccessibilityComponentAction, std::__1::allocator<FBFeedAccessibilityComponentAction> > >, void *> *[], std::__1::__bucket_list_deallocator<std::__1::allocator<std::__1::__hash_node<std::__1::__hash_value_type<NSString *, std::__1::vector<FBFeedAccessibilityComponentAction, std::__1::allocator<FBFeedAccessibilityComponentAction> > >, void *> *> > > {
	compressed_pair<std::__1::__hash_node<std::__1::__hash_value_type<NSString *, std::__1::vector<FBFeedAccessibilityComponentAction, std::__1::allocator<FBFeedAccessibilityComponentAction> > >, void *> **, std::__1::__bucket_list_deallocator<std::__1::allocator<std::__1::__hash_node<std::__1::__hash_value_type<NSString *, std::__1::vector<FBFeedAccessibilityComponentAction, std::__1::allocator<FBFeedAccessibilityComponentAction> > >, void *> *> > > __ptr_;
} unique_ptr<std::__1::__hash_node<std::__1::__hash_value_type<NSString *, std::__1::vector<FBFeedAccessibilityComponentAction, std::__1::allocator<FBFeedAccessibilityComponentAction> > >, void *> *[], std::__1::__bucket_list_deallocator<std::__1::allocator<std::__1::__hash_node<std::__1::__hash_value_type<NSString *, std::__1::vector<FBFeedAccessibilityComponentAction, std::__1::allocator<FBFeedAccessibilityComponentAction> > >, void *> *> > >;

typedef struct _hash_table<std::__1::__hash_value_type<NSString *, std::__1::vector<FBFeedAccessibilityComponentAction, std::__1::allocator<FBFeedAccessibilityComponentAction> > >, std::__1::__unordered_map_hasher<NSString *, std::__1::__hash_value_type<NSString *, std::__1::vector<FBFeedAccessibilityComponentAction, std::__1::allocator<FBFeedAccessibilityComponentAction> > >, FB::HashFunctor<NSObject *>, true>, std::__1::__unordered_map_equal<NSString *, std::__1::__hash_value_type<NSString *, std::__1::vector<FBFeedAccessibilityComponentAction, std::__1::allocator<FBFeedAccessibilityComponentAction> > >, FB::EqualFunctor<NSObject *>, true>, std::__1::allocator<std::__1::__hash_value_type<NSString *, std::__1::vector<FBFeedAccessibilityComponentAction, std::__1::allocator<FBFeedAccessibilityComponentAction> > > > > {
	unique_ptr<std::__1::__hash_node<std::__1::__hash_value_type<NSString *, std::__1::vector<FBFeedAccessibilityComponentAction, std::__1::allocator<FBFeedAccessibilityComponentAction> > >, void *> *[], std::__1::__bucket_list_deallocator<std::__1::allocator<std::__1::__hash_node<std::__1::__hash_value_type<NSString *, std::__1::vector<FBFeedAccessibilityComponentAction, std::__1::allocator<FBFeedAccessibilityComponentAction> > >, void *> *> > > __bucket_list_;
	compressed_pair<std::__1::__hash_node_base<std::__1::__hash_node<std::__1::__hash_value_type<NSString *, std::__1::vector<FBFeedAccessibilityComponentAction, std::__1::allocator<FBFeedAccessibilityComponentAction> > >, void *> *>, std::__1::allocator<std::__1::__hash_node<std::__1::__hash_value_type<NSString *, std::__1::vector<FBFeedAccessibilityComponentAction, std::__1::allocator<FBFeedAccessibilityComponentAction> > >, void *> > > __p1_;
	compressed_pair<unsigned long, std::__1::__unordered_map_hasher<NSString *, std::__1::__hash_value_type<NSString *, std::__1::vector<FBFeedAccessibilityComponentAction, std::__1::allocator<FBFeedAccessibilityComponentAction> > >, FB::HashFunctor<NSObject *>, true> > __p2_;
	compressed_pair<float, std::__1::__unordered_map_equal<NSString *, std::__1::__hash_value_type<NSString *, std::__1::vector<FBFeedAccessibilityComponentAction, std::__1::allocator<FBFeedAccessibilityComponentAction> > >, FB::EqualFunctor<NSObject *>, true> > __p3_;
} hash_table<std::__1::__hash_value_type<NSString *, std::__1::vector<FBFeedAccessibilityComponentAction, std::__1::allocator<FBFeedAccessibilityComponentAction> > >, std::__1::__unordered_map_hasher<NSString *, std::__1::__hash_value_type<NSString *, std::__1::vector<FBFeedAccessibilityComponentAction, std::__1::allocator<FBFeedAccessibilityComponentAction> > >, FB::HashFunctor<NSObject *>, true>, std::__1::__unordered_map_equal<NSString *, std::__1::__hash_value_type<NSString *, std::__1::vector<FBFeedAccessibilityComponentAction, std::__1::allocator<FBFeedAccessibilityComponentAction> > >, FB::EqualFunctor<NSObject *>, true>, std::__1::allocator<std::__1::__hash_value_type<NSString *, std::__1::vector<FBFeedAccessibilityComponentAction, std::__1::allocator<FBFeedAccessibilityComponentAction> > > > >;

typedef struct unordered_map<NSString *, std::__1::vector<FBFeedAccessibilityComponentAction, std::__1::allocator<FBFeedAccessibilityComponentAction> >, FB::HashFunctor<NSObject *>, FB::EqualFunctor<NSObject *>, std::__1::allocator<std::__1::pair<NSString *const, std::__1::vector<FBFeedAccessibilityComponentAction, std::__1::allocator<FBFeedAccessibilityComponentAction> > > > > {
	hash_table<std::__1::__hash_value_type<NSString *, std::__1::vector<FBFeedAccessibilityComponentAction, std::__1::allocator<FBFeedAccessibilityComponentAction> > >, std::__1::__unordered_map_hasher<NSString *, std::__1::__hash_value_type<NSString *, std::__1::vector<FBFeedAccessibilityComponentAction, std::__1::allocator<FBFeedAccessibilityComponentAction> > >, FB::HashFunctor<NSObject *>, true>, std::__1::__unordered_map_equal<NSString *, std::__1::__hash_value_type<NSString *, std::__1::vector<FBFeedAccessibilityComponentAction, std::__1::allocator<FBFeedAccessibilityComponentAction> > >, FB::EqualFunctor<NSObject *>, true>, std::__1::allocator<std::__1::__hash_value_type<NSString *, std::__1::vector<FBFeedAccessibilityComponentAction, std::__1::allocator<FBFeedAccessibilityComponentAction> > > > > __table_;
} unordered_map<NSString *, std::__1::vector<FBFeedAccessibilityComponentAction, std::__1::allocator<FBFeedAccessibilityComponentAction> >, FB::HashFunctor<NSObject *>, FB::EqualFunctor<NSObject *>, std::__1::allocator<std::__1::pair<NSString *const, std::__1::vector<FBFeedAccessibilityComponentAction, std::__1::allocator<FBFeedAccessibilityComponentAction> > > > >;

typedef struct CKComponentAccessibilityTextAttribute {
	/*^block*/id accessibilityLazyTextBlock;
} CKComponentAccessibilityTextAttribute;

typedef struct _compressed_pair<CKComponentAccessibilityAggregationItem *, std::__1::allocator<CKComponentAccessibilityAggregationItem> > {
	CKComponentAccessibilityAggregationItem __first_;
} compressed_pair<CKComponentAccessibilityAggregationItem *, std::__1::allocator<CKComponentAccessibilityAggregationItem> >;

typedef struct vector<CKComponentAccessibilityAggregationItem, std::__1::allocator<CKComponentAccessibilityAggregationItem> > {
	CKComponentAccessibilityAggregationItem __begin_;
	CKComponentAccessibilityAggregationItem __end_;
	compressed_pair<CKComponentAccessibilityAggregationItem *, std::__1::allocator<CKComponentAccessibilityAggregationItem> > __end_cap_;
} vector<CKComponentAccessibilityAggregationItem, std::__1::allocator<CKComponentAccessibilityAggregationItem> >;

typedef struct shared_ptr<const std::__1::unordered_map<CKComponentViewAttribute, CKBoxedValue, std::__1::hash<CKComponentViewAttribute>, std::__1::equal_to<CKComponentViewAttribute>, std::__1::allocator<std::__1::pair<const CKComponentViewAttribute, CKBoxedValue> > > > {
	unordered_map<CKComponentViewAttribute, CKBoxedValue, std::__1::hash<CKComponentViewAttribute>, std::__1::equal_to<CKComponentViewAttribute>, std::__1::allocator<std::__1::pair<const CKComponentViewAttribute, CKBoxedValue> > > __ptr_;
	__shared_weak_count __cntrl_;
} shared_ptr<const std::__1::unordered_map<CKComponentViewAttribute, CKBoxedValue, std::__1::hash<CKComponentViewAttribute>, std::__1::equal_to<CKComponentViewAttribute>, std::__1::allocator<std::__1::pair<const CKComponentViewAttribute, CKBoxedValue> > > >;

typedef struct CKComponentAccessibilityContext {
	NSNumber* isAccessibilityElement;
	CKComponentAccessibilityTextAttribute accessibilityLabel;
	CKTypedComponentAction<> accessibilityComponentAction;
} CKComponentAccessibilityContext;

typedef struct CKComponentAccessibilityActionContext {
	CKComponent* sender;
	CKComponentAccessibilityContext accessibilityContext;
	shared_ptr<const std::__1::unordered_map<CKComponentViewAttribute, CKBoxedValue, std::__1::hash<CKComponentViewAttribute>, std::__1::equal_to<CKComponentViewAttribute>, std::__1::allocator<std::__1::pair<const CKComponentViewAttribute, CKBoxedValue> > > > viewAttributes;
} CKComponentAccessibilityActionContext;

typedef struct CKComponentAccessibilityAggregationItem {
	CKComponentAccessibilityActionContext actionContext;
	vector<CKComponentAccessibilityAggregationItem, std::__1::allocator<CKComponentAccessibilityAggregationItem> > children;
} CKComponentAccessibilityAggregationItem;

typedef struct FBAppProvidedHashtagConfiguration {
	NSString* hashtag;
	UIFont* font;
	UIEdgeInsets labelInsets;
	double labelToButtonPadding;
} FBAppProvidedHashtagConfiguration;

typedef struct FBAppProvidedHashtagActions {
	CKTypedComponentAction<> didTapCloseAction;
} FBAppProvidedHashtagActions;

typedef struct {
	BOOL field1;
	BOOL field2;
} SCD_Struct_FB139;

typedef struct {
	BOOL canAddOptions;
	BOOL canVoteOnMultipleOptions;
} SCD_Struct_FB140;

typedef struct FBTextFieldActions {
	CKTypedComponentAction<> didBeginEditingAction;
	CKTypedComponentAction<> didEndEditingAction;
	CKTypedComponentAction<> returnTappedAction;
	CKTypedComponentAction<> textChangedAction;
} FBTextFieldActions;

typedef struct FBComposerTextViewComponentInitialValues {
	NSString* initialText;
	NSArray* initialMentions;
	BOOL setCursorToStartOfInitialText;
} FBComposerTextViewComponentInitialValues;

typedef struct FBComposerTextViewComponentConfiguration {
	BOOL isManagingTextViewText;
	NSAttributedString* text;
	NSArray* mentions;
	NSArray* hashtags;
	NSString* identifier;
	NSString* placeHolderText;
	FBComposerTextViewComponentInitialValues initialValues;
	NSString* accessibilityIdentifier;
	UIFont* font;
	NSDictionary* highlightedTextAttributes;
	UIEdgeInsets textContainerInset;
	unsigned long long maxLength;
	unsigned long long maximumNumberOfLines;
	long long textAlignment;
	long long autocorrectionType;
	FBComposerDestination* destination;
	FBComposerTraits* composerTraits;
	BOOL enableMentions;
	BOOL enableHashtags;
	BOOL scrollEnabled;
	UIView<FBComposerMentionHosting>* hostingView;
	UIColor* backgroundColor;
	NSDictionary* textAttributes;
	double minHeightAspectRatio;
} FBComposerTextViewComponentConfiguration;

typedef struct FBComposerTextViewComponentActions {
	CKTypedComponentAction<> textChangeAction;
	CKTypedComponentAction<> mentionsUpdatedAction;
} FBComposerTextViewComponentActions;

typedef struct FBComposerTextViewCachedHeightState {
	double height;
	NSAttributedString* sourceText;
	UIFont* sourceFont;
	NSString* placeholderText;
} FBComposerTextViewCachedHeightState;

typedef struct _compressed_pair<FBComposer::CollectionChangeSetUpdating::ItemUpdateHandler<FBComposerCompositionState *, FBComposerPostCompositionItem *> *, std::__1::allocator<FBComposer::CollectionChangeSetUpdating::ItemUpdateHandler<FBComposerCompositionState *, FBComposerPostCompositionItem *> > > {
	ItemUpdateHandler<FBComposerCompositionState *, FBComposerPostCompositionItem *> __first_;
} compressed_pair<FBComposer::CollectionChangeSetUpdating::ItemUpdateHandler<FBComposerCompositionState *, FBComposerPostCompositionItem *> *, std::__1::allocator<FBComposer::CollectionChangeSetUpdating::ItemUpdateHandler<FBComposerCompositionState *, FBComposerPostCompositionItem *> > >;

typedef struct vector<FBComposer::CollectionChangeSetUpdating::ItemUpdateHandler<FBComposerCompositionState *, FBComposerPostCompositionItem *>, std::__1::allocator<FBComposer::CollectionChangeSetUpdating::ItemUpdateHandler<FBComposerCompositionState *, FBComposerPostCompositionItem *> > > {
	ItemUpdateHandler<FBComposerCompositionState *, FBComposerPostCompositionItem *> __begin_;
	ItemUpdateHandler<FBComposerCompositionState *, FBComposerPostCompositionItem *> __end_;
	compressed_pair<FBComposer::CollectionChangeSetUpdating::ItemUpdateHandler<FBComposerCompositionState *, FBComposerPostCompositionItem *> *, std::__1::allocator<FBComposer::CollectionChangeSetUpdating::ItemUpdateHandler<FBComposerCompositionState *, FBComposerPostCompositionItem *> > > __end_cap_;
} vector<FBComposer::CollectionChangeSetUpdating::ItemUpdateHandler<FBComposerCompositionState *, FBComposerPostCompositionItem *>, std::__1::allocator<FBComposer::CollectionChangeSetUpdating::ItemUpdateHandler<FBComposerCompositionState *, FBComposerPostCompositionItem *> > >;

typedef struct FBComposerCollapsedInlineSproutsChoosersBarActions {
	CKTypedComponentAction<> tapAction;
} FBComposerCollapsedInlineSproutsChoosersBarActions;

typedef struct FBComposerViewOptions {
	BOOL showSellView;
} FBComposerViewOptions;

typedef struct _compressed_pair<FBComposer::CollectionChangeSetUpdating::ItemUpdateHandler<FBComposerCompositionState *, FBComposerExpandedInlineSprout *> *, std::__1::allocator<FBComposer::CollectionChangeSetUpdating::ItemUpdateHandler<FBComposerCompositionState *, FBComposerExpandedInlineSprout *> > > {
	ItemUpdateHandler<FBComposerCompositionState *, FBComposerExpandedInlineSprout *> __first_;
} compressed_pair<FBComposer::CollectionChangeSetUpdating::ItemUpdateHandler<FBComposerCompositionState *, FBComposerExpandedInlineSprout *> *, std::__1::allocator<FBComposer::CollectionChangeSetUpdating::ItemUpdateHandler<FBComposerCompositionState *, FBComposerExpandedInlineSprout *> > >;

typedef struct vector<FBComposer::CollectionChangeSetUpdating::ItemUpdateHandler<FBComposerCompositionState *, FBComposerExpandedInlineSprout *>, std::__1::allocator<FBComposer::CollectionChangeSetUpdating::ItemUpdateHandler<FBComposerCompositionState *, FBComposerExpandedInlineSprout *> > > {
	ItemUpdateHandler<FBComposerCompositionState *, FBComposerExpandedInlineSprout *> __begin_;
	ItemUpdateHandler<FBComposerCompositionState *, FBComposerExpandedInlineSprout *> __end_;
	compressed_pair<FBComposer::CollectionChangeSetUpdating::ItemUpdateHandler<FBComposerCompositionState *, FBComposerExpandedInlineSprout *> *, std::__1::allocator<FBComposer::CollectionChangeSetUpdating::ItemUpdateHandler<FBComposerCompositionState *, FBComposerExpandedInlineSprout *> > > __end_cap_;
} vector<FBComposer::CollectionChangeSetUpdating::ItemUpdateHandler<FBComposerCompositionState *, FBComposerExpandedInlineSprout *>, std::__1::allocator<FBComposer::CollectionChangeSetUpdating::ItemUpdateHandler<FBComposerCompositionState *, FBComposerExpandedInlineSprout *> > >;

typedef struct InlineSprouts {
	unsigned long long state;
	vector<FBComposer::CollectionChangeSetUpdating::ItemUpdateHandler<FBComposerCompositionState *, FBComposerExpandedInlineSprout *>, std::__1::allocator<FBComposer::CollectionChangeSetUpdating::ItemUpdateHandler<FBComposerCompositionState *, FBComposerExpandedInlineSprout *> > > updateItems;
} InlineSprouts;

typedef struct _compressed_pair<FBAlbumCollageTileAttachmentComponent *__strong *, std::__1::allocator<FBAlbumCollageTileAttachmentComponent *> > {
	id __first_;
} compressed_pair<FBAlbumCollageTileAttachmentComponent *__strong *, std::__1::allocator<FBAlbumCollageTileAttachmentComponent *> >;

typedef struct vector<FBAlbumCollageTileAttachmentComponent *, std::__1::allocator<FBAlbumCollageTileAttachmentComponent *> > {
	id __begin_;
	id __end_;
	compressed_pair<FBAlbumCollageTileAttachmentComponent *__strong *, std::__1::allocator<FBAlbumCollageTileAttachmentComponent *> > __end_cap_;
} vector<FBAlbumCollageTileAttachmentComponent *, std::__1::allocator<FBAlbumCollageTileAttachmentComponent *> >;

typedef struct shared_ptr<facebook::mobile::fragmentmodel::detail::FragmentModelTree::Cache> {
	Cache __ptr_;
	__shared_weak_count __cntrl_;
} shared_ptr<facebook::mobile::fragmentmodel::detail::FragmentModelTree::Cache>;

typedef struct shared_ptr<facebook::mobile::graphstore::FBTree::Impl> {
	Impl __ptr_;
	__shared_weak_count __cntrl_;
} shared_ptr<facebook::mobile::graphstore::FBTree::Impl>;

typedef struct FBTree {
	shared_ptr<facebook::mobile::graphstore::FBTree::Impl> _impl;
} FBTree;

typedef struct FragmentModelTree {
	FBTree _fbtree;
	shared_ptr<facebook::mobile::fragmentmodel::detail::FragmentModelTree::Cache> _cache;
} FragmentModelTree;

typedef struct FBAlbumCollageMediaAttachmentComponentMediaItemGraphQL {
	FragmentModelTree _fbtree;
} FBAlbumCollageMediaAttachmentComponentMediaItemGraphQL;

typedef struct FBAttributedShareAttachmentComponentGraphQL {
	FragmentModelTree _fbtree;
} FBAttributedShareAttachmentComponentGraphQL;

typedef struct FBAddFriendButtonComponentGraphQL {
	FragmentModelTree _fbtree;
} FBAddFriendButtonComponentGraphQL;

typedef struct FBFollowProfileButtonComponentGraphQL {
	FragmentModelTree _fbtree;
} FBFollowProfileButtonComponentGraphQL;

typedef struct FBGroupAttachmentComponentGraphQL {
	FragmentModelTree _fbtree;
} FBGroupAttachmentComponentGraphQL;

typedef struct FBJoinGroupActionCompactButtonComponentGraphQL {
	FragmentModelTree _fbtree;
} FBJoinGroupActionCompactButtonComponentGraphQL;

typedef const struct unordered_map<unsigned long, UIImage *, std::__1::hash<unsigned long>, std::__1::equal_to<unsigned long>, std::__1::allocator<std::__1::pair<const unsigned long, UIImage *> > >* unordered_map<unsigned long, UIImage *, std::__1::hash<unsigned long>, std::__1::equal_to<unsigned long>, std::__1::allocator<std::__1::pair<const unsigned long, UIImage *> > >Ref;

typedef struct Target {
	FragmentModelTree _fbtree;
} Target;

typedef struct FBCommerceProductItemAttachmentHScrollablePhotoComponentGraphQL {
	FragmentModelTree _fbtree;
} FBCommerceProductItemAttachmentHScrollablePhotoComponentGraphQL;

typedef struct FBCommerceProductItemMultiphotoAttachmentComponentGraphQL {
	FragmentModelTree _fbtree;
} FBCommerceProductItemMultiphotoAttachmentComponentGraphQL;

typedef struct FBCommerceProductMiniAttachmentComponentGraphQL {
	FragmentModelTree _fbtree;
} FBCommerceProductMiniAttachmentComponentGraphQL;

typedef struct FBCulturalMomentAttachmentComponentGraphQL {
	FragmentModelTree _fbtree;
} FBCulturalMomentAttachmentComponentGraphQL;

typedef struct FBFundraiserCoverOverlayContentComponentGraphQL {
	FragmentModelTree _fbtree;
} FBFundraiserCoverOverlayContentComponentGraphQL;

typedef struct FBGoodwillWeatherLinkComponentActionLinkGraphQL {
	FragmentModelTree _fbtree;
} FBGoodwillWeatherLinkComponentActionLinkGraphQL;

typedef struct _compressed_pair<unsigned long, std::__1::allocator<std::__1::__hash_node<std::__1::__hash_value_type<const char *, FBHScrollAlbumAttachmentComponentMap::Value>, void *> *> > {
	unsigned long long __first_;
} compressed_pair<unsigned long, std::__1::allocator<std::__1::__hash_node<std::__1::__hash_value_type<const char *, FBHScrollAlbumAttachmentComponentMap::Value>, void *> *> >;

typedef struct _compressed_pair<unsigned long, std::__1::__unordered_map_hasher<const char *, std::__1::__hash_value_type<const char *, FBHScrollAlbumAttachmentComponentMap::Value>, std::__1::hash<const char *>, true> > {
	unsigned long long __first_;
} compressed_pair<unsigned long, std::__1::__unordered_map_hasher<const char *, std::__1::__hash_value_type<const char *, FBHScrollAlbumAttachmentComponentMap::Value>, std::__1::hash<const char *>, true> >;

typedef struct _compressed_pair<float, std::__1::__unordered_map_equal<const char *, std::__1::__hash_value_type<const char *, FBHScrollAlbumAttachmentComponentMap::Value>, std::__1::equal_to<const char *>, true> > {
	float __first_;
} compressed_pair<float, std::__1::__unordered_map_equal<const char *, std::__1::__hash_value_type<const char *, FBHScrollAlbumAttachmentComponentMap::Value>, std::__1::equal_to<const char *>, true> >;

typedef struct _hash_node_base<std::__1::__hash_node<std::__1::__hash_value_type<const char *, FBHScrollAlbumAttachmentComponentMap::Value>, void *> *> {
	__hash_node<std::__1::__hash_value_type<const char *, FBHScrollAlbumAttachmentComponentMap::Value>, void *> __next_;
} hash_node_base<std::__1::__hash_node<std::__1::__hash_value_type<const char *, FBHScrollAlbumAttachmentComponentMap::Value>, void *> *>;

typedef struct _compressed_pair<std::__1::__hash_node_base<std::__1::__hash_node<std::__1::__hash_value_type<const char *, FBHScrollAlbumAttachmentComponentMap::Value>, void *> *>, std::__1::allocator<std::__1::__hash_node<std::__1::__hash_value_type<const char *, FBHScrollAlbumAttachmentComponentMap::Value>, void *> > > {
	hash_node_base<std::__1::__hash_node<std::__1::__hash_value_type<const char *, FBHScrollAlbumAttachmentComponentMap::Value>, void *> *> __first_;
} compressed_pair<std::__1::__hash_node_base<std::__1::__hash_node<std::__1::__hash_value_type<const char *, FBHScrollAlbumAttachmentComponentMap::Value>, void *> *>, std::__1::allocator<std::__1::__hash_node<std::__1::__hash_value_type<const char *, FBHScrollAlbumAttachmentComponentMap::Value>, void *> > >;

typedef struct _bucket_list_deallocator<std::__1::allocator<std::__1::__hash_node<std::__1::__hash_value_type<const char *, FBHScrollAlbumAttachmentComponentMap::Value>, void *> *> > {
	compressed_pair<unsigned long, std::__1::allocator<std::__1::__hash_node<std::__1::__hash_value_type<const char *, FBHScrollAlbumAttachmentComponentMap::Value>, void *> *> > __data_;
} bucket_list_deallocator<std::__1::allocator<std::__1::__hash_node<std::__1::__hash_value_type<const char *, FBHScrollAlbumAttachmentComponentMap::Value>, void *> *> >;

typedef struct _compressed_pair<std::__1::__hash_node<std::__1::__hash_value_type<const char *, FBHScrollAlbumAttachmentComponentMap::Value>, void *> **, std::__1::__bucket_list_deallocator<std::__1::allocator<std::__1::__hash_node<std::__1::__hash_value_type<const char *, FBHScrollAlbumAttachmentComponentMap::Value>, void *> *> > > {
	__hash_node<std::__1::__hash_value_type<const char *, FBHScrollAlbumAttachmentComponentMap::Value>, void *> __first_;
	bucket_list_deallocator<std::__1::allocator<std::__1::__hash_node<std::__1::__hash_value_type<const char *, FBHScrollAlbumAttachmentComponentMap::Value>, void *> *> > __second_;
} compressed_pair<std::__1::__hash_node<std::__1::__hash_value_type<const char *, FBHScrollAlbumAttachmentComponentMap::Value>, void *> **, std::__1::__bucket_list_deallocator<std::__1::allocator<std::__1::__hash_node<std::__1::__hash_value_type<const char *, FBHScrollAlbumAttachmentComponentMap::Value>, void *> *> > >;

typedef struct unique_ptr<std::__1::__hash_node<std::__1::__hash_value_type<const char *, FBHScrollAlbumAttachmentComponentMap::Value>, void *> *[], std::__1::__bucket_list_deallocator<std::__1::allocator<std::__1::__hash_node<std::__1::__hash_value_type<const char *, FBHScrollAlbumAttachmentComponentMap::Value>, void *> *> > > {
	compressed_pair<std::__1::__hash_node<std::__1::__hash_value_type<const char *, FBHScrollAlbumAttachmentComponentMap::Value>, void *> **, std::__1::__bucket_list_deallocator<std::__1::allocator<std::__1::__hash_node<std::__1::__hash_value_type<const char *, FBHScrollAlbumAttachmentComponentMap::Value>, void *> *> > > __ptr_;
} unique_ptr<std::__1::__hash_node<std::__1::__hash_value_type<const char *, FBHScrollAlbumAttachmentComponentMap::Value>, void *> *[], std::__1::__bucket_list_deallocator<std::__1::allocator<std::__1::__hash_node<std::__1::__hash_value_type<const char *, FBHScrollAlbumAttachmentComponentMap::Value>, void *> *> > >;

typedef struct _hash_table<std::__1::__hash_value_type<const char *, FBHScrollAlbumAttachmentComponentMap::Value>, std::__1::__unordered_map_hasher<const char *, std::__1::__hash_value_type<const char *, FBHScrollAlbumAttachmentComponentMap::Value>, std::__1::hash<const char *>, true>, std::__1::__unordered_map_equal<const char *, std::__1::__hash_value_type<const char *, FBHScrollAlbumAttachmentComponentMap::Value>, std::__1::equal_to<const char *>, true>, std::__1::allocator<std::__1::__hash_value_type<const char *, FBHScrollAlbumAttachmentComponentMap::Value> > > {
	unique_ptr<std::__1::__hash_node<std::__1::__hash_value_type<const char *, FBHScrollAlbumAttachmentComponentMap::Value>, void *> *[], std::__1::__bucket_list_deallocator<std::__1::allocator<std::__1::__hash_node<std::__1::__hash_value_type<const char *, FBHScrollAlbumAttachmentComponentMap::Value>, void *> *> > > __bucket_list_;
	compressed_pair<std::__1::__hash_node_base<std::__1::__hash_node<std::__1::__hash_value_type<const char *, FBHScrollAlbumAttachmentComponentMap::Value>, void *> *>, std::__1::allocator<std::__1::__hash_node<std::__1::__hash_value_type<const char *, FBHScrollAlbumAttachmentComponentMap::Value>, void *> > > __p1_;
	compressed_pair<unsigned long, std::__1::__unordered_map_hasher<const char *, std::__1::__hash_value_type<const char *, FBHScrollAlbumAttachmentComponentMap::Value>, std::__1::hash<const char *>, true> > __p2_;
	compressed_pair<float, std::__1::__unordered_map_equal<const char *, std::__1::__hash_value_type<const char *, FBHScrollAlbumAttachmentComponentMap::Value>, std::__1::equal_to<const char *>, true> > __p3_;
} hash_table<std::__1::__hash_value_type<const char *, FBHScrollAlbumAttachmentComponentMap::Value>, std::__1::__unordered_map_hasher<const char *, std::__1::__hash_value_type<const char *, FBHScrollAlbumAttachmentComponentMap::Value>, std::__1::hash<const char *>, true>, std::__1::__unordered_map_equal<const char *, std::__1::__hash_value_type<const char *, FBHScrollAlbumAttachmentComponentMap::Value>, std::__1::equal_to<const char *>, true>, std::__1::allocator<std::__1::__hash_value_type<const char *, FBHScrollAlbumAttachmentComponentMap::Value> > >;

typedef struct unordered_map<const char *, FBHScrollAlbumAttachmentComponentMap::Value, std::__1::hash<const char *>, std::__1::equal_to<const char *>, std::__1::allocator<std::__1::pair<const char *const, FBHScrollAlbumAttachmentComponentMap::Value> > > {
	hash_table<std::__1::__hash_value_type<const char *, FBHScrollAlbumAttachmentComponentMap::Value>, std::__1::__unordered_map_hasher<const char *, std::__1::__hash_value_type<const char *, FBHScrollAlbumAttachmentComponentMap::Value>, std::__1::hash<const char *>, true>, std::__1::__unordered_map_equal<const char *, std::__1::__hash_value_type<const char *, FBHScrollAlbumAttachmentComponentMap::Value>, std::__1::equal_to<const char *>, true>, std::__1::allocator<std::__1::__hash_value_type<const char *, FBHScrollAlbumAttachmentComponentMap::Value> > > __table_;
} unordered_map<const char *, FBHScrollAlbumAttachmentComponentMap::Value, std::__1::hash<const char *>, std::__1::equal_to<const char *>, std::__1::allocator<std::__1::pair<const char *const, FBHScrollAlbumAttachmentComponentMap::Value> > >;

typedef struct FBHScrollAlbumAttachmentComponentMap {
	unordered_map<const char *, FBHScrollAlbumAttachmentComponentMap::Value, std::__1::hash<const char *>, std::__1::equal_to<const char *>, std::__1::allocator<std::__1::pair<const char *const, FBHScrollAlbumAttachmentComponentMap::Value> > > _map;
} FBHScrollAlbumAttachmentComponentMap;

typedef struct FBInstantExperienceAttachmentComponentGraphQL {
	FragmentModelTree _fbtree;
} FBInstantExperienceAttachmentComponentGraphQL;

typedef struct StyleInfos {
	FragmentModelTree _fbtree;
} StyleInfos;

typedef struct ActionLinks {
	FragmentModelTree _fbtree;
} ActionLinks;

typedef struct FBLeadGenAttachmentComponentGraphQL {
	FragmentModelTree _fbtree;
} FBLeadGenAttachmentComponentGraphQL;

typedef struct _compressed_pair<FBHScrollComponentChild *, std::__1::allocator<FBHScrollComponentChild> > {
	FBHScrollComponentChild __first_;
} compressed_pair<FBHScrollComponentChild *, std::__1::allocator<FBHScrollComponentChild> >;

typedef struct vector<FBHScrollComponentChild, std::__1::allocator<FBHScrollComponentChild> > {
	FBHScrollComponentChild __begin_;
	FBHScrollComponentChild __end_;
	compressed_pair<FBHScrollComponentChild *, std::__1::allocator<FBHScrollComponentChild> > __end_cap_;
} vector<FBHScrollComponentChild, std::__1::allocator<FBHScrollComponentChild> >;

typedef struct FBMultiShareViewMoreComponentGraphQL {
	FragmentModelTree _fbtree;
} FBMultiShareViewMoreComponentGraphQL;

typedef struct FBMSHCustomCardOptions {
	CKTypedComponentAction<> didTapAction;
	CKComponent<FIGCardContentHScrollChildRightCompliant>* ctaComponent;
	BOOL hideFooter;
	FBMemFeedStory* parentStory;
} FBMSHCustomCardOptions;

typedef struct FBMSCardChildOptions {
	CKTypedComponentAction<> tapAction;
	CKComponent<FIGCardContentHScrollChildRightCompliant>* ctaComponent;
	BOOL hideFooter;
	double mediaHeightToWidthRatio;
} FBMSCardChildOptions;

typedef struct FBMSHScrollCardParentOptions {
	CKTypedComponentAction<> becameFullyVisibleAction;
	CKTypedComponentAction<> tapAction;
	BOOL hideFooter;
	FBMemFeedStory* parentStory;
} FBMSHScrollCardParentOptions;

typedef struct Digests {
	FragmentModelTree _fbtree;
} Digests;

typedef struct FBVideoShareAttachmentComponentGraphQL {
	FragmentModelTree _fbtree;
} FBVideoShareAttachmentComponentGraphQL;

typedef struct {
	double field1;
	double field2;
	CGPoint field3;
} SCD_Struct_FB196;

typedef struct Profile {
	FragmentModelTree _fbtree;
} Profile;

typedef struct FBFollowOrLikeProfileButtonComponentGraphQL {
	FragmentModelTree _fbtree;
} FBFollowOrLikeProfileButtonComponentGraphQL;

typedef struct FBShareAttachmentCardComponentGraphQL {
	FragmentModelTree _fbtree;
} FBShareAttachmentCardComponentGraphQL;

typedef struct FBColorMetrics {
	/*function pointer*/void* _vptr$FBMetrics;
	BOOL _initialized;
	/*function pointer*/void* ;
	unsigned char red;
	C) r;
	/*function pointer*/void* ;
	unsigned char green;
	C) g;
	/*function pointer*/void* ;
	unsigned char blue;
	C) b;
	/*function pointer*/void* ;
	double alpha;
	d) a;
} FBColorMetrics;

typedef struct FBShadowMetrics {
	/*function pointer*/void* _vptr$FBMetrics;
	BOOL _initialized;
	CGSize offset;
	double blur;
	FBColorMetrics color;
} FBShadowMetrics;

typedef struct FBTextMetrics {
	/*function pointer*/void* _vptr$FBMetrics;
	BOOL _initialized;
	NSString* fontName;
	double size;
	double lineHeight;
	double kerning;
	double wordKerning;
	FBColorMetrics color;
	FBShadowMetrics shadow;
	unsigned long long capitalizationStyle;
	unsigned long long underlineStyle;
	FBColorMetrics backgroundColor;
	long long alignment;
} FBTextMetrics;

typedef struct FBNACommentSheetViewControllerMetrics {
	UIEdgeInsets minimumEdgeInsets;
	CGSize maximumContentSize;
} FBNACommentSheetViewControllerMetrics;

typedef struct CKSizeRange {
	CGSize min;
	CGSize max;
} CKSizeRange;

typedef struct {
	Class fullscreenControllerFactory;
	BOOL enableSmartFullscreen;
	double pauseTimeBetweenFullScreenVideos;
	unsigned long long swipeableControllerDismissalStyle;
} SCD_Struct_FB205;

typedef struct {
	double watchAndScrollStallWaitSeconds;
} SCD_Struct_FB206;

typedef struct FBVideoChannelViewControllerConfig {
	NSArray* channelConfigs;
	NSArray* storyConfigs;
	unsigned long long headerStyle;
	FBVideoViewManager* viewManager;
	FBMemFeedStory* story;
	NSArray* trackingCodes;
	<FBVideoPresentingDelegate>* presentingDelegate;
	long long openAtIndex;
	long long maxDepthLevel;
	NSString* pinnedVideoID;
	FBMemModelObject<FBQueriedNodeFieldsProtocol>* channelPublisher;
	BOOL forceDismissIntoWNSEnabled;
	NSString* storySetID;
} FBVideoChannelViewControllerConfig;

typedef struct FBVideoChannelViewConfig {
	FBFontFoundry* fontFoundry;
	BOOL watchScrollEnabled;
	BOOL channelHeaderEnabled;
	FBTVCastingButtonController* castingButtonController;
	BOOL dismissIntoWNSEnabled;
	NSString* dismissIntoWNSGlyph;
} FBVideoChannelViewConfig;

typedef struct _compressed_pair<unsigned long, std::__1::allocator<std::__1::__hash_node<FBFeedEventBusEvents, void *> *> > {
	unsigned long long __first_;
} compressed_pair<unsigned long, std::__1::allocator<std::__1::__hash_node<FBFeedEventBusEvents, void *> *> >;

typedef struct _compressed_pair<unsigned long, std::__1::hash<FBFeedEventBusEvents> > {
	unsigned long long __first_;
} compressed_pair<unsigned long, std::__1::hash<FBFeedEventBusEvents> >;

typedef struct _compressed_pair<float, std::__1::equal_to<FBFeedEventBusEvents> > {
	float __first_;
} compressed_pair<float, std::__1::equal_to<FBFeedEventBusEvents> >;

typedef struct _hash_node_base<std::__1::__hash_node<FBFeedEventBusEvents, void *> *> {
	__hash_node<FBFeedEventBusEvents, void *> __next_;
} hash_node_base<std::__1::__hash_node<FBFeedEventBusEvents, void *> *>;

typedef struct _compressed_pair<std::__1::__hash_node_base<std::__1::__hash_node<FBFeedEventBusEvents, void *> *>, std::__1::allocator<std::__1::__hash_node<FBFeedEventBusEvents, void *> > > {
	hash_node_base<std::__1::__hash_node<FBFeedEventBusEvents, void *> *> __first_;
} compressed_pair<std::__1::__hash_node_base<std::__1::__hash_node<FBFeedEventBusEvents, void *> *>, std::__1::allocator<std::__1::__hash_node<FBFeedEventBusEvents, void *> > >;

typedef struct _bucket_list_deallocator<std::__1::allocator<std::__1::__hash_node<FBFeedEventBusEvents, void *> *> > {
	compressed_pair<unsigned long, std::__1::allocator<std::__1::__hash_node<FBFeedEventBusEvents, void *> *> > __data_;
} bucket_list_deallocator<std::__1::allocator<std::__1::__hash_node<FBFeedEventBusEvents, void *> *> >;

typedef struct _compressed_pair<std::__1::__hash_node<FBFeedEventBusEvents, void *> **, std::__1::__bucket_list_deallocator<std::__1::allocator<std::__1::__hash_node<FBFeedEventBusEvents, void *> *> > > {
	__hash_node<FBFeedEventBusEvents, void *> __first_;
	bucket_list_deallocator<std::__1::allocator<std::__1::__hash_node<FBFeedEventBusEvents, void *> *> > __second_;
} compressed_pair<std::__1::__hash_node<FBFeedEventBusEvents, void *> **, std::__1::__bucket_list_deallocator<std::__1::allocator<std::__1::__hash_node<FBFeedEventBusEvents, void *> *> > >;

typedef struct unique_ptr<std::__1::__hash_node<FBFeedEventBusEvents, void *> *[], std::__1::__bucket_list_deallocator<std::__1::allocator<std::__1::__hash_node<FBFeedEventBusEvents, void *> *> > > {
	compressed_pair<std::__1::__hash_node<FBFeedEventBusEvents, void *> **, std::__1::__bucket_list_deallocator<std::__1::allocator<std::__1::__hash_node<FBFeedEventBusEvents, void *> *> > > __ptr_;
} unique_ptr<std::__1::__hash_node<FBFeedEventBusEvents, void *> *[], std::__1::__bucket_list_deallocator<std::__1::allocator<std::__1::__hash_node<FBFeedEventBusEvents, void *> *> > >;

typedef struct _hash_table<FBFeedEventBusEvents, std::__1::hash<FBFeedEventBusEvents>, std::__1::equal_to<FBFeedEventBusEvents>, std::__1::allocator<FBFeedEventBusEvents> > {
	unique_ptr<std::__1::__hash_node<FBFeedEventBusEvents, void *> *[], std::__1::__bucket_list_deallocator<std::__1::allocator<std::__1::__hash_node<FBFeedEventBusEvents, void *> *> > > __bucket_list_;
	compressed_pair<std::__1::__hash_node_base<std::__1::__hash_node<FBFeedEventBusEvents, void *> *>, std::__1::allocator<std::__1::__hash_node<FBFeedEventBusEvents, void *> > > __p1_;
	compressed_pair<unsigned long, std::__1::hash<FBFeedEventBusEvents> > __p2_;
	compressed_pair<float, std::__1::equal_to<FBFeedEventBusEvents> > __p3_;
} hash_table<FBFeedEventBusEvents, std::__1::hash<FBFeedEventBusEvents>, std::__1::equal_to<FBFeedEventBusEvents>, std::__1::allocator<FBFeedEventBusEvents> >;

typedef struct unordered_set<FBFeedEventBusEvents, std::__1::hash<FBFeedEventBusEvents>, std::__1::equal_to<FBFeedEventBusEvents>, std::__1::allocator<FBFeedEventBusEvents> > {
	hash_table<FBFeedEventBusEvents, std::__1::hash<FBFeedEventBusEvents>, std::__1::equal_to<FBFeedEventBusEvents>, std::__1::allocator<FBFeedEventBusEvents> > __table_;
} unordered_set<FBFeedEventBusEvents, std::__1::hash<FBFeedEventBusEvents>, std::__1::equal_to<FBFeedEventBusEvents>, std::__1::allocator<FBFeedEventBusEvents> >;

typedef struct FBCommentStreamInlineReplyComposerConfiguration {
	BOOL stickersEnabled;
	UIColor* mentionsBackgroundColor;
	FBFeedbackAnalytics* feedbackAnalytics;
	FBCommentComposerAnalyticsInfo* analyticsInfo;
	unsigned long long theme;
	/*^block*/id willActivateCallback;
	/*^block*/id didActivateCallback;
	/*^block*/id dismissCallback;
	/*^block*/id showPillCallback;
	/*^block*/id dismissPillCallback;
} FBCommentStreamInlineReplyComposerConfiguration;

typedef struct CommentDatasourceUpdate {
	BOOL updateInProgress;
	BOOL updateIsFromInitialLoad;
	BOOL insertsComments;
	BOOL updatesComments;
	BOOL removesComments;
	BOOL insertsTypingIndicator;
} CommentDatasourceUpdate;

typedef struct FBCommentEditingDependencyProviders {
	<FBCommentsModelControllerProviding>* commentsModelControllerProvider;
	/*^block*/id mentionsControllerProvider;
} FBCommentEditingDependencyProviders;

typedef struct FBFeedbackTargetManagerRespondsToSelectors {
	BOOL viewDidLayoutSubviews;
} FBFeedbackTargetManagerRespondsToSelectors;

typedef struct {
	id field1;
	id field2;
} SCD_Struct_FB223;

typedef struct {
	UIEdgeInsets field1;
} SCD_Struct_FB224;

typedef struct CKTypedComponentAction<FBMemPage *> {
	CKTypedComponentActionValue _internal;
} CKTypedComponentAction<FBMemPage *>;

typedef struct _compressed_pair<FBPYMLFeedUnitPagePhotoContentChildComponent *__strong *, std::__1::allocator<FBPYMLFeedUnitPagePhotoContentChildComponent *> > {
	id __first_;
} compressed_pair<FBPYMLFeedUnitPagePhotoContentChildComponent *__strong *, std::__1::allocator<FBPYMLFeedUnitPagePhotoContentChildComponent *> >;

typedef struct vector<FBPYMLFeedUnitPagePhotoContentChildComponent *, std::__1::allocator<FBPYMLFeedUnitPagePhotoContentChildComponent *> > {
	id __begin_;
	id __end_;
	compressed_pair<FBPYMLFeedUnitPagePhotoContentChildComponent *__strong *, std::__1::allocator<FBPYMLFeedUnitPagePhotoContentChildComponent *> > __end_cap_;
} vector<FBPYMLFeedUnitPagePhotoContentChildComponent *, std::__1::allocator<FBPYMLFeedUnitPagePhotoContentChildComponent *> >;

typedef struct CKTypedComponentAction<FBMemStoryAttachment *> {
	CKTypedComponentActionValue _internal;
} CKTypedComponentAction<FBMemStoryAttachment *>;

typedef struct FBLivestreamVideoPlayerComponentFullscreenSwipeableConfig {
	Class factory;
	FBMemModelObject<FBQueriedVideoChannelFieldsProtocol>* videoChannel;
	NSString* videoChannelCaller;
	id initialPlaylistItemsBlock;
	fullscreenPlaylistController ;
	fullscreenEnteredBlock ^<FBSwipeableFullscreenPlaylistController>;
} FBLivestreamVideoPlayerComponentFullscreenSwipeableConfig;

typedef struct FBLivestreamVideoPlayerComponentActions {
	CKTypedComponentAction<> willStartLiveToVODTransitionAction;
	CKTypedComponentAction<> didStartLiveToVODTransitionAction;
	CKTypedComponentAction<> willFinishTransitionToVODAction;
	CKTypedComponentAction<> didFinishTransitionToVODAction;
	CKTypedComponentAction<> didTransitionToUnavailableAction;
	CKTypedComponentAction<> didTapPlayAction;
	CKTypedComponentAction<> didDismissPlayerAction;
	CKTypedComponentAction<> didStartCommercialBreakAction;
	CKTypedComponentAction<> didEndCommercialBreakAction;
	CKTypedComponentAction<> didStartPlaying;
	CKTypedComponentAction<> didStopPlaying;
} FBLivestreamVideoPlayerComponentActions;

typedef struct FBCommentTranslationComponentGraphQL {
	FragmentModelTree _fbtree;
} FBCommentTranslationComponentGraphQL;

typedef struct Feedback {
	FragmentModelTree _fbtree;
} Feedback;

typedef struct FBUFICommentEditHistoryComponentGraphQL {
	FragmentModelTree _fbtree;
} FBUFICommentEditHistoryComponentGraphQL;

typedef struct FBUFICommentDetailLayoutDefinition {
	BOOL showPostingState;
	BOOL showTimestamp;
	BOOL showEditHistory;
	BOOL showLikeButton;
	BOOL showLikeCount;
	BOOL showReplyButton;
	BOOL showPrivateReplyButton;
	BOOL showShareButton;
} FBUFICommentDetailLayoutDefinition;

typedef struct FBUFICommentLikeButtonComponentGraphQL {
	FragmentModelTree _fbtree;
} FBUFICommentLikeButtonComponentGraphQL;

typedef struct FBUFICommentLikeCountComponentGraphQL {
	FragmentModelTree _fbtree;
} FBUFICommentLikeCountComponentGraphQL;

typedef struct FBUFICommentProfilePictureComponentGraphQL {
	FragmentModelTree _fbtree;
} FBUFICommentProfilePictureComponentGraphQL;

typedef struct FBUFICommentReactionCountComponentGraphQL {
	FragmentModelTree _fbtree;
} FBUFICommentReactionCountComponentGraphQL;

typedef struct FBUFICommentShareButtonComponentGraphQL {
	FragmentModelTree _fbtree;
} FBUFICommentShareButtonComponentGraphQL;

typedef struct shared_ptr<FB::Private::LiveSignal<FBTarotCardRenderableAppearance> > {
	LiveSignal<FBTarotCardRenderableAppearance> __ptr_;
	__shared_weak_count __cntrl_;
} shared_ptr<FB::Private::LiveSignal<FBTarotCardRenderableAppearance> >;

typedef struct Signal<FBTarotCardRenderableAppearance> {
	shared_ptr<FB::Private::LiveSignal<FBTarotCardRenderableAppearance> > _liveSignal;
} Signal<FBTarotCardRenderableAppearance>;

typedef const struct Signal<double>* Signal<double>Ref;

typedef struct {
	id field1;
	FBFeedHeaderAccessibilityOverrides field2;
	id field3;
	id field4;
	unsigned long long field5;
	unsigned long long field6;
	BOOL field7;
	id field8;
	UIEdgeInsets field9;
	id field10;
	BOOL field11;
} SCD_Struct_FB243;

typedef struct CGContext* CGContextRef;

typedef struct {
	unsigned long long field1;
	unsigned long long field2;
	BOOL field3;
	unsigned long long field4;
	id field5;
	id field6;
} SCD_Struct_FB245;

typedef struct FBFullScreenEnabledVideoPlayerComponentConfiguration {
	FBMemModelObject<FBQueriedEntityFieldsProtocol>* parent;
	CKComponentSize size;
	NSString* groupTokenID;
	UIColor* thumbnailBackgroundColor;
	CKTypedComponentAction<> willPresentFullScreenAction;
	CKTypedComponentAction<> didPresentFullScreenAction;
	<FBVideoPlaybackLoggingDataProviderInitializer>* loggingProviderInitializer;
	Class swipeableControllerFactory;
	FBMemModelObject<FBQueriedVideoChannelFieldsProtocol>* swipeableVideoChannel;
	NSString* swipeableVideoChannelCaller;
	id swipeableInitialPlaylistItemsBlock;
	swipeableFullscreenPlaylistController ;
	swipeableFullscreenEnteredBlock ^<FBSwipeableFullscreenPlaylistController>;
	 id;
	id dismissCompletionBlock;
	forceVideoPlayerVersion ;
	forceTouchIntentTarget Q;
	didStartPlaying ^FBMediaForceTouchIntentTarget;
	didStopPlaying CKTypedComponentAction<>;
	scrollBackToFeedEnabled CKTypedComponentAction<>;
	autoFullScreenEnabled B;
	timeBeforeAutoFullScreen B;
	forceAspectFillGravity d;
	messengerDestinationActionLink B;
} FBFullScreenEnabledVideoPlayerComponentConfiguration;

typedef struct FBTarotCardRenderableAppearance {
	double chromeGradientOpacity;
	double chromeSolidBackgroundOpacity;
	double chromeCompactFactor;
	double chromeProgressOpacity;
	double chromeTitleOpacity;
	double chromePageToTopFactor;
	double chromeDismissButtonOpacity;
} FBTarotCardRenderableAppearance;

typedef struct _compressed_pair<FB::Input<double> *, std::__1::default_delete<FB::Input<double> > > {
	Input<double> __first_;
} compressed_pair<FB::Input<double> *, std::__1::default_delete<FB::Input<double> > >;

typedef struct unique_ptr<FB::Input<double>, std::__1::default_delete<FB::Input<double> > > {
	compressed_pair<FB::Input<double> *, std::__1::default_delete<FB::Input<double> > > __ptr_;
} unique_ptr<FB::Input<double>, std::__1::default_delete<FB::Input<double> > >;

typedef struct shared_ptr<FB::Private::LiveSignal<double> > {
	LiveSignal<double> __ptr_;
	__shared_weak_count __cntrl_;
} shared_ptr<FB::Private::LiveSignal<double> >;

typedef struct _compressed_pair<unsigned long, std::__1::allocator<std::__1::__hash_node<std::__1::__hash_value_type<Class, UIViewController<FBTarotCardViewControllerProtocol> *(*)(id<FBTarotCardEntityProtocol>, FBTarotToolbox *)>, void *> *> > {
	unsigned long long __first_;
} compressed_pair<unsigned long, std::__1::allocator<std::__1::__hash_node<std::__1::__hash_value_type<Class, UIViewController<FBTarotCardViewControllerProtocol> *(*)(id<FBTarotCardEntityProtocol>, FBTarotToolbox *)>, void *> *> >;

typedef struct _compressed_pair<unsigned long, std::__1::__unordered_map_hasher<Class, std::__1::__hash_value_type<Class, UIViewController<FBTarotCardViewControllerProtocol> *(*)(id<FBTarotCardEntityProtocol>, FBTarotToolbox *)>, std::__1::hash<Class>, true> > {
	unsigned long long __first_;
} compressed_pair<unsigned long, std::__1::__unordered_map_hasher<Class, std::__1::__hash_value_type<Class, UIViewController<FBTarotCardViewControllerProtocol> *(*)(id<FBTarotCardEntityProtocol>, FBTarotToolbox *)>, std::__1::hash<Class>, true> >;

typedef struct _compressed_pair<float, std::__1::__unordered_map_equal<Class, std::__1::__hash_value_type<Class, UIViewController<FBTarotCardViewControllerProtocol> *(*)(id<FBTarotCardEntityProtocol>, FBTarotToolbox *)>, std::__1::equal_to<Class>, true> > {
	float __first_;
} compressed_pair<float, std::__1::__unordered_map_equal<Class, std::__1::__hash_value_type<Class, UIViewController<FBTarotCardViewControllerProtocol> *(*)(id<FBTarotCardEntityProtocol>, FBTarotToolbox *)>, std::__1::equal_to<Class>, true> >;

typedef struct _hash_node_base<std::__1::__hash_node<std::__1::__hash_value_type<Class, UIViewController<FBTarotCardViewControllerProtocol> *(*)(id<FBTarotCardEntityProtocol>, FBTarotToolbox *)>, void *> *> {
	__hash_node<std::__1::__hash_value_type<Class, UIViewController<FBTarotCardViewControllerProtocol> *(*)(id<FBTarotCardEntityProtocol>, FBTarotToolbox *)>, void *> __next_;
} hash_node_base<std::__1::__hash_node<std::__1::__hash_value_type<Class, UIViewController<FBTarotCardViewControllerProtocol> *(*)(id<FBTarotCardEntityProtocol>, FBTarotToolbox *)>, void *> *>;

typedef struct _compressed_pair<std::__1::__hash_node_base<std::__1::__hash_node<std::__1::__hash_value_type<Class, UIViewController<FBTarotCardViewControllerProtocol> *(*)(id<FBTarotCardEntityProtocol>, FBTarotToolbox *)>, void *> *>, std::__1::allocator<std::__1::__hash_node<std::__1::__hash_value_type<Class, UIViewController<FBTarotCardViewControllerProtocol> *(*)(id<FBTarotCardEntityProtocol>, FBTarotToolbox *)>, void *> > > {
	hash_node_base<std::__1::__hash_node<std::__1::__hash_value_type<Class, UIViewController<FBTarotCardViewControllerProtocol> *(*)(id<FBTarotCardEntityProtocol>, FBTarotToolbox *)>, void *> *> __first_;
} compressed_pair<std::__1::__hash_node_base<std::__1::__hash_node<std::__1::__hash_value_type<Class, UIViewController<FBTarotCardViewControllerProtocol> *(*)(id<FBTarotCardEntityProtocol>, FBTarotToolbox *)>, void *> *>, std::__1::allocator<std::__1::__hash_node<std::__1::__hash_value_type<Class, UIViewController<FBTarotCardViewControllerProtocol> *(*)(id<FBTarotCardEntityProtocol>, FBTarotToolbox *)>, void *> > >;

typedef struct _bucket_list_deallocator<std::__1::allocator<std::__1::__hash_node<std::__1::__hash_value_type<Class, UIViewController<FBTarotCardViewControllerProtocol> *(*)(id<FBTarotCardEntityProtocol>, FBTarotToolbox *)>, void *> *> > {
	compressed_pair<unsigned long, std::__1::allocator<std::__1::__hash_node<std::__1::__hash_value_type<Class, UIViewController<FBTarotCardViewControllerProtocol> *(*)(id<FBTarotCardEntityProtocol>, FBTarotToolbox *)>, void *> *> > __data_;
} bucket_list_deallocator<std::__1::allocator<std::__1::__hash_node<std::__1::__hash_value_type<Class, UIViewController<FBTarotCardViewControllerProtocol> *(*)(id<FBTarotCardEntityProtocol>, FBTarotToolbox *)>, void *> *> >;

typedef struct _compressed_pair<std::__1::__hash_node<std::__1::__hash_value_type<Class, UIViewController<FBTarotCardViewControllerProtocol> *(*)(id<FBTarotCardEntityProtocol>, FBTarotToolbox *)>, void *> **, std::__1::__bucket_list_deallocator<std::__1::allocator<std::__1::__hash_node<std::__1::__hash_value_type<Class, UIViewController<FBTarotCardViewControllerProtocol> *(*)(id<FBTarotCardEntityProtocol>, FBTarotToolbox *)>, void *> *> > > {
	__hash_node<std::__1::__hash_value_type<Class, UIViewController<FBTarotCardViewControllerProtocol> *(*)(id<FBTarotCardEntityProtocol>, FBTarotToolbox *)>, void *> __first_;
	bucket_list_deallocator<std::__1::allocator<std::__1::__hash_node<std::__1::__hash_value_type<Class, UIViewController<FBTarotCardViewControllerProtocol> *(*)(id<FBTarotCardEntityProtocol>, FBTarotToolbox *)>, void *> *> > __second_;
} compressed_pair<std::__1::__hash_node<std::__1::__hash_value_type<Class, UIViewController<FBTarotCardViewControllerProtocol> *(*)(id<FBTarotCardEntityProtocol>, FBTarotToolbox *)>, void *> **, std::__1::__bucket_list_deallocator<std::__1::allocator<std::__1::__hash_node<std::__1::__hash_value_type<Class, UIViewController<FBTarotCardViewControllerProtocol> *(*)(id<FBTarotCardEntityProtocol>, FBTarotToolbox *)>, void *> *> > >;

typedef struct unique_ptr<std::__1::__hash_node<std::__1::__hash_value_type<Class, UIViewController<FBTarotCardViewControllerProtocol> *(*)(id<FBTarotCardEntityProtocol>, FBTarotToolbox *)>, void *> *[], std::__1::__bucket_list_deallocator<std::__1::allocator<std::__1::__hash_node<std::__1::__hash_value_type<Class, UIViewController<FBTarotCardViewControllerProtocol> *(*)(id<FBTarotCardEntityProtocol>, FBTarotToolbox *)>, void *> *> > > {
	compressed_pair<std::__1::__hash_node<std::__1::__hash_value_type<Class, UIViewController<FBTarotCardViewControllerProtocol> *(*)(id<FBTarotCardEntityProtocol>, FBTarotToolbox *)>, void *> **, std::__1::__bucket_list_deallocator<std::__1::allocator<std::__1::__hash_node<std::__1::__hash_value_type<Class, UIViewController<FBTarotCardViewControllerProtocol> *(*)(id<FBTarotCardEntityProtocol>, FBTarotToolbox *)>, void *> *> > > __ptr_;
} unique_ptr<std::__1::__hash_node<std::__1::__hash_value_type<Class, UIViewController<FBTarotCardViewControllerProtocol> *(*)(id<FBTarotCardEntityProtocol>, FBTarotToolbox *)>, void *> *[], std::__1::__bucket_list_deallocator<std::__1::allocator<std::__1::__hash_node<std::__1::__hash_value_type<Class, UIViewController<FBTarotCardViewControllerProtocol> *(*)(id<FBTarotCardEntityProtocol>, FBTarotToolbox *)>, void *> *> > >;

typedef struct _hash_table<std::__1::__hash_value_type<Class, UIViewController<FBTarotCardViewControllerProtocol> *(*)(id<FBTarotCardEntityProtocol>, FBTarotToolbox *)>, std::__1::__unordered_map_hasher<Class, std::__1::__hash_value_type<Class, UIViewController<FBTarotCardViewControllerProtocol> *(*)(id<FBTarotCardEntityProtocol>, FBTarotToolbox *)>, std::__1::hash<Class>, true>, std::__1::__unordered_map_equal<Class, std::__1::__hash_value_type<Class, UIViewController<FBTarotCardViewControllerProtocol> *(*)(id<FBTarotCardEntityProtocol>, FBTarotToolbox *)>, std::__1::equal_to<Class>, true>, std::__1::allocator<std::__1::__hash_value_type<Class, UIViewController<FBTarotCardViewControllerProtocol> *(*)(id<FBTarotCardEntityProtocol>, FBTarotToolbox *)> > > {
	unique_ptr<std::__1::__hash_node<std::__1::__hash_value_type<Class, UIViewController<FBTarotCardViewControllerProtocol> *(*)(id<FBTarotCardEntityProtocol>, FBTarotToolbox *)>, void *> *[], std::__1::__bucket_list_deallocator<std::__1::allocator<std::__1::__hash_node<std::__1::__hash_value_type<Class, UIViewController<FBTarotCardViewControllerProtocol> *(*)(id<FBTarotCardEntityProtocol>, FBTarotToolbox *)>, void *> *> > > __bucket_list_;
	compressed_pair<std::__1::__hash_node_base<std::__1::__hash_node<std::__1::__hash_value_type<Class, UIViewController<FBTarotCardViewControllerProtocol> *(*)(id<FBTarotCardEntityProtocol>, FBTarotToolbox *)>, void *> *>, std::__1::allocator<std::__1::__hash_node<std::__1::__hash_value_type<Class, UIViewController<FBTarotCardViewControllerProtocol> *(*)(id<FBTarotCardEntityProtocol>, FBTarotToolbox *)>, void *> > > __p1_;
	compressed_pair<unsigned long, std::__1::__unordered_map_hasher<Class, std::__1::__hash_value_type<Class, UIViewController<FBTarotCardViewControllerProtocol> *(*)(id<FBTarotCardEntityProtocol>, FBTarotToolbox *)>, std::__1::hash<Class>, true> > __p2_;
	compressed_pair<float, std::__1::__unordered_map_equal<Class, std::__1::__hash_value_type<Class, UIViewController<FBTarotCardViewControllerProtocol> *(*)(id<FBTarotCardEntityProtocol>, FBTarotToolbox *)>, std::__1::equal_to<Class>, true> > __p3_;
} hash_table<std::__1::__hash_value_type<Class, UIViewController<FBTarotCardViewControllerProtocol> *(*)(id<FBTarotCardEntityProtocol>, FBTarotToolbox *)>, std::__1::__unordered_map_hasher<Class, std::__1::__hash_value_type<Class, UIViewController<FBTarotCardViewControllerProtocol> *(*)(id<FBTarotCardEntityProtocol>, FBTarotToolbox *)>, std::__1::hash<Class>, true>, std::__1::__unordered_map_equal<Class, std::__1::__hash_value_type<Class, UIViewController<FBTarotCardViewControllerProtocol> *(*)(id<FBTarotCardEntityProtocol>, FBTarotToolbox *)>, std::__1::equal_to<Class>, true>, std::__1::allocator<std::__1::__hash_value_type<Class, UIViewController<FBTarotCardViewControllerProtocol> *(*)(id<FBTarotCardEntityProtocol>, FBTarotToolbox *)> > >;

typedef struct unordered_map<Class, UIViewController<FBTarotCardViewControllerProtocol> *(*)(id<FBTarotCardEntityProtocol>, FBTarotToolbox *), std::__1::hash<Class>, std::__1::equal_to<Class>, std::__1::allocator<std::__1::pair<const Class, UIViewController<FBTarotCardViewControllerProtocol> *(*)(id<FBTarotCardEntityProtocol>, FBTarotToolbox *)> > > {
	hash_table<std::__1::__hash_value_type<Class, UIViewController<FBTarotCardViewControllerProtocol> *(*)(id<FBTarotCardEntityProtocol>, FBTarotToolbox *)>, std::__1::__unordered_map_hasher<Class, std::__1::__hash_value_type<Class, UIViewController<FBTarotCardViewControllerProtocol> *(*)(id<FBTarotCardEntityProtocol>, FBTarotToolbox *)>, std::__1::hash<Class>, true>, std::__1::__unordered_map_equal<Class, std::__1::__hash_value_type<Class, UIViewController<FBTarotCardViewControllerProtocol> *(*)(id<FBTarotCardEntityProtocol>, FBTarotToolbox *)>, std::__1::equal_to<Class>, true>, std::__1::allocator<std::__1::__hash_value_type<Class, UIViewController<FBTarotCardViewControllerProtocol> *(*)(id<FBTarotCardEntityProtocol>, FBTarotToolbox *)> > > __table_;
} unordered_map<Class, UIViewController<FBTarotCardViewControllerProtocol> *(*)(id<FBTarotCardEntityProtocol>, FBTarotToolbox *), std::__1::hash<Class>, std::__1::equal_to<Class>, std::__1::allocator<std::__1::pair<const Class, UIViewController<FBTarotCardViewControllerProtocol> *(*)(id<FBTarotCardEntityProtocol>, FBTarotToolbox *)> > >;

typedef struct shared_ptr<FB::Input<FBTarotCardRenderableAppearance> > {
	Input<FBTarotCardRenderableAppearance> __ptr_;
	__shared_weak_count __cntrl_;
} shared_ptr<FB::Input<FBTarotCardRenderableAppearance> >;

typedef struct FBActorProfilePictureComponentGraphQL {
	FragmentModelTree _fbtree;
} FBActorProfilePictureComponentGraphQL;

typedef struct FBInstreamAdEnabledVideoPlayerComponentActions {
	CKTypedComponentAction<> didStartCommercialBreakAction;
	CKTypedComponentAction<> didEndCommercialBreakAction;
} FBInstreamAdEnabledVideoPlayerComponentActions;

typedef struct _compressed_pair<CKComponentLayoutChild *, std::__1::allocator<CKComponentLayoutChild> > {
	CKComponentLayoutChild __first_;
} compressed_pair<CKComponentLayoutChild *, std::__1::allocator<CKComponentLayoutChild> >;

typedef struct vector<CKComponentLayoutChild, std::__1::allocator<CKComponentLayoutChild> > {
	CKComponentLayoutChild __begin_;
	CKComponentLayoutChild __end_;
	compressed_pair<CKComponentLayoutChild *, std::__1::allocator<CKComponentLayoutChild> > __end_cap_;
} vector<CKComponentLayoutChild, std::__1::allocator<CKComponentLayoutChild> >;

typedef struct FBNativeArticleCoverLayout {
	vector<CKComponentLayoutChild, std::__1::allocator<CKComponentLayoutChild> > children;
	CGSize size;
} FBNativeArticleCoverLayout;

typedef struct FBNativeArticleAttachmentCoverLayoutSpecMetrics {
	/*function pointer*/void* _vptr$FBMetrics;
	BOOL _initialized;
	CGSize coverSize;
	double topAndBottomBorderHeight;
	double leftAndRightBorderWidth;
	double barOffset;
	double barDividerHeight;
	double descriptionPadding;
	double coverBorderHeight;
} FBNativeArticleAttachmentCoverLayoutSpecMetrics;

typedef struct FBFullScreenVideoViewControllerConfig {
	BOOL enableSmartFullscreen;
	BOOL enableWatchAndScroll;
	unsigned long long dismissalStyle;
	BOOL forceAspectFillGravity;
	BOOL preserveViewManagerMuteState;
	BOOL disableManagingInstreamAds;
} FBFullScreenVideoViewControllerConfig;

typedef struct opaqueCMSampleBuffer* opaqueCMSampleBufferRef;

typedef struct FBScrollViewInteractionState {
	BOOL tracking;
	BOOL dragging;
	BOOL decelerating;
	BOOL programmaticallyScrolling;
} FBScrollViewInteractionState;

typedef struct FBScrollViewState {
	CGRect bounds;
	CGPoint contentOffset;
	CGSize contentSize;
	UIEdgeInsets contentInset;
	double viewPortWidth;
	double viewPortHeight;
	FBScrollViewInteractionState interactionState;
} FBScrollViewState;

typedef struct _compressed_pair<FBTrackedVideoContainer *, std::__1::allocator<FBTrackedVideoContainer> > {
	FBTrackedVideoContainer __first_;
} compressed_pair<FBTrackedVideoContainer *, std::__1::allocator<FBTrackedVideoContainer> >;

typedef struct vector<FBTrackedVideoContainer, std::__1::allocator<FBTrackedVideoContainer> > {
	FBTrackedVideoContainer __begin_;
	FBTrackedVideoContainer __end_;
	compressed_pair<FBTrackedVideoContainer *, std::__1::allocator<FBTrackedVideoContainer> > __end_cap_;
} vector<FBTrackedVideoContainer, std::__1::allocator<FBTrackedVideoContainer> >;

typedef const struct FB360PhotoComponentOptions* FB360PhotoComponentOptionsRef;

typedef struct _compressed_pair<FBFlexibleButtonCandidate *, std::__1::allocator<FBFlexibleButtonCandidate> > {
	FBFlexibleButtonCandidate __first_;
} compressed_pair<FBFlexibleButtonCandidate *, std::__1::allocator<FBFlexibleButtonCandidate> >;

typedef struct vector<FBFlexibleButtonCandidate, std::__1::allocator<FBFlexibleButtonCandidate> > {
	FBFlexibleButtonCandidate __begin_;
	FBFlexibleButtonCandidate __end_;
	compressed_pair<FBFlexibleButtonCandidate *, std::__1::allocator<FBFlexibleButtonCandidate> > __end_cap_;
} vector<FBFlexibleButtonCandidate, std::__1::allocator<FBFlexibleButtonCandidate> >;

typedef struct FBFriendingNonPersonCellConfiguration {
	CKTypedComponentAction<> cellAction;
} FBFriendingNonPersonCellConfiguration;

typedef struct shared_ptr<FB::Promise<FB::Functional::Either<NSError *, NSString *> > > {
	Promise<FB::Functional::Either<NSError *, NSString *> > __ptr_;
	__shared_weak_count __cntrl_;
} shared_ptr<FB::Promise<FB::Functional::Either<NSError *, NSString *> > >;

typedef struct PromiseEither<NSError *, NSString *> {
	shared_ptr<FB::Promise<FB::Functional::Either<NSError *, NSString *> > > _promise;
} PromiseEither<NSError *, NSString *>;

typedef struct {
	BOOL shouldShowSaveVideo;
	BOOL canUploadDVR;
	unsigned long long dvrFileFizeInBytes;
	unsigned long long automaticWifiUploadDVRFileSizeThresholdInBytes;
	unsigned long long automaticCellUploadDVRFileSizeThresholdInBytes;
	unsigned long long cellConfirmationDVRFileSizeThresholdInBytes;
	unsigned long long largeDVRFileSizeForSavingThresholdInBytes;
} SCD_Struct_FB280;

typedef struct shared_ptr<facebook::livestreaming::RtmpSSLFactory> {
	RtmpSSLFactory __ptr_;
	__shared_weak_count __cntrl_;
} shared_ptr<facebook::livestreaming::RtmpSSLFactory>;

typedef struct shared_ptr<facebook::mobile::xplat::reachability::ReachabilityAnnouncer> {
	ReachabilityAnnouncer __ptr_;
	__shared_weak_count __cntrl_;
} shared_ptr<facebook::mobile::xplat::reachability::ReachabilityAnnouncer>;

typedef struct atomic<bool> {
	AB __a_;
} atomic<bool>;

typedef struct StreamTimestampGapDetector {
	SCD_Struct_FB100 _lastAudioPTS;
	SCD_Struct_FB100 _lastAudioDuration;
	SCD_Struct_FB100 _accumulatedGap;
	long long _gapCounter;
} StreamTimestampGapDetector;

typedef struct FBAudioStreamingConfig {
	int sampleRate;
	int bitRate;
	int channels;
} FBAudioStreamingConfig;

typedef struct FBVideoStreamingConfig {
	int width;
	int height;
	int bitRate;
	int fps;
	int numberOfFramesInOneSegment;
	BOOL allowBFrames;
	int keyFrameInterval;
} FBVideoStreamingConfig;

typedef struct {
	int sendHardTimeoutMsec;
	int sendCheckTimeoutMsec;
	int queueCapacityInBytes;
	double queueVideoCapacityInSeconds;
	int percentageOfCapacityToDrop;
	int connectionRetryCount;
	int connectionRetryDelay;
	int speedTestPayloadSize;
	int speedTestPayloadChunkSize;
	int speedTestWaitResponseTimeoutInSeconds;
	unsigned long long measurementsIntervalInMs;
	double speedTestMinimumBandwidthThreshold;
	int speedTestRetryMaxCount;
	double speedTestRetryTimeDelay;
	BOOL speedTestDisable;
	BOOL shouldProbeRTTWithPings;
	BOOL useSSLFactory;
} SCD_Struct_FB287;

typedef struct {
	int excellentConnectionMaxBitrate;
	int goodConnectionMaxBitrate;
	int moderateConnectionMaxBitrate;
	int poorConnectionMaxBitrate;
} SCD_Struct_FB288;

typedef struct {
	int availableSpaceThresholdInMB;
	double checkAvailableSpaceIntervalInSeconds;
	double movieFragmentIntervalInSeconds;
	FBVideoStreamingConfig videoConfig;
	FBAudioStreamingConfig audioConfig;
} SCD_Struct_FB289;

typedef struct _compressed_pair<std::__1::pair<std::__1::unordered_map<std::__1::basic_string<char>, std::__1::pair<double, double>, std::__1::hash<std::__1::basic_string<char> >, std::__1::equal_to<std::__1::basic_string<char> >, std::__1::allocator<std::__1::pair<const std::__1::basic_string<char>, std::__1::pair<double, double> > > >, FBAdaptiveBitrateControlParameters> *, std::__1::allocator<std::__1::pair<std::__1::unordered_map<std::__1::basic_string<char>, std::__1::pair<double, double>, std::__1::hash<std::__1::basic_string<char> >, std::__1::equal_to<std::__1::basic_string<char> >, std::__1::allocator<std::__1::pair<const std::__1::basic_string<char>, std::__1::pair<double, double> > > >, FBAdaptiveBitrateControlParameters> > > {
	pair<std::__1::unordered_map<std::__1::basic_string<char>, std::__1::pair<double, double>, std::__1::hash<std::__1::basic_string<char> >, std::__1::equal_to<std::__1::basic_string<char> >, std::__1::allocator<std::__1::pair<const std::__1::basic_string<char>, std::__1::pair<double, double> > > >, FBAdaptiveBitrateControlParameters> __first_;
} compressed_pair<std::__1::pair<std::__1::unordered_map<std::__1::basic_string<char>, std::__1::pair<double, double>, std::__1::hash<std::__1::basic_string<char> >, std::__1::equal_to<std::__1::basic_string<char> >, std::__1::allocator<std::__1::pair<const std::__1::basic_string<char>, std::__1::pair<double, double> > > >, FBAdaptiveBitrateControlParameters> *, std::__1::allocator<std::__1::pair<std::__1::unordered_map<std::__1::basic_string<char>, std::__1::pair<double, double>, std::__1::hash<std::__1::basic_string<char> >, std::__1::equal_to<std::__1::basic_string<char> >, std::__1::allocator<std::__1::pair<const std::__1::basic_string<char>, std::__1::pair<double, double> > > >, FBAdaptiveBitrateControlParameters> > >;

typedef struct vector<std::__1::pair<std::__1::unordered_map<std::__1::basic_string<char>, std::__1::pair<double, double>, std::__1::hash<std::__1::basic_string<char> >, std::__1::equal_to<std::__1::basic_string<char> >, std::__1::allocator<std::__1::pair<const std::__1::basic_string<char>, std::__1::pair<double, double> > > >, FBAdaptiveBitrateControlParameters>, std::__1::allocator<std::__1::pair<std::__1::unordered_map<std::__1::basic_string<char>, std::__1::pair<double, double>, std::__1::hash<std::__1::basic_string<char> >, std::__1::equal_to<std::__1::basic_string<char> >, std::__1::allocator<std::__1::pair<const std::__1::basic_string<char>, std::__1::pair<double, double> > > >, FBAdaptiveBitrateControlParameters> > > {
	pair<std::__1::unordered_map<std::__1::basic_string<char>, std::__1::pair<double, double>, std::__1::hash<std::__1::basic_string<char> >, std::__1::equal_to<std::__1::basic_string<char> >, std::__1::allocator<std::__1::pair<const std::__1::basic_string<char>, std::__1::pair<double, double> > > >, FBAdaptiveBitrateControlParameters> __begin_;
	pair<std::__1::unordered_map<std::__1::basic_string<char>, std::__1::pair<double, double>, std::__1::hash<std::__1::basic_string<char> >, std::__1::equal_to<std::__1::basic_string<char> >, std::__1::allocator<std::__1::pair<const std::__1::basic_string<char>, std::__1::pair<double, double> > > >, FBAdaptiveBitrateControlParameters> __end_;
	compressed_pair<std::__1::pair<std::__1::unordered_map<std::__1::basic_string<char>, std::__1::pair<double, double>, std::__1::hash<std::__1::basic_string<char> >, std::__1::equal_to<std::__1::basic_string<char> >, std::__1::allocator<std::__1::pair<const std::__1::basic_string<char>, std::__1::pair<double, double> > > >, FBAdaptiveBitrateControlParameters> *, std::__1::allocator<std::__1::pair<std::__1::unordered_map<std::__1::basic_string<char>, std::__1::pair<double, double>, std::__1::hash<std::__1::basic_string<char> >, std::__1::equal_to<std::__1::basic_string<char> >, std::__1::allocator<std::__1::pair<const std::__1::basic_string<char>, std::__1::pair<double, double> > > >, FBAdaptiveBitrateControlParameters> > > __end_cap_;
} vector<std::__1::pair<std::__1::unordered_map<std::__1::basic_string<char>, std::__1::pair<double, double>, std::__1::hash<std::__1::basic_string<char> >, std::__1::equal_to<std::__1::basic_string<char> >, std::__1::allocator<std::__1::pair<const std::__1::basic_string<char>, std::__1::pair<double, double> > > >, FBAdaptiveBitrateControlParameters>, std::__1::allocator<std::__1::pair<std::__1::unordered_map<std::__1::basic_string<char>, std::__1::pair<double, double>, std::__1::hash<std::__1::basic_string<char> >, std::__1::equal_to<std::__1::basic_string<char> >, std::__1::allocator<std::__1::pair<const std::__1::basic_string<char>, std::__1::pair<double, double> > > >, FBAdaptiveBitrateControlParameters> > >;

typedef struct FBAdaptiveBitrateConfig {
	BOOL enabled;
	int intervalInVideoFrames;
	int minBitrate;
	int maxBitrate;
	vector<std::__1::pair<std::__1::unordered_map<std::__1::basic_string<char>, std::__1::pair<double, double>, std::__1::hash<std::__1::basic_string<char> >, std::__1::equal_to<std::__1::basic_string<char> >, std::__1::allocator<std::__1::pair<const std::__1::basic_string<char>, std::__1::pair<double, double> > > >, FBAdaptiveBitrateControlParameters>, std::__1::allocator<std::__1::pair<std::__1::unordered_map<std::__1::basic_string<char>, std::__1::pair<double, double>, std::__1::hash<std::__1::basic_string<char> >, std::__1::equal_to<std::__1::basic_string<char> >, std::__1::allocator<std::__1::pair<const std::__1::basic_string<char>, std::__1::pair<double, double> > > >, FBAdaptiveBitrateControlParameters> > > rules;
	int statisticsWindowSize;
	double statisticsSmoothFactor;
	NSString* abrClassName;
	NSString* abrJS;
	int videoBitrateThreshold216;
	int videoBitrateThreshold288;
	int videoBitrateThreshold360;
	int videoBitrateThreshold504;
	int videoBitrateThreshold648;
	int videoBitrateThreshold720;
	int videoBitrateThreshold24fps;
} FBAdaptiveBitrateConfig;

typedef struct {
	NSURL* url;
	NSString* base64ConnectionToken;
	FBAudioStreamingConfig audioConfig;
	FBVideoStreamingConfig videoConfig;
	SCD_Struct_FB287 networkConfig;
	SCD_Struct_FB206 throughputMonitorConfig;
	FBAdaptiveBitrateConfig adaptiveBitrateConfig;
	SCD_Struct_FB288 maxBitrateConfig;
	SCD_Struct_FB289 diskRecordingConfig;
	BOOL recordOnDisk;
	int sendStreamInterruptedIntervalInSeconds;
	BOOL streamRemoveGapsInTimestamps;
} SCD_Struct_FB293;

typedef struct {
	BOOL paddingForHasValue_[1];
	SCD_Struct_FB293 value;
} SCD_Struct_FB294;

typedef struct StorageNonTriviallyDestructible {
	/*function pointer*/void* ;
	BOOL hasValue;
	SCD_Struct_FB294) ;
} StorageNonTriviallyDestructible;

typedef struct Optional<FBVideoBroadcastSessionConfig> {
	StorageNonTriviallyDestructible storage_;
} Optional<FBVideoBroadcastSessionConfig>;

typedef struct {
	id field1;
	id field2;
	SCD_Struct_FB206 field3;
	FBAudioStreamingConfig field4;
	FBVideoStreamingConfig field5;
	SCD_Struct_FB287 field6;
	SCD_Struct_FB288 field7;
	SCD_Struct_FB289 field8;
	FBAdaptiveBitrateConfig field9;
	BOOL field10;
	int field11;
	BOOL field12;
} SCD_Struct_FB297;

typedef struct atomic<FBSize> {
	AFBSize __a_;
} atomic<FBSize>;

typedef struct GLKMatrix4 {
	float m[16];
} GLKMatrix4;

typedef struct Either<NSError *, NSArray<FBManagedFileURL *> *> {
	NSError* _left;
	NSArray* _right;
	BOOL _isLeft;
} Either<NSError *, NSArray<FBManagedFileURL *> *>;

typedef struct DraftConfigurations {
	unsigned long long saveDraftAllowance;
	BOOL replaceCancelWithClearButtonOnEntry;
} DraftConfigurations;

typedef struct {
	CKRelativeDimension field1;
} SCD_Struct_FB302;

typedef struct _compressed_pair<unsigned long, std::__1::allocator<std::__1::__hash_node<std::__1::__hash_value_type<std::__1::pair<FBComposerNavigationDestination, FBComposerNavigationDestination>, FBComposerNavigationDescription ()(FBComposerScope *, FBUserSession *, id, FBPopoverInfo *)>, void *> *> > {
	unsigned long long __first_;
} compressed_pair<unsigned long, std::__1::allocator<std::__1::__hash_node<std::__1::__hash_value_type<std::__1::pair<FBComposerNavigationDestination, FBComposerNavigationDestination>, FBComposerNavigationDescription ()(FBComposerScope *, FBUserSession *, id, FBPopoverInfo *)>, void *> *> >;

typedef struct _compressed_pair<unsigned long, std::__1::__unordered_map_hasher<std::__1::pair<FBComposerNavigationDestination, FBComposerNavigationDestination>, std::__1::__hash_value_type<std::__1::pair<FBComposerNavigationDestination, FBComposerNavigationDestination>, FBComposerNavigationDescription ()(FBComposerScope *, FBUserSession *, id, FBPopoverInfo *)>, NavigationMapHasher, true> > {
	unsigned long long __first_;
} compressed_pair<unsigned long, std::__1::__unordered_map_hasher<std::__1::pair<FBComposerNavigationDestination, FBComposerNavigationDestination>, std::__1::__hash_value_type<std::__1::pair<FBComposerNavigationDestination, FBComposerNavigationDestination>, FBComposerNavigationDescription ()(FBComposerScope *, FBUserSession *, id, FBPopoverInfo *)>, NavigationMapHasher, true> >;

typedef struct _compressed_pair<float, std::__1::__unordered_map_equal<std::__1::pair<FBComposerNavigationDestination, FBComposerNavigationDestination>, std::__1::__hash_value_type<std::__1::pair<FBComposerNavigationDestination, FBComposerNavigationDestination>, FBComposerNavigationDescription ()(FBComposerScope *, FBUserSession *, id, FBPopoverInfo *)>, std::__1::equal_to<std::__1::pair<FBComposerNavigationDestination, FBComposerNavigationDestination> >, true> > {
	float __first_;
} compressed_pair<float, std::__1::__unordered_map_equal<std::__1::pair<FBComposerNavigationDestination, FBComposerNavigationDestination>, std::__1::__hash_value_type<std::__1::pair<FBComposerNavigationDestination, FBComposerNavigationDestination>, FBComposerNavigationDescription ()(FBComposerScope *, FBUserSession *, id, FBPopoverInfo *)>, std::__1::equal_to<std::__1::pair<FBComposerNavigationDestination, FBComposerNavigationDestination> >, true> >;

typedef struct _hash_node_base<std::__1::__hash_node<std::__1::__hash_value_type<std::__1::pair<FBComposerNavigationDestination, FBComposerNavigationDestination>, FBComposerNavigationDescription ()(FBComposerScope *, FBUserSession *, id, FBPopoverInfo *)>, void *> *> {
	__hash_node<std::__1::__hash_value_type<std::__1::pair<FBComposerNavigationDestination, FBComposerNavigationDestination>, FBComposerNavigationDescription ()(FBComposerScope *, FBUserSession *, id, FBPopoverInfo *)>, void *> __next_;
} hash_node_base<std::__1::__hash_node<std::__1::__hash_value_type<std::__1::pair<FBComposerNavigationDestination, FBComposerNavigationDestination>, FBComposerNavigationDescription ()(FBComposerScope *, FBUserSession *, id, FBPopoverInfo *)>, void *> *>;

typedef struct _compressed_pair<std::__1::__hash_node_base<std::__1::__hash_node<std::__1::__hash_value_type<std::__1::pair<FBComposerNavigationDestination, FBComposerNavigationDestination>, FBComposerNavigationDescription ()(FBComposerScope *, FBUserSession *, id, FBPopoverInfo *)>, void *> *>, std::__1::allocator<std::__1::__hash_node<std::__1::__hash_value_type<std::__1::pair<FBComposerNavigationDestination, FBComposerNavigationDestination>, FBComposerNavigationDescription ()(FBComposerScope *, FBUserSession *, id, FBPopoverInfo *)>, void *> > > {
	hash_node_base<std::__1::__hash_node<std::__1::__hash_value_type<std::__1::pair<FBComposerNavigationDestination, FBComposerNavigationDestination>, FBComposerNavigationDescription ()(FBComposerScope *, FBUserSession *, id, FBPopoverInfo *)>, void *> *> __first_;
} compressed_pair<std::__1::__hash_node_base<std::__1::__hash_node<std::__1::__hash_value_type<std::__1::pair<FBComposerNavigationDestination, FBComposerNavigationDestination>, FBComposerNavigationDescription ()(FBComposerScope *, FBUserSession *, id, FBPopoverInfo *)>, void *> *>, std::__1::allocator<std::__1::__hash_node<std::__1::__hash_value_type<std::__1::pair<FBComposerNavigationDestination, FBComposerNavigationDestination>, FBComposerNavigationDescription ()(FBComposerScope *, FBUserSession *, id, FBPopoverInfo *)>, void *> > >;

typedef struct _bucket_list_deallocator<std::__1::allocator<std::__1::__hash_node<std::__1::__hash_value_type<std::__1::pair<FBComposerNavigationDestination, FBComposerNavigationDestination>, FBComposerNavigationDescription ()(FBComposerScope *, FBUserSession *, id, FBPopoverInfo *)>, void *> *> > {
	compressed_pair<unsigned long, std::__1::allocator<std::__1::__hash_node<std::__1::__hash_value_type<std::__1::pair<FBComposerNavigationDestination, FBComposerNavigationDestination>, FBComposerNavigationDescription ()(FBComposerScope *, FBUserSession *, id, FBPopoverInfo *)>, void *> *> > __data_;
} bucket_list_deallocator<std::__1::allocator<std::__1::__hash_node<std::__1::__hash_value_type<std::__1::pair<FBComposerNavigationDestination, FBComposerNavigationDestination>, FBComposerNavigationDescription ()(FBComposerScope *, FBUserSession *, id, FBPopoverInfo *)>, void *> *> >;

typedef struct _compressed_pair<std::__1::__hash_node<std::__1::__hash_value_type<std::__1::pair<FBComposerNavigationDestination, FBComposerNavigationDestination>, FBComposerNavigationDescription ()(FBComposerScope *, FBUserSession *, id, FBPopoverInfo *)>, void *> **, std::__1::__bucket_list_deallocator<std::__1::allocator<std::__1::__hash_node<std::__1::__hash_value_type<std::__1::pair<FBComposerNavigationDestination, FBComposerNavigationDestination>, FBComposerNavigationDescription ()(FBComposerScope *, FBUserSession *, id, FBPopoverInfo *)>, void *> *> > > {
	__hash_node<std::__1::__hash_value_type<std::__1::pair<FBComposerNavigationDestination, FBComposerNavigationDestination>, FBComposerNavigationDescription ()(FBComposerScope *, FBUserSession *, id, FBPopoverInfo *)>, void *> __first_;
	bucket_list_deallocator<std::__1::allocator<std::__1::__hash_node<std::__1::__hash_value_type<std::__1::pair<FBComposerNavigationDestination, FBComposerNavigationDestination>, FBComposerNavigationDescription ()(FBComposerScope *, FBUserSession *, id, FBPopoverInfo *)>, void *> *> > __second_;
} compressed_pair<std::__1::__hash_node<std::__1::__hash_value_type<std::__1::pair<FBComposerNavigationDestination, FBComposerNavigationDestination>, FBComposerNavigationDescription ()(FBComposerScope *, FBUserSession *, id, FBPopoverInfo *)>, void *> **, std::__1::__bucket_list_deallocator<std::__1::allocator<std::__1::__hash_node<std::__1::__hash_value_type<std::__1::pair<FBComposerNavigationDestination, FBComposerNavigationDestination>, FBComposerNavigationDescription ()(FBComposerScope *, FBUserSession *, id, FBPopoverInfo *)>, void *> *> > >;

typedef struct unique_ptr<std::__1::__hash_node<std::__1::__hash_value_type<std::__1::pair<FBComposerNavigationDestination, FBComposerNavigationDestination>, FBComposerNavigationDescription ()(FBComposerScope *, FBUserSession *, id, FBPopoverInfo *)>, void *> *[], std::__1::__bucket_list_deallocator<std::__1::allocator<std::__1::__hash_node<std::__1::__hash_value_type<std::__1::pair<FBComposerNavigationDestination, FBComposerNavigationDestination>, FBComposerNavigationDescription ()(FBComposerScope *, FBUserSession *, id, FBPopoverInfo *)>, void *> *> > > {
	compressed_pair<std::__1::__hash_node<std::__1::__hash_value_type<std::__1::pair<FBComposerNavigationDestination, FBComposerNavigationDestination>, FBComposerNavigationDescription ()(FBComposerScope *, FBUserSession *, id, FBPopoverInfo *)>, void *> **, std::__1::__bucket_list_deallocator<std::__1::allocator<std::__1::__hash_node<std::__1::__hash_value_type<std::__1::pair<FBComposerNavigationDestination, FBComposerNavigationDestination>, FBComposerNavigationDescription ()(FBComposerScope *, FBUserSession *, id, FBPopoverInfo *)>, void *> *> > > __ptr_;
} unique_ptr<std::__1::__hash_node<std::__1::__hash_value_type<std::__1::pair<FBComposerNavigationDestination, FBComposerNavigationDestination>, FBComposerNavigationDescription ()(FBComposerScope *, FBUserSession *, id, FBPopoverInfo *)>, void *> *[], std::__1::__bucket_list_deallocator<std::__1::allocator<std::__1::__hash_node<std::__1::__hash_value_type<std::__1::pair<FBComposerNavigationDestination, FBComposerNavigationDestination>, FBComposerNavigationDescription ()(FBComposerScope *, FBUserSession *, id, FBPopoverInfo *)>, void *> *> > >;

typedef struct _hash_table<std::__1::__hash_value_type<std::__1::pair<FBComposerNavigationDestination, FBComposerNavigationDestination>, FBComposerNavigationDescription ()(FBComposerScope *, FBUserSession *, id, FBPopoverInfo *)>, std::__1::__unordered_map_hasher<std::__1::pair<FBComposerNavigationDestination, FBComposerNavigationDestination>, std::__1::__hash_value_type<std::__1::pair<FBComposerNavigationDestination, FBComposerNavigationDestination>, FBComposerNavigationDescription ()(FBComposerScope *, FBUserSession *, id, FBPopoverInfo *)>, NavigationMapHasher, true>, std::__1::__unordered_map_equal<std::__1::pair<FBComposerNavigationDestination, FBComposerNavigationDestination>, std::__1::__hash_value_type<std::__1::pair<FBComposerNavigationDestination, FBComposerNavigationDestination>, FBComposerNavigationDescription ()(FBComposerScope *, FBUserSession *, id, FBPopoverInfo *)>, std::__1::equal_to<std::__1::pair<FBComposerNavigationDestination, FBComposerNavigationDestination> >, true>, std::__1::allocator<std::__1::__hash_value_type<std::__1::pair<FBComposerNavigationDestination, FBComposerNavigationDestination>, FBComposerNavigationDescription ()(FBComposerScope *, FBUserSession *, id, FBPopoverInfo *)> > > {
	unique_ptr<std::__1::__hash_node<std::__1::__hash_value_type<std::__1::pair<FBComposerNavigationDestination, FBComposerNavigationDestination>, FBComposerNavigationDescription ()(FBComposerScope *, FBUserSession *, id, FBPopoverInfo *)>, void *> *[], std::__1::__bucket_list_deallocator<std::__1::allocator<std::__1::__hash_node<std::__1::__hash_value_type<std::__1::pair<FBComposerNavigationDestination, FBComposerNavigationDestination>, FBComposerNavigationDescription ()(FBComposerScope *, FBUserSession *, id, FBPopoverInfo *)>, void *> *> > > __bucket_list_;
	compressed_pair<std::__1::__hash_node_base<std::__1::__hash_node<std::__1::__hash_value_type<std::__1::pair<FBComposerNavigationDestination, FBComposerNavigationDestination>, FBComposerNavigationDescription ()(FBComposerScope *, FBUserSession *, id, FBPopoverInfo *)>, void *> *>, std::__1::allocator<std::__1::__hash_node<std::__1::__hash_value_type<std::__1::pair<FBComposerNavigationDestination, FBComposerNavigationDestination>, FBComposerNavigationDescription ()(FBComposerScope *, FBUserSession *, id, FBPopoverInfo *)>, void *> > > __p1_;
	compressed_pair<unsigned long, std::__1::__unordered_map_hasher<std::__1::pair<FBComposerNavigationDestination, FBComposerNavigationDestination>, std::__1::__hash_value_type<std::__1::pair<FBComposerNavigationDestination, FBComposerNavigationDestination>, FBComposerNavigationDescription ()(FBComposerScope *, FBUserSession *, id, FBPopoverInfo *)>, NavigationMapHasher, true> > __p2_;
	compressed_pair<float, std::__1::__unordered_map_equal<std::__1::pair<FBComposerNavigationDestination, FBComposerNavigationDestination>, std::__1::__hash_value_type<std::__1::pair<FBComposerNavigationDestination, FBComposerNavigationDestination>, FBComposerNavigationDescription ()(FBComposerScope *, FBUserSession *, id, FBPopoverInfo *)>, std::__1::equal_to<std::__1::pair<FBComposerNavigationDestination, FBComposerNavigationDestination> >, true> > __p3_;
} hash_table<std::__1::__hash_value_type<std::__1::pair<FBComposerNavigationDestination, FBComposerNavigationDestination>, FBComposerNavigationDescription ()(FBComposerScope *, FBUserSession *, id, FBPopoverInfo *)>, std::__1::__unordered_map_hasher<std::__1::pair<FBComposerNavigationDestination, FBComposerNavigationDestination>, std::__1::__hash_value_type<std::__1::pair<FBComposerNavigationDestination, FBComposerNavigationDestination>, FBComposerNavigationDescription ()(FBComposerScope *, FBUserSession *, id, FBPopoverInfo *)>, NavigationMapHasher, true>, std::__1::__unordered_map_equal<std::__1::pair<FBComposerNavigationDestination, FBComposerNavigationDestination>, std::__1::__hash_value_type<std::__1::pair<FBComposerNavigationDestination, FBComposerNavigationDestination>, FBComposerNavigationDescription ()(FBComposerScope *, FBUserSession *, id, FBPopoverInfo *)>, std::__1::equal_to<std::__1::pair<FBComposerNavigationDestination, FBComposerNavigationDestination> >, true>, std::__1::allocator<std::__1::__hash_value_type<std::__1::pair<FBComposerNavigationDestination, FBComposerNavigationDestination>, FBComposerNavigationDescription ()(FBComposerScope *, FBUserSession *, id, FBPopoverInfo *)> > >;

typedef struct unordered_map<std::__1::pair<FBComposerNavigationDestination, FBComposerNavigationDestination>, FBComposerNavigationDescription ()(FBComposerScope *, FBUserSession *, id, FBPopoverInfo *), NavigationMapHasher, std::__1::equal_to<std::__1::pair<FBComposerNavigationDestination, FBComposerNavigationDestination> >, std::__1::allocator<std::__1::pair<const std::__1::pair<FBComposerNavigationDestination, FBComposerNavigationDestination>, FBComposerNavigationDescription ()(FBComposerScope *, FBUserSession *, id, FBPopoverInfo *)> > > {
	hash_table<std::__1::__hash_value_type<std::__1::pair<FBComposerNavigationDestination, FBComposerNavigationDestination>, FBComposerNavigationDescription ()(FBComposerScope *, FBUserSession *, id, FBPopoverInfo *)>, std::__1::__unordered_map_hasher<std::__1::pair<FBComposerNavigationDestination, FBComposerNavigationDestination>, std::__1::__hash_value_type<std::__1::pair<FBComposerNavigationDestination, FBComposerNavigationDestination>, FBComposerNavigationDescription ()(FBComposerScope *, FBUserSession *, id, FBPopoverInfo *)>, NavigationMapHasher, true>, std::__1::__unordered_map_equal<std::__1::pair<FBComposerNavigationDestination, FBComposerNavigationDestination>, std::__1::__hash_value_type<std::__1::pair<FBComposerNavigationDestination, FBComposerNavigationDestination>, FBComposerNavigationDescription ()(FBComposerScope *, FBUserSession *, id, FBPopoverInfo *)>, std::__1::equal_to<std::__1::pair<FBComposerNavigationDestination, FBComposerNavigationDestination> >, true>, std::__1::allocator<std::__1::__hash_value_type<std::__1::pair<FBComposerNavigationDestination, FBComposerNavigationDestination>, FBComposerNavigationDescription ()(FBComposerScope *, FBUserSession *, id, FBPopoverInfo *)> > > __table_;
} unordered_map<std::__1::pair<FBComposerNavigationDestination, FBComposerNavigationDestination>, FBComposerNavigationDescription ()(FBComposerScope *, FBUserSession *, id, FBPopoverInfo *), NavigationMapHasher, std::__1::equal_to<std::__1::pair<FBComposerNavigationDestination, FBComposerNavigationDestination> >, std::__1::allocator<std::__1::pair<const std::__1::pair<FBComposerNavigationDestination, FBComposerNavigationDestination>, FBComposerNavigationDescription ()(FBComposerScope *, FBUserSession *, id, FBPopoverInfo *)> > >;

typedef struct PostCompositionContents {
	vector<FBComposer::CollectionChangeSetUpdating::ItemUpdateHandler<FBComposerCompositionState *, FBComposerPostCompositionItem *>, std::__1::allocator<FBComposer::CollectionChangeSetUpdating::ItemUpdateHandler<FBComposerCompositionState *, FBComposerPostCompositionItem *> > > updateItems;
	UIColor* postCompositionExtendedColor;
} PostCompositionContents;

typedef struct _tuple_impl<std::__1::__tuple_indices<0, 1, 2>, std::__1::mutex, bool, id> {
	mutex value;
	BOOL value;
	id value;
} tuple_impl<std::__1::__tuple_indices<0, 1, 2>, std::__1::mutex, bool, id>;

typedef struct tuple<std::__1::mutex, bool, id> {
	tuple_impl<std::__1::__tuple_indices<0, 1, 2>, std::__1::mutex, bool, id> base_;
} tuple<std::__1::mutex, bool, id>;

typedef struct recursive_mutex {
	opaque_pthread_mutex_t __m_;
} recursive_mutex;

typedef struct lazy_provider<FBComposerScopeSingletonProvider, FBAutoTaggingController *> {
	mutex _mutex;
	FBComposerScopeSingletonProvider* _provider;
	BOOL _invalidated;
} lazy_provider<FBComposerScopeSingletonProvider, FBAutoTaggingController *>;

typedef struct lazy_provider<FBComposerScopeSingletonProvider, UIViewController<FBComposerViewController> *> {
	mutex _mutex;
	FBComposerScopeSingletonProvider* _provider;
	BOOL _invalidated;
} lazy_provider<FBComposerScopeSingletonProvider, UIViewController<FBComposerViewController> *>;

typedef struct lazy_provider<FBComposerScopeSingletonProvider, id<FBComposerCompositionStateChangedListeningRegister>> {
	mutex _mutex;
	FBComposerScopeSingletonProvider* _provider;
	BOOL _invalidated;
} lazy_provider<FBComposerScopeSingletonProvider, id<FBComposerCompositionStateChangedListeningRegister>>;

typedef struct lazy_provider<FBComposerScopeSingletonProvider, FBComposerGroupCommerceCategoryPickerController *> {
	mutex _mutex;
	FBComposerScopeSingletonProvider* _provider;
	BOOL _invalidated;
} lazy_provider<FBComposerScopeSingletonProvider, FBComposerGroupCommerceCategoryPickerController *>;

typedef struct lazy_provider<FBComposerScopeSingletonProvider, FBComposerGroupCommercePostInterceptController *> {
	mutex _mutex;
	FBComposerScopeSingletonProvider* _provider;
	BOOL _invalidated;
} lazy_provider<FBComposerScopeSingletonProvider, FBComposerGroupCommercePostInterceptController *>;

typedef struct lazy_provider<FBComposerScopeSingletonProvider, FBComposerDatePickerController *> {
	mutex _mutex;
	FBComposerScopeSingletonProvider* _provider;
	BOOL _invalidated;
} lazy_provider<FBComposerScopeSingletonProvider, FBComposerDatePickerController *>;

typedef struct lazy_provider<FBComposerScopeSingletonProvider, FBCompositionLinkShareController *> {
	mutex _mutex;
	FBComposerScopeSingletonProvider* _provider;
	BOOL _invalidated;
} lazy_provider<FBComposerScopeSingletonProvider, FBCompositionLinkShareController *>;

typedef struct lazy_provider<FBComposerScopeSingletonProvider, FBComposerLifecycleLoggingCoordinator *> {
	mutex _mutex;
	FBComposerScopeSingletonProvider* _provider;
	BOOL _invalidated;
} lazy_provider<FBComposerScopeSingletonProvider, FBComposerLifecycleLoggingCoordinator *>;

typedef struct lazy_provider<FBComposerScopeSingletonProvider, FBComposerLogger *> {
	mutex _mutex;
	FBComposerScopeSingletonProvider* _provider;
	BOOL _invalidated;
} lazy_provider<FBComposerScopeSingletonProvider, FBComposerLogger *>;

typedef struct lazy_provider<FBComposerScopeSingletonProvider, FBComposerMarketplacePostInterceptController *> {
	mutex _mutex;
	FBComposerScopeSingletonProvider* _provider;
	BOOL _invalidated;
} lazy_provider<FBComposerScopeSingletonProvider, FBComposerMarketplacePostInterceptController *>;

typedef struct lazy_provider<FBComposerScopeObjectProvider, FBComposerMLEIconPickerController *> {
	mutex _mutex;
	FBComposerScopeObjectProvider* _provider;
	BOOL _invalidated;
} lazy_provider<FBComposerScopeObjectProvider, FBComposerMLEIconPickerController *>;

typedef struct lazy_provider<FBComposerScopeSingletonProvider, FBMemModelPhotoTaggingAssetObserver *> {
	mutex _mutex;
	FBComposerScopeSingletonProvider* _provider;
	BOOL _invalidated;
} lazy_provider<FBComposerScopeSingletonProvider, FBMemModelPhotoTaggingAssetObserver *>;

typedef struct lazy_provider<FBComposerScopeSingletonProvider, FBComposerPostCompositionController *> {
	mutex _mutex;
	FBComposerScopeSingletonProvider* _provider;
	BOOL _invalidated;
} lazy_provider<FBComposerScopeSingletonProvider, FBComposerPostCompositionController *>;

typedef struct lazy_provider<FBComposerScopeSingletonProvider, FBComposerPostOptionsPickerController *> {
	mutex _mutex;
	FBComposerScopeSingletonProvider* _provider;
	BOOL _invalidated;
} lazy_provider<FBComposerScopeSingletonProvider, FBComposerPostOptionsPickerController *>;

typedef struct lazy_provider<FBComposerScopeSingletonProvider, FBMediaPickerDataSourceManager *> {
	mutex _mutex;
	FBComposerScopeSingletonProvider* _provider;
	BOOL _invalidated;
} lazy_provider<FBComposerScopeSingletonProvider, FBMediaPickerDataSourceManager *>;

typedef struct lazy_provider<FBComposerScopeSingletonProvider, FBMediaPickerSession *> {
	mutex _mutex;
	FBComposerScopeSingletonProvider* _provider;
	BOOL _invalidated;
} lazy_provider<FBComposerScopeSingletonProvider, FBMediaPickerSession *>;

typedef struct lazy_provider<FBComposerScopeSingletonProvider, FBComposerMediaPickerTaggingSearchProvider *> {
	mutex _mutex;
	FBComposerScopeSingletonProvider* _provider;
	BOOL _invalidated;
} lazy_provider<FBComposerScopeSingletonProvider, FBComposerMediaPickerTaggingSearchProvider *>;

typedef struct lazy_provider<FBComposerScopeSingletonProvider, FBComposerMoviesEditorManager *> {
	mutex _mutex;
	FBComposerScopeSingletonProvider* _provider;
	BOOL _invalidated;
} lazy_provider<FBComposerScopeSingletonProvider, FBComposerMoviesEditorManager *>;

typedef struct lazy_provider<FBComposerScopeSingletonProvider, FBMediaTraitsObserver *> {
	mutex _mutex;
	FBComposerScopeSingletonProvider* _provider;
	BOOL _invalidated;
} lazy_provider<FBComposerScopeSingletonProvider, FBMediaTraitsObserver *>;

typedef struct lazy_provider<FBComposerScopeSingletonProvider, id<FBMediaUploadItemManagerProtocol>> {
	mutex _mutex;
	FBComposerScopeSingletonProvider* _provider;
	BOOL _invalidated;
} lazy_provider<FBComposerScopeSingletonProvider, id<FBMediaUploadItemManagerProtocol>>;

typedef struct lazy_provider<FBComposerScopeSingletonProvider, FBComposerMutableTaggableCollectionProvider *> {
	mutex _mutex;
	FBComposerScopeSingletonProvider* _provider;
	BOOL _invalidated;
} lazy_provider<FBComposerScopeSingletonProvider, FBComposerMutableTaggableCollectionProvider *>;

typedef struct lazy_provider<FBComposerScopeSingletonProvider, FBAudienceEducationEligibilityController *> {
	mutex _mutex;
	FBComposerScopeSingletonProvider* _provider;
	BOOL _invalidated;
} lazy_provider<FBComposerScopeSingletonProvider, FBAudienceEducationEligibilityController *>;

typedef struct lazy_provider<FBComposerScopeSingletonProvider, FBComposerSponsorPickerController *> {
	mutex _mutex;
	FBComposerScopeSingletonProvider* _provider;
	BOOL _invalidated;
} lazy_provider<FBComposerScopeSingletonProvider, FBComposerSponsorPickerController *>;

typedef struct lazy_provider<FBComposerScopeSingletonProvider, FBComposerPromptMediaAttachmentPickerController *> {
	mutex _mutex;
	FBComposerScopeSingletonProvider* _provider;
	BOOL _invalidated;
} lazy_provider<FBComposerScopeSingletonProvider, FBComposerPromptMediaAttachmentPickerController *>;

typedef struct lazy_provider<FBComposerScopeSingletonProvider, FBComposerVideoTaggingController *> {
	mutex _mutex;
	FBComposerScopeSingletonProvider* _provider;
	BOOL _invalidated;
} lazy_provider<FBComposerScopeSingletonProvider, FBComposerVideoTaggingController *>;

typedef struct composerAudiencePickerFlags {
	unsigned delegateSelectedPrivacyDidChange : 1;
	unsigned delegateUserDidMakeSelection : 1;
} composerAudiencePickerFlags;

typedef struct shared_ptr<FB::Promise<AuthenticationCompletedInformation> > {
	Promise<AuthenticationCompletedInformation> __ptr_;
	__shared_weak_count __cntrl_;
} shared_ptr<FB::Promise<AuthenticationCompletedInformation> >;

typedef struct shared_ptr<FB::Promise<SessionBeganInformation> > {
	Promise<SessionBeganInformation> __ptr_;
	__shared_weak_count __cntrl_;
} shared_ptr<FB::Promise<SessionBeganInformation> >;

typedef struct FBDeferredOpenURLAction {
	NSURL* URL;
	NSString* sourceApplication;
	id annotation;
} FBDeferredOpenURLAction;

typedef struct FBBookmarksTableHeaderViewOptions {
	NSString* editButtonTitle;
	BOOL hideEditButton;
	double horizontalPadding;
	unsigned long long editStyle;
} FBBookmarksTableHeaderViewOptions;

typedef struct {
	id field1;
	id field2;
	id field3;
} SCD_Struct_FB347;

typedef struct _compressed_pair<NSArray<NSString *> *__strong **, std::__1::allocator<NSArray<NSString *> *__strong *> > {
	id __first_;
} compressed_pair<NSArray<NSString *> *__strong **, std::__1::allocator<NSArray<NSString *> *__strong *> >;

typedef struct _compressed_pair<unsigned long, std::__1::allocator<NSArray<NSString *> *> > {
	unsigned long long __first_;
} compressed_pair<unsigned long, std::__1::allocator<NSArray<NSString *> *> >;

typedef struct _split_buffer<NSArray<NSString *> *__strong *, std::__1::allocator<NSArray<NSString *> *__strong *> > {
	id __first_;
	id __begin_;
	id __end_;
	compressed_pair<NSArray<NSString *> *__strong **, std::__1::allocator<NSArray<NSString *> *__strong *> > __end_cap_;
} split_buffer<NSArray<NSString *> *__strong *, std::__1::allocator<NSArray<NSString *> *__strong *> >;

typedef struct deque<NSArray<NSString *> *, std::__1::allocator<NSArray<NSString *> *> > {
	split_buffer<NSArray<NSString *> *__strong *, std::__1::allocator<NSArray<NSString *> *__strong *> > __map_;
	unsigned long long __start_;
	compressed_pair<unsigned long, std::__1::allocator<NSArray<NSString *> *> > __size_;
} deque<NSArray<NSString *> *, std::__1::allocator<NSArray<NSString *> *> >;

typedef struct queue<NSArray<NSString *> *, std::__1::deque<NSArray<NSString *> *, std::__1::allocator<NSArray<NSString *> *> > > {
	deque<NSArray<NSString *> *, std::__1::allocator<NSArray<NSString *> *> > c;
} queue<NSArray<NSString *> *, std::__1::deque<NSArray<NSString *> *, std::__1::allocator<NSArray<NSString *> *> > >;

typedef struct FBPickerViewControllerNavigationBarButton {
	BOOL show;
	BOOL enabled;
	NSString* title;
	UIColor* tintColor;
	long long itemStyle;
	/*^block*/id actionHandler;
} FBPickerViewControllerNavigationBarButton;

typedef struct FBPickerViewControllerNavigationBar {
	NSString* title;
	FBPickerViewControllerNavigationBarButton leftButton;
	FBPickerViewControllerNavigationBarButton rightButton;
} FBPickerViewControllerNavigationBar;

typedef struct CGAffineTransform {
	double a;
	double b;
	double c;
	double d;
	double tx;
	double ty;
} CGAffineTransform;

typedef struct FBAvatarWithSecondaryActionsCellLayout {
	double verticalPadding;
	double horizontalPadding;
	double namePadding;
	double firstCellPaddingTop;
	double profilePicSize;
	double presencePaddingLeft;
	double presencePaddingTop;
	double borderPaddingLeft;
	double borderPaddingRight;
} FBAvatarWithSecondaryActionsCellLayout;

typedef struct FBEventTicketingFlowRenderingOptions {
	BOOL suppressOffsiteTicketLink;
} FBEventTicketingFlowRenderingOptions;

typedef struct FBTopicFeedsTableViewCellOptions {
	unsigned long long accessoryComponentType;
	BOOL highlightBackgroundWhenSelected;
} FBTopicFeedsTableViewCellOptions;

typedef struct FBPageServiceSettingsComponentActions {
	CKTypedComponentAction<> settingsButtonTappedAction;
	CKTypedComponentAction<> toggleSwitchTappedAction;
} FBPageServiceSettingsComponentActions;

typedef struct FBAppInviteCellComponentActions {
	CKTypedComponentAction<> chevronMenuAction;
	CKTypedComponentAction<> deleteInviteAction;
	CKTypedComponentAction<> blockSenderAction;
	CKTypedComponentAction<> blockAppAction;
	CKTypedComponentAction<> reportAction;
	CKTypedComponentAction<> senderAction;
	CKTypedComponentAction<> senderMessageAction;
	CKTypedComponentAction<> previewImageAction;
	CKTypedComponentAction<> installAction;
	CKTypedComponentAction<> visibilityChangedAction;
} FBAppInviteCellComponentActions;

typedef struct FBAppInviteSenderContentCellComponentActions {
	CKTypedComponentAction<> senderAction;
	CKTypedComponentAction<> senderMessageAction;
	CKTypedComponentAction<> previewImageAction;
	CKTypedComponentAction<> fullyVisibleAction;
} FBAppInviteSenderContentCellComponentActions;

typedef struct FBAppInviteSenderContentComponentActions {
	CKTypedComponentAction<> senderAction;
	CKTypedComponentAction<> senderMessageAction;
	CKTypedComponentAction<> previewImageAction;
	CKTypedComponentAction<> visibleInviteChangedAction;
} FBAppInviteSenderContentComponentActions;

typedef struct FBAppInviteChevronMenuComponentActions {
	CKTypedComponentAction<> menuAction;
	CKTypedComponentAction<> deleteAction;
	CKTypedComponentAction<> blockSenderAction;
	CKTypedComponentAction<> blockAppAction;
	CKTypedComponentAction<> reportAction;
} FBAppInviteChevronMenuComponentActions;

typedef struct FBAppInvitePopoverComponentActions {
	CKTypedComponentAction<> chevronMenuAction;
	CKTypedComponentAction<> deleteInviteAction;
	CKTypedComponentAction<> blockSenderAction;
	CKTypedComponentAction<> blockAppAction;
	CKTypedComponentAction<> reportInviteAction;
	CKTypedComponentAction<> installButtonAction;
	CKTypedComponentAction<> senderAction;
	CKTypedComponentAction<> previewImageAction;
} FBAppInvitePopoverComponentActions;

typedef struct FBCollectionComponentOptions {
	UIColor* backgroundColor;
	BOOL hasInitialLoadingView;
	BOOL hasPullToRefresh;
	BOOL hasViewStateManager;
	UIView<FBLoadingView>* initialLoadingView;
	NSString* noContentTextString;
	UIView* noContentView;
	double bottomScrollBuffer;
	BOOL shouldCancelTouchesWhenScrolling;
	UICollectionViewFlowLayout* flowLayout;
	double itemWidth;
	BOOL alwaysBounceVertical;
	BOOL showsHorizontalScrollIndicator;
	double contentWidth;
	<FBListViewKitScrollEventListener>* scrollEventListener;
	NSDictionary* componentContextFunctionData;
	NSDictionary* sectionComponentProviderFunctionData;
} FBCollectionComponentOptions;

typedef struct FBComponentViewControllerConfiguration {
	NSDictionary* componentContextFunctionData;
	NSDictionary* componentProviderFunctionData;
} FBComponentViewControllerConfiguration;

typedef struct FBGreetingCardComponentGraphQL {
	FragmentModelTree _fbtree;
} FBGreetingCardComponentGraphQL;

typedef struct _compressed_pair<std::__1::unordered_map<FBFeedImpressionEdgeViewState *, std::__1::shared_ptr<std::__1::vector<FBFeedSampledImpressionControllerEdgeTransition, std::__1::allocator<FBFeedSampledImpressionControllerEdgeTransition> > >, EdgeStateHash, EdgeStateEqual, std::__1::allocator<std::__1::pair<FBFeedImpressionEdgeViewState *const, std::__1::shared_ptr<std::__1::vector<FBFeedSampledImpressionControllerEdgeTransition, std::__1::allocator<FBFeedSampledImpressionControllerEdgeTransition> > > > > > *, std::__1::default_delete<std::__1::unordered_map<FBFeedImpressionEdgeViewState *, std::__1::shared_ptr<std::__1::vector<FBFeedSampledImpressionControllerEdgeTransition, std::__1::allocator<FBFeedSampledImpressionControllerEdgeTransition> > >, EdgeStateHash, EdgeStateEqual, std::__1::allocator<std::__1::pair<FBFeedImpressionEdgeViewState *const, std::__1::shared_ptr<std::__1::vector<FBFeedSampledImpressionControllerEdgeTransition, std::__1::allocator<FBFeedSampledImpressionControllerEdgeTransition> > > > > > > > {
	unordered_map<FBFeedImpressionEdgeViewState *, std::__1::shared_ptr<std::__1::vector<FBFeedSampledImpressionControllerEdgeTransition, std::__1::allocator<FBFeedSampledImpressionControllerEdgeTransition> > >, EdgeStateHash, EdgeStateEqual, std::__1::allocator<std::__1::pair<FBFeedImpressionEdgeViewState *const, std::__1::shared_ptr<std::__1::vector<FBFeedSampledImpressionControllerEdgeTransition, std::__1::allocator<FBFeedSampledImpressionControllerEdgeTransition> > > > > > __first_;
} compressed_pair<std::__1::unordered_map<FBFeedImpressionEdgeViewState *, std::__1::shared_ptr<std::__1::vector<FBFeedSampledImpressionControllerEdgeTransition, std::__1::allocator<FBFeedSampledImpressionControllerEdgeTransition> > >, EdgeStateHash, EdgeStateEqual, std::__1::allocator<std::__1::pair<FBFeedImpressionEdgeViewState *const, std::__1::shared_ptr<std::__1::vector<FBFeedSampledImpressionControllerEdgeTransition, std::__1::allocator<FBFeedSampledImpressionControllerEdgeTransition> > > > > > *, std::__1::default_delete<std::__1::unordered_map<FBFeedImpressionEdgeViewState *, std::__1::shared_ptr<std::__1::vector<FBFeedSampledImpressionControllerEdgeTransition, std::__1::allocator<FBFeedSampledImpressionControllerEdgeTransition> > >, EdgeStateHash, EdgeStateEqual, std::__1::allocator<std::__1::pair<FBFeedImpressionEdgeViewState *const, std::__1::shared_ptr<std::__1::vector<FBFeedSampledImpressionControllerEdgeTransition, std::__1::allocator<FBFeedSampledImpressionControllerEdgeTransition> > > > > > > >;

typedef struct unique_ptr<std::__1::unordered_map<FBFeedImpressionEdgeViewState *, std::__1::shared_ptr<std::__1::vector<FBFeedSampledImpressionControllerEdgeTransition, std::__1::allocator<FBFeedSampledImpressionControllerEdgeTransition> > >, EdgeStateHash, EdgeStateEqual, std::__1::allocator<std::__1::pair<FBFeedImpressionEdgeViewState *const, std::__1::shared_ptr<std::__1::vector<FBFeedSampledImpressionControllerEdgeTransition, std::__1::allocator<FBFeedSampledImpressionControllerEdgeTransition> > > > > >, std::__1::default_delete<std::__1::unordered_map<FBFeedImpressionEdgeViewState *, std::__1::shared_ptr<std::__1::vector<FBFeedSampledImpressionControllerEdgeTransition, std::__1::allocator<FBFeedSampledImpressionControllerEdgeTransition> > >, EdgeStateHash, EdgeStateEqual, std::__1::allocator<std::__1::pair<FBFeedImpressionEdgeViewState *const, std::__1::shared_ptr<std::__1::vector<FBFeedSampledImpressionControllerEdgeTransition, std::__1::allocator<FBFeedSampledImpressionControllerEdgeTransition> > > > > > > > {
	compressed_pair<std::__1::unordered_map<FBFeedImpressionEdgeViewState *, std::__1::shared_ptr<std::__1::vector<FBFeedSampledImpressionControllerEdgeTransition, std::__1::allocator<FBFeedSampledImpressionControllerEdgeTransition> > >, EdgeStateHash, EdgeStateEqual, std::__1::allocator<std::__1::pair<FBFeedImpressionEdgeViewState *const, std::__1::shared_ptr<std::__1::vector<FBFeedSampledImpressionControllerEdgeTransition, std::__1::allocator<FBFeedSampledImpressionControllerEdgeTransition> > > > > > *, std::__1::default_delete<std::__1::unordered_map<FBFeedImpressionEdgeViewState *, std::__1::shared_ptr<std::__1::vector<FBFeedSampledImpressionControllerEdgeTransition, std::__1::allocator<FBFeedSampledImpressionControllerEdgeTransition> > >, EdgeStateHash, EdgeStateEqual, std::__1::allocator<std::__1::pair<FBFeedImpressionEdgeViewState *const, std::__1::shared_ptr<std::__1::vector<FBFeedSampledImpressionControllerEdgeTransition, std::__1::allocator<FBFeedSampledImpressionControllerEdgeTransition> > > > > > > > __ptr_;
} unique_ptr<std::__1::unordered_map<FBFeedImpressionEdgeViewState *, std::__1::shared_ptr<std::__1::vector<FBFeedSampledImpressionControllerEdgeTransition, std::__1::allocator<FBFeedSampledImpressionControllerEdgeTransition> > >, EdgeStateHash, EdgeStateEqual, std::__1::allocator<std::__1::pair<FBFeedImpressionEdgeViewState *const, std::__1::shared_ptr<std::__1::vector<FBFeedSampledImpressionControllerEdgeTransition, std::__1::allocator<FBFeedSampledImpressionControllerEdgeTransition> > > > > >, std::__1::default_delete<std::__1::unordered_map<FBFeedImpressionEdgeViewState *, std::__1::shared_ptr<std::__1::vector<FBFeedSampledImpressionControllerEdgeTransition, std::__1::allocator<FBFeedSampledImpressionControllerEdgeTransition> > >, EdgeStateHash, EdgeStateEqual, std::__1::allocator<std::__1::pair<FBFeedImpressionEdgeViewState *const, std::__1::shared_ptr<std::__1::vector<FBFeedSampledImpressionControllerEdgeTransition, std::__1::allocator<FBFeedSampledImpressionControllerEdgeTransition> > > > > > > >;

typedef struct __CVBuffer* CVBufferRef;

typedef struct FBFacecastWithGuestInterruptionState {
	BOOL networkOutage;
	BOOL appBackgroundedOrCameraInterrupted;
} FBFacecastWithGuestInterruptionState;

typedef struct FBSearchResultsStackLinkFIGComponentStyle {
	BOOL showInlineShareCount;
	BOOL titleUseHeaderStyle;
	BOOL highlightHostName;
	BOOL shouldOpenPulseIfTapped;
	BOOL flipTimeHostOrder;
	BOOL showSeparator;
} FBSearchResultsStackLinkFIGComponentStyle;

typedef struct _compressed_pair<CKComponent<FBHScrollImpressionLogging> *__strong *, std::__1::allocator<CKComponent<FBHScrollImpressionLogging> *> > {
	id __first_;
} compressed_pair<CKComponent<FBHScrollImpressionLogging> *__strong *, std::__1::allocator<CKComponent<FBHScrollImpressionLogging> *> >;

typedef struct vector<CKComponent<FBHScrollImpressionLogging> *, std::__1::allocator<CKComponent<FBHScrollImpressionLogging> *> > {
	id __begin_;
	id __end_;
	compressed_pair<CKComponent<FBHScrollImpressionLogging> *__strong *, std::__1::allocator<CKComponent<FBHScrollImpressionLogging> *> > __end_cap_;
} vector<CKComponent<FBHScrollImpressionLogging> *, std::__1::allocator<CKComponent<FBHScrollImpressionLogging> *> >;

typedef struct {
	float m00;
	float m01;
	float m02;
	float m03;
	float m10;
	float m11;
	float m12;
	float m13;
	float m20;
	float m21;
	float m22;
	float m23;
	float m30;
	float m31;
	float m32;
	float m33;
} SCD_Struct_FB375;

typedef struct atomic<float> {
	Af __a_;
} atomic<float>;

typedef struct atomic<UIDeviceBatteryState> {
	Aq __a_;
} atomic<UIDeviceBatteryState>;

typedef struct FBPageComponentFlowTextInputWithTitleComponentConfiguration {
	long long keyboardType;
	BOOL allowMultipleLines;
	NSString* placeholder;
	NSString* defaultValue;
	NSString* errorMessage;
	/*^block*/id inputValidationBlock;
	BOOL forceOptional;
	BOOL hideBottomSeperator;
	BOOL hideTitle;
} FBPageComponentFlowTextInputWithTitleComponentConfiguration;

typedef struct FBPageComponentFlowTextInputWithTitleComponentActions {
	CKTypedComponentAction<> textChangedAction;
	CKTypedComponentAction<> didBeginEditingAction;
	CKTypedComponentAction<> didEndEditingAction;
} FBPageComponentFlowTextInputWithTitleComponentActions;

typedef struct _compressed_pair<FB::PowerMetrics::ProcessPMCpuStat *, std::__1::default_delete<FB::PowerMetrics::ProcessPMCpuStat> > {
	ProcessPMCpuStat __first_;
} compressed_pair<FB::PowerMetrics::ProcessPMCpuStat *, std::__1::default_delete<FB::PowerMetrics::ProcessPMCpuStat> >;

typedef struct unique_ptr<FB::PowerMetrics::ProcessPMCpuStat, std::__1::default_delete<FB::PowerMetrics::ProcessPMCpuStat> > {
	compressed_pair<FB::PowerMetrics::ProcessPMCpuStat *, std::__1::default_delete<FB::PowerMetrics::ProcessPMCpuStat> > __ptr_;
} unique_ptr<FB::PowerMetrics::ProcessPMCpuStat, std::__1::default_delete<FB::PowerMetrics::ProcessPMCpuStat> >;

typedef struct atomic<double> {
	Ad __a_;
} atomic<double>;

typedef struct duration<long long, std::__1::ratio<1, 1000000000> > {
	long long __rep_;
} duration<long long, std::__1::ratio<1, 1000000000> >;

typedef struct time_point<std::__1::chrono::steady_clock, std::__1::chrono::duration<long long, std::__1::ratio<1, 1000000000> > > {
	duration<long long, std::__1::ratio<1, 1000000000> > __d_;
} time_point<std::__1::chrono::steady_clock, std::__1::chrono::duration<long long, std::__1::ratio<1, 1000000000> > >;

typedef struct CPU {
	double intercept;
	double slope;
} CPU;

typedef struct _compressed_pair<(anonymous namespace)::ThreadTime *, std::__1::allocator<(anonymous namespace)::ThreadTime> > {
	ThreadTime __first_;
} compressed_pair<(anonymous namespace)::ThreadTime *, std::__1::allocator<(anonymous namespace)::ThreadTime> >;

typedef struct vector<(anonymous namespace)::ThreadTime, std::__1::allocator<(anonymous namespace)::ThreadTime> > {
	ThreadTime __begin_;
	ThreadTime __end_;
	compressed_pair<(anonymous namespace)::ThreadTime *, std::__1::allocator<(anonymous namespace)::ThreadTime> > __end_cap_;
} vector<(anonymous namespace)::ThreadTime, std::__1::allocator<(anonymous namespace)::ThreadTime> >;

typedef struct ProcessPMCpuStat {
	unsigned long long total_user;
	unsigned long long total_system;
	unsigned long long task_interrupt_wakeups;
	unsigned long long task_platform_idle_wakeups;
	unsigned long long task_gpu_utilisation;
} ProcessPMCpuStat;

typedef struct FBCPUSpinDetectorConfig {
	short period_sec;
	short process_pct_usage;
	short thread_pct_usage;
} FBCPUSpinDetectorConfig;

typedef struct Display {
	double intercept;
	double slope;
} Display;

typedef struct Video {
	double hiResFPS30Back;
	double lowResFPS30Back;
	double FPS60Back;
	double FPS120Back;
	double FPS240Back;
	double hiResFPS30Front;
	double lowResFPS30Front;
	double FPS60Front;
	double FPS120Front;
	double FPS240Front;
} Video;

typedef struct _compressed_pair<FB::NetStat::NetStats::Reading *, std::__1::default_delete<FB::NetStat::NetStats::Reading> > {
	Reading __first_;
} compressed_pair<FB::NetStat::NetStats::Reading *, std::__1::default_delete<FB::NetStat::NetStats::Reading> >;

typedef struct unique_ptr<FB::NetStat::NetStats::Reading, std::__1::default_delete<FB::NetStat::NetStats::Reading> > {
	compressed_pair<FB::NetStat::NetStats::Reading *, std::__1::default_delete<FB::NetStat::NetStats::Reading> > __ptr_;
} unique_ptr<FB::NetStat::NetStats::Reading, std::__1::default_delete<FB::NetStat::NetStats::Reading> >;

typedef struct _long {
	char* __data_;
	unsigned long long __size_;
	unsigned long long __cap_;
} long;

typedef struct {
	unsigned char __size_;
} SCD_Struct_FB395;

typedef struct _raw {
	unsigned long long __words[3];
} raw;

typedef struct Network {
	double mWhPerTxSecond;
	double mWhPerTailSecond;
} Network;

typedef struct _short {
	char __data_[23];
	SCD_Struct_FB395 ;
} short;

typedef struct _rep {
	/*function pointer*/void* ;
	long __l;
	short __s;
	const aw) __r;
} rep;

typedef struct _compressed_pair<std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char> >::__rep, std::__1::allocator<char> > {
	const ep __first_;
} compressed_pair<std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char> >::__rep, std::__1::allocator<char> >;

typedef struct basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char> > {
	compressed_pair<std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char> >::__rep, std::__1::allocator<char> > __r_;
} basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char> >;

typedef struct PowerModelConfig {
	basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char> > deviceType;
	double baseline;
	Display display;
	Network network;
	Video video;
	CPU cpuHighFreq;
	CPU cpuLowFreq;
} PowerModelConfig;

typedef struct CameraTimeStat {
	unsigned backCameraOnSec_;
	unsigned frontCameraOnSec_;
} CameraTimeStat;

typedef struct DisplayBrightnessInfo {
	float accumulativeConsumedDisplayEnergyInFG;
	float accumulativeDisplayBrightness;
	double accumulativeFGTime;
} DisplayBrightnessInfo;

typedef struct FBRapidReportingContainerComponentActions {
	CKTypedComponentAction<> help;
	CKTypedComponentAction<> cancel;
	CKTypedComponentAction<> submit;
	CKTypedComponentAction<> done;
	CKTypedComponentAction<> userInput;
} FBRapidReportingContainerComponentActions;

typedef struct FBRapidReportingGridStyle {
	double verticalSpacing;
	double horizontalSpacing;
} FBRapidReportingGridStyle;

typedef struct _compressed_pair<FBRapidReportingGridComponentChild *, std::__1::allocator<FBRapidReportingGridComponentChild> > {
	FBRapidReportingGridComponentChild __first_;
} compressed_pair<FBRapidReportingGridComponentChild *, std::__1::allocator<FBRapidReportingGridComponentChild> >;

typedef struct vector<FBRapidReportingGridComponentChild, std::__1::allocator<FBRapidReportingGridComponentChild> > {
	FBRapidReportingGridComponentChild __begin_;
	FBRapidReportingGridComponentChild __end_;
	compressed_pair<FBRapidReportingGridComponentChild *, std::__1::allocator<FBRapidReportingGridComponentChild> > __end_cap_;
} vector<FBRapidReportingGridComponentChild, std::__1::allocator<FBRapidReportingGridComponentChild> >;

typedef struct FBRapidReportingScrollDelegateActions {
	CKTypedComponentAction<> scrollViewDidScroll;
	CKTypedComponentAction<> scrollViewWillBeginDragging;
	CKTypedComponentAction<> scrollViewWillEndDraggingAction;
	CKTypedComponentAction<> scrollViewDidEndScrollingAnimationAction;
} FBRapidReportingScrollDelegateActions;

typedef struct FBPagingContainerViewControllerConfig {
	BOOL swipeEnabled;
	BOOL animatePagingTriggeredBySwitcherTap;
	BOOL badgesEnabled;
	double swipeSnapAboveEstimate;
	BOOL scrollAwayHeader;
	long long switcherStyle;
} FBPagingContainerViewControllerConfig;

typedef struct CGPath* CGPathRef;

typedef struct _compressed_pair<unsigned long, std::__1::allocator<std::__1::__hash_node<std::__1::__hash_value_type<Class, id<FBTarotCardEntityProtocol> (*)(FBMemModelObject *, FBMemTarotDigest *, FBUserSession *)>, void *> *> > {
	unsigned long long __first_;
} compressed_pair<unsigned long, std::__1::allocator<std::__1::__hash_node<std::__1::__hash_value_type<Class, id<FBTarotCardEntityProtocol> (*)(FBMemModelObject *, FBMemTarotDigest *, FBUserSession *)>, void *> *> >;

typedef struct _compressed_pair<unsigned long, std::__1::__unordered_map_hasher<Class, std::__1::__hash_value_type<Class, id<FBTarotCardEntityProtocol> (*)(FBMemModelObject *, FBMemTarotDigest *, FBUserSession *)>, std::__1::hash<Class>, true> > {
	unsigned long long __first_;
} compressed_pair<unsigned long, std::__1::__unordered_map_hasher<Class, std::__1::__hash_value_type<Class, id<FBTarotCardEntityProtocol> (*)(FBMemModelObject *, FBMemTarotDigest *, FBUserSession *)>, std::__1::hash<Class>, true> >;

typedef struct _compressed_pair<float, std::__1::__unordered_map_equal<Class, std::__1::__hash_value_type<Class, id<FBTarotCardEntityProtocol> (*)(FBMemModelObject *, FBMemTarotDigest *, FBUserSession *)>, std::__1::equal_to<Class>, true> > {
	float __first_;
} compressed_pair<float, std::__1::__unordered_map_equal<Class, std::__1::__hash_value_type<Class, id<FBTarotCardEntityProtocol> (*)(FBMemModelObject *, FBMemTarotDigest *, FBUserSession *)>, std::__1::equal_to<Class>, true> >;

typedef struct _hash_node_base<std::__1::__hash_node<std::__1::__hash_value_type<Class, id<FBTarotCardEntityProtocol> (*)(FBMemModelObject *, FBMemTarotDigest *, FBUserSession *)>, void *> *> {
	__hash_node<std::__1::__hash_value_type<Class, id<FBTarotCardEntityProtocol> (*)(FBMemModelObject *, FBMemTarotDigest *, FBUserSession *)>, void *> __next_;
} hash_node_base<std::__1::__hash_node<std::__1::__hash_value_type<Class, id<FBTarotCardEntityProtocol> (*)(FBMemModelObject *, FBMemTarotDigest *, FBUserSession *)>, void *> *>;

typedef struct _compressed_pair<std::__1::__hash_node_base<std::__1::__hash_node<std::__1::__hash_value_type<Class, id<FBTarotCardEntityProtocol> (*)(FBMemModelObject *, FBMemTarotDigest *, FBUserSession *)>, void *> *>, std::__1::allocator<std::__1::__hash_node<std::__1::__hash_value_type<Class, id<FBTarotCardEntityProtocol> (*)(FBMemModelObject *, FBMemTarotDigest *, FBUserSession *)>, void *> > > {
	hash_node_base<std::__1::__hash_node<std::__1::__hash_value_type<Class, id<FBTarotCardEntityProtocol> (*)(FBMemModelObject *, FBMemTarotDigest *, FBUserSession *)>, void *> *> __first_;
} compressed_pair<std::__1::__hash_node_base<std::__1::__hash_node<std::__1::__hash_value_type<Class, id<FBTarotCardEntityProtocol> (*)(FBMemModelObject *, FBMemTarotDigest *, FBUserSession *)>, void *> *>, std::__1::allocator<std::__1::__hash_node<std::__1::__hash_value_type<Class, id<FBTarotCardEntityProtocol> (*)(FBMemModelObject *, FBMemTarotDigest *, FBUserSession *)>, void *> > >;

typedef struct _bucket_list_deallocator<std::__1::allocator<std::__1::__hash_node<std::__1::__hash_value_type<Class, id<FBTarotCardEntityProtocol> (*)(FBMemModelObject *, FBMemTarotDigest *, FBUserSession *)>, void *> *> > {
	compressed_pair<unsigned long, std::__1::allocator<std::__1::__hash_node<std::__1::__hash_value_type<Class, id<FBTarotCardEntityProtocol> (*)(FBMemModelObject *, FBMemTarotDigest *, FBUserSession *)>, void *> *> > __data_;
} bucket_list_deallocator<std::__1::allocator<std::__1::__hash_node<std::__1::__hash_value_type<Class, id<FBTarotCardEntityProtocol> (*)(FBMemModelObject *, FBMemTarotDigest *, FBUserSession *)>, void *> *> >;

typedef struct _compressed_pair<std::__1::__hash_node<std::__1::__hash_value_type<Class, id<FBTarotCardEntityProtocol> (*)(FBMemModelObject *, FBMemTarotDigest *, FBUserSession *)>, void *> **, std::__1::__bucket_list_deallocator<std::__1::allocator<std::__1::__hash_node<std::__1::__hash_value_type<Class, id<FBTarotCardEntityProtocol> (*)(FBMemModelObject *, FBMemTarotDigest *, FBUserSession *)>, void *> *> > > {
	__hash_node<std::__1::__hash_value_type<Class, id<FBTarotCardEntityProtocol> (*)(FBMemModelObject *, FBMemTarotDigest *, FBUserSession *)>, void *> __first_;
	bucket_list_deallocator<std::__1::allocator<std::__1::__hash_node<std::__1::__hash_value_type<Class, id<FBTarotCardEntityProtocol> (*)(FBMemModelObject *, FBMemTarotDigest *, FBUserSession *)>, void *> *> > __second_;
} compressed_pair<std::__1::__hash_node<std::__1::__hash_value_type<Class, id<FBTarotCardEntityProtocol> (*)(FBMemModelObject *, FBMemTarotDigest *, FBUserSession *)>, void *> **, std::__1::__bucket_list_deallocator<std::__1::allocator<std::__1::__hash_node<std::__1::__hash_value_type<Class, id<FBTarotCardEntityProtocol> (*)(FBMemModelObject *, FBMemTarotDigest *, FBUserSession *)>, void *> *> > >;

typedef struct unique_ptr<std::__1::__hash_node<std::__1::__hash_value_type<Class, id<FBTarotCardEntityProtocol> (*)(FBMemModelObject *, FBMemTarotDigest *, FBUserSession *)>, void *> *[], std::__1::__bucket_list_deallocator<std::__1::allocator<std::__1::__hash_node<std::__1::__hash_value_type<Class, id<FBTarotCardEntityProtocol> (*)(FBMemModelObject *, FBMemTarotDigest *, FBUserSession *)>, void *> *> > > {
	compressed_pair<std::__1::__hash_node<std::__1::__hash_value_type<Class, id<FBTarotCardEntityProtocol> (*)(FBMemModelObject *, FBMemTarotDigest *, FBUserSession *)>, void *> **, std::__1::__bucket_list_deallocator<std::__1::allocator<std::__1::__hash_node<std::__1::__hash_value_type<Class, id<FBTarotCardEntityProtocol> (*)(FBMemModelObject *, FBMemTarotDigest *, FBUserSession *)>, void *> *> > > __ptr_;
} unique_ptr<std::__1::__hash_node<std::__1::__hash_value_type<Class, id<FBTarotCardEntityProtocol> (*)(FBMemModelObject *, FBMemTarotDigest *, FBUserSession *)>, void *> *[], std::__1::__bucket_list_deallocator<std::__1::allocator<std::__1::__hash_node<std::__1::__hash_value_type<Class, id<FBTarotCardEntityProtocol> (*)(FBMemModelObject *, FBMemTarotDigest *, FBUserSession *)>, void *> *> > >;

typedef struct _hash_table<std::__1::__hash_value_type<Class, id<FBTarotCardEntityProtocol> (*)(FBMemModelObject *, FBMemTarotDigest *, FBUserSession *)>, std::__1::__unordered_map_hasher<Class, std::__1::__hash_value_type<Class, id<FBTarotCardEntityProtocol> (*)(FBMemModelObject *, FBMemTarotDigest *, FBUserSession *)>, std::__1::hash<Class>, true>, std::__1::__unordered_map_equal<Class, std::__1::__hash_value_type<Class, id<FBTarotCardEntityProtocol> (*)(FBMemModelObject *, FBMemTarotDigest *, FBUserSession *)>, std::__1::equal_to<Class>, true>, std::__1::allocator<std::__1::__hash_value_type<Class, id<FBTarotCardEntityProtocol> (*)(FBMemModelObject *, FBMemTarotDigest *, FBUserSession *)> > > {
	unique_ptr<std::__1::__hash_node<std::__1::__hash_value_type<Class, id<FBTarotCardEntityProtocol> (*)(FBMemModelObject *, FBMemTarotDigest *, FBUserSession *)>, void *> *[], std::__1::__bucket_list_deallocator<std::__1::allocator<std::__1::__hash_node<std::__1::__hash_value_type<Class, id<FBTarotCardEntityProtocol> (*)(FBMemModelObject *, FBMemTarotDigest *, FBUserSession *)>, void *> *> > > __bucket_list_;
	compressed_pair<std::__1::__hash_node_base<std::__1::__hash_node<std::__1::__hash_value_type<Class, id<FBTarotCardEntityProtocol> (*)(FBMemModelObject *, FBMemTarotDigest *, FBUserSession *)>, void *> *>, std::__1::allocator<std::__1::__hash_node<std::__1::__hash_value_type<Class, id<FBTarotCardEntityProtocol> (*)(FBMemModelObject *, FBMemTarotDigest *, FBUserSession *)>, void *> > > __p1_;
	compressed_pair<unsigned long, std::__1::__unordered_map_hasher<Class, std::__1::__hash_value_type<Class, id<FBTarotCardEntityProtocol> (*)(FBMemModelObject *, FBMemTarotDigest *, FBUserSession *)>, std::__1::hash<Class>, true> > __p2_;
	compressed_pair<float, std::__1::__unordered_map_equal<Class, std::__1::__hash_value_type<Class, id<FBTarotCardEntityProtocol> (*)(FBMemModelObject *, FBMemTarotDigest *, FBUserSession *)>, std::__1::equal_to<Class>, true> > __p3_;
} hash_table<std::__1::__hash_value_type<Class, id<FBTarotCardEntityProtocol> (*)(FBMemModelObject *, FBMemTarotDigest *, FBUserSession *)>, std::__1::__unordered_map_hasher<Class, std::__1::__hash_value_type<Class, id<FBTarotCardEntityProtocol> (*)(FBMemModelObject *, FBMemTarotDigest *, FBUserSession *)>, std::__1::hash<Class>, true>, std::__1::__unordered_map_equal<Class, std::__1::__hash_value_type<Class, id<FBTarotCardEntityProtocol> (*)(FBMemModelObject *, FBMemTarotDigest *, FBUserSession *)>, std::__1::equal_to<Class>, true>, std::__1::allocator<std::__1::__hash_value_type<Class, id<FBTarotCardEntityProtocol> (*)(FBMemModelObject *, FBMemTarotDigest *, FBUserSession *)> > >;

typedef struct unordered_map<Class, id<FBTarotCardEntityProtocol> (*)(FBMemModelObject *, FBMemTarotDigest *, FBUserSession *), std::__1::hash<Class>, std::__1::equal_to<Class>, std::__1::allocator<std::__1::pair<const Class, id<FBTarotCardEntityProtocol> (*)(FBMemModelObject *, FBMemTarotDigest *, FBUserSession *)> > > {
	hash_table<std::__1::__hash_value_type<Class, id<FBTarotCardEntityProtocol> (*)(FBMemModelObject *, FBMemTarotDigest *, FBUserSession *)>, std::__1::__unordered_map_hasher<Class, std::__1::__hash_value_type<Class, id<FBTarotCardEntityProtocol> (*)(FBMemModelObject *, FBMemTarotDigest *, FBUserSession *)>, std::__1::hash<Class>, true>, std::__1::__unordered_map_equal<Class, std::__1::__hash_value_type<Class, id<FBTarotCardEntityProtocol> (*)(FBMemModelObject *, FBMemTarotDigest *, FBUserSession *)>, std::__1::equal_to<Class>, true>, std::__1::allocator<std::__1::__hash_value_type<Class, id<FBTarotCardEntityProtocol> (*)(FBMemModelObject *, FBMemTarotDigest *, FBUserSession *)> > > __table_;
} unordered_map<Class, id<FBTarotCardEntityProtocol> (*)(FBMemModelObject *, FBMemTarotDigest *, FBUserSession *), std::__1::hash<Class>, std::__1::equal_to<Class>, std::__1::allocator<std::__1::pair<const Class, id<FBTarotCardEntityProtocol> (*)(FBMemModelObject *, FBMemTarotDigest *, FBUserSession *)> > >;

typedef struct FBGridViewItemSpans {
	unsigned long long colSpan;
	unsigned long long rowSpan;
} FBGridViewItemSpans;

typedef struct delegateFlag {
	unsigned delegateHandleLikeButtonTap : 1;
	unsigned delegateHandleCommentButtonTap : 1;
	unsigned delegateHandleFeedbackSentenceTap : 1;
	unsigned delegateHandleTagButtonTap : 1;
	unsigned delegateHandleMoreButtonTap : 1;
	unsigned delegateHandleInterestingResultTap : 1;
	unsigned delegateHandleDoneButtonTap : 1;
	unsigned delegateHandleCaptionExpansion : 1;
	unsigned delegateHandleInstagramButtonTap : 1;
	unsigned delegateHandleAddLocationButtonTap : 1;
	unsigned delegateHandleShareButtonTap : 1;
	unsigned delegateHandleMessengerButtonTap : 1;
	unsigned delegateHandleMessengerSendButtonTap : 1;
	unsigned delegateHandleMessengerMessageButtonTap : 1;
} delegateFlag;

typedef struct FBLayout {
	CGSize size;
	UIEdgeInsets margins;
} FBLayout;

typedef struct FBFollowSheetFeedAwesomizerPromotionComponentConfiguration {
	long long cardIdentifier;
	NSString* message;
	NSString* buttonText;
} FBFollowSheetFeedAwesomizerPromotionComponentConfiguration;

typedef struct CGGradient* CGGradientRef;

typedef struct FBPhotoStoryOptions {
	BOOL omitStoryHeader;
	BOOL alwaysShowSearchPivots;
	BOOL enableRedesign;
	NSString* composerActivationSource;
	NSString* focusedCommentID;
	BOOL openInTaggingMode;
	BOOL openInDimmedMode;
	long long darkThemePresentationMode;
	long long dimmingTimerInterval;
	<FBDisplayableMediaViewProvider>* photoViewProvider;
} FBPhotoStoryOptions;

typedef struct {
	NSString* sharingOptionOnIconName;
	NSString* sharingOptionOffIconName;
	NSString* inviteFriendsIconName;
	NSString* bugReportIconName;
	NSString* locationSettingsIconName;
	NSString* notificationSettingsIconName;
} SCD_Struct_FB428;

typedef struct {
	id field1;
	id field2;
	id field3;
	id field4;
	id field5;
	id field6;
} SCD_Struct_FB429;

typedef struct {
	BOOL scrollViewWillBeginDragging;
	BOOL scrollViewDidScroll;
	BOOL scrollViewWillEndDragging;
	BOOL scrollViewDidEndDecelarating;
	BOOL scrollViewDidEndDragging;
	BOOL didUpdateContentSize;
	BOOL didFinishLayoutWithSize;
	BOOL willEnterFullscreenStoryBlock;
	BOOL didExitFullscreenStoryBlock;
	BOOL willBeginTransition;
	BOOL didBeginTransition;
	BOOL didUpdateTransition;
	BOOL willFinishTransition;
	BOOL didFinishTransition;
} SCD_Struct_FB430;

typedef struct {
	BOOL field1;
	BOOL field2;
	BOOL field3;
	BOOL field4;
	BOOL field5;
} SCD_Struct_FB431;

typedef struct {
	double bounciness;
	double speed;
	CGPoint velocity;
} SCD_Struct_FB432;

typedef struct {
	float x;
	float y;
	float z;
} SCD_Struct_FB433;

typedef union GLKVector3 {
	SCD_Struct_FB433 field1;
	SCD_Struct_FB433 field2;
	SCD_Struct_FB433 field3;
	float v[3];
} GLKVector3;

typedef struct {
	GLKVector3 v;
	float s;
} SCD_Struct_FB435;

typedef struct {
	float x;
	float y;
	float z;
	float w;
} SCD_Struct_FB436;

typedef union GLKQuaternion {
	SCD_Struct_FB435 field1;
	SCD_Struct_FB436 field2;
	float q[4];
} GLKQuaternion;

typedef struct FBNARelatedArticleTextMetrics {
	unsigned long long backgroundColor;
	double fontSize;
	unsigned long long fontWeight;
	double lineHeight;
	unsigned long long textColor;
	unsigned long long maximumNumberOfLines;
} FBNARelatedArticleTextMetrics;

typedef struct FBNAShadowAttributes {
	double opacity;
	double radius;
	CGSize offset;
} FBNAShadowAttributes;

typedef struct FBNARelatedArticleMetrics {
	unsigned long long backgroundColor;
	FBNAShadowAttributes shadowAttributes;
	unsigned long long borderColor;
	double borderWidth;
	unsigned char visualStyle;
	unsigned char placement;
	UIEdgeInsets sectionInsets;
	double sectionMaxWidth;
	CGSize coverImageSize;
	unsigned long long maximumNumberOfTextLines;
	FBNARelatedArticleTextMetrics sectionTitleMetrics;
	FBNARelatedArticleTextMetrics kickerMetrics;
	FBNARelatedArticleTextMetrics titleMetrics;
	FBNARelatedArticleTextMetrics summaryMetrics;
	FBNARelatedArticleTextMetrics publisherNameMetrics;
	FBNARelatedArticleTextMetrics sponsoredTextMetrics;
	FBNARelatedArticleTextMetrics socialContextMetrics;
} FBNARelatedArticleMetrics;

typedef struct {
	NSMutableDictionary* analyticsExtras;
	BOOL didPreload;
} SCD_Struct_FB441;

typedef struct {
	FBNativeArticleController* portraitController;
	FBNativeArticleController* landscapeController;
	FBMemModelObject<FBQueriedNodeFieldsProtocol>* node;
	NSError* error;
} SCD_Struct_FB442;

typedef const struct mc_gatekeeper_specifier_t* mc_gatekeeper_specifier_tRef;

typedef struct FBFeedAwesomizerCardHeaderConfig {
	NSURL* imageURL;
	CKComponentSize imageSize;
	double textSpacing;
	NSString* title;
	NSString* subtitle;
	NSString* doneButtonTitle;
	UIColor* backgroundColor;
	UIColor* doneButtonColor;
	UIColor* cancelButtonColor;
	UIColor* learnMoreColor;
	FBFeedAwesomizerCardToolbox* toolbox;
	CKTypedComponentAction<> learnMoreAction;
	BOOL usesInlineSearch;
	BOOL doneButtonEnabled;
} FBFeedAwesomizerCardHeaderConfig;

typedef struct FBFeedAwesomizerProfileListCardProfileButtonUIComponentSelectionStyle {
	BOOL useCircle;
	UIImage* badgeIcon;
} FBFeedAwesomizerProfileListCardProfileButtonUIComponentSelectionStyle;

typedef struct FBFeedAwesomizerProfileListCardStyle {
	NSString* cardName;
	UIColor* themeColor;
	NSArray* tabTitles;
	/*^block*/id noContentMessageGenerator;
	long long searchMode;
	long long searchSource;
	BOOL sort;
	NSString* searchPlaceholder;
	NSString* doneButtonTitle;
	long long footerStyle;
	/*function pointer*/void* profileVPVDLoggingIdentifierFactory;
} FBFeedAwesomizerProfileListCardStyle;

typedef struct FBPollAddNewOptionComponentConfigutation {
	NSString* placeHolderText;
	UIFont* font;
	UIEdgeInsets textContainerInsets;
	NSString* text;
	BOOL dismissKeyboardOnEnter;
} FBPollAddNewOptionComponentConfigutation;

typedef struct FBBrowserNavigationTitleViewMetrics {
	/*function pointer*/void* _vptr$FBMetrics;
	BOOL _initialized;
	double titleHeight;
	double titleY;
	double subtitleHeight;
	double subtitleY;
	double subtitleCaretSpacing;
	double subtitleCaretYOffset;
	double navigationButtonWidth;
	double navigationButtonHeight;
	double height;
	double offsetY;
	double progressBarHeight;
} FBBrowserNavigationTitleViewMetrics;

typedef struct _compressed_pair<unsigned long, std::__1::__map_value_compare<unsigned long, std::__1::__value_type<unsigned long, void ()(UIView *)>, std::__1::less<unsigned long>, true> > {
	unsigned long long __first_;
} compressed_pair<unsigned long, std::__1::__map_value_compare<unsigned long, std::__1::__value_type<unsigned long, void ()(UIView *)>, std::__1::less<unsigned long>, true> >;

typedef struct _compressed_pair<std::__1::__tree_end_node<std::__1::__tree_node_base<void *> *>, std::__1::allocator<std::__1::__tree_node<std::__1::__value_type<unsigned long, void ()(UIView *)>, void *> > > {
	tree_end_node<std::__1::__tree_node_base<void *> *> __first_;
} compressed_pair<std::__1::__tree_end_node<std::__1::__tree_node_base<void *> *>, std::__1::allocator<std::__1::__tree_node<std::__1::__value_type<unsigned long, void ()(UIView *)>, void *> > >;

typedef struct _tree<std::__1::__value_type<unsigned long, void ()(UIView *)>, std::__1::__map_value_compare<unsigned long, std::__1::__value_type<unsigned long, void ()(UIView *)>, std::__1::less<unsigned long>, true>, std::__1::allocator<std::__1::__value_type<unsigned long, void ()(UIView *)> > > {
	__tree_node<std::__1::__value_type<unsigned long, void ()(UIView *)>, void *> __begin_node_;
	compressed_pair<std::__1::__tree_end_node<std::__1::__tree_node_base<void *> *>, std::__1::allocator<std::__1::__tree_node<std::__1::__value_type<unsigned long, void ()(UIView *)>, void *> > > __pair1_;
	compressed_pair<unsigned long, std::__1::__map_value_compare<unsigned long, std::__1::__value_type<unsigned long, void ()(UIView *)>, std::__1::less<unsigned long>, true> > __pair3_;
} tree<std::__1::__value_type<unsigned long, void ()(UIView *)>, std::__1::__map_value_compare<unsigned long, std::__1::__value_type<unsigned long, void ()(UIView *)>, std::__1::less<unsigned long>, true>, std::__1::allocator<std::__1::__value_type<unsigned long, void ()(UIView *)> > >;

typedef struct map<unsigned long, void ()(UIView *), std::__1::less<unsigned long>, std::__1::allocator<std::__1::pair<const unsigned long, void ()(UIView *)> > > {
	tree<std::__1::__value_type<unsigned long, void ()(UIView *)>, std::__1::__map_value_compare<unsigned long, std::__1::__value_type<unsigned long, void ()(UIView *)>, std::__1::less<unsigned long>, true>, std::__1::allocator<std::__1::__value_type<unsigned long, void ()(UIView *)> > > __tree_;
} map<unsigned long, void ()(UIView *), std::__1::less<unsigned long>, std::__1::allocator<std::__1::pair<const unsigned long, void ()(UIView *)> > >;

typedef struct shared_ptr<const std::__1::vector<CKComponentLayoutChild, std::__1::allocator<CKComponentLayoutChild> > > {
	vector<CKComponentLayoutChild, std::__1::allocator<CKComponentLayoutChild> > __ptr_;
	__shared_weak_count __cntrl_;
} shared_ptr<const std::__1::vector<CKComponentLayoutChild, std::__1::allocator<CKComponentLayoutChild> > >;

typedef struct CKComponentLayout {
	CKComponent* component;
	CGSize size;
	shared_ptr<const std::__1::vector<CKComponentLayoutChild, std::__1::allocator<CKComponentLayoutChild> > > children;
	NSDictionary* extra;
} CKComponentLayout;

typedef struct _compressed_pair<FBUFIButtonRowItem *, std::__1::allocator<FBUFIButtonRowItem> > {
	FBUFIButtonRowItem __first_;
} compressed_pair<FBUFIButtonRowItem *, std::__1::allocator<FBUFIButtonRowItem> >;

typedef struct vector<FBUFIButtonRowItem, std::__1::allocator<FBUFIButtonRowItem> > {
	FBUFIButtonRowItem __begin_;
	FBUFIButtonRowItem __end_;
	compressed_pair<FBUFIButtonRowItem *, std::__1::allocator<FBUFIButtonRowItem> > __end_cap_;
} vector<FBUFIButtonRowItem, std::__1::allocator<FBUFIButtonRowItem> >;

typedef struct FBUFICountsComponentOptions {
	BOOL renderEmptyCounts;
	BOOL avoidOcuppyingWholeConstrainedWidth;
	unsigned long long suppressedCounts;
	CKTypedComponentAction<> action;
} FBUFICountsComponentOptions;

typedef struct _compressed_pair<FBUFICountComponent *__strong *, std::__1::allocator<FBUFICountComponent *> > {
	id __first_;
} compressed_pair<FBUFICountComponent *__strong *, std::__1::allocator<FBUFICountComponent *> >;

typedef struct vector<FBUFICountComponent *, std::__1::allocator<FBUFICountComponent *> > {
	id __begin_;
	id __end_;
	compressed_pair<FBUFICountComponent *__strong *, std::__1::allocator<FBUFICountComponent *> > __end_cap_;
} vector<FBUFICountComponent *, std::__1::allocator<FBUFICountComponent *> >;

typedef const struct vector<FBHorizontalLineItem, std::__1::allocator<FBHorizontalLineItem> >* vector<FBHorizontalLineItem, std::__1::allocator<FBHorizontalLineItem> >Ref;

typedef struct _compressed_pair<FBUFIAdditionalCount *, std::__1::allocator<FBUFIAdditionalCount> > {
	FBUFIAdditionalCount __first_;
} compressed_pair<FBUFIAdditionalCount *, std::__1::allocator<FBUFIAdditionalCount> >;

typedef struct vector<FBUFIAdditionalCount, std::__1::allocator<FBUFIAdditionalCount> > {
	FBUFIAdditionalCount __begin_;
	FBUFIAdditionalCount __end_;
	compressed_pair<FBUFIAdditionalCount *, std::__1::allocator<FBUFIAdditionalCount> > __end_cap_;
} vector<FBUFIAdditionalCount, std::__1::allocator<FBUFIAdditionalCount> >;

typedef struct FBUFIFeedbackSummaryContainerComponentStyle {
	BOOL renderEmptyCounts;
	BOOL renderRecentActivity;
	BOOL renderExpandedReactionButtons;
	unsigned long long socialSentenceMaximumNumberOfLines;
	vector<FBUFIAdditionalCount, std::__1::allocator<FBUFIAdditionalCount> > additionalCounts;
	unsigned long long suppressedCountTypes;
	UIEdgeInsets buttonRowInsets;
	CKTypedComponentAction<> countsAction;
	CKTypedComponentAction<> inlineVoiceSwitcherAction;
	FBInlineVoiceSwitcherViewModel* inlineVoiceSwitcherViewModel;
	FBUFITheme* theme;
	UIEdgeInsets tapTargetBuffer;
	unsigned long long reactionsViewType;
} FBUFIFeedbackSummaryContainerComponentStyle;

typedef struct FBUFIButtonsComponentViewContextOptions {
	BOOL showTopDividerAndDropShadow;
} FBUFIButtonsComponentViewContextOptions;

typedef struct FBPublishingDataServerProcessingObserverConfiguration {
	double statusCheckRetryInterval;
	double minSecondsToWaitBeforeStartingToCheckServerStatus;
	double maxSecondsToWaitBeforeStartingToCheckServerStatus;
	double firstWaitingTimeForLivePhotos;
	double ratioOfSecondsToWaitToVideoLength;
} FBPublishingDataServerProcessingObserverConfiguration;

typedef struct {
	_ field1;
	NSRange field2;
	_ field3;
	NSRange field4;
} SCD_Struct_FB466;

typedef struct {
	unsigned long long field1;
	id field2;
	unsigned long long field3;
	unsigned long long field4[5];
} SCD_Struct_FB467;

typedef struct {
	long long field1;
	double field2;
	float field3;
} SCD_Struct_FB468;

typedef struct FBTicketLeftRightLayoutComponentOptions {
	BOOL flexShrinkLeft;
	BOOL flexShrinkRight;
} FBTicketLeftRightLayoutComponentOptions;

typedef struct __CFStringTokenizer* CFStringTokenizerRef;

typedef struct FBCalendarInitialInvitationsData {
	NSArray* events;
	NSString* cursor;
	BOOL hasNextPage;
	long long totalCountValue;
} FBCalendarInitialInvitationsData;

typedef struct vector_alloc_holder<std::__1::allocator<facebook::events::FBSortableCalendarRow>, boost::container::container_detail::integral_constant<unsigned int, 1> > {
	FBSortableCalendarRow m_start;
	unsigned long long m_size;
	unsigned long long m_capacity;
} vector_alloc_holder<std::__1::allocator<facebook::events::FBSortableCalendarRow>, boost::container::container_detail::integral_constant<unsigned int, 1> >;

typedef struct vector<facebook::events::FBSortableCalendarRow, std::__1::allocator<facebook::events::FBSortableCalendarRow> > {
	vector_alloc_holder<std::__1::allocator<facebook::events::FBSortableCalendarRow>, boost::container::container_detail::integral_constant<unsigned int, 1> > m_holder;
} vector<facebook::events::FBSortableCalendarRow, std::__1::allocator<facebook::events::FBSortableCalendarRow> >;

typedef struct Data {
	vector<facebook::events::FBSortableCalendarRow, std::__1::allocator<facebook::events::FBSortableCalendarRow> > m_vect;
} Data;

typedef struct flat_set<facebook::events::FBSortableCalendarRow, std::__1::less<facebook::events::FBSortableCalendarRow>, std::__1::allocator<facebook::events::FBSortableCalendarRow> > {
	Data m_data;
} flat_set<facebook::events::FBSortableCalendarRow, std::__1::less<facebook::events::FBSortableCalendarRow>, std::__1::allocator<facebook::events::FBSortableCalendarRow> >;

typedef struct _compressed_pair<FBEventsCalendarBirthdayName *__strong *, std::__1::allocator<FBEventsCalendarBirthdayName *> > {
	id __first_;
} compressed_pair<FBEventsCalendarBirthdayName *__strong *, std::__1::allocator<FBEventsCalendarBirthdayName *> >;

typedef struct vector<FBEventsCalendarBirthdayName *, std::__1::allocator<FBEventsCalendarBirthdayName *> > {
	id __begin_;
	id __end_;
	compressed_pair<FBEventsCalendarBirthdayName *__strong *, std::__1::allocator<FBEventsCalendarBirthdayName *> > __end_cap_;
} vector<FBEventsCalendarBirthdayName *, std::__1::allocator<FBEventsCalendarBirthdayName *> >;

typedef struct {
	CGRect field1;
	CGRect field2;
	CGRect field3;
	CGRect field4;
	CGRect field5;
	CGRect field6;
	CGRect field7;
} SCD_Struct_FB478;

typedef struct _compressed_pair<boost::variant<InviteCellData, LoadingCellData, boost::detail::variant::void_, boost::detail::variant::void_, boost::detail::variant::void_, boost::detail::variant::void_, boost::detail::variant::void_, boost::detail::variant::void_, boost::detail::variant::void_, boost::detail::variant::void_, boost::detail::variant::void_, boost::detail::variant::void_, boost::detail::variant::void_, boost::detail::variant::void_, boost::detail::variant::void_, boost::detail::variant::void_, boost::detail::variant::void_, boost::detail::variant::void_, boost::detail::variant::void_, boost::detail::variant::void_> *, std::__1::allocator<boost::variant<InviteCellData, LoadingCellData, boost::detail::variant::void_, boost::detail::variant::void_, boost::detail::variant::void_, boost::detail::variant::void_, boost::detail::variant::void_, boost::detail::variant::void_, boost::detail::variant::void_, boost::detail::variant::void_, boost::detail::variant::void_, boost::detail::variant::void_, boost::detail::variant::void_, boost::detail::variant::void_, boost::detail::variant::void_, boost::detail::variant::void_, boost::detail::variant::void_, boost::detail::variant::void_, boost::detail::variant::void_, boost::detail::variant::void_> > > {
	variant<InviteCellData, LoadingCellData, boost::detail::variant::void_, boost::detail::variant::void_, boost::detail::variant::void_, boost::detail::variant::void_, boost::detail::variant::void_, boost::detail::variant::void_, boost::detail::variant::void_, boost::detail::variant::void_, boost::detail::variant::void_, boost::detail::variant::void_, boost::detail::variant::void_, boost::detail::variant::void_, boost::detail::variant::void_, boost::detail::variant::void_, boost::detail::variant::void_, boost::detail::variant::void_, boost::detail::variant::void_, boost::detail::variant::void_> __first_;
} compressed_pair<boost::variant<InviteCellData, LoadingCellData, boost::detail::variant::void_, boost::detail::variant::void_, boost::detail::variant::void_, boost::detail::variant::void_, boost::detail::variant::void_, boost::detail::variant::void_, boost::detail::variant::void_, boost::detail::variant::void_, boost::detail::variant::void_, boost::detail::variant::void_, boost::detail::variant::void_, boost::detail::variant::void_, boost::detail::variant::void_, boost::detail::variant::void_, boost::detail::variant::void_, boost::detail::variant::void_, boost::detail::variant::void_, boost::detail::variant::void_> *, std::__1::allocator<boost::variant<InviteCellData, LoadingCellData, boost::detail::variant::void_, boost::detail::variant::void_, boost::detail::variant::void_, boost::detail::variant::void_, boost::detail::variant::void_, boost::detail::variant::void_, boost::detail::variant::void_, boost::detail::variant::void_, boost::detail::variant::void_, boost::detail::variant::void_, boost::detail::variant::void_, boost::detail::variant::void_, boost::detail::variant::void_, boost::detail::variant::void_, boost::detail::variant::void_, boost::detail::variant::void_, boost::detail::variant::void_, boost::detail::variant::void_> > >;

typedef struct vector<boost::variant<InviteCellData, LoadingCellData, boost::detail::variant::void_, boost::detail::variant::void_, boost::detail::variant::void_, boost::detail::variant::void_, boost::detail::variant::void_, boost::detail::variant::void_, boost::detail::variant::void_, boost::detail::variant::void_, boost::detail::variant::void_, boost::detail::variant::void_, boost::detail::variant::void_, boost::detail::variant::void_, boost::detail::variant::void_, boost::detail::variant::void_, boost::detail::variant::void_, boost::detail::variant::void_, boost::detail::variant::void_, boost::detail::variant::void_>, std::__1::allocator<boost::variant<InviteCellData, LoadingCellData, boost::detail::variant::void_, boost::detail::variant::void_, boost::detail::variant::void_, boost::detail::variant::void_, boost::detail::variant::void_, boost::detail::variant::void_, boost::detail::variant::void_, boost::detail::variant::void_, boost::detail::variant::void_, boost::detail::variant::void_, boost::detail::variant::void_, boost::detail::variant::void_, boost::detail::variant::void_, boost::detail::variant::void_, boost::detail::variant::void_, boost::detail::variant::void_, boost::detail::variant::void_, boost::detail::variant::void_> > > {
	variant<InviteCellData, LoadingCellData, boost::detail::variant::void_, boost::detail::variant::void_, boost::detail::variant::void_, boost::detail::variant::void_, boost::detail::variant::void_, boost::detail::variant::void_, boost::detail::variant::void_, boost::detail::variant::void_, boost::detail::variant::void_, boost::detail::variant::void_, boost::detail::variant::void_, boost::detail::variant::void_, boost::detail::variant::void_, boost::detail::variant::void_, boost::detail::variant::void_, boost::detail::variant::void_, boost::detail::variant::void_, boost::detail::variant::void_> __begin_;
	variant<InviteCellData, LoadingCellData, boost::detail::variant::void_, boost::detail::variant::void_, boost::detail::variant::void_, boost::detail::variant::void_, boost::detail::variant::void_, boost::detail::variant::void_, boost::detail::variant::void_, boost::detail::variant::void_, boost::detail::variant::void_, boost::detail::variant::void_, boost::detail::variant::void_, boost::detail::variant::void_, boost::detail::variant::void_, boost::detail::variant::void_, boost::detail::variant::void_, boost::detail::variant::void_, boost::detail::variant::void_, boost::detail::variant::void_> __end_;
	compressed_pair<boost::variant<InviteCellData, LoadingCellData, boost::detail::variant::void_, boost::detail::variant::void_, boost::detail::variant::void_, boost::detail::variant::void_, boost::detail::variant::void_, boost::detail::variant::void_, boost::detail::variant::void_, boost::detail::variant::void_, boost::detail::variant::void_, boost::detail::variant::void_, boost::detail::variant::void_, boost::detail::variant::void_, boost::detail::variant::void_, boost::detail::variant::void_, boost::detail::variant::void_, boost::detail::variant::void_, boost::detail::variant::void_, boost::detail::variant::void_> *, std::__1::allocator<boost::variant<InviteCellData, LoadingCellData, boost::detail::variant::void_, boost::detail::variant::void_, boost::detail::variant::void_, boost::detail::variant::void_, boost::detail::variant::void_, boost::detail::variant::void_, boost::detail::variant::void_, boost::detail::variant::void_, boost::detail::variant::void_, boost::detail::variant::void_, boost::detail::variant::void_, boost::detail::variant::void_, boost::detail::variant::void_, boost::detail::variant::void_, boost::detail::variant::void_, boost::detail::variant::void_, boost::detail::variant::void_, boost::detail::variant::void_> > > __end_cap_;
} vector<boost::variant<InviteCellData, LoadingCellData, boost::detail::variant::void_, boost::detail::variant::void_, boost::detail::variant::void_, boost::detail::variant::void_, boost::detail::variant::void_, boost::detail::variant::void_, boost::detail::variant::void_, boost::detail::variant::void_, boost::detail::variant::void_, boost::detail::variant::void_, boost::detail::variant::void_, boost::detail::variant::void_, boost::detail::variant::void_, boost::detail::variant::void_, boost::detail::variant::void_, boost::detail::variant::void_, boost::detail::variant::void_, boost::detail::variant::void_>, std::__1::allocator<boost::variant<InviteCellData, LoadingCellData, boost::detail::variant::void_, boost::detail::variant::void_, boost::detail::variant::void_, boost::detail::variant::void_, boost::detail::variant::void_, boost::detail::variant::void_, boost::detail::variant::void_, boost::detail::variant::void_, boost::detail::variant::void_, boost::detail::variant::void_, boost::detail::variant::void_, boost::detail::variant::void_, boost::detail::variant::void_, boost::detail::variant::void_, boost::detail::variant::void_, boost::detail::variant::void_, boost::detail::variant::void_, boost::detail::variant::void_> > >;

typedef struct FBStorylineMoodValidatorConfiguration {
	unsigned long long minNumberOfCuts;
	unsigned long long maxNumberOfCuts;
} FBStorylineMoodValidatorConfiguration;

typedef struct _compressed_pair<unsigned long, std::__1::allocator<std::__1::__hash_node<std::__1::__hash_value_type<FBDateKey *, FBCalendarDayData>, void *> *> > {
	unsigned long long __first_;
} compressed_pair<unsigned long, std::__1::allocator<std::__1::__hash_node<std::__1::__hash_value_type<FBDateKey *, FBCalendarDayData>, void *> *> >;

typedef struct _compressed_pair<unsigned long, std::__1::__unordered_map_hasher<FBDateKey *, std::__1::__hash_value_type<FBDateKey *, FBCalendarDayData>, FBCalendarDayHash, true> > {
	unsigned long long __first_;
} compressed_pair<unsigned long, std::__1::__unordered_map_hasher<FBDateKey *, std::__1::__hash_value_type<FBDateKey *, FBCalendarDayData>, FBCalendarDayHash, true> >;

typedef struct _compressed_pair<float, std::__1::__unordered_map_equal<FBDateKey *, std::__1::__hash_value_type<FBDateKey *, FBCalendarDayData>, FBCalendarDayEqual, true> > {
	float __first_;
} compressed_pair<float, std::__1::__unordered_map_equal<FBDateKey *, std::__1::__hash_value_type<FBDateKey *, FBCalendarDayData>, FBCalendarDayEqual, true> >;

typedef struct _hash_node_base<std::__1::__hash_node<std::__1::__hash_value_type<FBDateKey *, FBCalendarDayData>, void *> *> {
	__hash_node<std::__1::__hash_value_type<FBDateKey *, FBCalendarDayData>, void *> __next_;
} hash_node_base<std::__1::__hash_node<std::__1::__hash_value_type<FBDateKey *, FBCalendarDayData>, void *> *>;

typedef struct _compressed_pair<std::__1::__hash_node_base<std::__1::__hash_node<std::__1::__hash_value_type<FBDateKey *, FBCalendarDayData>, void *> *>, std::__1::allocator<std::__1::__hash_node<std::__1::__hash_value_type<FBDateKey *, FBCalendarDayData>, void *> > > {
	hash_node_base<std::__1::__hash_node<std::__1::__hash_value_type<FBDateKey *, FBCalendarDayData>, void *> *> __first_;
} compressed_pair<std::__1::__hash_node_base<std::__1::__hash_node<std::__1::__hash_value_type<FBDateKey *, FBCalendarDayData>, void *> *>, std::__1::allocator<std::__1::__hash_node<std::__1::__hash_value_type<FBDateKey *, FBCalendarDayData>, void *> > >;

typedef struct _bucket_list_deallocator<std::__1::allocator<std::__1::__hash_node<std::__1::__hash_value_type<FBDateKey *, FBCalendarDayData>, void *> *> > {
	compressed_pair<unsigned long, std::__1::allocator<std::__1::__hash_node<std::__1::__hash_value_type<FBDateKey *, FBCalendarDayData>, void *> *> > __data_;
} bucket_list_deallocator<std::__1::allocator<std::__1::__hash_node<std::__1::__hash_value_type<FBDateKey *, FBCalendarDayData>, void *> *> >;

typedef struct _compressed_pair<std::__1::__hash_node<std::__1::__hash_value_type<FBDateKey *, FBCalendarDayData>, void *> **, std::__1::__bucket_list_deallocator<std::__1::allocator<std::__1::__hash_node<std::__1::__hash_value_type<FBDateKey *, FBCalendarDayData>, void *> *> > > {
	__hash_node<std::__1::__hash_value_type<FBDateKey *, FBCalendarDayData>, void *> __first_;
	bucket_list_deallocator<std::__1::allocator<std::__1::__hash_node<std::__1::__hash_value_type<FBDateKey *, FBCalendarDayData>, void *> *> > __second_;
} compressed_pair<std::__1::__hash_node<std::__1::__hash_value_type<FBDateKey *, FBCalendarDayData>, void *> **, std::__1::__bucket_list_deallocator<std::__1::allocator<std::__1::__hash_node<std::__1::__hash_value_type<FBDateKey *, FBCalendarDayData>, void *> *> > >;

typedef struct unique_ptr<std::__1::__hash_node<std::__1::__hash_value_type<FBDateKey *, FBCalendarDayData>, void *> *[], std::__1::__bucket_list_deallocator<std::__1::allocator<std::__1::__hash_node<std::__1::__hash_value_type<FBDateKey *, FBCalendarDayData>, void *> *> > > {
	compressed_pair<std::__1::__hash_node<std::__1::__hash_value_type<FBDateKey *, FBCalendarDayData>, void *> **, std::__1::__bucket_list_deallocator<std::__1::allocator<std::__1::__hash_node<std::__1::__hash_value_type<FBDateKey *, FBCalendarDayData>, void *> *> > > __ptr_;
} unique_ptr<std::__1::__hash_node<std::__1::__hash_value_type<FBDateKey *, FBCalendarDayData>, void *> *[], std::__1::__bucket_list_deallocator<std::__1::allocator<std::__1::__hash_node<std::__1::__hash_value_type<FBDateKey *, FBCalendarDayData>, void *> *> > >;

typedef struct _hash_table<std::__1::__hash_value_type<FBDateKey *, FBCalendarDayData>, std::__1::__unordered_map_hasher<FBDateKey *, std::__1::__hash_value_type<FBDateKey *, FBCalendarDayData>, FBCalendarDayHash, true>, std::__1::__unordered_map_equal<FBDateKey *, std::__1::__hash_value_type<FBDateKey *, FBCalendarDayData>, FBCalendarDayEqual, true>, std::__1::allocator<std::__1::__hash_value_type<FBDateKey *, FBCalendarDayData> > > {
	unique_ptr<std::__1::__hash_node<std::__1::__hash_value_type<FBDateKey *, FBCalendarDayData>, void *> *[], std::__1::__bucket_list_deallocator<std::__1::allocator<std::__1::__hash_node<std::__1::__hash_value_type<FBDateKey *, FBCalendarDayData>, void *> *> > > __bucket_list_;
	compressed_pair<std::__1::__hash_node_base<std::__1::__hash_node<std::__1::__hash_value_type<FBDateKey *, FBCalendarDayData>, void *> *>, std::__1::allocator<std::__1::__hash_node<std::__1::__hash_value_type<FBDateKey *, FBCalendarDayData>, void *> > > __p1_;
	compressed_pair<unsigned long, std::__1::__unordered_map_hasher<FBDateKey *, std::__1::__hash_value_type<FBDateKey *, FBCalendarDayData>, FBCalendarDayHash, true> > __p2_;
	compressed_pair<float, std::__1::__unordered_map_equal<FBDateKey *, std::__1::__hash_value_type<FBDateKey *, FBCalendarDayData>, FBCalendarDayEqual, true> > __p3_;
} hash_table<std::__1::__hash_value_type<FBDateKey *, FBCalendarDayData>, std::__1::__unordered_map_hasher<FBDateKey *, std::__1::__hash_value_type<FBDateKey *, FBCalendarDayData>, FBCalendarDayHash, true>, std::__1::__unordered_map_equal<FBDateKey *, std::__1::__hash_value_type<FBDateKey *, FBCalendarDayData>, FBCalendarDayEqual, true>, std::__1::allocator<std::__1::__hash_value_type<FBDateKey *, FBCalendarDayData> > >;

typedef struct unordered_map<FBDateKey *, FBCalendarDayData, FBCalendarDayHash, FBCalendarDayEqual, std::__1::allocator<std::__1::pair<FBDateKey *const, FBCalendarDayData> > > {
	hash_table<std::__1::__hash_value_type<FBDateKey *, FBCalendarDayData>, std::__1::__unordered_map_hasher<FBDateKey *, std::__1::__hash_value_type<FBDateKey *, FBCalendarDayData>, FBCalendarDayHash, true>, std::__1::__unordered_map_equal<FBDateKey *, std::__1::__hash_value_type<FBDateKey *, FBCalendarDayData>, FBCalendarDayEqual, true>, std::__1::allocator<std::__1::__hash_value_type<FBDateKey *, FBCalendarDayData> > > __table_;
} unordered_map<FBDateKey *, FBCalendarDayData, FBCalendarDayHash, FBCalendarDayEqual, std::__1::allocator<std::__1::pair<FBDateKey *const, FBCalendarDayData> > >;

typedef struct _compressed_pair<unsigned long, std::__1::allocator<std::__1::__hash_node<std::__1::__hash_value_type<NSString *, std::__1::set<FBDateKey *, FBCalendarDayLess, std::__1::allocator<FBDateKey *> > >, void *> *> > {
	unsigned long long __first_;
} compressed_pair<unsigned long, std::__1::allocator<std::__1::__hash_node<std::__1::__hash_value_type<NSString *, std::__1::set<FBDateKey *, FBCalendarDayLess, std::__1::allocator<FBDateKey *> > >, void *> *> >;

typedef struct _compressed_pair<unsigned long, std::__1::__unordered_map_hasher<NSString *, std::__1::__hash_value_type<NSString *, std::__1::set<FBDateKey *, FBCalendarDayLess, std::__1::allocator<FBDateKey *> > >, FBCalendarStringHash, true> > {
	unsigned long long __first_;
} compressed_pair<unsigned long, std::__1::__unordered_map_hasher<NSString *, std::__1::__hash_value_type<NSString *, std::__1::set<FBDateKey *, FBCalendarDayLess, std::__1::allocator<FBDateKey *> > >, FBCalendarStringHash, true> >;

typedef struct _compressed_pair<float, std::__1::__unordered_map_equal<NSString *, std::__1::__hash_value_type<NSString *, std::__1::set<FBDateKey *, FBCalendarDayLess, std::__1::allocator<FBDateKey *> > >, FBCalendarStringEqual, true> > {
	float __first_;
} compressed_pair<float, std::__1::__unordered_map_equal<NSString *, std::__1::__hash_value_type<NSString *, std::__1::set<FBDateKey *, FBCalendarDayLess, std::__1::allocator<FBDateKey *> > >, FBCalendarStringEqual, true> >;

typedef struct _hash_node_base<std::__1::__hash_node<std::__1::__hash_value_type<NSString *, std::__1::set<FBDateKey *, FBCalendarDayLess, std::__1::allocator<FBDateKey *> > >, void *> *> {
	__hash_node<std::__1::__hash_value_type<NSString *, std::__1::set<FBDateKey *, FBCalendarDayLess, std::__1::allocator<FBDateKey *> > >, void *> __next_;
} hash_node_base<std::__1::__hash_node<std::__1::__hash_value_type<NSString *, std::__1::set<FBDateKey *, FBCalendarDayLess, std::__1::allocator<FBDateKey *> > >, void *> *>;

typedef struct _compressed_pair<std::__1::__hash_node_base<std::__1::__hash_node<std::__1::__hash_value_type<NSString *, std::__1::set<FBDateKey *, FBCalendarDayLess, std::__1::allocator<FBDateKey *> > >, void *> *>, std::__1::allocator<std::__1::__hash_node<std::__1::__hash_value_type<NSString *, std::__1::set<FBDateKey *, FBCalendarDayLess, std::__1::allocator<FBDateKey *> > >, void *> > > {
	hash_node_base<std::__1::__hash_node<std::__1::__hash_value_type<NSString *, std::__1::set<FBDateKey *, FBCalendarDayLess, std::__1::allocator<FBDateKey *> > >, void *> *> __first_;
} compressed_pair<std::__1::__hash_node_base<std::__1::__hash_node<std::__1::__hash_value_type<NSString *, std::__1::set<FBDateKey *, FBCalendarDayLess, std::__1::allocator<FBDateKey *> > >, void *> *>, std::__1::allocator<std::__1::__hash_node<std::__1::__hash_value_type<NSString *, std::__1::set<FBDateKey *, FBCalendarDayLess, std::__1::allocator<FBDateKey *> > >, void *> > >;

typedef struct _bucket_list_deallocator<std::__1::allocator<std::__1::__hash_node<std::__1::__hash_value_type<NSString *, std::__1::set<FBDateKey *, FBCalendarDayLess, std::__1::allocator<FBDateKey *> > >, void *> *> > {
	compressed_pair<unsigned long, std::__1::allocator<std::__1::__hash_node<std::__1::__hash_value_type<NSString *, std::__1::set<FBDateKey *, FBCalendarDayLess, std::__1::allocator<FBDateKey *> > >, void *> *> > __data_;
} bucket_list_deallocator<std::__1::allocator<std::__1::__hash_node<std::__1::__hash_value_type<NSString *, std::__1::set<FBDateKey *, FBCalendarDayLess, std::__1::allocator<FBDateKey *> > >, void *> *> >;

typedef struct _compressed_pair<std::__1::__hash_node<std::__1::__hash_value_type<NSString *, std::__1::set<FBDateKey *, FBCalendarDayLess, std::__1::allocator<FBDateKey *> > >, void *> **, std::__1::__bucket_list_deallocator<std::__1::allocator<std::__1::__hash_node<std::__1::__hash_value_type<NSString *, std::__1::set<FBDateKey *, FBCalendarDayLess, std::__1::allocator<FBDateKey *> > >, void *> *> > > {
	__hash_node<std::__1::__hash_value_type<NSString *, std::__1::set<FBDateKey *, FBCalendarDayLess, std::__1::allocator<FBDateKey *> > >, void *> __first_;
	bucket_list_deallocator<std::__1::allocator<std::__1::__hash_node<std::__1::__hash_value_type<NSString *, std::__1::set<FBDateKey *, FBCalendarDayLess, std::__1::allocator<FBDateKey *> > >, void *> *> > __second_;
} compressed_pair<std::__1::__hash_node<std::__1::__hash_value_type<NSString *, std::__1::set<FBDateKey *, FBCalendarDayLess, std::__1::allocator<FBDateKey *> > >, void *> **, std::__1::__bucket_list_deallocator<std::__1::allocator<std::__1::__hash_node<std::__1::__hash_value_type<NSString *, std::__1::set<FBDateKey *, FBCalendarDayLess, std::__1::allocator<FBDateKey *> > >, void *> *> > >;

typedef struct unique_ptr<std::__1::__hash_node<std::__1::__hash_value_type<NSString *, std::__1::set<FBDateKey *, FBCalendarDayLess, std::__1::allocator<FBDateKey *> > >, void *> *[], std::__1::__bucket_list_deallocator<std::__1::allocator<std::__1::__hash_node<std::__1::__hash_value_type<NSString *, std::__1::set<FBDateKey *, FBCalendarDayLess, std::__1::allocator<FBDateKey *> > >, void *> *> > > {
	compressed_pair<std::__1::__hash_node<std::__1::__hash_value_type<NSString *, std::__1::set<FBDateKey *, FBCalendarDayLess, std::__1::allocator<FBDateKey *> > >, void *> **, std::__1::__bucket_list_deallocator<std::__1::allocator<std::__1::__hash_node<std::__1::__hash_value_type<NSString *, std::__1::set<FBDateKey *, FBCalendarDayLess, std::__1::allocator<FBDateKey *> > >, void *> *> > > __ptr_;
} unique_ptr<std::__1::__hash_node<std::__1::__hash_value_type<NSString *, std::__1::set<FBDateKey *, FBCalendarDayLess, std::__1::allocator<FBDateKey *> > >, void *> *[], std::__1::__bucket_list_deallocator<std::__1::allocator<std::__1::__hash_node<std::__1::__hash_value_type<NSString *, std::__1::set<FBDateKey *, FBCalendarDayLess, std::__1::allocator<FBDateKey *> > >, void *> *> > >;

typedef struct _hash_table<std::__1::__hash_value_type<NSString *, std::__1::set<FBDateKey *, FBCalendarDayLess, std::__1::allocator<FBDateKey *> > >, std::__1::__unordered_map_hasher<NSString *, std::__1::__hash_value_type<NSString *, std::__1::set<FBDateKey *, FBCalendarDayLess, std::__1::allocator<FBDateKey *> > >, FBCalendarStringHash, true>, std::__1::__unordered_map_equal<NSString *, std::__1::__hash_value_type<NSString *, std::__1::set<FBDateKey *, FBCalendarDayLess, std::__1::allocator<FBDateKey *> > >, FBCalendarStringEqual, true>, std::__1::allocator<std::__1::__hash_value_type<NSString *, std::__1::set<FBDateKey *, FBCalendarDayLess, std::__1::allocator<FBDateKey *> > > > > {
	unique_ptr<std::__1::__hash_node<std::__1::__hash_value_type<NSString *, std::__1::set<FBDateKey *, FBCalendarDayLess, std::__1::allocator<FBDateKey *> > >, void *> *[], std::__1::__bucket_list_deallocator<std::__1::allocator<std::__1::__hash_node<std::__1::__hash_value_type<NSString *, std::__1::set<FBDateKey *, FBCalendarDayLess, std::__1::allocator<FBDateKey *> > >, void *> *> > > __bucket_list_;
	compressed_pair<std::__1::__hash_node_base<std::__1::__hash_node<std::__1::__hash_value_type<NSString *, std::__1::set<FBDateKey *, FBCalendarDayLess, std::__1::allocator<FBDateKey *> > >, void *> *>, std::__1::allocator<std::__1::__hash_node<std::__1::__hash_value_type<NSString *, std::__1::set<FBDateKey *, FBCalendarDayLess, std::__1::allocator<FBDateKey *> > >, void *> > > __p1_;
	compressed_pair<unsigned long, std::__1::__unordered_map_hasher<NSString *, std::__1::__hash_value_type<NSString *, std::__1::set<FBDateKey *, FBCalendarDayLess, std::__1::allocator<FBDateKey *> > >, FBCalendarStringHash, true> > __p2_;
	compressed_pair<float, std::__1::__unordered_map_equal<NSString *, std::__1::__hash_value_type<NSString *, std::__1::set<FBDateKey *, FBCalendarDayLess, std::__1::allocator<FBDateKey *> > >, FBCalendarStringEqual, true> > __p3_;
} hash_table<std::__1::__hash_value_type<NSString *, std::__1::set<FBDateKey *, FBCalendarDayLess, std::__1::allocator<FBDateKey *> > >, std::__1::__unordered_map_hasher<NSString *, std::__1::__hash_value_type<NSString *, std::__1::set<FBDateKey *, FBCalendarDayLess, std::__1::allocator<FBDateKey *> > >, FBCalendarStringHash, true>, std::__1::__unordered_map_equal<NSString *, std::__1::__hash_value_type<NSString *, std::__1::set<FBDateKey *, FBCalendarDayLess, std::__1::allocator<FBDateKey *> > >, FBCalendarStringEqual, true>, std::__1::allocator<std::__1::__hash_value_type<NSString *, std::__1::set<FBDateKey *, FBCalendarDayLess, std::__1::allocator<FBDateKey *> > > > >;

typedef struct unordered_map<NSString *, std::__1::set<FBDateKey *, FBCalendarDayLess, std::__1::allocator<FBDateKey *> >, FBCalendarStringHash, FBCalendarStringEqual, std::__1::allocator<std::__1::pair<NSString *const, std::__1::set<FBDateKey *, FBCalendarDayLess, std::__1::allocator<FBDateKey *> > > > > {
	hash_table<std::__1::__hash_value_type<NSString *, std::__1::set<FBDateKey *, FBCalendarDayLess, std::__1::allocator<FBDateKey *> > >, std::__1::__unordered_map_hasher<NSString *, std::__1::__hash_value_type<NSString *, std::__1::set<FBDateKey *, FBCalendarDayLess, std::__1::allocator<FBDateKey *> > >, FBCalendarStringHash, true>, std::__1::__unordered_map_equal<NSString *, std::__1::__hash_value_type<NSString *, std::__1::set<FBDateKey *, FBCalendarDayLess, std::__1::allocator<FBDateKey *> > >, FBCalendarStringEqual, true>, std::__1::allocator<std::__1::__hash_value_type<NSString *, std::__1::set<FBDateKey *, FBCalendarDayLess, std::__1::allocator<FBDateKey *> > > > > __table_;
} unordered_map<NSString *, std::__1::set<FBDateKey *, FBCalendarDayLess, std::__1::allocator<FBDateKey *> >, FBCalendarStringHash, FBCalendarStringEqual, std::__1::allocator<std::__1::pair<NSString *const, std::__1::set<FBDateKey *, FBCalendarDayLess, std::__1::allocator<FBDateKey *> > > > >;

typedef struct FBHScrollComponentAlpha {
	double alpha;
} FBHScrollComponentAlpha;

typedef struct FBHScrollComponentStyle {
	double spacing;
	unsigned long long alignItems;
	FBHScrollComponentAlpha alpha;
	CKRelativeDimension width;
	unsigned long long clippingStyle;
	unsigned long long decelerationRate;
	unsigned long long snapBehavior;
	Class targetComponentClass;
	double percentWidthSidePeek;
	double peekUnitInsetWidth;
} FBHScrollComponentStyle;

typedef struct FBGraphQLConnectionHScrollSectionComponentOptions {
	/*function pointer*/void* connectionEdgeToModelTransformer;
	FBHScrollComponentStyle hScrollComponentStyle;
	FBConnectionPageLoadLimits* pageLoadLimits;
	NSDictionary* pageLoadUserInfo;
	id componentGenerationContext;
	id backgroundColor;
	 UIColor;
	UIEdgeInsets insets;
} FBGraphQLConnectionHScrollSectionComponentOptions;

typedef struct FBFramedImageViewConstraint {
	double borderWidth;
	CGSize borderImageSize;
} FBFramedImageViewConstraint;

typedef struct FBPhotoAssetPreparerConfiguration {
	BOOL faceRecognitionEnabled;
	BOOL networkAccessAllowed;
	BOOL taggingEnabled;
} FBPhotoAssetPreparerConfiguration;

typedef struct FBTagViewMetrics {
	/*function pointer*/void* _vptr$FBMetrics;
	BOOL _initialized;
	double tagVerticalOffset;
	double tagHorizontalOffset;
	double tagMaximumVerticalDownRatio;
	double tagMaximumHorizontalDownRatio;
	double tagRectOuterMargin;
	double tagFrameWidthPadding;
	double tagBorderPadding;
	double tagFrameTextBoxVerticalPadding;
	double removeButtonWidth;
	double tagRoundedCornerRadius;
	double tagArrowHeight;
	double tagHalfArrowWidth;
	double tagStrokeLineWidth;
	double tagOverlapThreshold;
	double tagOutOfScreenSizeThreshold;
	double leftPaddingForRemoveImage;
	double rightPaddingForRemoveImage;
	CGSize textShadowOffsetSize;
	unsigned long long textFontSize;
	UIColor* textColor;
	UIImage* removeImage;
	long long removeImageContentMode;
	UIColor* strokeColor;
	FBShadowMetrics shadowMetrics;
	UIColor* fillColor;
	BOOL shouldShowTagShadow;
	BOOL shouldFillBackgroundForRemoveImage;
	BOOL shouldBounceWhenTapped;
	BOOL shouldStrokePath;
} FBTagViewMetrics;

typedef struct _compressed_pair<NSInvocation *__strong **, std::__1::allocator<NSInvocation *__strong *> > {
	id __first_;
} compressed_pair<NSInvocation *__strong **, std::__1::allocator<NSInvocation *__strong *> >;

typedef struct _compressed_pair<unsigned long, std::__1::allocator<NSInvocation *> > {
	unsigned long long __first_;
} compressed_pair<unsigned long, std::__1::allocator<NSInvocation *> >;

typedef struct _split_buffer<NSInvocation *__strong *, std::__1::allocator<NSInvocation *__strong *> > {
	id __first_;
	id __begin_;
	id __end_;
	compressed_pair<NSInvocation *__strong **, std::__1::allocator<NSInvocation *__strong *> > __end_cap_;
} split_buffer<NSInvocation *__strong *, std::__1::allocator<NSInvocation *__strong *> >;

typedef struct deque<NSInvocation *, std::__1::allocator<NSInvocation *> > {
	split_buffer<NSInvocation *__strong *, std::__1::allocator<NSInvocation *__strong *> > __map_;
	unsigned long long __start_;
	compressed_pair<unsigned long, std::__1::allocator<NSInvocation *> > __size_;
} deque<NSInvocation *, std::__1::allocator<NSInvocation *> >;

typedef struct queue<NSInvocation *, std::__1::deque<NSInvocation *, std::__1::allocator<NSInvocation *> > > {
	deque<NSInvocation *, std::__1::allocator<NSInvocation *> > c;
} queue<NSInvocation *, std::__1::deque<NSInvocation *, std::__1::allocator<NSInvocation *> > >;

typedef struct Item {
	FragmentModelTree _fbtree;
} Item;

typedef struct FBCameraComponentViewControllerConfiguration {
	BOOL hideNavigationBar;
	BOOL isAudioDisabled;
} FBCameraComponentViewControllerConfiguration;

typedef struct {
	UIEdgeInsets field1;
	unsigned long long field2;
	BOOL field3;
	id field4;
	double field5;
	BOOL field6;
	double field7;
} SCD_Struct_FB515;

typedef struct atomic<int> {
	Ai __a_;
} atomic<int>;

typedef struct _compressed_pair<unsigned long, std::__1::allocator<std::__1::__hash_node<std::__1::__hash_value_type<NSString *, unsigned long>, void *> *> > {
	unsigned long long __first_;
} compressed_pair<unsigned long, std::__1::allocator<std::__1::__hash_node<std::__1::__hash_value_type<NSString *, unsigned long>, void *> *> >;

typedef struct _compressed_pair<unsigned long, std::__1::__unordered_map_hasher<NSString *, std::__1::__hash_value_type<NSString *, unsigned long>, FB::HashFunctor<NSObject *>, true> > {
	unsigned long long __first_;
} compressed_pair<unsigned long, std::__1::__unordered_map_hasher<NSString *, std::__1::__hash_value_type<NSString *, unsigned long>, FB::HashFunctor<NSObject *>, true> >;

typedef struct _compressed_pair<float, std::__1::__unordered_map_equal<NSString *, std::__1::__hash_value_type<NSString *, unsigned long>, FB::EqualFunctor<NSObject *>, true> > {
	float __first_;
} compressed_pair<float, std::__1::__unordered_map_equal<NSString *, std::__1::__hash_value_type<NSString *, unsigned long>, FB::EqualFunctor<NSObject *>, true> >;

typedef struct _hash_node_base<std::__1::__hash_node<std::__1::__hash_value_type<NSString *, unsigned long>, void *> *> {
	__hash_node<std::__1::__hash_value_type<NSString *, unsigned long>, void *> __next_;
} hash_node_base<std::__1::__hash_node<std::__1::__hash_value_type<NSString *, unsigned long>, void *> *>;

typedef struct _compressed_pair<std::__1::__hash_node_base<std::__1::__hash_node<std::__1::__hash_value_type<NSString *, unsigned long>, void *> *>, std::__1::allocator<std::__1::__hash_node<std::__1::__hash_value_type<NSString *, unsigned long>, void *> > > {
	hash_node_base<std::__1::__hash_node<std::__1::__hash_value_type<NSString *, unsigned long>, void *> *> __first_;
} compressed_pair<std::__1::__hash_node_base<std::__1::__hash_node<std::__1::__hash_value_type<NSString *, unsigned long>, void *> *>, std::__1::allocator<std::__1::__hash_node<std::__1::__hash_value_type<NSString *, unsigned long>, void *> > >;

typedef struct _bucket_list_deallocator<std::__1::allocator<std::__1::__hash_node<std::__1::__hash_value_type<NSString *, unsigned long>, void *> *> > {
	compressed_pair<unsigned long, std::__1::allocator<std::__1::__hash_node<std::__1::__hash_value_type<NSString *, unsigned long>, void *> *> > __data_;
} bucket_list_deallocator<std::__1::allocator<std::__1::__hash_node<std::__1::__hash_value_type<NSString *, unsigned long>, void *> *> >;

typedef struct _compressed_pair<std::__1::__hash_node<std::__1::__hash_value_type<NSString *, unsigned long>, void *> **, std::__1::__bucket_list_deallocator<std::__1::allocator<std::__1::__hash_node<std::__1::__hash_value_type<NSString *, unsigned long>, void *> *> > > {
	__hash_node<std::__1::__hash_value_type<NSString *, unsigned long>, void *> __first_;
	bucket_list_deallocator<std::__1::allocator<std::__1::__hash_node<std::__1::__hash_value_type<NSString *, unsigned long>, void *> *> > __second_;
} compressed_pair<std::__1::__hash_node<std::__1::__hash_value_type<NSString *, unsigned long>, void *> **, std::__1::__bucket_list_deallocator<std::__1::allocator<std::__1::__hash_node<std::__1::__hash_value_type<NSString *, unsigned long>, void *> *> > >;

typedef struct unique_ptr<std::__1::__hash_node<std::__1::__hash_value_type<NSString *, unsigned long>, void *> *[], std::__1::__bucket_list_deallocator<std::__1::allocator<std::__1::__hash_node<std::__1::__hash_value_type<NSString *, unsigned long>, void *> *> > > {
	compressed_pair<std::__1::__hash_node<std::__1::__hash_value_type<NSString *, unsigned long>, void *> **, std::__1::__bucket_list_deallocator<std::__1::allocator<std::__1::__hash_node<std::__1::__hash_value_type<NSString *, unsigned long>, void *> *> > > __ptr_;
} unique_ptr<std::__1::__hash_node<std::__1::__hash_value_type<NSString *, unsigned long>, void *> *[], std::__1::__bucket_list_deallocator<std::__1::allocator<std::__1::__hash_node<std::__1::__hash_value_type<NSString *, unsigned long>, void *> *> > >;

typedef struct _hash_table<std::__1::__hash_value_type<NSString *, unsigned long>, std::__1::__unordered_map_hasher<NSString *, std::__1::__hash_value_type<NSString *, unsigned long>, FB::HashFunctor<NSObject *>, true>, std::__1::__unordered_map_equal<NSString *, std::__1::__hash_value_type<NSString *, unsigned long>, FB::EqualFunctor<NSObject *>, true>, std::__1::allocator<std::__1::__hash_value_type<NSString *, unsigned long> > > {
	unique_ptr<std::__1::__hash_node<std::__1::__hash_value_type<NSString *, unsigned long>, void *> *[], std::__1::__bucket_list_deallocator<std::__1::allocator<std::__1::__hash_node<std::__1::__hash_value_type<NSString *, unsigned long>, void *> *> > > __bucket_list_;
	compressed_pair<std::__1::__hash_node_base<std::__1::__hash_node<std::__1::__hash_value_type<NSString *, unsigned long>, void *> *>, std::__1::allocator<std::__1::__hash_node<std::__1::__hash_value_type<NSString *, unsigned long>, void *> > > __p1_;
	compressed_pair<unsigned long, std::__1::__unordered_map_hasher<NSString *, std::__1::__hash_value_type<NSString *, unsigned long>, FB::HashFunctor<NSObject *>, true> > __p2_;
	compressed_pair<float, std::__1::__unordered_map_equal<NSString *, std::__1::__hash_value_type<NSString *, unsigned long>, FB::EqualFunctor<NSObject *>, true> > __p3_;
} hash_table<std::__1::__hash_value_type<NSString *, unsigned long>, std::__1::__unordered_map_hasher<NSString *, std::__1::__hash_value_type<NSString *, unsigned long>, FB::HashFunctor<NSObject *>, true>, std::__1::__unordered_map_equal<NSString *, std::__1::__hash_value_type<NSString *, unsigned long>, FB::EqualFunctor<NSObject *>, true>, std::__1::allocator<std::__1::__hash_value_type<NSString *, unsigned long> > >;

typedef struct unordered_map<NSString *, unsigned long, FB::HashFunctor<NSObject *>, FB::EqualFunctor<NSObject *>, std::__1::allocator<std::__1::pair<NSString *const, unsigned long> > > {
	hash_table<std::__1::__hash_value_type<NSString *, unsigned long>, std::__1::__unordered_map_hasher<NSString *, std::__1::__hash_value_type<NSString *, unsigned long>, FB::HashFunctor<NSObject *>, true>, std::__1::__unordered_map_equal<NSString *, std::__1::__hash_value_type<NSString *, unsigned long>, FB::EqualFunctor<NSObject *>, true>, std::__1::allocator<std::__1::__hash_value_type<NSString *, unsigned long> > > __table_;
} unordered_map<NSString *, unsigned long, FB::HashFunctor<NSObject *>, FB::EqualFunctor<NSObject *>, std::__1::allocator<std::__1::pair<NSString *const, unsigned long> > >;

typedef struct CKTypedComponentAction<NSArray<FBActionBarItem *> *> {
	CKTypedComponentActionValue _internal;
} CKTypedComponentAction<NSArray<FBActionBarItem *> *>;

typedef struct FBWebImageComponentOptions {
	UIImage* defaultImage;
	long long defaultImageContentMode;
	FBScenePath* scenePath;
	NSString* analyticsModule;
	NSArray* trackingCodes;
	unsigned long long loggingSamplingRate;
	<FBWebImageViewLayoutDelegate>* layoutDelegate;
	unsigned long long transitionType;
	BOOL supportsRetry;
} FBWebImageComponentOptions;

typedef struct {
	double poiYaw;
	double poiPitch;
	double cameraYaw;
	double cameraPitch;
	int poiId;
} SCD_Struct_FB529;

typedef struct GLKVector4 {
	float v[4];
} GLKVector4;

typedef struct __CVOpenGLESTextureCache* CVOpenGLESTextureCacheRef;

typedef struct shared_ptr<mobileconfig::FBMobileConfigOverridesTable> {
	FBMobileConfigOverridesTable __ptr_;
	__shared_weak_count __cntrl_;
} shared_ptr<mobileconfig::FBMobileConfigOverridesTable>;

typedef struct config_meta_t {
	basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char> > configName;
	basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char> > paramName;
	int key;
	unsigned bufferConfigIndex;
	unsigned bufferParamIndex;
	int paramType;
	BOOL isSessionless;
} config_meta_t;

typedef struct _compressed_pair<std::__1::pair<NSString *, NSString *> *, std::__1::allocator<std::__1::pair<NSString *, NSString *> > > {
	pair<NSString *, NSString *> __first_;
} compressed_pair<std::__1::pair<NSString *, NSString *> *, std::__1::allocator<std::__1::pair<NSString *, NSString *> > >;

typedef struct vector<std::__1::pair<NSString *, NSString *>, std::__1::allocator<std::__1::pair<NSString *, NSString *> > > {
	pair<NSString *, NSString *> __begin_;
	pair<NSString *, NSString *> __end_;
	compressed_pair<std::__1::pair<NSString *, NSString *> *, std::__1::allocator<std::__1::pair<NSString *, NSString *> > > __end_cap_;
} vector<std::__1::pair<NSString *, NSString *>, std::__1::allocator<std::__1::pair<NSString *, NSString *> > >;

typedef struct shared_ptr<mobileconfig::FBMobileConfigQEGroupInfo> {
	FBMobileConfigQEGroupInfo __ptr_;
	__shared_weak_count __cntrl_;
} shared_ptr<mobileconfig::FBMobileConfigQEGroupInfo>;

typedef struct _compressed_pair<mobileconfig::FBMobileConfigQEParamInfo *, std::__1::allocator<mobileconfig::FBMobileConfigQEParamInfo> > {
	FBMobileConfigQEParamInfo __first_;
} compressed_pair<mobileconfig::FBMobileConfigQEParamInfo *, std::__1::allocator<mobileconfig::FBMobileConfigQEParamInfo> >;

typedef struct vector<mobileconfig::FBMobileConfigQEParamInfo, std::__1::allocator<mobileconfig::FBMobileConfigQEParamInfo> > {
	FBMobileConfigQEParamInfo __begin_;
	FBMobileConfigQEParamInfo __end_;
	compressed_pair<mobileconfig::FBMobileConfigQEParamInfo *, std::__1::allocator<mobileconfig::FBMobileConfigQEParamInfo> > __end_cap_;
} vector<mobileconfig::FBMobileConfigQEParamInfo, std::__1::allocator<mobileconfig::FBMobileConfigQEParamInfo> >;

typedef struct shared_ptr<mobileconfig::FBMobileConfigManager> {
	FBMobileConfigManager __ptr_;
	__shared_weak_count __cntrl_;
} shared_ptr<mobileconfig::FBMobileConfigManager>;

typedef struct shared_ptr<mobileconfig::FBMobileConfigStorageManager> {
	FBMobileConfigStorageManager __ptr_;
	__shared_weak_count __cntrl_;
} shared_ptr<mobileconfig::FBMobileConfigStorageManager>;

typedef struct shared_ptr<mobileconfig::FBMobileConfigFileUtils> {
	FBMobileConfigFileUtils __ptr_;
	__shared_weak_count __cntrl_;
} shared_ptr<mobileconfig::FBMobileConfigFileUtils>;

typedef struct shared_ptr<mobileconfig::FBMobileConfigMetaMap> {
	FBMobileConfigMetaMap __ptr_;
	__shared_weak_count __cntrl_;
} shared_ptr<mobileconfig::FBMobileConfigMetaMap>;

typedef struct _compressed_pair<mobileconfig::FBMobileConfigQEUniverseInfo *, std::__1::allocator<mobileconfig::FBMobileConfigQEUniverseInfo> > {
	FBMobileConfigQEUniverseInfo __first_;
} compressed_pair<mobileconfig::FBMobileConfigQEUniverseInfo *, std::__1::allocator<mobileconfig::FBMobileConfigQEUniverseInfo> >;

typedef struct vector<mobileconfig::FBMobileConfigQEUniverseInfo, std::__1::allocator<mobileconfig::FBMobileConfigQEUniverseInfo> > {
	FBMobileConfigQEUniverseInfo __begin_;
	FBMobileConfigQEUniverseInfo __end_;
	compressed_pair<mobileconfig::FBMobileConfigQEUniverseInfo *, std::__1::allocator<mobileconfig::FBMobileConfigQEUniverseInfo> > __end_cap_;
} vector<mobileconfig::FBMobileConfigQEUniverseInfo, std::__1::allocator<mobileconfig::FBMobileConfigQEUniverseInfo> >;

typedef struct _compressed_pair<mobileconfig::FBMobileConfigGKInfo *, std::__1::allocator<mobileconfig::FBMobileConfigGKInfo> > {
	FBMobileConfigGKInfo __first_;
} compressed_pair<mobileconfig::FBMobileConfigGKInfo *, std::__1::allocator<mobileconfig::FBMobileConfigGKInfo> >;

typedef struct vector<mobileconfig::FBMobileConfigGKInfo, std::__1::allocator<mobileconfig::FBMobileConfigGKInfo> > {
	FBMobileConfigGKInfo __begin_;
	FBMobileConfigGKInfo __end_;
	compressed_pair<mobileconfig::FBMobileConfigGKInfo *, std::__1::allocator<mobileconfig::FBMobileConfigGKInfo> > __end_cap_;
} vector<mobileconfig::FBMobileConfigGKInfo, std::__1::allocator<mobileconfig::FBMobileConfigGKInfo> >;

typedef struct _compressed_pair<unsigned long, std::__1::__map_value_compare<std::__1::pair<std::__1::basic_string<char>, int>, std::__1::__value_type<std::__1::pair<std::__1::basic_string<char>, int>, std::__1::pair<FBMobileConfigAliasType, std::__1::basic_string<char> > >, std::__1::less<std::__1::pair<std::__1::basic_string<char>, int> >, true> > {
	unsigned long long __first_;
} compressed_pair<unsigned long, std::__1::__map_value_compare<std::__1::pair<std::__1::basic_string<char>, int>, std::__1::__value_type<std::__1::pair<std::__1::basic_string<char>, int>, std::__1::pair<FBMobileConfigAliasType, std::__1::basic_string<char> > >, std::__1::less<std::__1::pair<std::__1::basic_string<char>, int> >, true> >;

typedef struct _compressed_pair<std::__1::__tree_end_node<std::__1::__tree_node_base<void *> *>, std::__1::allocator<std::__1::__tree_node<std::__1::__value_type<std::__1::pair<std::__1::basic_string<char>, int>, std::__1::pair<FBMobileConfigAliasType, std::__1::basic_string<char> > >, void *> > > {
	tree_end_node<std::__1::__tree_node_base<void *> *> __first_;
} compressed_pair<std::__1::__tree_end_node<std::__1::__tree_node_base<void *> *>, std::__1::allocator<std::__1::__tree_node<std::__1::__value_type<std::__1::pair<std::__1::basic_string<char>, int>, std::__1::pair<FBMobileConfigAliasType, std::__1::basic_string<char> > >, void *> > >;

typedef struct _tree<std::__1::__value_type<std::__1::pair<std::__1::basic_string<char>, int>, std::__1::pair<FBMobileConfigAliasType, std::__1::basic_string<char> > >, std::__1::__map_value_compare<std::__1::pair<std::__1::basic_string<char>, int>, std::__1::__value_type<std::__1::pair<std::__1::basic_string<char>, int>, std::__1::pair<FBMobileConfigAliasType, std::__1::basic_string<char> > >, std::__1::less<std::__1::pair<std::__1::basic_string<char>, int> >, true>, std::__1::allocator<std::__1::__value_type<std::__1::pair<std::__1::basic_string<char>, int>, std::__1::pair<FBMobileConfigAliasType, std::__1::basic_string<char> > > > > {
	__tree_node<std::__1::__value_type<std::__1::pair<std::__1::basic_string<char>, int>, std::__1::pair<FBMobileConfigAliasType, std::__1::basic_string<char> > >, void *> __begin_node_;
	compressed_pair<std::__1::__tree_end_node<std::__1::__tree_node_base<void *> *>, std::__1::allocator<std::__1::__tree_node<std::__1::__value_type<std::__1::pair<std::__1::basic_string<char>, int>, std::__1::pair<FBMobileConfigAliasType, std::__1::basic_string<char> > >, void *> > > __pair1_;
	compressed_pair<unsigned long, std::__1::__map_value_compare<std::__1::pair<std::__1::basic_string<char>, int>, std::__1::__value_type<std::__1::pair<std::__1::basic_string<char>, int>, std::__1::pair<FBMobileConfigAliasType, std::__1::basic_string<char> > >, std::__1::less<std::__1::pair<std::__1::basic_string<char>, int> >, true> > __pair3_;
} tree<std::__1::__value_type<std::__1::pair<std::__1::basic_string<char>, int>, std::__1::pair<FBMobileConfigAliasType, std::__1::basic_string<char> > >, std::__1::__map_value_compare<std::__1::pair<std::__1::basic_string<char>, int>, std::__1::__value_type<std::__1::pair<std::__1::basic_string<char>, int>, std::__1::pair<FBMobileConfigAliasType, std::__1::basic_string<char> > >, std::__1::less<std::__1::pair<std::__1::basic_string<char>, int> >, true>, std::__1::allocator<std::__1::__value_type<std::__1::pair<std::__1::basic_string<char>, int>, std::__1::pair<FBMobileConfigAliasType, std::__1::basic_string<char> > > > >;

typedef struct map<std::__1::pair<std::__1::basic_string<char>, int>, std::__1::pair<FBMobileConfigAliasType, std::__1::basic_string<char> >, std::__1::less<std::__1::pair<std::__1::basic_string<char>, int> >, std::__1::allocator<std::__1::pair<const std::__1::pair<std::__1::basic_string<char>, int>, std::__1::pair<FBMobileConfigAliasType, std::__1::basic_string<char> > > > > {
	tree<std::__1::__value_type<std::__1::pair<std::__1::basic_string<char>, int>, std::__1::pair<FBMobileConfigAliasType, std::__1::basic_string<char> > >, std::__1::__map_value_compare<std::__1::pair<std::__1::basic_string<char>, int>, std::__1::__value_type<std::__1::pair<std::__1::basic_string<char>, int>, std::__1::pair<FBMobileConfigAliasType, std::__1::basic_string<char> > >, std::__1::less<std::__1::pair<std::__1::basic_string<char>, int> >, true>, std::__1::allocator<std::__1::__value_type<std::__1::pair<std::__1::basic_string<char>, int>, std::__1::pair<FBMobileConfigAliasType, std::__1::basic_string<char> > > > > __tree_;
} map<std::__1::pair<std::__1::basic_string<char>, int>, std::__1::pair<FBMobileConfigAliasType, std::__1::basic_string<char> >, std::__1::less<std::__1::pair<std::__1::basic_string<char>, int> >, std::__1::allocator<std::__1::pair<const std::__1::pair<std::__1::basic_string<char>, int>, std::__1::pair<FBMobileConfigAliasType, std::__1::basic_string<char> > > > >;

typedef struct _compressed_pair<unsigned long, std::__1::__map_value_compare<std::__1::pair<std::__1::basic_string<char>, int>, std::__1::__value_type<std::__1::pair<std::__1::basic_string<char>, int>, std::__1::pair<int, int> >, std::__1::less<std::__1::pair<std::__1::basic_string<char>, int> >, true> > {
	unsigned long long __first_;
} compressed_pair<unsigned long, std::__1::__map_value_compare<std::__1::pair<std::__1::basic_string<char>, int>, std::__1::__value_type<std::__1::pair<std::__1::basic_string<char>, int>, std::__1::pair<int, int> >, std::__1::less<std::__1::pair<std::__1::basic_string<char>, int> >, true> >;

typedef struct _compressed_pair<std::__1::__tree_end_node<std::__1::__tree_node_base<void *> *>, std::__1::allocator<std::__1::__tree_node<std::__1::__value_type<std::__1::pair<std::__1::basic_string<char>, int>, std::__1::pair<int, int> >, void *> > > {
	tree_end_node<std::__1::__tree_node_base<void *> *> __first_;
} compressed_pair<std::__1::__tree_end_node<std::__1::__tree_node_base<void *> *>, std::__1::allocator<std::__1::__tree_node<std::__1::__value_type<std::__1::pair<std::__1::basic_string<char>, int>, std::__1::pair<int, int> >, void *> > >;

typedef struct _tree<std::__1::__value_type<std::__1::pair<std::__1::basic_string<char>, int>, std::__1::pair<int, int> >, std::__1::__map_value_compare<std::__1::pair<std::__1::basic_string<char>, int>, std::__1::__value_type<std::__1::pair<std::__1::basic_string<char>, int>, std::__1::pair<int, int> >, std::__1::less<std::__1::pair<std::__1::basic_string<char>, int> >, true>, std::__1::allocator<std::__1::__value_type<std::__1::pair<std::__1::basic_string<char>, int>, std::__1::pair<int, int> > > > {
	__tree_node<std::__1::__value_type<std::__1::pair<std::__1::basic_string<char>, int>, std::__1::pair<int, int> >, void *> __begin_node_;
	compressed_pair<std::__1::__tree_end_node<std::__1::__tree_node_base<void *> *>, std::__1::allocator<std::__1::__tree_node<std::__1::__value_type<std::__1::pair<std::__1::basic_string<char>, int>, std::__1::pair<int, int> >, void *> > > __pair1_;
	compressed_pair<unsigned long, std::__1::__map_value_compare<std::__1::pair<std::__1::basic_string<char>, int>, std::__1::__value_type<std::__1::pair<std::__1::basic_string<char>, int>, std::__1::pair<int, int> >, std::__1::less<std::__1::pair<std::__1::basic_string<char>, int> >, true> > __pair3_;
} tree<std::__1::__value_type<std::__1::pair<std::__1::basic_string<char>, int>, std::__1::pair<int, int> >, std::__1::__map_value_compare<std::__1::pair<std::__1::basic_string<char>, int>, std::__1::__value_type<std::__1::pair<std::__1::basic_string<char>, int>, std::__1::pair<int, int> >, std::__1::less<std::__1::pair<std::__1::basic_string<char>, int> >, true>, std::__1::allocator<std::__1::__value_type<std::__1::pair<std::__1::basic_string<char>, int>, std::__1::pair<int, int> > > >;

typedef struct map<std::__1::pair<std::__1::basic_string<char>, int>, std::__1::pair<int, int>, std::__1::less<std::__1::pair<std::__1::basic_string<char>, int> >, std::__1::allocator<std::__1::pair<const std::__1::pair<std::__1::basic_string<char>, int>, std::__1::pair<int, int> > > > {
	tree<std::__1::__value_type<std::__1::pair<std::__1::basic_string<char>, int>, std::__1::pair<int, int> >, std::__1::__map_value_compare<std::__1::pair<std::__1::basic_string<char>, int>, std::__1::__value_type<std::__1::pair<std::__1::basic_string<char>, int>, std::__1::pair<int, int> >, std::__1::less<std::__1::pair<std::__1::basic_string<char>, int> >, true>, std::__1::allocator<std::__1::__value_type<std::__1::pair<std::__1::basic_string<char>, int>, std::__1::pair<int, int> > > > __tree_;
} map<std::__1::pair<std::__1::basic_string<char>, int>, std::__1::pair<int, int>, std::__1::less<std::__1::pair<std::__1::basic_string<char>, int> >, std::__1::allocator<std::__1::pair<const std::__1::pair<std::__1::basic_string<char>, int>, std::__1::pair<int, int> > > >;

typedef struct FBMinimorphFactor {
	double minimorphFactor;
	double contentsScaleFactor;
} FBMinimorphFactor;

typedef struct FBIntermediatePositionDescriptor {
	NSString* directive;
	NSString* argument;
	NSString* offset;
} FBIntermediatePositionDescriptor;

typedef struct FBLinkCoverDescriptionConstraintDescriptor {
	int constraint;
	FBIntermediatePositionDescriptor intermediate;
} FBLinkCoverDescriptionConstraintDescriptor;

typedef struct FBLinkCoverPositionDescriptor {
	int horizontalPosition;
	double horizontalOffset;
	long long horizontalGridUnit;
	NSString* horizontalDependsOnID;
	int verticalPosition;
	double verticalOffset;
	long long verticalGridUnit;
	NSString* verticalDependsOnID;
	BOOL horizontallyConstrained;
	FBLinkCoverDescriptionConstraintDescriptor horizontalConstraint;
	BOOL verticallyConstrained;
	FBLinkCoverDescriptionConstraintDescriptor verticalConstraint;
} FBLinkCoverPositionDescriptor;

typedef struct LayoutGuides {
	double top;
	double bottom;
} LayoutGuides;

typedef struct FBFeedHscrollPaginatorConfiguration {
	unsigned long long numDotsPerPage;
	unsigned long long numTotalStories;
	BOOL useFixedDotsPerPage;
	UIColor* deselectedColor;
	UIColor* selectedColor;
	UIColor* borderColor;
	double borderWidth;
	double dotsSize;
	double dotSpacing;
	double arrowSpacing;
	BOOL isPaginatorOnTop;
	UIEdgeInsets paginatorMargins;
	UIEdgeInsets paginatorPaddings;
	unsigned long long backgroundStyle;
	CKTypedComponentAction<> didTapPaginatorAction;
	CKTypedComponentAction<> didHorizontallySwipePaginatorAction;
} FBFeedHscrollPaginatorConfiguration;

typedef struct FBFeedInfiniteHScrollCursorInformation {
	NSString* cursor;
	unsigned long long endReason;
	unsigned long long lastCompletedLoadIdentifier;
} FBFeedInfiniteHScrollCursorInformation;

typedef struct _compressed_pair<FBFeedInfiniteHScrollEdge *, std::__1::allocator<FBFeedInfiniteHScrollEdge> > {
	FBFeedInfiniteHScrollEdge __first_;
} compressed_pair<FBFeedInfiniteHScrollEdge *, std::__1::allocator<FBFeedInfiniteHScrollEdge> >;

typedef struct vector<FBFeedInfiniteHScrollEdge, std::__1::allocator<FBFeedInfiniteHScrollEdge> > {
	FBFeedInfiniteHScrollEdge __begin_;
	FBFeedInfiniteHScrollEdge __end_;
	compressed_pair<FBFeedInfiniteHScrollEdge *, std::__1::allocator<FBFeedInfiniteHScrollEdge> > __end_cap_;
} vector<FBFeedInfiniteHScrollEdge, std::__1::allocator<FBFeedInfiniteHScrollEdge> >;

typedef struct FBBaseCollectionComponentOptions {
	BOOL shouldCancelTouchesWhenScrolling;
	UICollectionViewFlowLayout* flowLayout;
	double itemWidth;
	BOOL alwaysBounceVertical;
	BOOL showsHorizontalScrollIndicator;
	double contentWidth;
	NSDictionary* sectionComponentProviderFunctionData;
} FBBaseCollectionComponentOptions;

typedef struct FBDBLPreviewViewMetrics {
	/*function pointer*/void* _vptr$FBMetrics;
	BOOL _initialized;
	UIColor* previewDeviceColor;
	double previewRatioDeviceWidthToHeight;
	double previewRatioDeviceHeightToWidth;
	double previewRatioDeviceBorderWidth;
	double previewRatioDeviceCornerRadius;
	double previewRatioDeviceHeightToDisplayHeight;
	double previewRatioDeviceWidthToDisplayWidth;
	double previewRatioLogoCenterOffset;
	double previewRatioLogoWidth;
	double previewRatioProfile;
	double previewProfileCornerRadius;
	double ratioHomebuttonSize;
} FBDBLPreviewViewMetrics;

typedef struct FBVideoPIPConfig {
	BOOL mute;
	BOOL smartSizing;
	BOOL autoplay;
	unsigned long long presentingStyle;
} FBVideoPIPConfig;

typedef struct FBStickerAttachmentComponentActions {
	CKTypedComponentAction<> tappedSticker;
	CKTypedComponentAction<> tappedRemoveButton;
} FBStickerAttachmentComponentActions;

typedef struct opaque_pthread_rwlock_t {
	long long __sig;
	char __opaque[192];
} opaque_pthread_rwlock_t;

typedef struct ReadWriteLock {
	opaque_pthread_rwlock_t _rwlock;
} ReadWriteLock;

typedef struct FBFeedLikePageActionButtonComponentGraphQL {
	FragmentModelTree _fbtree;
} FBFeedLikePageActionButtonComponentGraphQL;

typedef struct FBFeedCTAActionButtonComponentGraphQL {
	FragmentModelTree _fbtree;
} FBFeedCTAActionButtonComponentGraphQL;

typedef struct FBCouponActionButtonComponentGraphQL {
	FragmentModelTree _fbtree;
} FBCouponActionButtonComponentGraphQL;

typedef struct atomic<_GLKQuaternion> {
	A_GLKQuaternion __a_;
} atomic<_GLKQuaternion>;

typedef struct atomic<FB360VideoGuidedTourEulerAngles> {
	A? __a_;
} atomic<FB360VideoGuidedTourEulerAngles>;

typedef struct atomic<_GLKMatrix4> {
	A_GLKMatrix4 __a_;
} atomic<_GLKMatrix4>;

typedef struct atomic<_GLKVector3> {
	A_GLKVector3 __a_;
} atomic<_GLKVector3>;

typedef struct {
	float minYaw;
	float maxYaw;
	float minPitch;
	float maxPitch;
	BOOL isYawBounded;
	BOOL isPitchBounded;
} SCD_Struct_FB577;

typedef struct FNFDashAssetPrefetchMetadata {
	BOOL isInMemoryCached;
	BOOL isPrefetched;
	unsigned long long prefetchBytesRequested;
	unsigned long long prefetchBytesReceived;
	unsigned long long prefetchLeadTimeInMS;
	BOOL isPreviouslyKnownURL;
} FNFDashAssetPrefetchMetadata;

typedef struct {
	long long field1;
	long long field2;
	long long field3;
	long long field4;
	long long field5;
	long long field6;
} SCD_Struct_FB579;

typedef struct _compressed_pair<facebook::simplesearch::OrderedList<unsigned long long> *, std::__1::default_delete<facebook::simplesearch::OrderedList<unsigned long long> > > {
	bycopy const deredList<unsigned long long> __first_;
} compressed_pair<facebook::simplesearch::OrderedList<unsigned long long> *, std::__1::default_delete<facebook::simplesearch::OrderedList<unsigned long long> > >;

typedef struct unique_ptr<facebook::simplesearch::OrderedList<unsigned long long>, std::__1::default_delete<facebook::simplesearch::OrderedList<unsigned long long> > > {
	compressed_pair<facebook::simplesearch::OrderedList<unsigned long long> *, std::__1::default_delete<facebook::simplesearch::OrderedList<unsigned long long> > > __ptr_;
} unique_ptr<facebook::simplesearch::OrderedList<unsigned long long>, std::__1::default_delete<facebook::simplesearch::OrderedList<unsigned long long> > >;

typedef struct _compressed_pair<facebook::simplesearch::SimpleIndex *, std::__1::default_delete<facebook::simplesearch::SimpleIndex> > {
	SimpleIndex __first_;
} compressed_pair<facebook::simplesearch::SimpleIndex *, std::__1::default_delete<facebook::simplesearch::SimpleIndex> >;

typedef struct unique_ptr<facebook::simplesearch::SimpleIndex, std::__1::default_delete<facebook::simplesearch::SimpleIndex> > {
	compressed_pair<facebook::simplesearch::SimpleIndex *, std::__1::default_delete<facebook::simplesearch::SimpleIndex> > __ptr_;
} unique_ptr<facebook::simplesearch::SimpleIndex, std::__1::default_delete<facebook::simplesearch::SimpleIndex> >;

typedef struct shared_ptr<std::__1::unordered_map<unsigned long long, GraphSearchKeywordMetadata, std::__1::hash<unsigned long long>, std::__1::equal_to<unsigned long long>, std::__1::allocator<std::__1::pair<const unsigned long long, GraphSearchKeywordMetadata> > > > {
	unordered_map<unsigned long long, GraphSearchKeywordMetadata, std::__1::hash<unsigned long long>, std::__1::equal_to<unsigned long long>, std::__1::allocator<std::__1::pair<const unsigned long long, GraphSearchKeywordMetadata> > > __ptr_;
	__shared_weak_count __cntrl_;
} shared_ptr<std::__1::unordered_map<unsigned long long, GraphSearchKeywordMetadata, std::__1::hash<unsigned long long>, std::__1::equal_to<unsigned long long>, std::__1::allocator<std::__1::pair<const unsigned long long, GraphSearchKeywordMetadata> > > >;

typedef struct _compressed_pair<facebook::souvenirclassifier::SouvenirsClassifier *, std::__1::default_delete<facebook::souvenirclassifier::SouvenirsClassifier> > {
	SouvenirsClassifier __first_;
} compressed_pair<facebook::souvenirclassifier::SouvenirsClassifier *, std::__1::default_delete<facebook::souvenirclassifier::SouvenirsClassifier> >;

typedef struct unique_ptr<facebook::souvenirclassifier::SouvenirsClassifier, std::__1::default_delete<facebook::souvenirclassifier::SouvenirsClassifier> > {
	compressed_pair<facebook::souvenirclassifier::SouvenirsClassifier *, std::__1::default_delete<facebook::souvenirclassifier::SouvenirsClassifier> > __ptr_;
} unique_ptr<facebook::souvenirclassifier::SouvenirsClassifier, std::__1::default_delete<facebook::souvenirclassifier::SouvenirsClassifier> >;

typedef struct {
	double start;
	double end;
	unsigned long long type;
} SCD_Struct_FB587;

typedef struct __CFRunLoopObserver* CFRunLoopObserverRef;

typedef struct _compressed_pair<unsigned long *, std::__1::allocator<unsigned long> > {
	unsigned long long __first_;
} compressed_pair<unsigned long *, std::__1::allocator<unsigned long> >;

typedef struct vector<unsigned long, std::__1::allocator<unsigned long> > {
	unsigned long long __begin_;
	unsigned long long __end_;
	compressed_pair<unsigned long *, std::__1::allocator<unsigned long> > __end_cap_;
} vector<unsigned long, std::__1::allocator<unsigned long> >;

typedef struct shared_ptr<facebook::mobile::graphstore::TreeShape::Resolver> {
	Resolver __ptr_;
	__shared_weak_count __cntrl_;
} shared_ptr<facebook::mobile::graphstore::TreeShape::Resolver>;

typedef struct {
	unsigned long long field1;
	BOOL field2;
	BOOL field3;
	CGPoint field4;
	id field5;
	/*function pointer*/void* field6;
} SCD_Struct_FI592;

typedef struct _compressed_pair<std::__1::vector<Section, std::__1::allocator<Section> > *, std::__1::default_delete<std::__1::vector<Section, std::__1::allocator<Section> > > > {
	vector<Section, std::__1::allocator<Section> > __first_;
} compressed_pair<std::__1::vector<Section, std::__1::allocator<Section> > *, std::__1::default_delete<std::__1::vector<Section, std::__1::allocator<Section> > > >;

typedef struct unique_ptr<std::__1::vector<Section, std::__1::allocator<Section> >, std::__1::default_delete<std::__1::vector<Section, std::__1::allocator<Section> > > > {
	compressed_pair<std::__1::vector<Section, std::__1::allocator<Section> > *, std::__1::default_delete<std::__1::vector<Section, std::__1::allocator<Section> > > > __ptr_;
} unique_ptr<std::__1::vector<Section, std::__1::allocator<Section> >, std::__1::default_delete<std::__1::vector<Section, std::__1::allocator<Section> > > >;

typedef struct shared_ptr<std::__1::unordered_map<unsigned long long, SimpleSearchEntityMetadata, std::__1::hash<unsigned long long>, std::__1::equal_to<unsigned long long>, std::__1::allocator<std::__1::pair<const unsigned long long, SimpleSearchEntityMetadata> > > > {
	unordered_map<unsigned long long, SimpleSearchEntityMetadata, std::__1::hash<unsigned long long>, std::__1::equal_to<unsigned long long>, std::__1::allocator<std::__1::pair<const unsigned long long, SimpleSearchEntityMetadata> > > __ptr_;
	__shared_weak_count __cntrl_;
} shared_ptr<std::__1::unordered_map<unsigned long long, SimpleSearchEntityMetadata, std::__1::hash<unsigned long long>, std::__1::equal_to<unsigned long long>, std::__1::allocator<std::__1::pair<const unsigned long long, SimpleSearchEntityMetadata> > > >;

typedef struct sqlite3* sqlite3Ref;

typedef struct {
	BOOL field1;
	float field2;
} SCD_Struct_FB597;

typedef struct {
	BOOL field1;
	BOOL field2;
	char field3;
} SCD_Struct_FB598;

typedef struct FBMediaViewControllerTransitionDismissingContext {
	unsigned long long dismissalType;
	FBDisplayableMediaViewProviderContext* mediaViewProviderContext;
	id mediaViewOrLayer;
	unsigned long long slideAwayType;
	id transitionContext;
	 <UIViewControllerContextTransitioning>;
	CGPoint velocity;
} FBMediaViewControllerTransitionDismissingContext;

typedef struct FBDisplayableMediaTransitionOptions {
	BOOL omitScaleTransformWhenAnimating;
} FBDisplayableMediaTransitionOptions;

typedef struct CKComponentContextContents {
	NSDictionary* objects;
	<CKComponentContextDynamicLookup>* dynamicLookup;
} CKComponentContextContents;

typedef const struct CSTypegenSampleStringLiteralStringLiteralType* CSTypegenSampleStringLiteralStringLiteralTypeRef;

typedef const struct CSTypegenSampleNumericLiteralNumericLiteralType* CSTypegenSampleNumericLiteralNumericLiteralTypeRef;

typedef const struct unordered_map<NSString *, id, FB::HashFunctor<NSObject *>, FB::EqualFunctor<NSObject *>, std::__1::allocator<std::__1::pair<NSString *const, id> > >* unordered_map<NSString *, id, FB::HashFunctor<NSObject *>, FB::EqualFunctor<NSObject *>, std::__1::allocator<std::__1::pair<NSString *const, id> > >Ref;

typedef struct CGColorSpace* CGColorSpaceRef;

typedef struct _compressed_pair<unsigned long, std::__1::allocator<std::__1::__hash_node<std::__1::__hash_value_type<StoreObservationKey, StoreObservationRecord>, void *> *> > {
	unsigned long long __first_;
} compressed_pair<unsigned long, std::__1::allocator<std::__1::__hash_node<std::__1::__hash_value_type<StoreObservationKey, StoreObservationRecord>, void *> *> >;

typedef struct _compressed_pair<unsigned long, std::__1::__unordered_map_hasher<StoreObservationKey, std::__1::__hash_value_type<StoreObservationKey, StoreObservationRecord>, StoreObservationKeyHasher, true> > {
	unsigned long long __first_;
} compressed_pair<unsigned long, std::__1::__unordered_map_hasher<StoreObservationKey, std::__1::__hash_value_type<StoreObservationKey, StoreObservationRecord>, StoreObservationKeyHasher, true> >;

typedef struct _compressed_pair<float, std::__1::__unordered_map_equal<StoreObservationKey, std::__1::__hash_value_type<StoreObservationKey, StoreObservationRecord>, std::__1::equal_to<StoreObservationKey>, true> > {
	float __first_;
} compressed_pair<float, std::__1::__unordered_map_equal<StoreObservationKey, std::__1::__hash_value_type<StoreObservationKey, StoreObservationRecord>, std::__1::equal_to<StoreObservationKey>, true> >;

typedef struct _hash_node_base<std::__1::__hash_node<std::__1::__hash_value_type<StoreObservationKey, StoreObservationRecord>, void *> *> {
	__hash_node<std::__1::__hash_value_type<StoreObservationKey, StoreObservationRecord>, void *> __next_;
} hash_node_base<std::__1::__hash_node<std::__1::__hash_value_type<StoreObservationKey, StoreObservationRecord>, void *> *>;

typedef struct _compressed_pair<std::__1::__hash_node_base<std::__1::__hash_node<std::__1::__hash_value_type<StoreObservationKey, StoreObservationRecord>, void *> *>, std::__1::allocator<std::__1::__hash_node<std::__1::__hash_value_type<StoreObservationKey, StoreObservationRecord>, void *> > > {
	hash_node_base<std::__1::__hash_node<std::__1::__hash_value_type<StoreObservationKey, StoreObservationRecord>, void *> *> __first_;
} compressed_pair<std::__1::__hash_node_base<std::__1::__hash_node<std::__1::__hash_value_type<StoreObservationKey, StoreObservationRecord>, void *> *>, std::__1::allocator<std::__1::__hash_node<std::__1::__hash_value_type<StoreObservationKey, StoreObservationRecord>, void *> > >;

typedef struct _bucket_list_deallocator<std::__1::allocator<std::__1::__hash_node<std::__1::__hash_value_type<StoreObservationKey, StoreObservationRecord>, void *> *> > {
	compressed_pair<unsigned long, std::__1::allocator<std::__1::__hash_node<std::__1::__hash_value_type<StoreObservationKey, StoreObservationRecord>, void *> *> > __data_;
} bucket_list_deallocator<std::__1::allocator<std::__1::__hash_node<std::__1::__hash_value_type<StoreObservationKey, StoreObservationRecord>, void *> *> >;

typedef struct _compressed_pair<std::__1::__hash_node<std::__1::__hash_value_type<StoreObservationKey, StoreObservationRecord>, void *> **, std::__1::__bucket_list_deallocator<std::__1::allocator<std::__1::__hash_node<std::__1::__hash_value_type<StoreObservationKey, StoreObservationRecord>, void *> *> > > {
	__hash_node<std::__1::__hash_value_type<StoreObservationKey, StoreObservationRecord>, void *> __first_;
	bucket_list_deallocator<std::__1::allocator<std::__1::__hash_node<std::__1::__hash_value_type<StoreObservationKey, StoreObservationRecord>, void *> *> > __second_;
} compressed_pair<std::__1::__hash_node<std::__1::__hash_value_type<StoreObservationKey, StoreObservationRecord>, void *> **, std::__1::__bucket_list_deallocator<std::__1::allocator<std::__1::__hash_node<std::__1::__hash_value_type<StoreObservationKey, StoreObservationRecord>, void *> *> > >;

typedef struct unique_ptr<std::__1::__hash_node<std::__1::__hash_value_type<StoreObservationKey, StoreObservationRecord>, void *> *[], std::__1::__bucket_list_deallocator<std::__1::allocator<std::__1::__hash_node<std::__1::__hash_value_type<StoreObservationKey, StoreObservationRecord>, void *> *> > > {
	compressed_pair<std::__1::__hash_node<std::__1::__hash_value_type<StoreObservationKey, StoreObservationRecord>, void *> **, std::__1::__bucket_list_deallocator<std::__1::allocator<std::__1::__hash_node<std::__1::__hash_value_type<StoreObservationKey, StoreObservationRecord>, void *> *> > > __ptr_;
} unique_ptr<std::__1::__hash_node<std::__1::__hash_value_type<StoreObservationKey, StoreObservationRecord>, void *> *[], std::__1::__bucket_list_deallocator<std::__1::allocator<std::__1::__hash_node<std::__1::__hash_value_type<StoreObservationKey, StoreObservationRecord>, void *> *> > >;

typedef struct _hash_table<std::__1::__hash_value_type<StoreObservationKey, StoreObservationRecord>, std::__1::__unordered_map_hasher<StoreObservationKey, std::__1::__hash_value_type<StoreObservationKey, StoreObservationRecord>, StoreObservationKeyHasher, true>, std::__1::__unordered_map_equal<StoreObservationKey, std::__1::__hash_value_type<StoreObservationKey, StoreObservationRecord>, std::__1::equal_to<StoreObservationKey>, true>, std::__1::allocator<std::__1::__hash_value_type<StoreObservationKey, StoreObservationRecord> > > {
	unique_ptr<std::__1::__hash_node<std::__1::__hash_value_type<StoreObservationKey, StoreObservationRecord>, void *> *[], std::__1::__bucket_list_deallocator<std::__1::allocator<std::__1::__hash_node<std::__1::__hash_value_type<StoreObservationKey, StoreObservationRecord>, void *> *> > > __bucket_list_;
	compressed_pair<std::__1::__hash_node_base<std::__1::__hash_node<std::__1::__hash_value_type<StoreObservationKey, StoreObservationRecord>, void *> *>, std::__1::allocator<std::__1::__hash_node<std::__1::__hash_value_type<StoreObservationKey, StoreObservationRecord>, void *> > > __p1_;
	compressed_pair<unsigned long, std::__1::__unordered_map_hasher<StoreObservationKey, std::__1::__hash_value_type<StoreObservationKey, StoreObservationRecord>, StoreObservationKeyHasher, true> > __p2_;
	compressed_pair<float, std::__1::__unordered_map_equal<StoreObservationKey, std::__1::__hash_value_type<StoreObservationKey, StoreObservationRecord>, std::__1::equal_to<StoreObservationKey>, true> > __p3_;
} hash_table<std::__1::__hash_value_type<StoreObservationKey, StoreObservationRecord>, std::__1::__unordered_map_hasher<StoreObservationKey, std::__1::__hash_value_type<StoreObservationKey, StoreObservationRecord>, StoreObservationKeyHasher, true>, std::__1::__unordered_map_equal<StoreObservationKey, std::__1::__hash_value_type<StoreObservationKey, StoreObservationRecord>, std::__1::equal_to<StoreObservationKey>, true>, std::__1::allocator<std::__1::__hash_value_type<StoreObservationKey, StoreObservationRecord> > >;

typedef struct unordered_map<StoreObservationKey, StoreObservationRecord, StoreObservationKeyHasher, std::__1::equal_to<StoreObservationKey>, std::__1::allocator<std::__1::pair<const StoreObservationKey, StoreObservationRecord> > > {
	hash_table<std::__1::__hash_value_type<StoreObservationKey, StoreObservationRecord>, std::__1::__unordered_map_hasher<StoreObservationKey, std::__1::__hash_value_type<StoreObservationKey, StoreObservationRecord>, StoreObservationKeyHasher, true>, std::__1::__unordered_map_equal<StoreObservationKey, std::__1::__hash_value_type<StoreObservationKey, StoreObservationRecord>, std::__1::equal_to<StoreObservationKey>, true>, std::__1::allocator<std::__1::__hash_value_type<StoreObservationKey, StoreObservationRecord> > > __table_;
} unordered_map<StoreObservationKey, StoreObservationRecord, StoreObservationKeyHasher, std::__1::equal_to<StoreObservationKey>, std::__1::allocator<std::__1::pair<const StoreObservationKey, StoreObservationRecord> > >;

typedef struct sqlite3_stmt* sqlite3_stmtRef;

typedef struct _compressed_pair<unsigned long, std::__1::allocator<std::__1::__hash_node<std::__1::__hash_value_type<int, markerAndString>, void *> *> > {
	unsigned long long __first_;
} compressed_pair<unsigned long, std::__1::allocator<std::__1::__hash_node<std::__1::__hash_value_type<int, markerAndString>, void *> *> >;

typedef struct _compressed_pair<unsigned long, std::__1::__unordered_map_hasher<int, std::__1::__hash_value_type<int, markerAndString>, std::__1::hash<int>, true> > {
	unsigned long long __first_;
} compressed_pair<unsigned long, std::__1::__unordered_map_hasher<int, std::__1::__hash_value_type<int, markerAndString>, std::__1::hash<int>, true> >;

typedef struct _compressed_pair<float, std::__1::__unordered_map_equal<int, std::__1::__hash_value_type<int, markerAndString>, std::__1::equal_to<int>, true> > {
	float __first_;
} compressed_pair<float, std::__1::__unordered_map_equal<int, std::__1::__hash_value_type<int, markerAndString>, std::__1::equal_to<int>, true> >;

typedef struct _hash_node_base<std::__1::__hash_node<std::__1::__hash_value_type<int, markerAndString>, void *> *> {
	__hash_node<std::__1::__hash_value_type<int, markerAndString>, void *> __next_;
} hash_node_base<std::__1::__hash_node<std::__1::__hash_value_type<int, markerAndString>, void *> *>;

typedef struct _compressed_pair<std::__1::__hash_node_base<std::__1::__hash_node<std::__1::__hash_value_type<int, markerAndString>, void *> *>, std::__1::allocator<std::__1::__hash_node<std::__1::__hash_value_type<int, markerAndString>, void *> > > {
	hash_node_base<std::__1::__hash_node<std::__1::__hash_value_type<int, markerAndString>, void *> *> __first_;
} compressed_pair<std::__1::__hash_node_base<std::__1::__hash_node<std::__1::__hash_value_type<int, markerAndString>, void *> *>, std::__1::allocator<std::__1::__hash_node<std::__1::__hash_value_type<int, markerAndString>, void *> > >;

typedef struct _bucket_list_deallocator<std::__1::allocator<std::__1::__hash_node<std::__1::__hash_value_type<int, markerAndString>, void *> *> > {
	compressed_pair<unsigned long, std::__1::allocator<std::__1::__hash_node<std::__1::__hash_value_type<int, markerAndString>, void *> *> > __data_;
} bucket_list_deallocator<std::__1::allocator<std::__1::__hash_node<std::__1::__hash_value_type<int, markerAndString>, void *> *> >;

typedef struct _compressed_pair<std::__1::__hash_node<std::__1::__hash_value_type<int, markerAndString>, void *> **, std::__1::__bucket_list_deallocator<std::__1::allocator<std::__1::__hash_node<std::__1::__hash_value_type<int, markerAndString>, void *> *> > > {
	__hash_node<std::__1::__hash_value_type<int, markerAndString>, void *> __first_;
	bucket_list_deallocator<std::__1::allocator<std::__1::__hash_node<std::__1::__hash_value_type<int, markerAndString>, void *> *> > __second_;
} compressed_pair<std::__1::__hash_node<std::__1::__hash_value_type<int, markerAndString>, void *> **, std::__1::__bucket_list_deallocator<std::__1::allocator<std::__1::__hash_node<std::__1::__hash_value_type<int, markerAndString>, void *> *> > >;

typedef struct unique_ptr<std::__1::__hash_node<std::__1::__hash_value_type<int, markerAndString>, void *> *[], std::__1::__bucket_list_deallocator<std::__1::allocator<std::__1::__hash_node<std::__1::__hash_value_type<int, markerAndString>, void *> *> > > {
	compressed_pair<std::__1::__hash_node<std::__1::__hash_value_type<int, markerAndString>, void *> **, std::__1::__bucket_list_deallocator<std::__1::allocator<std::__1::__hash_node<std::__1::__hash_value_type<int, markerAndString>, void *> *> > > __ptr_;
} unique_ptr<std::__1::__hash_node<std::__1::__hash_value_type<int, markerAndString>, void *> *[], std::__1::__bucket_list_deallocator<std::__1::allocator<std::__1::__hash_node<std::__1::__hash_value_type<int, markerAndString>, void *> *> > >;

typedef struct _hash_table<std::__1::__hash_value_type<int, markerAndString>, std::__1::__unordered_map_hasher<int, std::__1::__hash_value_type<int, markerAndString>, std::__1::hash<int>, true>, std::__1::__unordered_map_equal<int, std::__1::__hash_value_type<int, markerAndString>, std::__1::equal_to<int>, true>, std::__1::allocator<std::__1::__hash_value_type<int, markerAndString> > > {
	unique_ptr<std::__1::__hash_node<std::__1::__hash_value_type<int, markerAndString>, void *> *[], std::__1::__bucket_list_deallocator<std::__1::allocator<std::__1::__hash_node<std::__1::__hash_value_type<int, markerAndString>, void *> *> > > __bucket_list_;
	compressed_pair<std::__1::__hash_node_base<std::__1::__hash_node<std::__1::__hash_value_type<int, markerAndString>, void *> *>, std::__1::allocator<std::__1::__hash_node<std::__1::__hash_value_type<int, markerAndString>, void *> > > __p1_;
	compressed_pair<unsigned long, std::__1::__unordered_map_hasher<int, std::__1::__hash_value_type<int, markerAndString>, std::__1::hash<int>, true> > __p2_;
	compressed_pair<float, std::__1::__unordered_map_equal<int, std::__1::__hash_value_type<int, markerAndString>, std::__1::equal_to<int>, true> > __p3_;
} hash_table<std::__1::__hash_value_type<int, markerAndString>, std::__1::__unordered_map_hasher<int, std::__1::__hash_value_type<int, markerAndString>, std::__1::hash<int>, true>, std::__1::__unordered_map_equal<int, std::__1::__hash_value_type<int, markerAndString>, std::__1::equal_to<int>, true>, std::__1::allocator<std::__1::__hash_value_type<int, markerAndString> > >;

typedef struct unordered_map<int, markerAndString, std::__1::hash<int>, std::__1::equal_to<int>, std::__1::allocator<std::__1::pair<const int, markerAndString> > > {
	hash_table<std::__1::__hash_value_type<int, markerAndString>, std::__1::__unordered_map_hasher<int, std::__1::__hash_value_type<int, markerAndString>, std::__1::hash<int>, true>, std::__1::__unordered_map_equal<int, std::__1::__hash_value_type<int, markerAndString>, std::__1::equal_to<int>, true>, std::__1::allocator<std::__1::__hash_value_type<int, markerAndString> > > __table_;
} unordered_map<int, markerAndString, std::__1::hash<int>, std::__1::equal_to<int>, std::__1::allocator<std::__1::pair<const int, markerAndString> > >;

typedef struct shared_ptr<facebook::location::ConditionPolicy> {
	ConditionPolicy __ptr_;
	__shared_weak_count __cntrl_;
} shared_ptr<facebook::location::ConditionPolicy>;

typedef struct shared_ptr<facebook::location::PolicyEngineBase> {
	PolicyEngineBase __ptr_;
	__shared_weak_count __cntrl_;
} shared_ptr<facebook::location::PolicyEngineBase>;

typedef struct shared_ptr<(anonymous namespace)::FBCLPlatform> {
	FBCLPlatform __ptr_;
	__shared_weak_count __cntrl_;
} shared_ptr<(anonymous namespace)::FBCLPlatform>;

typedef struct shared_ptr<facebook::location::RegionPolicy> {
	RegionPolicy __ptr_;
	__shared_weak_count __cntrl_;
} shared_ptr<facebook::location::RegionPolicy>;

typedef struct __SecTrust* SecTrustRef;

typedef struct {
	id field1;
	BOOL field2;
	BOOL field3;
	CGSize field4;
	id field5;
	id field6;
	id field7;
	double field8;
	double field9;
	id field10;
	unsigned long long field11;
	unsigned long long field12;
	BOOL field13;
	BOOL field14;
	CKTypedComponentAction<> field15;
	unsigned long long field16;
	UIEdgeInsets field17;
	double field18;
} SCD_Struct_FI632;

typedef struct {
	BOOL field1;
	CGSize field2;
	id field3;
	double field4;
	double field5;
	unsigned long long field6;
	unsigned long long field7;
	BOOL field8;
	BOOL field9;
	CKTypedComponentAction<> field10;
	unsigned long long field11;
	UIEdgeInsets field12;
} SCD_Struct_FI633;

typedef struct CKTypedComponentAction<NSURL *> {
	CKTypedComponentActionValue _internal;
} CKTypedComponentAction<NSURL *>;

typedef struct FIGContextRowComponentOptions_DEPRECATED {
	BOOL showBottomSeparator;
	double imageTextSpacing;
} FIGContextRowComponentOptions_DEPRECATED;

typedef struct {
	SCD_Struct_FB289 diskRecordingConfig;
	BOOL recordOnDisk;
	int maxSpeedTestFailureRetries;
} SCD_Struct_FB636;

typedef struct {
	SCD_Struct_FB289 field1;
	BOOL field2;
	int field3;
} SCD_Struct_FB637;

typedef struct {
	int field1;
	double field2;
	double field3;
	FBAudioStreamingConfig field4;
	FBVideoStreamingConfig field5;
} SCD_Struct_FB638;

typedef struct {
	double field1;
	unsigned long long field2;
} SCD_Struct_FB639;

typedef struct {
	double byteRate;
	unsigned long long atomByteSize;
} SCD_Struct_FB640;

typedef struct _compressed_pair<unsigned long, std::__1::allocator<std::__1::__hash_node<std::__1::__hash_value_type<long long, FBVideoNetworkerVideoPlayStatsMetaData>, void *> *> > {
	unsigned long long __first_;
} compressed_pair<unsigned long, std::__1::allocator<std::__1::__hash_node<std::__1::__hash_value_type<long long, FBVideoNetworkerVideoPlayStatsMetaData>, void *> *> >;

typedef struct _compressed_pair<unsigned long, std::__1::__unordered_map_hasher<long long, std::__1::__hash_value_type<long long, FBVideoNetworkerVideoPlayStatsMetaData>, std::__1::hash<long long>, true> > {
	unsigned long long __first_;
} compressed_pair<unsigned long, std::__1::__unordered_map_hasher<long long, std::__1::__hash_value_type<long long, FBVideoNetworkerVideoPlayStatsMetaData>, std::__1::hash<long long>, true> >;

typedef struct _compressed_pair<float, std::__1::__unordered_map_equal<long long, std::__1::__hash_value_type<long long, FBVideoNetworkerVideoPlayStatsMetaData>, std::__1::equal_to<long long>, true> > {
	float __first_;
} compressed_pair<float, std::__1::__unordered_map_equal<long long, std::__1::__hash_value_type<long long, FBVideoNetworkerVideoPlayStatsMetaData>, std::__1::equal_to<long long>, true> >;

typedef struct _hash_node_base<std::__1::__hash_node<std::__1::__hash_value_type<long long, FBVideoNetworkerVideoPlayStatsMetaData>, void *> *> {
	__hash_node<std::__1::__hash_value_type<long long, FBVideoNetworkerVideoPlayStatsMetaData>, void *> __next_;
} hash_node_base<std::__1::__hash_node<std::__1::__hash_value_type<long long, FBVideoNetworkerVideoPlayStatsMetaData>, void *> *>;

typedef struct _compressed_pair<std::__1::__hash_node_base<std::__1::__hash_node<std::__1::__hash_value_type<long long, FBVideoNetworkerVideoPlayStatsMetaData>, void *> *>, std::__1::allocator<std::__1::__hash_node<std::__1::__hash_value_type<long long, FBVideoNetworkerVideoPlayStatsMetaData>, void *> > > {
	hash_node_base<std::__1::__hash_node<std::__1::__hash_value_type<long long, FBVideoNetworkerVideoPlayStatsMetaData>, void *> *> __first_;
} compressed_pair<std::__1::__hash_node_base<std::__1::__hash_node<std::__1::__hash_value_type<long long, FBVideoNetworkerVideoPlayStatsMetaData>, void *> *>, std::__1::allocator<std::__1::__hash_node<std::__1::__hash_value_type<long long, FBVideoNetworkerVideoPlayStatsMetaData>, void *> > >;

typedef struct _bucket_list_deallocator<std::__1::allocator<std::__1::__hash_node<std::__1::__hash_value_type<long long, FBVideoNetworkerVideoPlayStatsMetaData>, void *> *> > {
	compressed_pair<unsigned long, std::__1::allocator<std::__1::__hash_node<std::__1::__hash_value_type<long long, FBVideoNetworkerVideoPlayStatsMetaData>, void *> *> > __data_;
} bucket_list_deallocator<std::__1::allocator<std::__1::__hash_node<std::__1::__hash_value_type<long long, FBVideoNetworkerVideoPlayStatsMetaData>, void *> *> >;

typedef struct _compressed_pair<std::__1::__hash_node<std::__1::__hash_value_type<long long, FBVideoNetworkerVideoPlayStatsMetaData>, void *> **, std::__1::__bucket_list_deallocator<std::__1::allocator<std::__1::__hash_node<std::__1::__hash_value_type<long long, FBVideoNetworkerVideoPlayStatsMetaData>, void *> *> > > {
	__hash_node<std::__1::__hash_value_type<long long, FBVideoNetworkerVideoPlayStatsMetaData>, void *> __first_;
	bucket_list_deallocator<std::__1::allocator<std::__1::__hash_node<std::__1::__hash_value_type<long long, FBVideoNetworkerVideoPlayStatsMetaData>, void *> *> > __second_;
} compressed_pair<std::__1::__hash_node<std::__1::__hash_value_type<long long, FBVideoNetworkerVideoPlayStatsMetaData>, void *> **, std::__1::__bucket_list_deallocator<std::__1::allocator<std::__1::__hash_node<std::__1::__hash_value_type<long long, FBVideoNetworkerVideoPlayStatsMetaData>, void *> *> > >;

typedef struct unique_ptr<std::__1::__hash_node<std::__1::__hash_value_type<long long, FBVideoNetworkerVideoPlayStatsMetaData>, void *> *[], std::__1::__bucket_list_deallocator<std::__1::allocator<std::__1::__hash_node<std::__1::__hash_value_type<long long, FBVideoNetworkerVideoPlayStatsMetaData>, void *> *> > > {
	compressed_pair<std::__1::__hash_node<std::__1::__hash_value_type<long long, FBVideoNetworkerVideoPlayStatsMetaData>, void *> **, std::__1::__bucket_list_deallocator<std::__1::allocator<std::__1::__hash_node<std::__1::__hash_value_type<long long, FBVideoNetworkerVideoPlayStatsMetaData>, void *> *> > > __ptr_;
} unique_ptr<std::__1::__hash_node<std::__1::__hash_value_type<long long, FBVideoNetworkerVideoPlayStatsMetaData>, void *> *[], std::__1::__bucket_list_deallocator<std::__1::allocator<std::__1::__hash_node<std::__1::__hash_value_type<long long, FBVideoNetworkerVideoPlayStatsMetaData>, void *> *> > >;

typedef struct _hash_table<std::__1::__hash_value_type<long long, FBVideoNetworkerVideoPlayStatsMetaData>, std::__1::__unordered_map_hasher<long long, std::__1::__hash_value_type<long long, FBVideoNetworkerVideoPlayStatsMetaData>, std::__1::hash<long long>, true>, std::__1::__unordered_map_equal<long long, std::__1::__hash_value_type<long long, FBVideoNetworkerVideoPlayStatsMetaData>, std::__1::equal_to<long long>, true>, std::__1::allocator<std::__1::__hash_value_type<long long, FBVideoNetworkerVideoPlayStatsMetaData> > > {
	unique_ptr<std::__1::__hash_node<std::__1::__hash_value_type<long long, FBVideoNetworkerVideoPlayStatsMetaData>, void *> *[], std::__1::__bucket_list_deallocator<std::__1::allocator<std::__1::__hash_node<std::__1::__hash_value_type<long long, FBVideoNetworkerVideoPlayStatsMetaData>, void *> *> > > __bucket_list_;
	compressed_pair<std::__1::__hash_node_base<std::__1::__hash_node<std::__1::__hash_value_type<long long, FBVideoNetworkerVideoPlayStatsMetaData>, void *> *>, std::__1::allocator<std::__1::__hash_node<std::__1::__hash_value_type<long long, FBVideoNetworkerVideoPlayStatsMetaData>, void *> > > __p1_;
	compressed_pair<unsigned long, std::__1::__unordered_map_hasher<long long, std::__1::__hash_value_type<long long, FBVideoNetworkerVideoPlayStatsMetaData>, std::__1::hash<long long>, true> > __p2_;
	compressed_pair<float, std::__1::__unordered_map_equal<long long, std::__1::__hash_value_type<long long, FBVideoNetworkerVideoPlayStatsMetaData>, std::__1::equal_to<long long>, true> > __p3_;
} hash_table<std::__1::__hash_value_type<long long, FBVideoNetworkerVideoPlayStatsMetaData>, std::__1::__unordered_map_hasher<long long, std::__1::__hash_value_type<long long, FBVideoNetworkerVideoPlayStatsMetaData>, std::__1::hash<long long>, true>, std::__1::__unordered_map_equal<long long, std::__1::__hash_value_type<long long, FBVideoNetworkerVideoPlayStatsMetaData>, std::__1::equal_to<long long>, true>, std::__1::allocator<std::__1::__hash_value_type<long long, FBVideoNetworkerVideoPlayStatsMetaData> > >;

typedef struct unordered_map<long long, FBVideoNetworkerVideoPlayStatsMetaData, std::__1::hash<long long>, std::__1::equal_to<long long>, std::__1::allocator<std::__1::pair<const long long, FBVideoNetworkerVideoPlayStatsMetaData> > > {
	hash_table<std::__1::__hash_value_type<long long, FBVideoNetworkerVideoPlayStatsMetaData>, std::__1::__unordered_map_hasher<long long, std::__1::__hash_value_type<long long, FBVideoNetworkerVideoPlayStatsMetaData>, std::__1::hash<long long>, true>, std::__1::__unordered_map_equal<long long, std::__1::__hash_value_type<long long, FBVideoNetworkerVideoPlayStatsMetaData>, std::__1::equal_to<long long>, true>, std::__1::allocator<std::__1::__hash_value_type<long long, FBVideoNetworkerVideoPlayStatsMetaData> > > __table_;
} unordered_map<long long, FBVideoNetworkerVideoPlayStatsMetaData, std::__1::hash<long long>, std::__1::equal_to<long long>, std::__1::allocator<std::__1::pair<const long long, FBVideoNetworkerVideoPlayStatsMetaData> > >;

typedef struct _compressed_pair<unsigned long, std::__1::allocator<std::__1::__hash_node<std::__1::__hash_value_type<long long, VideoNetworkerVideoStat>, void *> *> > {
	unsigned long long __first_;
} compressed_pair<unsigned long, std::__1::allocator<std::__1::__hash_node<std::__1::__hash_value_type<long long, VideoNetworkerVideoStat>, void *> *> >;

typedef struct _compressed_pair<unsigned long, std::__1::__unordered_map_hasher<long long, std::__1::__hash_value_type<long long, VideoNetworkerVideoStat>, std::__1::hash<long long>, true> > {
	unsigned long long __first_;
} compressed_pair<unsigned long, std::__1::__unordered_map_hasher<long long, std::__1::__hash_value_type<long long, VideoNetworkerVideoStat>, std::__1::hash<long long>, true> >;

typedef struct _compressed_pair<float, std::__1::__unordered_map_equal<long long, std::__1::__hash_value_type<long long, VideoNetworkerVideoStat>, std::__1::equal_to<long long>, true> > {
	float __first_;
} compressed_pair<float, std::__1::__unordered_map_equal<long long, std::__1::__hash_value_type<long long, VideoNetworkerVideoStat>, std::__1::equal_to<long long>, true> >;

typedef struct _hash_node_base<std::__1::__hash_node<std::__1::__hash_value_type<long long, VideoNetworkerVideoStat>, void *> *> {
	__hash_node<std::__1::__hash_value_type<long long, VideoNetworkerVideoStat>, void *> __next_;
} hash_node_base<std::__1::__hash_node<std::__1::__hash_value_type<long long, VideoNetworkerVideoStat>, void *> *>;

typedef struct _compressed_pair<std::__1::__hash_node_base<std::__1::__hash_node<std::__1::__hash_value_type<long long, VideoNetworkerVideoStat>, void *> *>, std::__1::allocator<std::__1::__hash_node<std::__1::__hash_value_type<long long, VideoNetworkerVideoStat>, void *> > > {
	hash_node_base<std::__1::__hash_node<std::__1::__hash_value_type<long long, VideoNetworkerVideoStat>, void *> *> __first_;
} compressed_pair<std::__1::__hash_node_base<std::__1::__hash_node<std::__1::__hash_value_type<long long, VideoNetworkerVideoStat>, void *> *>, std::__1::allocator<std::__1::__hash_node<std::__1::__hash_value_type<long long, VideoNetworkerVideoStat>, void *> > >;

typedef struct _bucket_list_deallocator<std::__1::allocator<std::__1::__hash_node<std::__1::__hash_value_type<long long, VideoNetworkerVideoStat>, void *> *> > {
	compressed_pair<unsigned long, std::__1::allocator<std::__1::__hash_node<std::__1::__hash_value_type<long long, VideoNetworkerVideoStat>, void *> *> > __data_;
} bucket_list_deallocator<std::__1::allocator<std::__1::__hash_node<std::__1::__hash_value_type<long long, VideoNetworkerVideoStat>, void *> *> >;

typedef struct _compressed_pair<std::__1::__hash_node<std::__1::__hash_value_type<long long, VideoNetworkerVideoStat>, void *> **, std::__1::__bucket_list_deallocator<std::__1::allocator<std::__1::__hash_node<std::__1::__hash_value_type<long long, VideoNetworkerVideoStat>, void *> *> > > {
	__hash_node<std::__1::__hash_value_type<long long, VideoNetworkerVideoStat>, void *> __first_;
	bucket_list_deallocator<std::__1::allocator<std::__1::__hash_node<std::__1::__hash_value_type<long long, VideoNetworkerVideoStat>, void *> *> > __second_;
} compressed_pair<std::__1::__hash_node<std::__1::__hash_value_type<long long, VideoNetworkerVideoStat>, void *> **, std::__1::__bucket_list_deallocator<std::__1::allocator<std::__1::__hash_node<std::__1::__hash_value_type<long long, VideoNetworkerVideoStat>, void *> *> > >;

typedef struct unique_ptr<std::__1::__hash_node<std::__1::__hash_value_type<long long, VideoNetworkerVideoStat>, void *> *[], std::__1::__bucket_list_deallocator<std::__1::allocator<std::__1::__hash_node<std::__1::__hash_value_type<long long, VideoNetworkerVideoStat>, void *> *> > > {
	compressed_pair<std::__1::__hash_node<std::__1::__hash_value_type<long long, VideoNetworkerVideoStat>, void *> **, std::__1::__bucket_list_deallocator<std::__1::allocator<std::__1::__hash_node<std::__1::__hash_value_type<long long, VideoNetworkerVideoStat>, void *> *> > > __ptr_;
} unique_ptr<std::__1::__hash_node<std::__1::__hash_value_type<long long, VideoNetworkerVideoStat>, void *> *[], std::__1::__bucket_list_deallocator<std::__1::allocator<std::__1::__hash_node<std::__1::__hash_value_type<long long, VideoNetworkerVideoStat>, void *> *> > >;

typedef struct _hash_table<std::__1::__hash_value_type<long long, VideoNetworkerVideoStat>, std::__1::__unordered_map_hasher<long long, std::__1::__hash_value_type<long long, VideoNetworkerVideoStat>, std::__1::hash<long long>, true>, std::__1::__unordered_map_equal<long long, std::__1::__hash_value_type<long long, VideoNetworkerVideoStat>, std::__1::equal_to<long long>, true>, std::__1::allocator<std::__1::__hash_value_type<long long, VideoNetworkerVideoStat> > > {
	unique_ptr<std::__1::__hash_node<std::__1::__hash_value_type<long long, VideoNetworkerVideoStat>, void *> *[], std::__1::__bucket_list_deallocator<std::__1::allocator<std::__1::__hash_node<std::__1::__hash_value_type<long long, VideoNetworkerVideoStat>, void *> *> > > __bucket_list_;
	compressed_pair<std::__1::__hash_node_base<std::__1::__hash_node<std::__1::__hash_value_type<long long, VideoNetworkerVideoStat>, void *> *>, std::__1::allocator<std::__1::__hash_node<std::__1::__hash_value_type<long long, VideoNetworkerVideoStat>, void *> > > __p1_;
	compressed_pair<unsigned long, std::__1::__unordered_map_hasher<long long, std::__1::__hash_value_type<long long, VideoNetworkerVideoStat>, std::__1::hash<long long>, true> > __p2_;
	compressed_pair<float, std::__1::__unordered_map_equal<long long, std::__1::__hash_value_type<long long, VideoNetworkerVideoStat>, std::__1::equal_to<long long>, true> > __p3_;
} hash_table<std::__1::__hash_value_type<long long, VideoNetworkerVideoStat>, std::__1::__unordered_map_hasher<long long, std::__1::__hash_value_type<long long, VideoNetworkerVideoStat>, std::__1::hash<long long>, true>, std::__1::__unordered_map_equal<long long, std::__1::__hash_value_type<long long, VideoNetworkerVideoStat>, std::__1::equal_to<long long>, true>, std::__1::allocator<std::__1::__hash_value_type<long long, VideoNetworkerVideoStat> > >;

typedef struct unordered_map<long long, VideoNetworkerVideoStat, std::__1::hash<long long>, std::__1::equal_to<long long>, std::__1::allocator<std::__1::pair<const long long, VideoNetworkerVideoStat> > > {
	hash_table<std::__1::__hash_value_type<long long, VideoNetworkerVideoStat>, std::__1::__unordered_map_hasher<long long, std::__1::__hash_value_type<long long, VideoNetworkerVideoStat>, std::__1::hash<long long>, true>, std::__1::__unordered_map_equal<long long, std::__1::__hash_value_type<long long, VideoNetworkerVideoStat>, std::__1::equal_to<long long>, true>, std::__1::allocator<std::__1::__hash_value_type<long long, VideoNetworkerVideoStat> > > __table_;
} unordered_map<long long, VideoNetworkerVideoStat, std::__1::hash<long long>, std::__1::equal_to<long long>, std::__1::allocator<std::__1::pair<const long long, VideoNetworkerVideoStat> > >;

typedef struct _compressed_pair<unsigned long, std::__1::__map_value_compare<id<FBCollectionViewSectionDataSource>, std::__1::__value_type<id<FBCollectionViewSectionDataSource>, FBCollectionViewDelegateRespondsToCache>, std::__1::less<id<FBCollectionViewSectionDataSource> >, true> > {
	unsigned long long __first_;
} compressed_pair<unsigned long, std::__1::__map_value_compare<id<FBCollectionViewSectionDataSource>, std::__1::__value_type<id<FBCollectionViewSectionDataSource>, FBCollectionViewDelegateRespondsToCache>, std::__1::less<id<FBCollectionViewSectionDataSource> >, true> >;

typedef struct _compressed_pair<std::__1::__tree_end_node<std::__1::__tree_node_base<void *> *>, std::__1::allocator<std::__1::__tree_node<std::__1::__value_type<id<FBCollectionViewSectionDataSource>, FBCollectionViewDelegateRespondsToCache>, void *> > > {
	tree_end_node<std::__1::__tree_node_base<void *> *> __first_;
} compressed_pair<std::__1::__tree_end_node<std::__1::__tree_node_base<void *> *>, std::__1::allocator<std::__1::__tree_node<std::__1::__value_type<id<FBCollectionViewSectionDataSource>, FBCollectionViewDelegateRespondsToCache>, void *> > >;

typedef struct _tree<std::__1::__value_type<id<FBCollectionViewSectionDataSource>, FBCollectionViewDelegateRespondsToCache>, std::__1::__map_value_compare<id<FBCollectionViewSectionDataSource>, std::__1::__value_type<id<FBCollectionViewSectionDataSource>, FBCollectionViewDelegateRespondsToCache>, std::__1::less<id<FBCollectionViewSectionDataSource> >, true>, std::__1::allocator<std::__1::__value_type<id<FBCollectionViewSectionDataSource>, FBCollectionViewDelegateRespondsToCache> > > {
	__tree_node<std::__1::__value_type<id<FBCollectionViewSectionDataSource>, FBCollectionViewDelegateRespondsToCache>, void *> __begin_node_;
	compressed_pair<std::__1::__tree_end_node<std::__1::__tree_node_base<void *> *>, std::__1::allocator<std::__1::__tree_node<std::__1::__value_type<id<FBCollectionViewSectionDataSource>, FBCollectionViewDelegateRespondsToCache>, void *> > > __pair1_;
	compressed_pair<unsigned long, std::__1::__map_value_compare<id<FBCollectionViewSectionDataSource>, std::__1::__value_type<id<FBCollectionViewSectionDataSource>, FBCollectionViewDelegateRespondsToCache>, std::__1::less<id<FBCollectionViewSectionDataSource> >, true> > __pair3_;
} tree<std::__1::__value_type<id<FBCollectionViewSectionDataSource>, FBCollectionViewDelegateRespondsToCache>, std::__1::__map_value_compare<id<FBCollectionViewSectionDataSource>, std::__1::__value_type<id<FBCollectionViewSectionDataSource>, FBCollectionViewDelegateRespondsToCache>, std::__1::less<id<FBCollectionViewSectionDataSource> >, true>, std::__1::allocator<std::__1::__value_type<id<FBCollectionViewSectionDataSource>, FBCollectionViewDelegateRespondsToCache> > >;

typedef struct map<id<FBCollectionViewSectionDataSource>, FBCollectionViewDelegateRespondsToCache, std::__1::less<id<FBCollectionViewSectionDataSource> >, std::__1::allocator<std::__1::pair<const id<FBCollectionViewSectionDataSource>, FBCollectionViewDelegateRespondsToCache> > > {
	tree<std::__1::__value_type<id<FBCollectionViewSectionDataSource>, FBCollectionViewDelegateRespondsToCache>, std::__1::__map_value_compare<id<FBCollectionViewSectionDataSource>, std::__1::__value_type<id<FBCollectionViewSectionDataSource>, FBCollectionViewDelegateRespondsToCache>, std::__1::less<id<FBCollectionViewSectionDataSource> >, true>, std::__1::allocator<std::__1::__value_type<id<FBCollectionViewSectionDataSource>, FBCollectionViewDelegateRespondsToCache> > > __tree_;
} map<id<FBCollectionViewSectionDataSource>, FBCollectionViewDelegateRespondsToCache, std::__1::less<id<FBCollectionViewSectionDataSource> >, std::__1::allocator<std::__1::pair<const id<FBCollectionViewSectionDataSource>, FBCollectionViewDelegateRespondsToCache> > >;

typedef struct _compressed_pair<unsigned long, std::__1::__map_value_compare<id<FBTableViewSectionDataSource>, std::__1::__value_type<id<FBTableViewSectionDataSource>, FBTableViewDelegateRespondsToCache>, std::__1::less<id<FBTableViewSectionDataSource> >, true> > {
	unsigned long long __first_;
} compressed_pair<unsigned long, std::__1::__map_value_compare<id<FBTableViewSectionDataSource>, std::__1::__value_type<id<FBTableViewSectionDataSource>, FBTableViewDelegateRespondsToCache>, std::__1::less<id<FBTableViewSectionDataSource> >, true> >;

typedef struct _compressed_pair<std::__1::__tree_end_node<std::__1::__tree_node_base<void *> *>, std::__1::allocator<std::__1::__tree_node<std::__1::__value_type<id<FBTableViewSectionDataSource>, FBTableViewDelegateRespondsToCache>, void *> > > {
	tree_end_node<std::__1::__tree_node_base<void *> *> __first_;
} compressed_pair<std::__1::__tree_end_node<std::__1::__tree_node_base<void *> *>, std::__1::allocator<std::__1::__tree_node<std::__1::__value_type<id<FBTableViewSectionDataSource>, FBTableViewDelegateRespondsToCache>, void *> > >;

typedef struct _tree<std::__1::__value_type<id<FBTableViewSectionDataSource>, FBTableViewDelegateRespondsToCache>, std::__1::__map_value_compare<id<FBTableViewSectionDataSource>, std::__1::__value_type<id<FBTableViewSectionDataSource>, FBTableViewDelegateRespondsToCache>, std::__1::less<id<FBTableViewSectionDataSource> >, true>, std::__1::allocator<std::__1::__value_type<id<FBTableViewSectionDataSource>, FBTableViewDelegateRespondsToCache> > > {
	__tree_node<std::__1::__value_type<id<FBTableViewSectionDataSource>, FBTableViewDelegateRespondsToCache>, void *> __begin_node_;
	compressed_pair<std::__1::__tree_end_node<std::__1::__tree_node_base<void *> *>, std::__1::allocator<std::__1::__tree_node<std::__1::__value_type<id<FBTableViewSectionDataSource>, FBTableViewDelegateRespondsToCache>, void *> > > __pair1_;
	compressed_pair<unsigned long, std::__1::__map_value_compare<id<FBTableViewSectionDataSource>, std::__1::__value_type<id<FBTableViewSectionDataSource>, FBTableViewDelegateRespondsToCache>, std::__1::less<id<FBTableViewSectionDataSource> >, true> > __pair3_;
} tree<std::__1::__value_type<id<FBTableViewSectionDataSource>, FBTableViewDelegateRespondsToCache>, std::__1::__map_value_compare<id<FBTableViewSectionDataSource>, std::__1::__value_type<id<FBTableViewSectionDataSource>, FBTableViewDelegateRespondsToCache>, std::__1::less<id<FBTableViewSectionDataSource> >, true>, std::__1::allocator<std::__1::__value_type<id<FBTableViewSectionDataSource>, FBTableViewDelegateRespondsToCache> > >;

typedef struct map<id<FBTableViewSectionDataSource>, FBTableViewDelegateRespondsToCache, std::__1::less<id<FBTableViewSectionDataSource> >, std::__1::allocator<std::__1::pair<const id<FBTableViewSectionDataSource>, FBTableViewDelegateRespondsToCache> > > {
	tree<std::__1::__value_type<id<FBTableViewSectionDataSource>, FBTableViewDelegateRespondsToCache>, std::__1::__map_value_compare<id<FBTableViewSectionDataSource>, std::__1::__value_type<id<FBTableViewSectionDataSource>, FBTableViewDelegateRespondsToCache>, std::__1::less<id<FBTableViewSectionDataSource> >, true>, std::__1::allocator<std::__1::__value_type<id<FBTableViewSectionDataSource>, FBTableViewDelegateRespondsToCache> > > __tree_;
} map<id<FBTableViewSectionDataSource>, FBTableViewDelegateRespondsToCache, std::__1::less<id<FBTableViewSectionDataSource> >, std::__1::allocator<std::__1::pair<const id<FBTableViewSectionDataSource>, FBTableViewDelegateRespondsToCache> > >;

typedef struct _compressed_pair<unsigned long, std::__1::__map_value_compare<NSString *, std::__1::__value_type<NSString *, FBNotificationsDataSourceLoadLifeCycleAttributes>, FBNSStringComparator, true> > {
	unsigned long long __first_;
} compressed_pair<unsigned long, std::__1::__map_value_compare<NSString *, std::__1::__value_type<NSString *, FBNotificationsDataSourceLoadLifeCycleAttributes>, FBNSStringComparator, true> >;

typedef struct _compressed_pair<std::__1::__tree_end_node<std::__1::__tree_node_base<void *> *>, std::__1::allocator<std::__1::__tree_node<std::__1::__value_type<NSString *, FBNotificationsDataSourceLoadLifeCycleAttributes>, void *> > > {
	tree_end_node<std::__1::__tree_node_base<void *> *> __first_;
} compressed_pair<std::__1::__tree_end_node<std::__1::__tree_node_base<void *> *>, std::__1::allocator<std::__1::__tree_node<std::__1::__value_type<NSString *, FBNotificationsDataSourceLoadLifeCycleAttributes>, void *> > >;

typedef struct _tree<std::__1::__value_type<NSString *, FBNotificationsDataSourceLoadLifeCycleAttributes>, std::__1::__map_value_compare<NSString *, std::__1::__value_type<NSString *, FBNotificationsDataSourceLoadLifeCycleAttributes>, FBNSStringComparator, true>, std::__1::allocator<std::__1::__value_type<NSString *, FBNotificationsDataSourceLoadLifeCycleAttributes> > > {
	__tree_node<std::__1::__value_type<NSString *, FBNotificationsDataSourceLoadLifeCycleAttributes>, void *> __begin_node_;
	compressed_pair<std::__1::__tree_end_node<std::__1::__tree_node_base<void *> *>, std::__1::allocator<std::__1::__tree_node<std::__1::__value_type<NSString *, FBNotificationsDataSourceLoadLifeCycleAttributes>, void *> > > __pair1_;
	compressed_pair<unsigned long, std::__1::__map_value_compare<NSString *, std::__1::__value_type<NSString *, FBNotificationsDataSourceLoadLifeCycleAttributes>, FBNSStringComparator, true> > __pair3_;
} tree<std::__1::__value_type<NSString *, FBNotificationsDataSourceLoadLifeCycleAttributes>, std::__1::__map_value_compare<NSString *, std::__1::__value_type<NSString *, FBNotificationsDataSourceLoadLifeCycleAttributes>, FBNSStringComparator, true>, std::__1::allocator<std::__1::__value_type<NSString *, FBNotificationsDataSourceLoadLifeCycleAttributes> > >;

typedef struct map<NSString *, FBNotificationsDataSourceLoadLifeCycleAttributes, FBNSStringComparator, std::__1::allocator<std::__1::pair<NSString *const, FBNotificationsDataSourceLoadLifeCycleAttributes> > > {
	tree<std::__1::__value_type<NSString *, FBNotificationsDataSourceLoadLifeCycleAttributes>, std::__1::__map_value_compare<NSString *, std::__1::__value_type<NSString *, FBNotificationsDataSourceLoadLifeCycleAttributes>, FBNSStringComparator, true>, std::__1::allocator<std::__1::__value_type<NSString *, FBNotificationsDataSourceLoadLifeCycleAttributes> > > __tree_;
} map<NSString *, FBNotificationsDataSourceLoadLifeCycleAttributes, FBNSStringComparator, std::__1::allocator<std::__1::pair<NSString *const, FBNotificationsDataSourceLoadLifeCycleAttributes> > >;

typedef struct FBAnimationGroupConfiguration {
	Class animationClass;
	CAMediaTimingFunction* timingFunction;
	double duration;
	double springMass;
	double springDamping;
	double springStiffness;
} FBAnimationGroupConfiguration;

typedef struct FBLoomStartEntry {
	double maximumTraceTime;
	long long traceID;
	int activeProviders;
} FBLoomStartEntry;

typedef struct FBLoomAbortEntry {
	int abortReason;
} FBLoomAbortEntry;

typedef struct FBLoomStackFrameEntry {
	void* functionAddresses[4];
} FBLoomStackFrameEntry;

typedef struct FBLoomQPLEntry {
	short actionID;
	int markerID;
	int uniqueID;
	BOOL usesSuspectTimestamp;
	BOOL isTraceTrigger;
} FBLoomQPLEntry;

typedef struct FBLoomAsyncCallEntry {
	void callsiteAddress;
} FBLoomAsyncCallEntry;

typedef struct FBLoomAsyncCallStartEntry {
	void calleeAddress;
	unsigned matchID;
} FBLoomAsyncCallStartEntry;

typedef struct FBLoomAsyncCallEndEntry {
	unsigned matchID;
} FBLoomAsyncCallEndEntry;

typedef struct FBLoomNetworkingEntry {
	unsigned long long requestID;
} FBLoomNetworkingEntry;

typedef struct FBLoomLegacyPerfLoggerEntry {
	unsigned matchID;
	int markerID;
} FBLoomLegacyPerfLoggerEntry;

typedef struct FBLoomCounterLogEntry {
	int counterID;
	long long counterValue;
} FBLoomCounterLogEntry;

typedef struct FBLoomTraceAnnotationLogEntry {
	unsigned annotationQPLID;
	unsigned long long annotationValue;
} FBLoomTraceAnnotationLogEntry;

typedef struct FBLoomStringEntry {
	unsigned matchID;
	unsigned char stringLength;
	char string[43];
} FBLoomStringEntry;

typedef struct FBLoomTimeEntry {
	unsigned threadID;
	unsigned long long timestamp;
	/*function pointer*/void* ;
	FBLoomStartEntry startEntry;
	FBLoomAbortEntry abortEntry;
	FBLoomStackFrameEntry stackFrameEntry;
	FBLoomQPLEntry QPLEntry;
	FBLoomAsyncCallEntry asyncCallEntry;
	FBLoomAsyncCallStartEntry asyncCallStartEntry;
	FBLoomAsyncCallEndEntry asyncCallEndEntry;
	FBLoomNetworkingEntry networkingEntry;
	FBLoomLegacyPerfLoggerEntry legacyPerfLoggerEntry;
	FBLoomCounterLogEntry counterEntry;
	FBLoomTraceAnnotationLogEntry) annotationEntry;
} FBLoomTimeEntry;

typedef struct FBLoomLogEntry {
	int entryID;
	int entryType;
	/*function pointer*/void* ;
	FBLoomTimeEntry timeEntry;
	FBLoomStringEntry) stringEntry;
} FBLoomLogEntry;

typedef struct shared_ptr<facebook::FBBlockingQueue<folly::LockFreeRingBuffer<facebook::dextr::FBLoomLogEntry, std::atomic>::Cursor> > {
	FBBlockingQueue<folly::LockFreeRingBuffer<facebook::dextr::FBLoomLogEntry, std::atomic>::Cursor> __ptr_;
	__shared_weak_count __cntrl_;
} shared_ptr<facebook::FBBlockingQueue<folly::LockFreeRingBuffer<facebook::dextr::FBLoomLogEntry, std::atomic>::Cursor> >;

typedef struct _compressed_pair<facebook::mobile::xplat::executor::InlineSyncExecutor *, std::__1::default_delete<facebook::mobile::xplat::executor::InlineSyncExecutor> > {
	InlineSyncExecutor __first_;
} compressed_pair<facebook::mobile::xplat::executor::InlineSyncExecutor *, std::__1::default_delete<facebook::mobile::xplat::executor::InlineSyncExecutor> >;

typedef struct unique_ptr<facebook::mobile::xplat::executor::InlineSyncExecutor, std::__1::default_delete<facebook::mobile::xplat::executor::InlineSyncExecutor> > {
	compressed_pair<facebook::mobile::xplat::executor::InlineSyncExecutor *, std::__1::default_delete<facebook::mobile::xplat::executor::InlineSyncExecutor> > __ptr_;
} unique_ptr<facebook::mobile::xplat::executor::InlineSyncExecutor, std::__1::default_delete<facebook::mobile::xplat::executor::InlineSyncExecutor> >;

typedef struct _compressed_pair<facebook::mobile::xplat::executor::ObserverToken *, std::__1::default_delete<facebook::mobile::xplat::executor::ObserverToken> > {
	ObserverToken __first_;
} compressed_pair<facebook::mobile::xplat::executor::ObserverToken *, std::__1::default_delete<facebook::mobile::xplat::executor::ObserverToken> >;

typedef struct unique_ptr<facebook::mobile::xplat::executor::ObserverToken, std::__1::default_delete<facebook::mobile::xplat::executor::ObserverToken> > {
	compressed_pair<facebook::mobile::xplat::executor::ObserverToken *, std::__1::default_delete<facebook::mobile::xplat::executor::ObserverToken> > __ptr_;
} unique_ptr<facebook::mobile::xplat::executor::ObserverToken, std::__1::default_delete<facebook::mobile::xplat::executor::ObserverToken> >;

typedef struct shared_ptr<FBLoomTigonObserver> {
	FBLoomTigonObserver __ptr_;
	__shared_weak_count __cntrl_;
} shared_ptr<FBLoomTigonObserver>;

typedef struct shared_ptr<FBLoomQPLListener> {
	FBLoomQPLListener __ptr_;
	__shared_weak_count __cntrl_;
} shared_ptr<FBLoomQPLListener>;

typedef struct FBJSExecutorPerformanceStatistics {
	double loadBundleDuration;
	double createExecutorDuration;
	double executeBundleDuration;
	BOOL usedCustomJSC;
	BOOL usedBytecode;
} FBJSExecutorPerformanceStatistics;

typedef struct FBDBLEnterPasswordMetrics {
	/*function pointer*/void* _vptr$FBMetrics;
	BOOL _initialized;
	double contentSidePadding;
	double contentMinimumTopOffset;
	double contentMaximumTopOffset;
	double instructionsFontSize;
	double instructionsOffset;
	double fieldsHeight;
	double buttonOffset;
	double secondaryButtonOffset;
	double secondaryButtonInset;
	double buttonHeight;
	double buttonSeparator;
	double activityIndicatorLeftOffset;
} FBDBLEnterPasswordMetrics;

typedef struct FBDBLSettingsMainHeaderMetrics {
	/*function pointer*/void* _vptr$FBMetrics;
	BOOL _initialized;
	double imageTopOffset;
	CGSize imageSize;
	double nameTopPadding;
	double nameHeight;
	double imageCornerRadius;
	unsigned long long nameLabelStyle;
	unsigned long long nameLabelFontWeight;
} FBDBLSettingsMainHeaderMetrics;

typedef struct FBDBLSettingsMainMetrics {
	/*function pointer*/void* _vptr$FBMetrics;
	BOOL _initialized;
	double rowHeight;
	double headerViewHeight;
	double textLabelFontSize;
	double sectionHeaderFooterHeight;
	double removeAccountRowHeight;
} FBDBLSettingsMainMetrics;

typedef struct FBDBLSettingsSSOAccountMetrics {
	/*function pointer*/void* _vptr$FBMetrics;
	BOOL _initialized;
	CGSize imageSize;
	double imageBorderSize;
	double imageCornerRadius;
	double instructionsTitleFontSize;
	double instructionsFontSize;
	double instructionsOffset;
	double instructionsTopPadding;
	double instructionsButtonPadding;
	double instructionsSeparator;
	double imageTopOffset;
	double nameTopPadding;
	double nameHeight;
	double contentSidePadding;
	double lineWrapIndent;
	double instructionsTitleLineHeight;
	double instructionsLineHeight;
	double borderLength;
} FBDBLSettingsSSOAccountMetrics;

typedef struct FBDBLUserListMetrics {
	/*function pointer*/void* _vptr$FBMetrics;
	BOOL _initialized;
	double nameFontSize;
	double textThumbnailOffset;
} FBDBLUserListMetrics;

typedef struct _compressed_pair<unsigned long, std::__1::allocator<FB::CommentStream::Source::ItemChangeset> > {
	unsigned long long __first_;
} compressed_pair<unsigned long, std::__1::allocator<FB::CommentStream::Source::ItemChangeset> >;

typedef struct _compressed_pair<FB::CommentStream::Source::ItemChangeset **, std::__1::allocator<FB::CommentStream::Source::ItemChangeset *> > {
	ItemChangeset __first_;
} compressed_pair<FB::CommentStream::Source::ItemChangeset **, std::__1::allocator<FB::CommentStream::Source::ItemChangeset *> >;

typedef struct _split_buffer<FB::CommentStream::Source::ItemChangeset *, std::__1::allocator<FB::CommentStream::Source::ItemChangeset *> > {
	ItemChangeset __first_;
	ItemChangeset __begin_;
	ItemChangeset __end_;
	compressed_pair<FB::CommentStream::Source::ItemChangeset **, std::__1::allocator<FB::CommentStream::Source::ItemChangeset *> > __end_cap_;
} split_buffer<FB::CommentStream::Source::ItemChangeset *, std::__1::allocator<FB::CommentStream::Source::ItemChangeset *> >;

typedef struct deque<FB::CommentStream::Source::ItemChangeset, std::__1::allocator<FB::CommentStream::Source::ItemChangeset> > {
	split_buffer<FB::CommentStream::Source::ItemChangeset *, std::__1::allocator<FB::CommentStream::Source::ItemChangeset *> > __map_;
	unsigned long long __start_;
	compressed_pair<unsigned long, std::__1::allocator<FB::CommentStream::Source::ItemChangeset> > __size_;
} deque<FB::CommentStream::Source::ItemChangeset, std::__1::allocator<FB::CommentStream::Source::ItemChangeset> >;

typedef struct queue<FB::CommentStream::Source::ItemChangeset, std::__1::deque<FB::CommentStream::Source::ItemChangeset, std::__1::allocator<FB::CommentStream::Source::ItemChangeset> > > {
	deque<FB::CommentStream::Source::ItemChangeset, std::__1::allocator<FB::CommentStream::Source::ItemChangeset> > c;
} queue<FB::CommentStream::Source::ItemChangeset, std::__1::deque<FB::CommentStream::Source::ItemChangeset, std::__1::allocator<FB::CommentStream::Source::ItemChangeset> > >;

typedef struct _compressed_pair<unsigned long, std::__1::__map_value_compare<id<FBCommentStreamChildSource>, std::__1::__value_type<id<FBCommentStreamChildSource>, unsigned long>, std::__1::less<id<FBCommentStreamChildSource> >, true> > {
	unsigned long long __first_;
} compressed_pair<unsigned long, std::__1::__map_value_compare<id<FBCommentStreamChildSource>, std::__1::__value_type<id<FBCommentStreamChildSource>, unsigned long>, std::__1::less<id<FBCommentStreamChildSource> >, true> >;

typedef struct _compressed_pair<std::__1::__tree_end_node<std::__1::__tree_node_base<void *> *>, std::__1::allocator<std::__1::__tree_node<std::__1::__value_type<id<FBCommentStreamChildSource>, unsigned long>, void *> > > {
	tree_end_node<std::__1::__tree_node_base<void *> *> __first_;
} compressed_pair<std::__1::__tree_end_node<std::__1::__tree_node_base<void *> *>, std::__1::allocator<std::__1::__tree_node<std::__1::__value_type<id<FBCommentStreamChildSource>, unsigned long>, void *> > >;

typedef struct _tree<std::__1::__value_type<id<FBCommentStreamChildSource>, unsigned long>, std::__1::__map_value_compare<id<FBCommentStreamChildSource>, std::__1::__value_type<id<FBCommentStreamChildSource>, unsigned long>, std::__1::less<id<FBCommentStreamChildSource> >, true>, std::__1::allocator<std::__1::__value_type<id<FBCommentStreamChildSource>, unsigned long> > > {
	__tree_node<std::__1::__value_type<id<FBCommentStreamChildSource>, unsigned long>, void *> __begin_node_;
	compressed_pair<std::__1::__tree_end_node<std::__1::__tree_node_base<void *> *>, std::__1::allocator<std::__1::__tree_node<std::__1::__value_type<id<FBCommentStreamChildSource>, unsigned long>, void *> > > __pair1_;
	compressed_pair<unsigned long, std::__1::__map_value_compare<id<FBCommentStreamChildSource>, std::__1::__value_type<id<FBCommentStreamChildSource>, unsigned long>, std::__1::less<id<FBCommentStreamChildSource> >, true> > __pair3_;
} tree<std::__1::__value_type<id<FBCommentStreamChildSource>, unsigned long>, std::__1::__map_value_compare<id<FBCommentStreamChildSource>, std::__1::__value_type<id<FBCommentStreamChildSource>, unsigned long>, std::__1::less<id<FBCommentStreamChildSource> >, true>, std::__1::allocator<std::__1::__value_type<id<FBCommentStreamChildSource>, unsigned long> > >;

typedef struct map<id<FBCommentStreamChildSource>, unsigned long, std::__1::less<id<FBCommentStreamChildSource> >, std::__1::allocator<std::__1::pair<const id<FBCommentStreamChildSource>, unsigned long> > > {
	tree<std::__1::__value_type<id<FBCommentStreamChildSource>, unsigned long>, std::__1::__map_value_compare<id<FBCommentStreamChildSource>, std::__1::__value_type<id<FBCommentStreamChildSource>, unsigned long>, std::__1::less<id<FBCommentStreamChildSource> >, true>, std::__1::allocator<std::__1::__value_type<id<FBCommentStreamChildSource>, unsigned long> > > __tree_;
} map<id<FBCommentStreamChildSource>, unsigned long, std::__1::less<id<FBCommentStreamChildSource> >, std::__1::allocator<std::__1::pair<const id<FBCommentStreamChildSource>, unsigned long> > >;

typedef struct Batch {
	NSDictionary* updates;
	NSIndexSet* removes;
	NSDictionary* inserts;
	NSArray* debugModifications;
	long long debugGeneration;
} Batch;

typedef struct {
	id field1;
	id field2;
	id field3;
	BOOL field4;
	double field5;
	BOOL field6;
	unsigned long long field7;
	BOOL field8;
} SCD_Struct_FI711;

typedef struct {
	id field1;
	id field2;
	id field3;
	double field4;
	BOOL field5;
	BOOL field6;
	CKComponentAccessibilityTextAttribute field7;
} SCD_Struct_FI712;

typedef struct {
	id field1;
	id field2;
	id field3;
	double field4;
	BOOL field5;
} SCD_Struct_FI713;

typedef struct RtcAppConfig {
	BOOL useP2PConnection;
} RtcAppConfig;

typedef struct _compressed_pair<WebRTCEngine *, std::__1::default_delete<WebRTCEngine> > {
	WebRTCEngine __first_;
} compressed_pair<WebRTCEngine *, std::__1::default_delete<WebRTCEngine> >;

typedef struct unique_ptr<WebRTCEngine, std::__1::default_delete<WebRTCEngine> > {
	compressed_pair<WebRTCEngine *, std::__1::default_delete<WebRTCEngine> > __ptr_;
} unique_ptr<WebRTCEngine, std::__1::default_delete<WebRTCEngine> >;

typedef struct weak_ptr<facebook::rtc::MediaCaptureSink> {
	MediaCaptureSink __ptr_;
	__shared_weak_count __cntrl_;
} weak_ptr<facebook::rtc::MediaCaptureSink>;

typedef struct weak_ptr<facebook::rtc::MediaInterface> {
	MediaInterface __ptr_;
	__shared_weak_count __cntrl_;
} weak_ptr<facebook::rtc::MediaInterface>;

typedef struct _compressed_pair<unsigned long, std::__1::allocator<std::__1::__list_node<std::__1::unique_ptr<FBWebRTCVoiceProcessorWrapper, std::__1::default_delete<FBWebRTCVoiceProcessorWrapper> >, void *> > > {
	unsigned long long __first_;
} compressed_pair<unsigned long, std::__1::allocator<std::__1::__list_node<std::__1::unique_ptr<FBWebRTCVoiceProcessorWrapper, std::__1::default_delete<FBWebRTCVoiceProcessorWrapper> >, void *> > >;

typedef struct _list_node_base<std::__1::unique_ptr<FBWebRTCVoiceProcessorWrapper, std::__1::default_delete<FBWebRTCVoiceProcessorWrapper> >, void *> {
	__list_node_base<std::__1::unique_ptr<FBWebRTCVoiceProcessorWrapper, std::__1::default_delete<FBWebRTCVoiceProcessorWrapper> >, void *> __prev_;
	__list_node_base<std::__1::unique_ptr<FBWebRTCVoiceProcessorWrapper, std::__1::default_delete<FBWebRTCVoiceProcessorWrapper> >, void *> __next_;
} list_node_base<std::__1::unique_ptr<FBWebRTCVoiceProcessorWrapper, std::__1::default_delete<FBWebRTCVoiceProcessorWrapper> >, void *>;

typedef struct list<std::__1::unique_ptr<FBWebRTCVoiceProcessorWrapper, std::__1::default_delete<FBWebRTCVoiceProcessorWrapper> >, std::__1::allocator<std::__1::unique_ptr<FBWebRTCVoiceProcessorWrapper, std::__1::default_delete<FBWebRTCVoiceProcessorWrapper> > > > {
	list_node_base<std::__1::unique_ptr<FBWebRTCVoiceProcessorWrapper, std::__1::default_delete<FBWebRTCVoiceProcessorWrapper> >, void *> __end_;
	compressed_pair<unsigned long, std::__1::allocator<std::__1::__list_node<std::__1::unique_ptr<FBWebRTCVoiceProcessorWrapper, std::__1::default_delete<FBWebRTCVoiceProcessorWrapper> >, void *> > > __size_alloc_;
} list<std::__1::unique_ptr<FBWebRTCVoiceProcessorWrapper, std::__1::default_delete<FBWebRTCVoiceProcessorWrapper> >, std::__1::allocator<std::__1::unique_ptr<FBWebRTCVoiceProcessorWrapper, std::__1::default_delete<FBWebRTCVoiceProcessorWrapper> > > >;

typedef struct _compressed_pair<__strong id *, std::__1::allocator<id> > {
	id __first_;
} compressed_pair<__strong id *, std::__1::allocator<id> >;

typedef struct vector<id, std::__1::allocator<id> > {
	id __begin_;
	id __end_;
	compressed_pair<__strong id *, std::__1::allocator<id> > __end_cap_;
} vector<id, std::__1::allocator<id> >;

typedef struct _compressed_pair<UIImage *__strong *, std::__1::allocator<UIImage *> > {
	id __first_;
} compressed_pair<UIImage *__strong *, std::__1::allocator<UIImage *> >;

typedef struct vector<UIImage *, std::__1::allocator<UIImage *> > {
	id __begin_;
	id __end_;
	compressed_pair<UIImage *__strong *, std::__1::allocator<UIImage *> > __end_cap_;
} vector<UIImage *, std::__1::allocator<UIImage *> >;

typedef struct __CFBinaryHeap* CFBinaryHeapRef;

typedef struct _compressed_pair<unsigned long, std::__1::less<FBNotificationsUniqueJewelID> > {
	unsigned long long __first_;
} compressed_pair<unsigned long, std::__1::less<FBNotificationsUniqueJewelID> >;

typedef struct _compressed_pair<std::__1::__tree_end_node<std::__1::__tree_node_base<void *> *>, std::__1::allocator<std::__1::__tree_node<FBNotificationsUniqueJewelID, void *> > > {
	tree_end_node<std::__1::__tree_node_base<void *> *> __first_;
} compressed_pair<std::__1::__tree_end_node<std::__1::__tree_node_base<void *> *>, std::__1::allocator<std::__1::__tree_node<FBNotificationsUniqueJewelID, void *> > >;

typedef struct _tree<FBNotificationsUniqueJewelID, std::__1::less<FBNotificationsUniqueJewelID>, std::__1::allocator<FBNotificationsUniqueJewelID> > {
	__tree_node<FBNotificationsUniqueJewelID, void *> __begin_node_;
	compressed_pair<std::__1::__tree_end_node<std::__1::__tree_node_base<void *> *>, std::__1::allocator<std::__1::__tree_node<FBNotificationsUniqueJewelID, void *> > > __pair1_;
	compressed_pair<unsigned long, std::__1::less<FBNotificationsUniqueJewelID> > __pair3_;
} tree<FBNotificationsUniqueJewelID, std::__1::less<FBNotificationsUniqueJewelID>, std::__1::allocator<FBNotificationsUniqueJewelID> >;

typedef struct set<FBNotificationsUniqueJewelID, std::__1::less<FBNotificationsUniqueJewelID>, std::__1::allocator<FBNotificationsUniqueJewelID> > {
	tree<FBNotificationsUniqueJewelID, std::__1::less<FBNotificationsUniqueJewelID>, std::__1::allocator<FBNotificationsUniqueJewelID> > __tree_;
} set<FBNotificationsUniqueJewelID, std::__1::less<FBNotificationsUniqueJewelID>, std::__1::allocator<FBNotificationsUniqueJewelID> >;

typedef struct vDSP_DFT_SetupStruct* vDSP_DFT_SetupStructRef;

typedef struct opaqueMTAudioProcessingTap* opaqueMTAudioProcessingTapRef;

typedef struct AudioStreamBasicDescription {
	double mSampleRate;
	unsigned mFormatID;
	unsigned mFormatFlags;
	unsigned mBytesPerPacket;
	unsigned mFramesPerPacket;
	unsigned mBytesPerFrame;
	unsigned mChannelsPerFrame;
	unsigned mBitsPerChannel;
	unsigned mReserved;
} AudioStreamBasicDescription;

typedef struct {
	float field1;
	float field2;
	float field3;
	BOOL field4;
} SCD_Struct_FB734;

typedef struct __CFUUID* CFUUIDRef;

typedef struct _compressed_pair<unsigned long, std::__1::allocator<std::__1::__hash_node<std::__1::__hash_value_type<__unsafe_unretained Class, FBFeedComponentExperimentCacheContext>, void *> *> > {
	unsigned long long __first_;
} compressed_pair<unsigned long, std::__1::allocator<std::__1::__hash_node<std::__1::__hash_value_type<__unsafe_unretained Class, FBFeedComponentExperimentCacheContext>, void *> *> >;

typedef struct _compressed_pair<unsigned long, std::__1::__unordered_map_hasher<__unsafe_unretained Class, std::__1::__hash_value_type<__unsafe_unretained Class, FBFeedComponentExperimentCacheContext>, FB::HashFunctor<__unsafe_unretained Class>, true> > {
	unsigned long long __first_;
} compressed_pair<unsigned long, std::__1::__unordered_map_hasher<__unsafe_unretained Class, std::__1::__hash_value_type<__unsafe_unretained Class, FBFeedComponentExperimentCacheContext>, FB::HashFunctor<__unsafe_unretained Class>, true> >;

typedef struct _compressed_pair<float, std::__1::__unordered_map_equal<__unsafe_unretained Class, std::__1::__hash_value_type<__unsafe_unretained Class, FBFeedComponentExperimentCacheContext>, FB::EqualFunctor<__unsafe_unretained Class>, true> > {
	float __first_;
} compressed_pair<float, std::__1::__unordered_map_equal<__unsafe_unretained Class, std::__1::__hash_value_type<__unsafe_unretained Class, FBFeedComponentExperimentCacheContext>, FB::EqualFunctor<__unsafe_unretained Class>, true> >;

typedef struct _hash_node_base<std::__1::__hash_node<std::__1::__hash_value_type<__unsafe_unretained Class, FBFeedComponentExperimentCacheContext>, void *> *> {
	__hash_node<std::__1::__hash_value_type<__unsafe_unretained Class, FBFeedComponentExperimentCacheContext>, void *> __next_;
} hash_node_base<std::__1::__hash_node<std::__1::__hash_value_type<__unsafe_unretained Class, FBFeedComponentExperimentCacheContext>, void *> *>;

typedef struct _compressed_pair<std::__1::__hash_node_base<std::__1::__hash_node<std::__1::__hash_value_type<__unsafe_unretained Class, FBFeedComponentExperimentCacheContext>, void *> *>, std::__1::allocator<std::__1::__hash_node<std::__1::__hash_value_type<__unsafe_unretained Class, FBFeedComponentExperimentCacheContext>, void *> > > {
	hash_node_base<std::__1::__hash_node<std::__1::__hash_value_type<__unsafe_unretained Class, FBFeedComponentExperimentCacheContext>, void *> *> __first_;
} compressed_pair<std::__1::__hash_node_base<std::__1::__hash_node<std::__1::__hash_value_type<__unsafe_unretained Class, FBFeedComponentExperimentCacheContext>, void *> *>, std::__1::allocator<std::__1::__hash_node<std::__1::__hash_value_type<__unsafe_unretained Class, FBFeedComponentExperimentCacheContext>, void *> > >;

typedef struct _bucket_list_deallocator<std::__1::allocator<std::__1::__hash_node<std::__1::__hash_value_type<__unsafe_unretained Class, FBFeedComponentExperimentCacheContext>, void *> *> > {
	compressed_pair<unsigned long, std::__1::allocator<std::__1::__hash_node<std::__1::__hash_value_type<__unsafe_unretained Class, FBFeedComponentExperimentCacheContext>, void *> *> > __data_;
} bucket_list_deallocator<std::__1::allocator<std::__1::__hash_node<std::__1::__hash_value_type<__unsafe_unretained Class, FBFeedComponentExperimentCacheContext>, void *> *> >;

typedef struct _compressed_pair<std::__1::__hash_node<std::__1::__hash_value_type<__unsafe_unretained Class, FBFeedComponentExperimentCacheContext>, void *> **, std::__1::__bucket_list_deallocator<std::__1::allocator<std::__1::__hash_node<std::__1::__hash_value_type<__unsafe_unretained Class, FBFeedComponentExperimentCacheContext>, void *> *> > > {
	__hash_node<std::__1::__hash_value_type<__unsafe_unretained Class, FBFeedComponentExperimentCacheContext>, void *> __first_;
	bucket_list_deallocator<std::__1::allocator<std::__1::__hash_node<std::__1::__hash_value_type<__unsafe_unretained Class, FBFeedComponentExperimentCacheContext>, void *> *> > __second_;
} compressed_pair<std::__1::__hash_node<std::__1::__hash_value_type<__unsafe_unretained Class, FBFeedComponentExperimentCacheContext>, void *> **, std::__1::__bucket_list_deallocator<std::__1::allocator<std::__1::__hash_node<std::__1::__hash_value_type<__unsafe_unretained Class, FBFeedComponentExperimentCacheContext>, void *> *> > >;

typedef struct unique_ptr<std::__1::__hash_node<std::__1::__hash_value_type<__unsafe_unretained Class, FBFeedComponentExperimentCacheContext>, void *> *[], std::__1::__bucket_list_deallocator<std::__1::allocator<std::__1::__hash_node<std::__1::__hash_value_type<__unsafe_unretained Class, FBFeedComponentExperimentCacheContext>, void *> *> > > {
	compressed_pair<std::__1::__hash_node<std::__1::__hash_value_type<__unsafe_unretained Class, FBFeedComponentExperimentCacheContext>, void *> **, std::__1::__bucket_list_deallocator<std::__1::allocator<std::__1::__hash_node<std::__1::__hash_value_type<__unsafe_unretained Class, FBFeedComponentExperimentCacheContext>, void *> *> > > __ptr_;
} unique_ptr<std::__1::__hash_node<std::__1::__hash_value_type<__unsafe_unretained Class, FBFeedComponentExperimentCacheContext>, void *> *[], std::__1::__bucket_list_deallocator<std::__1::allocator<std::__1::__hash_node<std::__1::__hash_value_type<__unsafe_unretained Class, FBFeedComponentExperimentCacheContext>, void *> *> > >;

typedef struct _hash_table<std::__1::__hash_value_type<__unsafe_unretained Class, FBFeedComponentExperimentCacheContext>, std::__1::__unordered_map_hasher<__unsafe_unretained Class, std::__1::__hash_value_type<__unsafe_unretained Class, FBFeedComponentExperimentCacheContext>, FB::HashFunctor<__unsafe_unretained Class>, true>, std::__1::__unordered_map_equal<__unsafe_unretained Class, std::__1::__hash_value_type<__unsafe_unretained Class, FBFeedComponentExperimentCacheContext>, FB::EqualFunctor<__unsafe_unretained Class>, true>, std::__1::allocator<std::__1::__hash_value_type<__unsafe_unretained Class, FBFeedComponentExperimentCacheContext> > > {
	unique_ptr<std::__1::__hash_node<std::__1::__hash_value_type<__unsafe_unretained Class, FBFeedComponentExperimentCacheContext>, void *> *[], std::__1::__bucket_list_deallocator<std::__1::allocator<std::__1::__hash_node<std::__1::__hash_value_type<__unsafe_unretained Class, FBFeedComponentExperimentCacheContext>, void *> *> > > __bucket_list_;
	compressed_pair<std::__1::__hash_node_base<std::__1::__hash_node<std::__1::__hash_value_type<__unsafe_unretained Class, FBFeedComponentExperimentCacheContext>, void *> *>, std::__1::allocator<std::__1::__hash_node<std::__1::__hash_value_type<__unsafe_unretained Class, FBFeedComponentExperimentCacheContext>, void *> > > __p1_;
	compressed_pair<unsigned long, std::__1::__unordered_map_hasher<__unsafe_unretained Class, std::__1::__hash_value_type<__unsafe_unretained Class, FBFeedComponentExperimentCacheContext>, FB::HashFunctor<__unsafe_unretained Class>, true> > __p2_;
	compressed_pair<float, std::__1::__unordered_map_equal<__unsafe_unretained Class, std::__1::__hash_value_type<__unsafe_unretained Class, FBFeedComponentExperimentCacheContext>, FB::EqualFunctor<__unsafe_unretained Class>, true> > __p3_;
} hash_table<std::__1::__hash_value_type<__unsafe_unretained Class, FBFeedComponentExperimentCacheContext>, std::__1::__unordered_map_hasher<__unsafe_unretained Class, std::__1::__hash_value_type<__unsafe_unretained Class, FBFeedComponentExperimentCacheContext>, FB::HashFunctor<__unsafe_unretained Class>, true>, std::__1::__unordered_map_equal<__unsafe_unretained Class, std::__1::__hash_value_type<__unsafe_unretained Class, FBFeedComponentExperimentCacheContext>, FB::EqualFunctor<__unsafe_unretained Class>, true>, std::__1::allocator<std::__1::__hash_value_type<__unsafe_unretained Class, FBFeedComponentExperimentCacheContext> > >;

typedef struct unordered_map<__unsafe_unretained Class, FBFeedComponentExperimentCacheContext, FB::HashFunctor<__unsafe_unretained Class>, FB::EqualFunctor<__unsafe_unretained Class>, std::__1::allocator<std::__1::pair<const __unsafe_unretained Class, FBFeedComponentExperimentCacheContext> > > {
	hash_table<std::__1::__hash_value_type<__unsafe_unretained Class, FBFeedComponentExperimentCacheContext>, std::__1::__unordered_map_hasher<__unsafe_unretained Class, std::__1::__hash_value_type<__unsafe_unretained Class, FBFeedComponentExperimentCacheContext>, FB::HashFunctor<__unsafe_unretained Class>, true>, std::__1::__unordered_map_equal<__unsafe_unretained Class, std::__1::__hash_value_type<__unsafe_unretained Class, FBFeedComponentExperimentCacheContext>, FB::EqualFunctor<__unsafe_unretained Class>, true>, std::__1::allocator<std::__1::__hash_value_type<__unsafe_unretained Class, FBFeedComponentExperimentCacheContext> > > __table_;
} unordered_map<__unsafe_unretained Class, FBFeedComponentExperimentCacheContext, FB::HashFunctor<__unsafe_unretained Class>, FB::EqualFunctor<__unsafe_unretained Class>, std::__1::allocator<std::__1::pair<const __unsafe_unretained Class, FBFeedComponentExperimentCacheContext> > >;

typedef struct _compressed_pair<unsigned long, std::__1::allocator<std::__1::__hash_node<std::__1::__hash_value_type<FBFeedEventBusFactoryKey, FBFeedEventBus *>, void *> *> > {
	unsigned long long __first_;
} compressed_pair<unsigned long, std::__1::allocator<std::__1::__hash_node<std::__1::__hash_value_type<FBFeedEventBusFactoryKey, FBFeedEventBus *>, void *> *> >;

typedef struct _compressed_pair<unsigned long, std::__1::__unordered_map_hasher<FBFeedEventBusFactoryKey, std::__1::__hash_value_type<FBFeedEventBusFactoryKey, FBFeedEventBus *>, std::__1::hash<FBFeedEventBusFactoryKey>, true> > {
	unsigned long long __first_;
} compressed_pair<unsigned long, std::__1::__unordered_map_hasher<FBFeedEventBusFactoryKey, std::__1::__hash_value_type<FBFeedEventBusFactoryKey, FBFeedEventBus *>, std::__1::hash<FBFeedEventBusFactoryKey>, true> >;

typedef struct _compressed_pair<float, std::__1::__unordered_map_equal<FBFeedEventBusFactoryKey, std::__1::__hash_value_type<FBFeedEventBusFactoryKey, FBFeedEventBus *>, std::__1::equal_to<FBFeedEventBusFactoryKey>, true> > {
	float __first_;
} compressed_pair<float, std::__1::__unordered_map_equal<FBFeedEventBusFactoryKey, std::__1::__hash_value_type<FBFeedEventBusFactoryKey, FBFeedEventBus *>, std::__1::equal_to<FBFeedEventBusFactoryKey>, true> >;

typedef struct _hash_node_base<std::__1::__hash_node<std::__1::__hash_value_type<FBFeedEventBusFactoryKey, FBFeedEventBus *>, void *> *> {
	__hash_node<std::__1::__hash_value_type<FBFeedEventBusFactoryKey, FBFeedEventBus *>, void *> __next_;
} hash_node_base<std::__1::__hash_node<std::__1::__hash_value_type<FBFeedEventBusFactoryKey, FBFeedEventBus *>, void *> *>;

typedef struct _compressed_pair<std::__1::__hash_node_base<std::__1::__hash_node<std::__1::__hash_value_type<FBFeedEventBusFactoryKey, FBFeedEventBus *>, void *> *>, std::__1::allocator<std::__1::__hash_node<std::__1::__hash_value_type<FBFeedEventBusFactoryKey, FBFeedEventBus *>, void *> > > {
	hash_node_base<std::__1::__hash_node<std::__1::__hash_value_type<FBFeedEventBusFactoryKey, FBFeedEventBus *>, void *> *> __first_;
} compressed_pair<std::__1::__hash_node_base<std::__1::__hash_node<std::__1::__hash_value_type<FBFeedEventBusFactoryKey, FBFeedEventBus *>, void *> *>, std::__1::allocator<std::__1::__hash_node<std::__1::__hash_value_type<FBFeedEventBusFactoryKey, FBFeedEventBus *>, void *> > >;

typedef struct _bucket_list_deallocator<std::__1::allocator<std::__1::__hash_node<std::__1::__hash_value_type<FBFeedEventBusFactoryKey, FBFeedEventBus *>, void *> *> > {
	compressed_pair<unsigned long, std::__1::allocator<std::__1::__hash_node<std::__1::__hash_value_type<FBFeedEventBusFactoryKey, FBFeedEventBus *>, void *> *> > __data_;
} bucket_list_deallocator<std::__1::allocator<std::__1::__hash_node<std::__1::__hash_value_type<FBFeedEventBusFactoryKey, FBFeedEventBus *>, void *> *> >;

typedef struct _compressed_pair<std::__1::__hash_node<std::__1::__hash_value_type<FBFeedEventBusFactoryKey, FBFeedEventBus *>, void *> **, std::__1::__bucket_list_deallocator<std::__1::allocator<std::__1::__hash_node<std::__1::__hash_value_type<FBFeedEventBusFactoryKey, FBFeedEventBus *>, void *> *> > > {
	__hash_node<std::__1::__hash_value_type<FBFeedEventBusFactoryKey, FBFeedEventBus *>, void *> __first_;
	bucket_list_deallocator<std::__1::allocator<std::__1::__hash_node<std::__1::__hash_value_type<FBFeedEventBusFactoryKey, FBFeedEventBus *>, void *> *> > __second_;
} compressed_pair<std::__1::__hash_node<std::__1::__hash_value_type<FBFeedEventBusFactoryKey, FBFeedEventBus *>, void *> **, std::__1::__bucket_list_deallocator<std::__1::allocator<std::__1::__hash_node<std::__1::__hash_value_type<FBFeedEventBusFactoryKey, FBFeedEventBus *>, void *> *> > >;

typedef struct unique_ptr<std::__1::__hash_node<std::__1::__hash_value_type<FBFeedEventBusFactoryKey, FBFeedEventBus *>, void *> *[], std::__1::__bucket_list_deallocator<std::__1::allocator<std::__1::__hash_node<std::__1::__hash_value_type<FBFeedEventBusFactoryKey, FBFeedEventBus *>, void *> *> > > {
	compressed_pair<std::__1::__hash_node<std::__1::__hash_value_type<FBFeedEventBusFactoryKey, FBFeedEventBus *>, void *> **, std::__1::__bucket_list_deallocator<std::__1::allocator<std::__1::__hash_node<std::__1::__hash_value_type<FBFeedEventBusFactoryKey, FBFeedEventBus *>, void *> *> > > __ptr_;
} unique_ptr<std::__1::__hash_node<std::__1::__hash_value_type<FBFeedEventBusFactoryKey, FBFeedEventBus *>, void *> *[], std::__1::__bucket_list_deallocator<std::__1::allocator<std::__1::__hash_node<std::__1::__hash_value_type<FBFeedEventBusFactoryKey, FBFeedEventBus *>, void *> *> > >;

typedef struct _hash_table<std::__1::__hash_value_type<FBFeedEventBusFactoryKey, FBFeedEventBus *>, std::__1::__unordered_map_hasher<FBFeedEventBusFactoryKey, std::__1::__hash_value_type<FBFeedEventBusFactoryKey, FBFeedEventBus *>, std::__1::hash<FBFeedEventBusFactoryKey>, true>, std::__1::__unordered_map_equal<FBFeedEventBusFactoryKey, std::__1::__hash_value_type<FBFeedEventBusFactoryKey, FBFeedEventBus *>, std::__1::equal_to<FBFeedEventBusFactoryKey>, true>, std::__1::allocator<std::__1::__hash_value_type<FBFeedEventBusFactoryKey, FBFeedEventBus *> > > {
	unique_ptr<std::__1::__hash_node<std::__1::__hash_value_type<FBFeedEventBusFactoryKey, FBFeedEventBus *>, void *> *[], std::__1::__bucket_list_deallocator<std::__1::allocator<std::__1::__hash_node<std::__1::__hash_value_type<FBFeedEventBusFactoryKey, FBFeedEventBus *>, void *> *> > > __bucket_list_;
	compressed_pair<std::__1::__hash_node_base<std::__1::__hash_node<std::__1::__hash_value_type<FBFeedEventBusFactoryKey, FBFeedEventBus *>, void *> *>, std::__1::allocator<std::__1::__hash_node<std::__1::__hash_value_type<FBFeedEventBusFactoryKey, FBFeedEventBus *>, void *> > > __p1_;
	compressed_pair<unsigned long, std::__1::__unordered_map_hasher<FBFeedEventBusFactoryKey, std::__1::__hash_value_type<FBFeedEventBusFactoryKey, FBFeedEventBus *>, std::__1::hash<FBFeedEventBusFactoryKey>, true> > __p2_;
	compressed_pair<float, std::__1::__unordered_map_equal<FBFeedEventBusFactoryKey, std::__1::__hash_value_type<FBFeedEventBusFactoryKey, FBFeedEventBus *>, std::__1::equal_to<FBFeedEventBusFactoryKey>, true> > __p3_;
} hash_table<std::__1::__hash_value_type<FBFeedEventBusFactoryKey, FBFeedEventBus *>, std::__1::__unordered_map_hasher<FBFeedEventBusFactoryKey, std::__1::__hash_value_type<FBFeedEventBusFactoryKey, FBFeedEventBus *>, std::__1::hash<FBFeedEventBusFactoryKey>, true>, std::__1::__unordered_map_equal<FBFeedEventBusFactoryKey, std::__1::__hash_value_type<FBFeedEventBusFactoryKey, FBFeedEventBus *>, std::__1::equal_to<FBFeedEventBusFactoryKey>, true>, std::__1::allocator<std::__1::__hash_value_type<FBFeedEventBusFactoryKey, FBFeedEventBus *> > >;

typedef struct unordered_map<FBFeedEventBusFactoryKey, FBFeedEventBus *, std::__1::hash<FBFeedEventBusFactoryKey>, std::__1::equal_to<FBFeedEventBusFactoryKey>, std::__1::allocator<std::__1::pair<const FBFeedEventBusFactoryKey, FBFeedEventBus *> > > {
	hash_table<std::__1::__hash_value_type<FBFeedEventBusFactoryKey, FBFeedEventBus *>, std::__1::__unordered_map_hasher<FBFeedEventBusFactoryKey, std::__1::__hash_value_type<FBFeedEventBusFactoryKey, FBFeedEventBus *>, std::__1::hash<FBFeedEventBusFactoryKey>, true>, std::__1::__unordered_map_equal<FBFeedEventBusFactoryKey, std::__1::__hash_value_type<FBFeedEventBusFactoryKey, FBFeedEventBus *>, std::__1::equal_to<FBFeedEventBusFactoryKey>, true>, std::__1::allocator<std::__1::__hash_value_type<FBFeedEventBusFactoryKey, FBFeedEventBus *> > > __table_;
} unordered_map<FBFeedEventBusFactoryKey, FBFeedEventBus *, std::__1::hash<FBFeedEventBusFactoryKey>, std::__1::equal_to<FBFeedEventBusFactoryKey>, std::__1::allocator<std::__1::pair<const FBFeedEventBusFactoryKey, FBFeedEventBus *> > >;

typedef struct __CFString* CFStringRef;

typedef struct _compressed_pair<FBComponentCollectionViewDataSourceCellConfig *, std::__1::default_delete<FBComponentCollectionViewDataSourceCellConfig> > {
	FBComponentCollectionViewDataSourceCellConfig __first_;
} compressed_pair<FBComponentCollectionViewDataSourceCellConfig *, std::__1::default_delete<FBComponentCollectionViewDataSourceCellConfig> >;

typedef struct unique_ptr<FBComponentCollectionViewDataSourceCellConfig, std::__1::default_delete<FBComponentCollectionViewDataSourceCellConfig> > {
	compressed_pair<FBComponentCollectionViewDataSourceCellConfig *, std::__1::default_delete<FBComponentCollectionViewDataSourceCellConfig> > __ptr_;
} unique_ptr<FBComponentCollectionViewDataSourceCellConfig, std::__1::default_delete<FBComponentCollectionViewDataSourceCellConfig> >;

typedef struct FlowLayoutDelegateRespondsTo {
	BOOL sizeForItemAtIndexPath;
	BOOL insetForSectionAtIndex;
	BOOL minimumLineSpacingForSectionAtIndex;
	BOOL minimumInteritemSpacingForSectionAtIndex;
	BOOL referenceSizeForHeaderInSection;
	BOOL referenceSizeForFooterInSection;
} FlowLayoutDelegateRespondsTo;

typedef struct _compressed_pair<unsigned long, std::__1::__map_value_compare<UIView *, std::__1::__value_type<UIView *, id<NSObject> >, std::__1::less<UIView *>, true> > {
	unsigned long long __first_;
} compressed_pair<unsigned long, std::__1::__map_value_compare<UIView *, std::__1::__value_type<UIView *, id<NSObject> >, std::__1::less<UIView *>, true> >;

typedef struct _compressed_pair<std::__1::__tree_end_node<std::__1::__tree_node_base<void *> *>, std::__1::allocator<std::__1::__tree_node<std::__1::__value_type<UIView *, id<NSObject> >, void *> > > {
	tree_end_node<std::__1::__tree_node_base<void *> *> __first_;
} compressed_pair<std::__1::__tree_end_node<std::__1::__tree_node_base<void *> *>, std::__1::allocator<std::__1::__tree_node<std::__1::__value_type<UIView *, id<NSObject> >, void *> > >;

typedef struct _tree<std::__1::__value_type<UIView *, id<NSObject> >, std::__1::__map_value_compare<UIView *, std::__1::__value_type<UIView *, id<NSObject> >, std::__1::less<UIView *>, true>, std::__1::allocator<std::__1::__value_type<UIView *, id<NSObject> > > > {
	__tree_node<std::__1::__value_type<UIView *, id<NSObject> >, void *> __begin_node_;
	compressed_pair<std::__1::__tree_end_node<std::__1::__tree_node_base<void *> *>, std::__1::allocator<std::__1::__tree_node<std::__1::__value_type<UIView *, id<NSObject> >, void *> > > __pair1_;
	compressed_pair<unsigned long, std::__1::__map_value_compare<UIView *, std::__1::__value_type<UIView *, id<NSObject> >, std::__1::less<UIView *>, true> > __pair3_;
} tree<std::__1::__value_type<UIView *, id<NSObject> >, std::__1::__map_value_compare<UIView *, std::__1::__value_type<UIView *, id<NSObject> >, std::__1::less<UIView *>, true>, std::__1::allocator<std::__1::__value_type<UIView *, id<NSObject> > > >;

typedef struct map<UIView *, id<NSObject>, std::__1::less<UIView *>, std::__1::allocator<std::__1::pair<UIView *const, id<NSObject> > > > {
	tree<std::__1::__value_type<UIView *, id<NSObject> >, std::__1::__map_value_compare<UIView *, std::__1::__value_type<UIView *, id<NSObject> >, std::__1::less<UIView *>, true>, std::__1::allocator<std::__1::__value_type<UIView *, id<NSObject> > > > __tree_;
} map<UIView *, id<NSObject>, std::__1::less<UIView *>, std::__1::allocator<std::__1::pair<UIView *const, id<NSObject> > > >;

typedef struct _compressed_pair<unsigned long, std::__1::__map_value_compare<id<NSObject>, std::__1::__value_type<id<NSObject>, UIView *>, std::__1::less<id<NSObject> >, true> > {
	unsigned long long __first_;
} compressed_pair<unsigned long, std::__1::__map_value_compare<id<NSObject>, std::__1::__value_type<id<NSObject>, UIView *>, std::__1::less<id<NSObject> >, true> >;

typedef struct _compressed_pair<std::__1::__tree_end_node<std::__1::__tree_node_base<void *> *>, std::__1::allocator<std::__1::__tree_node<std::__1::__value_type<id<NSObject>, UIView *>, void *> > > {
	tree_end_node<std::__1::__tree_node_base<void *> *> __first_;
} compressed_pair<std::__1::__tree_end_node<std::__1::__tree_node_base<void *> *>, std::__1::allocator<std::__1::__tree_node<std::__1::__value_type<id<NSObject>, UIView *>, void *> > >;

typedef struct _tree<std::__1::__value_type<id<NSObject>, UIView *>, std::__1::__map_value_compare<id<NSObject>, std::__1::__value_type<id<NSObject>, UIView *>, std::__1::less<id<NSObject> >, true>, std::__1::allocator<std::__1::__value_type<id<NSObject>, UIView *> > > {
	__tree_node<std::__1::__value_type<id<NSObject>, UIView *>, void *> __begin_node_;
	compressed_pair<std::__1::__tree_end_node<std::__1::__tree_node_base<void *> *>, std::__1::allocator<std::__1::__tree_node<std::__1::__value_type<id<NSObject>, UIView *>, void *> > > __pair1_;
	compressed_pair<unsigned long, std::__1::__map_value_compare<id<NSObject>, std::__1::__value_type<id<NSObject>, UIView *>, std::__1::less<id<NSObject> >, true> > __pair3_;
} tree<std::__1::__value_type<id<NSObject>, UIView *>, std::__1::__map_value_compare<id<NSObject>, std::__1::__value_type<id<NSObject>, UIView *>, std::__1::less<id<NSObject> >, true>, std::__1::allocator<std::__1::__value_type<id<NSObject>, UIView *> > >;

typedef struct map<id<NSObject>, UIView *, std::__1::less<id<NSObject> >, std::__1::allocator<std::__1::pair<const id<NSObject>, UIView *> > > {
	tree<std::__1::__value_type<id<NSObject>, UIView *>, std::__1::__map_value_compare<id<NSObject>, std::__1::__value_type<id<NSObject>, UIView *>, std::__1::less<id<NSObject> >, true>, std::__1::allocator<std::__1::__value_type<id<NSObject>, UIView *> > > __tree_;
} map<id<NSObject>, UIView *, std::__1::less<id<NSObject> >, std::__1::allocator<std::__1::pair<const id<NSObject>, UIView *> > >;

typedef struct _compressed_pair<unsigned long, std::__1::__map_value_compare<UITableViewCell *, std::__1::__value_type<UITableViewCell *, id<NSObject> >, std::__1::less<UITableViewCell *>, true> > {
	unsigned long long __first_;
} compressed_pair<unsigned long, std::__1::__map_value_compare<UITableViewCell *, std::__1::__value_type<UITableViewCell *, id<NSObject> >, std::__1::less<UITableViewCell *>, true> >;

typedef struct _compressed_pair<std::__1::__tree_end_node<std::__1::__tree_node_base<void *> *>, std::__1::allocator<std::__1::__tree_node<std::__1::__value_type<UITableViewCell *, id<NSObject> >, void *> > > {
	tree_end_node<std::__1::__tree_node_base<void *> *> __first_;
} compressed_pair<std::__1::__tree_end_node<std::__1::__tree_node_base<void *> *>, std::__1::allocator<std::__1::__tree_node<std::__1::__value_type<UITableViewCell *, id<NSObject> >, void *> > >;

typedef struct _tree<std::__1::__value_type<UITableViewCell *, id<NSObject> >, std::__1::__map_value_compare<UITableViewCell *, std::__1::__value_type<UITableViewCell *, id<NSObject> >, std::__1::less<UITableViewCell *>, true>, std::__1::allocator<std::__1::__value_type<UITableViewCell *, id<NSObject> > > > {
	__tree_node<std::__1::__value_type<UITableViewCell *, id<NSObject> >, void *> __begin_node_;
	compressed_pair<std::__1::__tree_end_node<std::__1::__tree_node_base<void *> *>, std::__1::allocator<std::__1::__tree_node<std::__1::__value_type<UITableViewCell *, id<NSObject> >, void *> > > __pair1_;
	compressed_pair<unsigned long, std::__1::__map_value_compare<UITableViewCell *, std::__1::__value_type<UITableViewCell *, id<NSObject> >, std::__1::less<UITableViewCell *>, true> > __pair3_;
} tree<std::__1::__value_type<UITableViewCell *, id<NSObject> >, std::__1::__map_value_compare<UITableViewCell *, std::__1::__value_type<UITableViewCell *, id<NSObject> >, std::__1::less<UITableViewCell *>, true>, std::__1::allocator<std::__1::__value_type<UITableViewCell *, id<NSObject> > > >;

typedef struct map<UITableViewCell *, id<NSObject>, std::__1::less<UITableViewCell *>, std::__1::allocator<std::__1::pair<UITableViewCell *const, id<NSObject> > > > {
	tree<std::__1::__value_type<UITableViewCell *, id<NSObject> >, std::__1::__map_value_compare<UITableViewCell *, std::__1::__value_type<UITableViewCell *, id<NSObject> >, std::__1::less<UITableViewCell *>, true>, std::__1::allocator<std::__1::__value_type<UITableViewCell *, id<NSObject> > > > __tree_;
} map<UITableViewCell *, id<NSObject>, std::__1::less<UITableViewCell *>, std::__1::allocator<std::__1::pair<UITableViewCell *const, id<NSObject> > > >;

typedef struct _compressed_pair<FBComponentTableViewDataSourceCellConfig *, std::__1::default_delete<FBComponentTableViewDataSourceCellConfig> > {
	FBComponentTableViewDataSourceCellConfig __first_;
} compressed_pair<FBComponentTableViewDataSourceCellConfig *, std::__1::default_delete<FBComponentTableViewDataSourceCellConfig> >;

typedef struct unique_ptr<FBComponentTableViewDataSourceCellConfig, std::__1::default_delete<FBComponentTableViewDataSourceCellConfig> > {
	compressed_pair<FBComponentTableViewDataSourceCellConfig *, std::__1::default_delete<FBComponentTableViewDataSourceCellConfig> > __ptr_;
} unique_ptr<FBComponentTableViewDataSourceCellConfig, std::__1::default_delete<FBComponentTableViewDataSourceCellConfig> >;

typedef struct FBAuthenticationEnterPasscodeKeyboardMetrics {
	/*function pointer*/void* _vptr$FBMetrics;
	BOOL _initialized;
	double keypadHeight;
	double keypadHorizontalSeparator;
	double underlineHeight;
	double minimumFontScale;
	double deleteButtonOffset;
	NSString* keyFontName;
	double keyFontSize;
} FBAuthenticationEnterPasscodeKeyboardMetrics;

typedef struct FBAuthenticationEnterPasscodeMetrics {
	/*function pointer*/void* _vptr$FBMetrics;
	BOOL _initialized;
	double contentSidePadding;
	double contentTopOffset;
	double contentLoginSettingsTopOffset;
	double maximumInstructionsHeight;
	double instructionsLineHeight;
	double fontSize;
	double pinInputOffset;
	double pinInputHeight;
	double pinInputPaddingBetweenFields;
	double secondaryActionSeparatorOffset;
	double secondaryActionSeparatorHeight;
	double secondaryActionButtonHeight;
	double warningAnimationDuration;
	double warningVisibilityTime;
} FBAuthenticationEnterPasscodeMetrics;

typedef struct FBAuthenticationHeaderMetrics {
	/*function pointer*/void* _vptr$FBMetrics;
	BOOL _initialized;
	double headerTopAndButtonPadding;
} FBAuthenticationHeaderMetrics;

typedef struct {
	BOOL field1;
	id field2;
	CKTypedComponentAction<> field3;
} SCD_Struct_FB777;

typedef struct {
	BOOL field1;
	id field2;
} SCD_Struct_FI778;

typedef struct {
	id field1;
	id field2;
	BOOL field3;
	id field4;
	unsigned long long field5;
} SCD_Struct_FI779;

typedef struct {
	id field1;
	BOOL field2;
	id field3;
	id field4;
	CKTypedComponentAction<> field5;
} SCD_Struct_FI780;

typedef struct {
	unsigned long long field1;
	id field2;
	BOOL field3;
	id field4;
} SCD_Struct_FI781;

typedef struct {
	id field1;
	id field2;
	BOOL field3;
	unsigned long long field4;
	id field5;
	CKTypedComponentAction<> field6;
} SCD_Struct_FI782;

typedef struct delegateOptionalProtocolResponseFlags {
	unsigned delegateCollectionViewSizeForBackgroundHeaderViewInSection : 1;
	unsigned delegateCollectionViewHeightForRowCellInSection : 1;
	unsigned delegateCollectionViewSpacingBetweenRowsInSection : 1;
	unsigned delegateCollectionViewSectionInsetsForSection : 1;
} delegateOptionalProtocolResponseFlags;

typedef struct flags {
	unsigned isInTextChanged : 1;
	unsigned delegateTextFieldDidAddObject_DEPRECATED : 1;
	unsigned delegateTextFieldWillRemoveObject_DEPRECATED : 1;
	unsigned delegateTextFieldHeightWillChange : 1;
	unsigned delegateTextFieldHeightDidChange : 1;
	unsigned delegateTextFieldSearchTextChanged : 1;
	unsigned isInternalTextChange : 1;
	unsigned delegateTextFieldUserWillDeleteObjectByTyping : 1;
	unsigned delegateTextFieldSupportsEditing : 1;
	unsigned delegateTextFieldDidReceiveTap : 1;
} flags;

typedef struct shared_ptr<FB::Private::LiveSignal<FBTarotDigestCoverMediaCardEntitySurface> > {
	LiveSignal<FBTarotDigestCoverMediaCardEntitySurface> __ptr_;
	__shared_weak_count __cntrl_;
} shared_ptr<FB::Private::LiveSignal<FBTarotDigestCoverMediaCardEntitySurface> >;

typedef struct Signal<FBTarotDigestCoverMediaCardEntitySurface> {
	shared_ptr<FB::Private::LiveSignal<FBTarotDigestCoverMediaCardEntitySurface> > _liveSignal;
} Signal<FBTarotDigestCoverMediaCardEntitySurface>;

typedef struct shared_ptr<FB::Input<id> > {
	Input<id> __ptr_;
	__shared_weak_count __cntrl_;
} shared_ptr<FB::Input<id> >;

typedef struct shared_ptr<FB::Signal<id> > {
	Signal<id> __ptr_;
	__shared_weak_count __cntrl_;
} shared_ptr<FB::Signal<id> >;

typedef struct RCTSGRect {
	float r[4];
} RCTSGRect;

typedef struct RCTSGVec4 {
	float r[4];
} RCTSGVec4;

typedef struct RCTSGMatrix {
	float m[16];
} RCTSGMatrix;

typedef struct RCTSGTextureOptions {
	unsigned minFilter;
	unsigned magFilter;
	unsigned wrapS;
	unsigned wrapT;
	unsigned internalFormat;
	unsigned format;
	unsigned type;
} RCTSGTextureOptions;

typedef struct RCTSGDynamicList {
	int numEntries;
	int alloced;
	int allocIncreaseStep;
	int elementSize;
	char* entries;
} RCTSGDynamicList;

typedef struct ShaderBindings {
	unsigned long long vertexUID;
	unsigned long long fragmentUID;
	char* vertexProgram;
	char* fragmentProgram;
	unsigned _aPosition;
	unsigned _aTextureCoord;
	unsigned _uMVPMatrix;
	unsigned _uTimeMS;
	unsigned _programHandle;
} ShaderBindings;

typedef struct RCTSGVec2 {
	float r[2];
} RCTSGVec2;

typedef struct _compressed_pair<facebook::mobile::graphstore::GraphSchema *, std::__1::default_delete<facebook::mobile::graphstore::GraphSchema> > {
	GraphSchema __first_;
} compressed_pair<facebook::mobile::graphstore::GraphSchema *, std::__1::default_delete<facebook::mobile::graphstore::GraphSchema> >;

typedef struct unique_ptr<facebook::mobile::graphstore::GraphSchema, std::__1::default_delete<facebook::mobile::graphstore::GraphSchema> > {
	compressed_pair<facebook::mobile::graphstore::GraphSchema *, std::__1::default_delete<facebook::mobile::graphstore::GraphSchema> > __ptr_;
} unique_ptr<facebook::mobile::graphstore::GraphSchema, std::__1::default_delete<facebook::mobile::graphstore::GraphSchema> >;

typedef struct OpaqueAudioQueue* OpaqueAudioQueueRef;

typedef struct OpaqueAudioFileStreamID* OpaqueAudioFileStreamIDRef;

typedef struct __CFReadStream* CFReadStreamRef;

typedef struct {
	unsigned long long count;
	double array;
} SCD_Struct_AR801;

typedef struct {
	unsigned long long count;
	double baseLine;
	double lineHeight;
	__CTLine lines;
	double widths;
} SCD_Struct_AR802;

typedef struct {
	unsigned long long field1;
	double field2;
	double field3;
	__CTLine field4;
	double field5;
} SCD_Struct_AR803;

typedef struct FBLineMetrics {
	/*function pointer*/void* _vptr$FBMetrics;
	BOOL _initialized;
	unsigned long long alignment;
	FBColorMetrics color;
	double thickness;
	double spanPercentage;
} FBLineMetrics;

typedef struct FBBorderMetrics {
	/*function pointer*/void* _vptr$FBMetrics;
	BOOL _initialized;
	FBLineMetrics top;
	FBLineMetrics left;
	FBLineMetrics bottom;
	FBLineMetrics right;
} FBBorderMetrics;

typedef struct _compressed_pair<facebook::gbdtclassifier::GbdtClassifier *, std::__1::default_delete<facebook::gbdtclassifier::GbdtClassifier> > {
	GbdtClassifier __first_;
} compressed_pair<facebook::gbdtclassifier::GbdtClassifier *, std::__1::default_delete<facebook::gbdtclassifier::GbdtClassifier> >;

typedef struct unique_ptr<facebook::gbdtclassifier::GbdtClassifier, std::__1::default_delete<facebook::gbdtclassifier::GbdtClassifier> > {
	compressed_pair<facebook::gbdtclassifier::GbdtClassifier *, std::__1::default_delete<facebook::gbdtclassifier::GbdtClassifier> > __ptr_;
} unique_ptr<facebook::gbdtclassifier::GbdtClassifier, std::__1::default_delete<facebook::gbdtclassifier::GbdtClassifier> >;

typedef struct _compressed_pair<facebook::multifeed::ranking::ClientValueModel *, std::__1::default_delete<facebook::multifeed::ranking::ClientValueModel> > {
	ClientValueModel __first_;
} compressed_pair<facebook::multifeed::ranking::ClientValueModel *, std::__1::default_delete<facebook::multifeed::ranking::ClientValueModel> >;

typedef struct unique_ptr<facebook::multifeed::ranking::ClientValueModel, std::__1::default_delete<facebook::multifeed::ranking::ClientValueModel> > {
	compressed_pair<facebook::multifeed::ranking::ClientValueModel *, std::__1::default_delete<facebook::multifeed::ranking::ClientValueModel> > __ptr_;
} unique_ptr<facebook::multifeed::ranking::ClientValueModel, std::__1::default_delete<facebook::multifeed::ranking::ClientValueModel> >;

typedef struct shared_ptr<std::__1::atomic<bool> > {
	atomic<bool> __ptr_;
	__shared_weak_count __cntrl_;
} shared_ptr<std::__1::atomic<bool> >;

typedef struct {
	unsigned long long field1;
	CKTypedComponentAction<> field2;
	CKTypedComponentAction<> field3;
	CKTypedComponentAction<> field4;
	id field5;
	BOOL field6;
} SCD_Struct_FI811;

typedef struct FBMegaphoneViewLayout {
	CGRect titleFrame;
	CGRect subtitleFrame;
	CGRect segmentedItemsFrame;
	CGRect thumbnailFrame;
	CGRect dismissButtonFrame;
	CGRect accessoryFrame;
	CGRect bottomLineFrame;
	CGRect boundingRect;
	CGSize constrainedSize;
} FBMegaphoneViewLayout;

typedef struct FBAnnotationPosition {
	long long horizontal;
	long long vertical;
} FBAnnotationPosition;

typedef struct {
	SCD_Struct_AR801 top;
	SCD_Struct_AR801 left;
	SCD_Struct_AR801 bottom;
	SCD_Struct_AR801 right;
} SCD_Struct_FB814;

typedef struct shared_ptr<facebook::xanalytics::XAnalytics> {
	XAnalytics __ptr_;
	__shared_weak_count __cntrl_;
} shared_ptr<facebook::xanalytics::XAnalytics>;

typedef struct {
	long long mode;
	double maxDimension;
	float dataRate;
} SCD_Struct_FB816;

typedef struct shared_ptr<facebook::GraphQLLiveQuerySubscriber> {
	GraphQLLiveQuerySubscriber __ptr_;
	__shared_weak_count __cntrl_;
} shared_ptr<facebook::GraphQLLiveQuerySubscriber>;

typedef struct _compressed_pair<CKComponent *__strong *, std::__1::allocator<CKComponent *> > {
	id __first_;
} compressed_pair<CKComponent *__strong *, std::__1::allocator<CKComponent *> >;

typedef struct vector<CKComponent *, std::__1::allocator<CKComponent *> > {
	id __begin_;
	id __end_;
	compressed_pair<CKComponent *__strong *, std::__1::allocator<CKComponent *> > __end_cap_;
} vector<CKComponent *, std::__1::allocator<CKComponent *> >;

typedef struct CKTypedComponentAction<FBRichTextComponentActionContext *> {
	CKTypedComponentActionValue _internal;
} CKTypedComponentAction<FBRichTextComponentActionContext *>;

typedef struct FIGRichTextInternalLayoutComponentOptions {
	CKTypedComponentAction<> tapAction;
	UIImage* stickiedImage;
	double stickiedImageSpacing;
	NSString* accessibilityLabel;
} FIGRichTextInternalLayoutComponentOptions;

typedef struct {
	CGRect titleLabelFrame;
	CGRect bodyViewFrame;
	CGRect separatorFrame;
	CGRect gradientViewFrame;
	CGSize size;
	CGSize constrainedSize;
	BOOL valid;
} SCD_Struct_FB822;

typedef struct {
	CGSize field1;
	CGSize field2;
	CGRect field3;
	CGRect field4;
	CGRect field5;
	CGRect field6;
	BOOL field7;
} SCD_Struct_FB823;

typedef struct FBItemContentViewLayout {
	CGRect titleFrame;
	CGRect subtitleFrame;
	CGRect secondarySubtitleFrame;
	CGRect tertiarySubtitleFrame;
	CGRect boundingRect;
	CGSize constrainedSize;
} FBItemContentViewLayout;

typedef struct FBOfferExpirationCountdownComponentStyle {
	UIFont* font;
	UIColor* color;
	unsigned long long location;
} FBOfferExpirationCountdownComponentStyle;

typedef struct FBOfferExpirationCountdownComponentInternalStyle {
	UIFont* font;
	UIColor* color;
	unsigned long long location;
} FBOfferExpirationCountdownComponentInternalStyle;

typedef struct FBMediaUploadQualityPolicy {
	unsigned long long quality;
	unsigned long long criteria;
} FBMediaUploadQualityPolicy;

typedef struct {
	BOOL initialized;
	FBVideoAssetEdits* value;
} SCD_Struct_FB828;

typedef struct {
	BOOL useLivePhotoTranscoding;
	BOOL useCustomTranscoding;
	SCD_Struct_FB101 timeRange;
	int maxNumberOfVideoSegments;
	int minVideoSegmentDurationInSeconds;
	int maxVideoSegmentDurationInSeconds;
	FBVideoExportConfig* videoExportConfig;
	FBVideoAssetEdits* videoAssetEdits;
} SCD_Struct_FB829;

typedef struct {
	BOOL field1;
	BOOL field2;
	SCD_Struct_FB101 field3;
	int field4;
	int field5;
	int field6;
	id field7;
	id field8;
} SCD_Struct_FB830;

typedef struct FBMediaDataKitVideoAssetExportParams {
	AVAssetReader* assetReader;
	AVAssetTrack* audioTrack;
	AVAssetTrack* videoTrack;
	AVAssetReaderOutput* audioOutput;
	AVAssetReaderOutput* videoOutput;
	AVAssetWriterInput* audioInput;
	AVAssetWriterInput* videoInput;
	AVAssetWriter* assetWriter;
	NSURL* outputURL;
} FBMediaDataKitVideoAssetExportParams;

typedef struct _compressed_pair<facebook::tigon::TigonRequestToken *, std::__1::default_delete<facebook::tigon::TigonRequestToken> > {
	TigonRequestToken __first_;
} compressed_pair<facebook::tigon::TigonRequestToken *, std::__1::default_delete<facebook::tigon::TigonRequestToken> >;

typedef struct unique_ptr<facebook::tigon::TigonRequestToken, std::__1::default_delete<facebook::tigon::TigonRequestToken> > {
	compressed_pair<facebook::tigon::TigonRequestToken *, std::__1::default_delete<facebook::tigon::TigonRequestToken> > __ptr_;
} unique_ptr<facebook::tigon::TigonRequestToken, std::__1::default_delete<facebook::tigon::TigonRequestToken> >;

typedef struct _compressed_pair<unsigned long, std::__1::allocator<std::__1::__hash_node<std::__1::__hash_value_type<std::__1::basic_string<char>, std::__1::basic_string<char> >, void *> *> > {
	unsigned long long __first_;
} compressed_pair<unsigned long, std::__1::allocator<std::__1::__hash_node<std::__1::__hash_value_type<std::__1::basic_string<char>, std::__1::basic_string<char> >, void *> *> >;

typedef struct _compressed_pair<unsigned long, std::__1::__unordered_map_hasher<std::__1::basic_string<char>, std::__1::__hash_value_type<std::__1::basic_string<char>, std::__1::basic_string<char> >, std::__1::hash<std::__1::basic_string<char> >, true> > {
	unsigned long long __first_;
} compressed_pair<unsigned long, std::__1::__unordered_map_hasher<std::__1::basic_string<char>, std::__1::__hash_value_type<std::__1::basic_string<char>, std::__1::basic_string<char> >, std::__1::hash<std::__1::basic_string<char> >, true> >;

typedef struct _compressed_pair<float, std::__1::__unordered_map_equal<std::__1::basic_string<char>, std::__1::__hash_value_type<std::__1::basic_string<char>, std::__1::basic_string<char> >, std::__1::equal_to<std::__1::basic_string<char> >, true> > {
	float __first_;
} compressed_pair<float, std::__1::__unordered_map_equal<std::__1::basic_string<char>, std::__1::__hash_value_type<std::__1::basic_string<char>, std::__1::basic_string<char> >, std::__1::equal_to<std::__1::basic_string<char> >, true> >;

typedef struct _hash_node_base<std::__1::__hash_node<std::__1::__hash_value_type<std::__1::basic_string<char>, std::__1::basic_string<char> >, void *> *> {
	__hash_node<std::__1::__hash_value_type<std::__1::basic_string<char>, std::__1::basic_string<char> >, void *> __next_;
} hash_node_base<std::__1::__hash_node<std::__1::__hash_value_type<std::__1::basic_string<char>, std::__1::basic_string<char> >, void *> *>;

typedef struct _compressed_pair<std::__1::__hash_node_base<std::__1::__hash_node<std::__1::__hash_value_type<std::__1::basic_string<char>, std::__1::basic_string<char> >, void *> *>, std::__1::allocator<std::__1::__hash_node<std::__1::__hash_value_type<std::__1::basic_string<char>, std::__1::basic_string<char> >, void *> > > {
	hash_node_base<std::__1::__hash_node<std::__1::__hash_value_type<std::__1::basic_string<char>, std::__1::basic_string<char> >, void *> *> __first_;
} compressed_pair<std::__1::__hash_node_base<std::__1::__hash_node<std::__1::__hash_value_type<std::__1::basic_string<char>, std::__1::basic_string<char> >, void *> *>, std::__1::allocator<std::__1::__hash_node<std::__1::__hash_value_type<std::__1::basic_string<char>, std::__1::basic_string<char> >, void *> > >;

typedef struct _bucket_list_deallocator<std::__1::allocator<std::__1::__hash_node<std::__1::__hash_value_type<std::__1::basic_string<char>, std::__1::basic_string<char> >, void *> *> > {
	compressed_pair<unsigned long, std::__1::allocator<std::__1::__hash_node<std::__1::__hash_value_type<std::__1::basic_string<char>, std::__1::basic_string<char> >, void *> *> > __data_;
} bucket_list_deallocator<std::__1::allocator<std::__1::__hash_node<std::__1::__hash_value_type<std::__1::basic_string<char>, std::__1::basic_string<char> >, void *> *> >;

typedef struct _compressed_pair<std::__1::__hash_node<std::__1::__hash_value_type<std::__1::basic_string<char>, std::__1::basic_string<char> >, void *> **, std::__1::__bucket_list_deallocator<std::__1::allocator<std::__1::__hash_node<std::__1::__hash_value_type<std::__1::basic_string<char>, std::__1::basic_string<char> >, void *> *> > > {
	__hash_node<std::__1::__hash_value_type<std::__1::basic_string<char>, std::__1::basic_string<char> >, void *> __first_;
	bucket_list_deallocator<std::__1::allocator<std::__1::__hash_node<std::__1::__hash_value_type<std::__1::basic_string<char>, std::__1::basic_string<char> >, void *> *> > __second_;
} compressed_pair<std::__1::__hash_node<std::__1::__hash_value_type<std::__1::basic_string<char>, std::__1::basic_string<char> >, void *> **, std::__1::__bucket_list_deallocator<std::__1::allocator<std::__1::__hash_node<std::__1::__hash_value_type<std::__1::basic_string<char>, std::__1::basic_string<char> >, void *> *> > >;

typedef struct unique_ptr<std::__1::__hash_node<std::__1::__hash_value_type<std::__1::basic_string<char>, std::__1::basic_string<char> >, void *> *[], std::__1::__bucket_list_deallocator<std::__1::allocator<std::__1::__hash_node<std::__1::__hash_value_type<std::__1::basic_string<char>, std::__1::basic_string<char> >, void *> *> > > {
	compressed_pair<std::__1::__hash_node<std::__1::__hash_value_type<std::__1::basic_string<char>, std::__1::basic_string<char> >, void *> **, std::__1::__bucket_list_deallocator<std::__1::allocator<std::__1::__hash_node<std::__1::__hash_value_type<std::__1::basic_string<char>, std::__1::basic_string<char> >, void *> *> > > __ptr_;
} unique_ptr<std::__1::__hash_node<std::__1::__hash_value_type<std::__1::basic_string<char>, std::__1::basic_string<char> >, void *> *[], std::__1::__bucket_list_deallocator<std::__1::allocator<std::__1::__hash_node<std::__1::__hash_value_type<std::__1::basic_string<char>, std::__1::basic_string<char> >, void *> *> > >;

typedef struct _hash_table<std::__1::__hash_value_type<std::__1::basic_string<char>, std::__1::basic_string<char> >, std::__1::__unordered_map_hasher<std::__1::basic_string<char>, std::__1::__hash_value_type<std::__1::basic_string<char>, std::__1::basic_string<char> >, std::__1::hash<std::__1::basic_string<char> >, true>, std::__1::__unordered_map_equal<std::__1::basic_string<char>, std::__1::__hash_value_type<std::__1::basic_string<char>, std::__1::basic_string<char> >, std::__1::equal_to<std::__1::basic_string<char> >, true>, std::__1::allocator<std::__1::__hash_value_type<std::__1::basic_string<char>, std::__1::basic_string<char> > > > {
	unique_ptr<std::__1::__hash_node<std::__1::__hash_value_type<std::__1::basic_string<char>, std::__1::basic_string<char> >, void *> *[], std::__1::__bucket_list_deallocator<std::__1::allocator<std::__1::__hash_node<std::__1::__hash_value_type<std::__1::basic_string<char>, std::__1::basic_string<char> >, void *> *> > > __bucket_list_;
	compressed_pair<std::__1::__hash_node_base<std::__1::__hash_node<std::__1::__hash_value_type<std::__1::basic_string<char>, std::__1::basic_string<char> >, void *> *>, std::__1::allocator<std::__1::__hash_node<std::__1::__hash_value_type<std::__1::basic_string<char>, std::__1::basic_string<char> >, void *> > > __p1_;
	compressed_pair<unsigned long, std::__1::__unordered_map_hasher<std::__1::basic_string<char>, std::__1::__hash_value_type<std::__1::basic_string<char>, std::__1::basic_string<char> >, std::__1::hash<std::__1::basic_string<char> >, true> > __p2_;
	compressed_pair<float, std::__1::__unordered_map_equal<std::__1::basic_string<char>, std::__1::__hash_value_type<std::__1::basic_string<char>, std::__1::basic_string<char> >, std::__1::equal_to<std::__1::basic_string<char> >, true> > __p3_;
} hash_table<std::__1::__hash_value_type<std::__1::basic_string<char>, std::__1::basic_string<char> >, std::__1::__unordered_map_hasher<std::__1::basic_string<char>, std::__1::__hash_value_type<std::__1::basic_string<char>, std::__1::basic_string<char> >, std::__1::hash<std::__1::basic_string<char> >, true>, std::__1::__unordered_map_equal<std::__1::basic_string<char>, std::__1::__hash_value_type<std::__1::basic_string<char>, std::__1::basic_string<char> >, std::__1::equal_to<std::__1::basic_string<char> >, true>, std::__1::allocator<std::__1::__hash_value_type<std::__1::basic_string<char>, std::__1::basic_string<char> > > >;

typedef struct unordered_map<std::__1::basic_string<char>, std::__1::basic_string<char>, std::__1::hash<std::__1::basic_string<char> >, std::__1::equal_to<std::__1::basic_string<char> >, std::__1::allocator<std::__1::pair<const std::__1::basic_string<char>, std::__1::basic_string<char> > > > {
	hash_table<std::__1::__hash_value_type<std::__1::basic_string<char>, std::__1::basic_string<char> >, std::__1::__unordered_map_hasher<std::__1::basic_string<char>, std::__1::__hash_value_type<std::__1::basic_string<char>, std::__1::basic_string<char> >, std::__1::hash<std::__1::basic_string<char> >, true>, std::__1::__unordered_map_equal<std::__1::basic_string<char>, std::__1::__hash_value_type<std::__1::basic_string<char>, std::__1::basic_string<char> >, std::__1::equal_to<std::__1::basic_string<char> >, true>, std::__1::allocator<std::__1::__hash_value_type<std::__1::basic_string<char>, std::__1::basic_string<char> > > > __table_;
} unordered_map<std::__1::basic_string<char>, std::__1::basic_string<char>, std::__1::hash<std::__1::basic_string<char> >, std::__1::equal_to<std::__1::basic_string<char> >, std::__1::allocator<std::__1::pair<const std::__1::basic_string<char>, std::__1::basic_string<char> > > >;

typedef struct MutationDependencies {
	unordered_map<std::__1::basic_string<char>, std::__1::basic_string<char>, std::__1::hash<std::__1::basic_string<char> >, std::__1::equal_to<std::__1::basic_string<char> >, std::__1::allocator<std::__1::pair<const std::__1::basic_string<char>, std::__1::basic_string<char> > > > _map;
} MutationDependencies;

typedef struct _compressed_pair<unsigned long, std::__1::__map_value_compare<std::__1::basic_string<char>, std::__1::__value_type<std::__1::basic_string<char>, std::__1::shared_ptr<facebook::tigon::TigonLimiter> >, std::__1::less<std::__1::basic_string<char> >, true> > {
	unsigned long long __first_;
} compressed_pair<unsigned long, std::__1::__map_value_compare<std::__1::basic_string<char>, std::__1::__value_type<std::__1::basic_string<char>, std::__1::shared_ptr<facebook::tigon::TigonLimiter> >, std::__1::less<std::__1::basic_string<char> >, true> >;

typedef struct _compressed_pair<std::__1::__tree_end_node<std::__1::__tree_node_base<void *> *>, std::__1::allocator<std::__1::__tree_node<std::__1::__value_type<std::__1::basic_string<char>, std::__1::shared_ptr<facebook::tigon::TigonLimiter> >, void *> > > {
	tree_end_node<std::__1::__tree_node_base<void *> *> __first_;
} compressed_pair<std::__1::__tree_end_node<std::__1::__tree_node_base<void *> *>, std::__1::allocator<std::__1::__tree_node<std::__1::__value_type<std::__1::basic_string<char>, std::__1::shared_ptr<facebook::tigon::TigonLimiter> >, void *> > >;

typedef struct _tree<std::__1::__value_type<std::__1::basic_string<char>, std::__1::shared_ptr<facebook::tigon::TigonLimiter> >, std::__1::__map_value_compare<std::__1::basic_string<char>, std::__1::__value_type<std::__1::basic_string<char>, std::__1::shared_ptr<facebook::tigon::TigonLimiter> >, std::__1::less<std::__1::basic_string<char> >, true>, std::__1::allocator<std::__1::__value_type<std::__1::basic_string<char>, std::__1::shared_ptr<facebook::tigon::TigonLimiter> > > > {
	__tree_node<std::__1::__value_type<std::__1::basic_string<char>, std::__1::shared_ptr<facebook::tigon::TigonLimiter> >, void *> __begin_node_;
	compressed_pair<std::__1::__tree_end_node<std::__1::__tree_node_base<void *> *>, std::__1::allocator<std::__1::__tree_node<std::__1::__value_type<std::__1::basic_string<char>, std::__1::shared_ptr<facebook::tigon::TigonLimiter> >, void *> > > __pair1_;
	compressed_pair<unsigned long, std::__1::__map_value_compare<std::__1::basic_string<char>, std::__1::__value_type<std::__1::basic_string<char>, std::__1::shared_ptr<facebook::tigon::TigonLimiter> >, std::__1::less<std::__1::basic_string<char> >, true> > __pair3_;
} tree<std::__1::__value_type<std::__1::basic_string<char>, std::__1::shared_ptr<facebook::tigon::TigonLimiter> >, std::__1::__map_value_compare<std::__1::basic_string<char>, std::__1::__value_type<std::__1::basic_string<char>, std::__1::shared_ptr<facebook::tigon::TigonLimiter> >, std::__1::less<std::__1::basic_string<char> >, true>, std::__1::allocator<std::__1::__value_type<std::__1::basic_string<char>, std::__1::shared_ptr<facebook::tigon::TigonLimiter> > > >;

typedef struct map<std::__1::basic_string<char>, std::__1::shared_ptr<facebook::tigon::TigonLimiter>, std::__1::less<std::__1::basic_string<char> >, std::__1::allocator<std::__1::pair<const std::__1::basic_string<char>, std::__1::shared_ptr<facebook::tigon::TigonLimiter> > > > {
	tree<std::__1::__value_type<std::__1::basic_string<char>, std::__1::shared_ptr<facebook::tigon::TigonLimiter> >, std::__1::__map_value_compare<std::__1::basic_string<char>, std::__1::__value_type<std::__1::basic_string<char>, std::__1::shared_ptr<facebook::tigon::TigonLimiter> >, std::__1::less<std::__1::basic_string<char> >, true>, std::__1::allocator<std::__1::__value_type<std::__1::basic_string<char>, std::__1::shared_ptr<facebook::tigon::TigonLimiter> > > > __tree_;
} map<std::__1::basic_string<char>, std::__1::shared_ptr<facebook::tigon::TigonLimiter>, std::__1::less<std::__1::basic_string<char> >, std::__1::allocator<std::__1::pair<const std::__1::basic_string<char>, std::__1::shared_ptr<facebook::tigon::TigonLimiter> > > >;

typedef struct _compressed_pair<unsigned long, std::__1::__map_value_compare<std::__1::basic_string<char>, std::__1::__value_type<std::__1::basic_string<char>, FBGraphQLDynamicMutationInfo *>, std::__1::less<std::__1::basic_string<char> >, true> > {
	unsigned long long __first_;
} compressed_pair<unsigned long, std::__1::__map_value_compare<std::__1::basic_string<char>, std::__1::__value_type<std::__1::basic_string<char>, FBGraphQLDynamicMutationInfo *>, std::__1::less<std::__1::basic_string<char> >, true> >;

typedef struct _compressed_pair<std::__1::__tree_end_node<std::__1::__tree_node_base<void *> *>, std::__1::allocator<std::__1::__tree_node<std::__1::__value_type<std::__1::basic_string<char>, FBGraphQLDynamicMutationInfo *>, void *> > > {
	tree_end_node<std::__1::__tree_node_base<void *> *> __first_;
} compressed_pair<std::__1::__tree_end_node<std::__1::__tree_node_base<void *> *>, std::__1::allocator<std::__1::__tree_node<std::__1::__value_type<std::__1::basic_string<char>, FBGraphQLDynamicMutationInfo *>, void *> > >;

typedef struct _tree<std::__1::__value_type<std::__1::basic_string<char>, FBGraphQLDynamicMutationInfo *>, std::__1::__map_value_compare<std::__1::basic_string<char>, std::__1::__value_type<std::__1::basic_string<char>, FBGraphQLDynamicMutationInfo *>, std::__1::less<std::__1::basic_string<char> >, true>, std::__1::allocator<std::__1::__value_type<std::__1::basic_string<char>, FBGraphQLDynamicMutationInfo *> > > {
	__tree_node<std::__1::__value_type<std::__1::basic_string<char>, FBGraphQLDynamicMutationInfo *>, void *> __begin_node_;
	compressed_pair<std::__1::__tree_end_node<std::__1::__tree_node_base<void *> *>, std::__1::allocator<std::__1::__tree_node<std::__1::__value_type<std::__1::basic_string<char>, FBGraphQLDynamicMutationInfo *>, void *> > > __pair1_;
	compressed_pair<unsigned long, std::__1::__map_value_compare<std::__1::basic_string<char>, std::__1::__value_type<std::__1::basic_string<char>, FBGraphQLDynamicMutationInfo *>, std::__1::less<std::__1::basic_string<char> >, true> > __pair3_;
} tree<std::__1::__value_type<std::__1::basic_string<char>, FBGraphQLDynamicMutationInfo *>, std::__1::__map_value_compare<std::__1::basic_string<char>, std::__1::__value_type<std::__1::basic_string<char>, FBGraphQLDynamicMutationInfo *>, std::__1::less<std::__1::basic_string<char> >, true>, std::__1::allocator<std::__1::__value_type<std::__1::basic_string<char>, FBGraphQLDynamicMutationInfo *> > >;

typedef struct map<std::__1::basic_string<char>, FBGraphQLDynamicMutationInfo *, std::__1::less<std::__1::basic_string<char> >, std::__1::allocator<std::__1::pair<const std::__1::basic_string<char>, FBGraphQLDynamicMutationInfo *> > > {
	tree<std::__1::__value_type<std::__1::basic_string<char>, FBGraphQLDynamicMutationInfo *>, std::__1::__map_value_compare<std::__1::basic_string<char>, std::__1::__value_type<std::__1::basic_string<char>, FBGraphQLDynamicMutationInfo *>, std::__1::less<std::__1::basic_string<char> >, true>, std::__1::allocator<std::__1::__value_type<std::__1::basic_string<char>, FBGraphQLDynamicMutationInfo *> > > __tree_;
} map<std::__1::basic_string<char>, FBGraphQLDynamicMutationInfo *, std::__1::less<std::__1::basic_string<char> >, std::__1::allocator<std::__1::pair<const std::__1::basic_string<char>, FBGraphQLDynamicMutationInfo *> > >;

typedef struct shared_ptr<facebook::mobile::graphstore::TreeCache> {
	TreeCache __ptr_;
	__shared_weak_count __cntrl_;
} shared_ptr<facebook::mobile::graphstore::TreeCache>;

typedef struct _compressed_pair<unsigned long, std::__1::allocator<std::__1::__hash_node<std::__1::__hash_value_type<int, id ()(id)>, void *> *> > {
	unsigned long long __first_;
} compressed_pair<unsigned long, std::__1::allocator<std::__1::__hash_node<std::__1::__hash_value_type<int, id ()(id)>, void *> *> >;

typedef struct _compressed_pair<unsigned long, std::__1::__unordered_map_hasher<int, std::__1::__hash_value_type<int, id ()(id)>, std::__1::hash<int>, true> > {
	unsigned long long __first_;
} compressed_pair<unsigned long, std::__1::__unordered_map_hasher<int, std::__1::__hash_value_type<int, id ()(id)>, std::__1::hash<int>, true> >;

typedef struct _compressed_pair<float, std::__1::__unordered_map_equal<int, std::__1::__hash_value_type<int, id ()(id)>, std::__1::equal_to<int>, true> > {
	float __first_;
} compressed_pair<float, std::__1::__unordered_map_equal<int, std::__1::__hash_value_type<int, id ()(id)>, std::__1::equal_to<int>, true> >;

typedef struct _hash_node_base<std::__1::__hash_node<std::__1::__hash_value_type<int, id ()(id)>, void *> *> {
	__hash_node<std::__1::__hash_value_type<int, id ()(id)>, void *> __next_;
} hash_node_base<std::__1::__hash_node<std::__1::__hash_value_type<int, id ()(id)>, void *> *>;

typedef struct _compressed_pair<std::__1::__hash_node_base<std::__1::__hash_node<std::__1::__hash_value_type<int, id ()(id)>, void *> *>, std::__1::allocator<std::__1::__hash_node<std::__1::__hash_value_type<int, id ()(id)>, void *> > > {
	hash_node_base<std::__1::__hash_node<std::__1::__hash_value_type<int, id ()(id)>, void *> *> __first_;
} compressed_pair<std::__1::__hash_node_base<std::__1::__hash_node<std::__1::__hash_value_type<int, id ()(id)>, void *> *>, std::__1::allocator<std::__1::__hash_node<std::__1::__hash_value_type<int, id ()(id)>, void *> > >;

typedef struct _bucket_list_deallocator<std::__1::allocator<std::__1::__hash_node<std::__1::__hash_value_type<int, id ()(id)>, void *> *> > {
	compressed_pair<unsigned long, std::__1::allocator<std::__1::__hash_node<std::__1::__hash_value_type<int, id ()(id)>, void *> *> > __data_;
} bucket_list_deallocator<std::__1::allocator<std::__1::__hash_node<std::__1::__hash_value_type<int, id ()(id)>, void *> *> >;

typedef struct _compressed_pair<std::__1::__hash_node<std::__1::__hash_value_type<int, id ()(id)>, void *> **, std::__1::__bucket_list_deallocator<std::__1::allocator<std::__1::__hash_node<std::__1::__hash_value_type<int, id ()(id)>, void *> *> > > {
	__hash_node<std::__1::__hash_value_type<int, id ()(id)>, void *> __first_;
	bucket_list_deallocator<std::__1::allocator<std::__1::__hash_node<std::__1::__hash_value_type<int, id ()(id)>, void *> *> > __second_;
} compressed_pair<std::__1::__hash_node<std::__1::__hash_value_type<int, id ()(id)>, void *> **, std::__1::__bucket_list_deallocator<std::__1::allocator<std::__1::__hash_node<std::__1::__hash_value_type<int, id ()(id)>, void *> *> > >;

typedef struct unique_ptr<std::__1::__hash_node<std::__1::__hash_value_type<int, id ()(id)>, void *> *[], std::__1::__bucket_list_deallocator<std::__1::allocator<std::__1::__hash_node<std::__1::__hash_value_type<int, id ()(id)>, void *> *> > > {
	compressed_pair<std::__1::__hash_node<std::__1::__hash_value_type<int, id ()(id)>, void *> **, std::__1::__bucket_list_deallocator<std::__1::allocator<std::__1::__hash_node<std::__1::__hash_value_type<int, id ()(id)>, void *> *> > > __ptr_;
} unique_ptr<std::__1::__hash_node<std::__1::__hash_value_type<int, id ()(id)>, void *> *[], std::__1::__bucket_list_deallocator<std::__1::allocator<std::__1::__hash_node<std::__1::__hash_value_type<int, id ()(id)>, void *> *> > >;

typedef struct _hash_table<std::__1::__hash_value_type<int, id ()(id)>, std::__1::__unordered_map_hasher<int, std::__1::__hash_value_type<int, id ()(id)>, std::__1::hash<int>, true>, std::__1::__unordered_map_equal<int, std::__1::__hash_value_type<int, id ()(id)>, std::__1::equal_to<int>, true>, std::__1::allocator<std::__1::__hash_value_type<int, id ()(id)> > > {
	unique_ptr<std::__1::__hash_node<std::__1::__hash_value_type<int, id ()(id)>, void *> *[], std::__1::__bucket_list_deallocator<std::__1::allocator<std::__1::__hash_node<std::__1::__hash_value_type<int, id ()(id)>, void *> *> > > __bucket_list_;
	compressed_pair<std::__1::__hash_node_base<std::__1::__hash_node<std::__1::__hash_value_type<int, id ()(id)>, void *> *>, std::__1::allocator<std::__1::__hash_node<std::__1::__hash_value_type<int, id ()(id)>, void *> > > __p1_;
	compressed_pair<unsigned long, std::__1::__unordered_map_hasher<int, std::__1::__hash_value_type<int, id ()(id)>, std::__1::hash<int>, true> > __p2_;
	compressed_pair<float, std::__1::__unordered_map_equal<int, std::__1::__hash_value_type<int, id ()(id)>, std::__1::equal_to<int>, true> > __p3_;
} hash_table<std::__1::__hash_value_type<int, id ()(id)>, std::__1::__unordered_map_hasher<int, std::__1::__hash_value_type<int, id ()(id)>, std::__1::hash<int>, true>, std::__1::__unordered_map_equal<int, std::__1::__hash_value_type<int, id ()(id)>, std::__1::equal_to<int>, true>, std::__1::allocator<std::__1::__hash_value_type<int, id ()(id)> > >;

typedef struct unordered_multimap<int, id ()(id), std::__1::hash<int>, std::__1::equal_to<int>, std::__1::allocator<std::__1::pair<const int, id ()(id)> > > {
	hash_table<std::__1::__hash_value_type<int, id ()(id)>, std::__1::__unordered_map_hasher<int, std::__1::__hash_value_type<int, id ()(id)>, std::__1::hash<int>, true>, std::__1::__unordered_map_equal<int, std::__1::__hash_value_type<int, id ()(id)>, std::__1::equal_to<int>, true>, std::__1::allocator<std::__1::__hash_value_type<int, id ()(id)> > > __table_;
} unordered_multimap<int, id ()(id), std::__1::hash<int>, std::__1::equal_to<int>, std::__1::allocator<std::__1::pair<const int, id ()(id)> > >;

typedef struct ASComponentHostingViewInputs {
	CKComponentScopeRoot* scopeRoot;
	<NSObject>* model;
	<NSObject>* context;
	unordered_multimap<int, id ()(id), std::__1::hash<int>, std::__1::equal_to<int>, std::__1::allocator<std::__1::pair<const int, id ()(id)> > > stateUpdates;
} ASComponentHostingViewInputs;

typedef struct FBProgressBarStyle {
	double barThickness;
	UIColor* barColor;
	UIColor* emptyBarColor;
	UIColor* backgroundColor;
	BOOL roundedCorners;
	BOOL animated;
} FBProgressBarStyle;

typedef struct {
	CKTypedComponentAction<> field1;
	CKTypedComponentAction<> field2;
	CKTypedComponentAction<> field3;
	id field4;
} SCD_Struct_FB866;

typedef struct FBRichTextComponentStyle {
	UIFont* font;
	UIColor* color;
	long long horizontalAlignmentMode;
	unsigned long long maximumNumberOfLines;
	CGSize textShadowOffset;
	double textShadowBlur;
	UIColor* textShadowColor;
	FBImageDownloader* imageDownloader;
	unsigned long long truncationMode;
	NSAttributedString* truncationAttributedString;
	NSArray* menuItems;
	BOOL calculateLineOrigins;
} FBRichTextComponentStyle;

typedef struct FBQuickButtonStateConfiguration {
	NSString* title;
	UIColor* titleColor;
	UIImage* image;
	UIImage* backgroundImage;
} FBQuickButtonStateConfiguration;

typedef struct array<FBQuickButtonStateConfiguration, 8> {
	FBQuickButtonStateConfiguration __elems_[8];
} array<FBQuickButtonStateConfiguration, 8>;

typedef struct CKComponentHostingViewInputs {
	CKComponentScopeRoot* scopeRoot;
	<NSObject>* model;
	<NSObject>* context;
	unordered_multimap<int, id ()(id), std::__1::hash<int>, std::__1::equal_to<int>, std::__1::allocator<std::__1::pair<const int, id ()(id)> > > stateUpdates;
} CKComponentHostingViewInputs;

typedef struct _compressed_pair<unsigned long, std::__1::allocator<std::__1::__hash_node<std::__1::__hash_value_type<NSString *, std::__1::pair<id<FBMPFilter> ()(NSDictionary<NSString *,id> *), id<FBCaptureCoordinatorFilterController> ()(id<FBMPFilter>)> >, void *> *> > {
	unsigned long long __first_;
} compressed_pair<unsigned long, std::__1::allocator<std::__1::__hash_node<std::__1::__hash_value_type<NSString *, std::__1::pair<id<FBMPFilter> ()(NSDictionary<NSString *,id> *), id<FBCaptureCoordinatorFilterController> ()(id<FBMPFilter>)> >, void *> *> >;

typedef struct _compressed_pair<unsigned long, std::__1::__unordered_map_hasher<NSString *, std::__1::__hash_value_type<NSString *, std::__1::pair<id<FBMPFilter> ()(NSDictionary<NSString *,id> *), id<FBCaptureCoordinatorFilterController> ()(id<FBMPFilter>)> >, FB::ObjcHash, true> > {
	unsigned long long __first_;
} compressed_pair<unsigned long, std::__1::__unordered_map_hasher<NSString *, std::__1::__hash_value_type<NSString *, std::__1::pair<id<FBMPFilter> ()(NSDictionary<NSString *,id> *), id<FBCaptureCoordinatorFilterController> ()(id<FBMPFilter>)> >, FB::ObjcHash, true> >;

typedef struct _compressed_pair<float, std::__1::__unordered_map_equal<NSString *, std::__1::__hash_value_type<NSString *, std::__1::pair<id<FBMPFilter> ()(NSDictionary<NSString *,id> *), id<FBCaptureCoordinatorFilterController> ()(id<FBMPFilter>)> >, FB::ObjcEqual, true> > {
	float __first_;
} compressed_pair<float, std::__1::__unordered_map_equal<NSString *, std::__1::__hash_value_type<NSString *, std::__1::pair<id<FBMPFilter> ()(NSDictionary<NSString *,id> *), id<FBCaptureCoordinatorFilterController> ()(id<FBMPFilter>)> >, FB::ObjcEqual, true> >;

typedef struct _hash_node_base<std::__1::__hash_node<std::__1::__hash_value_type<NSString *, std::__1::pair<id<FBMPFilter> ()(NSDictionary<NSString *,id> *), id<FBCaptureCoordinatorFilterController> ()(id<FBMPFilter>)> >, void *> *> {
	__hash_node<std::__1::__hash_value_type<NSString *, std::__1::pair<id<FBMPFilter> ()(NSDictionary<NSString *,id> *), id<FBCaptureCoordinatorFilterController> ()(id<FBMPFilter>)> >, void *> __next_;
} hash_node_base<std::__1::__hash_node<std::__1::__hash_value_type<NSString *, std::__1::pair<id<FBMPFilter> ()(NSDictionary<NSString *,id> *), id<FBCaptureCoordinatorFilterController> ()(id<FBMPFilter>)> >, void *> *>;

typedef struct _compressed_pair<std::__1::__hash_node_base<std::__1::__hash_node<std::__1::__hash_value_type<NSString *, std::__1::pair<id<FBMPFilter> ()(NSDictionary<NSString *,id> *), id<FBCaptureCoordinatorFilterController> ()(id<FBMPFilter>)> >, void *> *>, std::__1::allocator<std::__1::__hash_node<std::__1::__hash_value_type<NSString *, std::__1::pair<id<FBMPFilter> ()(NSDictionary<NSString *,id> *), id<FBCaptureCoordinatorFilterController> ()(id<FBMPFilter>)> >, void *> > > {
	hash_node_base<std::__1::__hash_node<std::__1::__hash_value_type<NSString *, std::__1::pair<id<FBMPFilter> ()(NSDictionary<NSString *,id> *), id<FBCaptureCoordinatorFilterController> ()(id<FBMPFilter>)> >, void *> *> __first_;
} compressed_pair<std::__1::__hash_node_base<std::__1::__hash_node<std::__1::__hash_value_type<NSString *, std::__1::pair<id<FBMPFilter> ()(NSDictionary<NSString *,id> *), id<FBCaptureCoordinatorFilterController> ()(id<FBMPFilter>)> >, void *> *>, std::__1::allocator<std::__1::__hash_node<std::__1::__hash_value_type<NSString *, std::__1::pair<id<FBMPFilter> ()(NSDictionary<NSString *,id> *), id<FBCaptureCoordinatorFilterController> ()(id<FBMPFilter>)> >, void *> > >;

typedef struct _bucket_list_deallocator<std::__1::allocator<std::__1::__hash_node<std::__1::__hash_value_type<NSString *, std::__1::pair<id<FBMPFilter> ()(NSDictionary<NSString *,id> *), id<FBCaptureCoordinatorFilterController> ()(id<FBMPFilter>)> >, void *> *> > {
	compressed_pair<unsigned long, std::__1::allocator<std::__1::__hash_node<std::__1::__hash_value_type<NSString *, std::__1::pair<id<FBMPFilter> ()(NSDictionary<NSString *,id> *), id<FBCaptureCoordinatorFilterController> ()(id<FBMPFilter>)> >, void *> *> > __data_;
} bucket_list_deallocator<std::__1::allocator<std::__1::__hash_node<std::__1::__hash_value_type<NSString *, std::__1::pair<id<FBMPFilter> ()(NSDictionary<NSString *,id> *), id<FBCaptureCoordinatorFilterController> ()(id<FBMPFilter>)> >, void *> *> >;

typedef struct _compressed_pair<std::__1::__hash_node<std::__1::__hash_value_type<NSString *, std::__1::pair<id<FBMPFilter> ()(NSDictionary<NSString *,id> *), id<FBCaptureCoordinatorFilterController> ()(id<FBMPFilter>)> >, void *> **, std::__1::__bucket_list_deallocator<std::__1::allocator<std::__1::__hash_node<std::__1::__hash_value_type<NSString *, std::__1::pair<id<FBMPFilter> ()(NSDictionary<NSString *,id> *), id<FBCaptureCoordinatorFilterController> ()(id<FBMPFilter>)> >, void *> *> > > {
	__hash_node<std::__1::__hash_value_type<NSString *, std::__1::pair<id<FBMPFilter> ()(NSDictionary<NSString *,id> *), id<FBCaptureCoordinatorFilterController> ()(id<FBMPFilter>)> >, void *> __first_;
	bucket_list_deallocator<std::__1::allocator<std::__1::__hash_node<std::__1::__hash_value_type<NSString *, std::__1::pair<id<FBMPFilter> ()(NSDictionary<NSString *,id> *), id<FBCaptureCoordinatorFilterController> ()(id<FBMPFilter>)> >, void *> *> > __second_;
} compressed_pair<std::__1::__hash_node<std::__1::__hash_value_type<NSString *, std::__1::pair<id<FBMPFilter> ()(NSDictionary<NSString *,id> *), id<FBCaptureCoordinatorFilterController> ()(id<FBMPFilter>)> >, void *> **, std::__1::__bucket_list_deallocator<std::__1::allocator<std::__1::__hash_node<std::__1::__hash_value_type<NSString *, std::__1::pair<id<FBMPFilter> ()(NSDictionary<NSString *,id> *), id<FBCaptureCoordinatorFilterController> ()(id<FBMPFilter>)> >, void *> *> > >;

typedef struct unique_ptr<std::__1::__hash_node<std::__1::__hash_value_type<NSString *, std::__1::pair<id<FBMPFilter> ()(NSDictionary<NSString *,id> *), id<FBCaptureCoordinatorFilterController> ()(id<FBMPFilter>)> >, void *> *[], std::__1::__bucket_list_deallocator<std::__1::allocator<std::__1::__hash_node<std::__1::__hash_value_type<NSString *, std::__1::pair<id<FBMPFilter> ()(NSDictionary<NSString *,id> *), id<FBCaptureCoordinatorFilterController> ()(id<FBMPFilter>)> >, void *> *> > > {
	compressed_pair<std::__1::__hash_node<std::__1::__hash_value_type<NSString *, std::__1::pair<id<FBMPFilter> ()(NSDictionary<NSString *,id> *), id<FBCaptureCoordinatorFilterController> ()(id<FBMPFilter>)> >, void *> **, std::__1::__bucket_list_deallocator<std::__1::allocator<std::__1::__hash_node<std::__1::__hash_value_type<NSString *, std::__1::pair<id<FBMPFilter> ()(NSDictionary<NSString *,id> *), id<FBCaptureCoordinatorFilterController> ()(id<FBMPFilter>)> >, void *> *> > > __ptr_;
} unique_ptr<std::__1::__hash_node<std::__1::__hash_value_type<NSString *, std::__1::pair<id<FBMPFilter> ()(NSDictionary<NSString *,id> *), id<FBCaptureCoordinatorFilterController> ()(id<FBMPFilter>)> >, void *> *[], std::__1::__bucket_list_deallocator<std::__1::allocator<std::__1::__hash_node<std::__1::__hash_value_type<NSString *, std::__1::pair<id<FBMPFilter> ()(NSDictionary<NSString *,id> *), id<FBCaptureCoordinatorFilterController> ()(id<FBMPFilter>)> >, void *> *> > >;

typedef struct _hash_table<std::__1::__hash_value_type<NSString *, std::__1::pair<id<FBMPFilter> ()(NSDictionary<NSString *,id> *), id<FBCaptureCoordinatorFilterController> ()(id<FBMPFilter>)> >, std::__1::__unordered_map_hasher<NSString *, std::__1::__hash_value_type<NSString *, std::__1::pair<id<FBMPFilter> ()(NSDictionary<NSString *,id> *), id<FBCaptureCoordinatorFilterController> ()(id<FBMPFilter>)> >, FB::ObjcHash, true>, std::__1::__unordered_map_equal<NSString *, std::__1::__hash_value_type<NSString *, std::__1::pair<id<FBMPFilter> ()(NSDictionary<NSString *,id> *), id<FBCaptureCoordinatorFilterController> ()(id<FBMPFilter>)> >, FB::ObjcEqual, true>, std::__1::allocator<std::__1::__hash_value_type<NSString *, std::__1::pair<id<FBMPFilter> ()(NSDictionary<NSString *,id> *), id<FBCaptureCoordinatorFilterController> ()(id<FBMPFilter>)> > > > {
	unique_ptr<std::__1::__hash_node<std::__1::__hash_value_type<NSString *, std::__1::pair<id<FBMPFilter> ()(NSDictionary<NSString *,id> *), id<FBCaptureCoordinatorFilterController> ()(id<FBMPFilter>)> >, void *> *[], std::__1::__bucket_list_deallocator<std::__1::allocator<std::__1::__hash_node<std::__1::__hash_value_type<NSString *, std::__1::pair<id<FBMPFilter> ()(NSDictionary<NSString *,id> *), id<FBCaptureCoordinatorFilterController> ()(id<FBMPFilter>)> >, void *> *> > > __bucket_list_;
	compressed_pair<std::__1::__hash_node_base<std::__1::__hash_node<std::__1::__hash_value_type<NSString *, std::__1::pair<id<FBMPFilter> ()(NSDictionary<NSString *,id> *), id<FBCaptureCoordinatorFilterController> ()(id<FBMPFilter>)> >, void *> *>, std::__1::allocator<std::__1::__hash_node<std::__1::__hash_value_type<NSString *, std::__1::pair<id<FBMPFilter> ()(NSDictionary<NSString *,id> *), id<FBCaptureCoordinatorFilterController> ()(id<FBMPFilter>)> >, void *> > > __p1_;
	compressed_pair<unsigned long, std::__1::__unordered_map_hasher<NSString *, std::__1::__hash_value_type<NSString *, std::__1::pair<id<FBMPFilter> ()(NSDictionary<NSString *,id> *), id<FBCaptureCoordinatorFilterController> ()(id<FBMPFilter>)> >, FB::ObjcHash, true> > __p2_;
	compressed_pair<float, std::__1::__unordered_map_equal<NSString *, std::__1::__hash_value_type<NSString *, std::__1::pair<id<FBMPFilter> ()(NSDictionary<NSString *,id> *), id<FBCaptureCoordinatorFilterController> ()(id<FBMPFilter>)> >, FB::ObjcEqual, true> > __p3_;
} hash_table<std::__1::__hash_value_type<NSString *, std::__1::pair<id<FBMPFilter> ()(NSDictionary<NSString *,id> *), id<FBCaptureCoordinatorFilterController> ()(id<FBMPFilter>)> >, std::__1::__unordered_map_hasher<NSString *, std::__1::__hash_value_type<NSString *, std::__1::pair<id<FBMPFilter> ()(NSDictionary<NSString *,id> *), id<FBCaptureCoordinatorFilterController> ()(id<FBMPFilter>)> >, FB::ObjcHash, true>, std::__1::__unordered_map_equal<NSString *, std::__1::__hash_value_type<NSString *, std::__1::pair<id<FBMPFilter> ()(NSDictionary<NSString *,id> *), id<FBCaptureCoordinatorFilterController> ()(id<FBMPFilter>)> >, FB::ObjcEqual, true>, std::__1::allocator<std::__1::__hash_value_type<NSString *, std::__1::pair<id<FBMPFilter> ()(NSDictionary<NSString *,id> *), id<FBCaptureCoordinatorFilterController> ()(id<FBMPFilter>)> > > >;

typedef struct unordered_map<NSString *, std::__1::pair<id<FBMPFilter> ()(NSDictionary<NSString *,id> *), id<FBCaptureCoordinatorFilterController> ()(id<FBMPFilter>)>, FB::ObjcHash, FB::ObjcEqual, std::__1::allocator<std::__1::pair<NSString *const, std::__1::pair<id<FBMPFilter> ()(NSDictionary<NSString *,id> *), id<FBCaptureCoordinatorFilterController> ()(id<FBMPFilter>)> > > > {
	hash_table<std::__1::__hash_value_type<NSString *, std::__1::pair<id<FBMPFilter> ()(NSDictionary<NSString *,id> *), id<FBCaptureCoordinatorFilterController> ()(id<FBMPFilter>)> >, std::__1::__unordered_map_hasher<NSString *, std::__1::__hash_value_type<NSString *, std::__1::pair<id<FBMPFilter> ()(NSDictionary<NSString *,id> *), id<FBCaptureCoordinatorFilterController> ()(id<FBMPFilter>)> >, FB::ObjcHash, true>, std::__1::__unordered_map_equal<NSString *, std::__1::__hash_value_type<NSString *, std::__1::pair<id<FBMPFilter> ()(NSDictionary<NSString *,id> *), id<FBCaptureCoordinatorFilterController> ()(id<FBMPFilter>)> >, FB::ObjcEqual, true>, std::__1::allocator<std::__1::__hash_value_type<NSString *, std::__1::pair<id<FBMPFilter> ()(NSDictionary<NSString *,id> *), id<FBCaptureCoordinatorFilterController> ()(id<FBMPFilter>)> > > > __table_;
} unordered_map<NSString *, std::__1::pair<id<FBMPFilter> ()(NSDictionary<NSString *,id> *), id<FBCaptureCoordinatorFilterController> ()(id<FBMPFilter>)>, FB::ObjcHash, FB::ObjcEqual, std::__1::allocator<std::__1::pair<NSString *const, std::__1::pair<id<FBMPFilter> ()(NSDictionary<NSString *,id> *), id<FBCaptureCoordinatorFilterController> ()(id<FBMPFilter>)> > > >;

typedef struct {
	CGPoint anchorPoint;
	CGRect bounds;
	CGPoint position;
} SCD_Struct_FB881;

typedef struct RecursiveMutex {
	opaque_pthread_mutex_t _m;
} RecursiveMutex;

typedef struct {
	long long field1;
	double field2;
} SCD_Struct_AS883;

typedef struct {
	SCD_Struct_AS883 field1;
	SCD_Struct_AS883 field2;
} SCD_Struct_AS884;

typedef struct {
	SCD_Struct_AS884 field1;
	SCD_Struct_AS884 field2;
} SCD_Struct_AS885;

typedef struct ASEnvironmentHierarchyState {
	unsigned rasterized : 1;
	unsigned rangeManaged : 1;
	unsigned transitioningSupernodes : 1;
	unsigned layoutPending : 1;
} ASEnvironmentHierarchyState;

typedef struct {
	long long type;
	double value;
} SCD_Struct_AS887;

typedef struct ASEnvironmentTraitCollection {
	double displayScale;
	long long horizontalSizeClass;
	long long userInterfaceIdiom;
	long long verticalSizeClass;
	long long forceTouchCapability;
	CGSize containerSize;
} ASEnvironmentTraitCollection;

typedef struct ASEnvironmentStateExtensions {
	BOOL boolExtensions[1];
	long long integerExtensions[4];
	UIEdgeInsets edgeInsetsExtensions[1];
} ASEnvironmentStateExtensions;

typedef struct {
	SCD_Struct_AS887 width;
	SCD_Struct_AS887 height;
} SCD_Struct_AS890;

typedef struct {
	SCD_Struct_AS890 min;
	SCD_Struct_AS890 max;
} SCD_Struct_AS891;

typedef struct ASEnvironmentLayoutOptionsState {
	double spacingBefore;
	double spacingAfter;
	BOOL flexGrow;
	BOOL flexShrink;
	SCD_Struct_AS887 flexBasis;
	unsigned long long alignSelf;
	double ascender;
	double descender;
	SCD_Struct_AS891 sizeRange;
	CGPoint layoutPosition;
	ASEnvironmentStateExtensions _extensions;
} ASEnvironmentLayoutOptionsState;

typedef struct ASEnvironmentState {
	ASEnvironmentHierarchyState hierarchyState;
	ASEnvironmentLayoutOptionsState layoutOptionsState;
	ASEnvironmentTraitCollection environmentTraitCollection;
} ASEnvironmentState;

typedef struct Mutex {
	opaque_pthread_mutex_t _m;
} Mutex;

typedef struct ASImageNodeDrawParameters {
	BOOL opaque;
	CGRect bounds;
	double contentsScale;
	UIColor* backgroundColor;
	long long contentMode;
	BOOL cropEnabled;
	BOOL forceUpscaling;
	CGRect cropRect;
	CGRect cropDisplayBounds;
	/*^block*/id imageModificationBlock;
} ASImageNodeDrawParameters;

typedef struct __CFRunLoop* CFRunLoopRef;

typedef struct __CFRunLoopSource* CFRunLoopSourceRef;

typedef struct _compressed_pair<__strong id **, std::__1::allocator<__strong id *> > {
	id __first_;
} compressed_pair<__strong id **, std::__1::allocator<__strong id *> >;

typedef struct _compressed_pair<unsigned long, std::__1::allocator<id> > {
	unsigned long long __first_;
} compressed_pair<unsigned long, std::__1::allocator<id> >;

typedef struct _split_buffer<__strong id *, std::__1::allocator<__strong id *> > {
	id __first_;
	id __begin_;
	id __end_;
	compressed_pair<__strong id **, std::__1::allocator<__strong id *> > __end_cap_;
} split_buffer<__strong id *, std::__1::allocator<__strong id *> >;

typedef struct deque<id, std::__1::allocator<id> > {
	split_buffer<__strong id *, std::__1::allocator<__strong id *> > __map_;
	unsigned long long __start_;
	compressed_pair<unsigned long, std::__1::allocator<id> > __size_;
} deque<id, std::__1::allocator<id> >;

typedef struct ASTextNodeDrawParameter {
	CGRect bounds;
	UIColor* backgroundColor;
} ASTextNodeDrawParameter;

typedef struct _compressed_pair<unsigned long, std::__1::__map_value_compare<unsigned long, std::__1::__value_type<unsigned long, id<ASLayoutable> >, std::__1::less<unsigned long>, true> > {
	unsigned long long __first_;
} compressed_pair<unsigned long, std::__1::__map_value_compare<unsigned long, std::__1::__value_type<unsigned long, id<ASLayoutable> >, std::__1::less<unsigned long>, true> >;

typedef struct _compressed_pair<std::__1::__tree_end_node<std::__1::__tree_node_base<void *> *>, std::__1::allocator<std::__1::__tree_node<std::__1::__value_type<unsigned long, id<ASLayoutable> >, void *> > > {
	tree_end_node<std::__1::__tree_node_base<void *> *> __first_;
} compressed_pair<std::__1::__tree_end_node<std::__1::__tree_node_base<void *> *>, std::__1::allocator<std::__1::__tree_node<std::__1::__value_type<unsigned long, id<ASLayoutable> >, void *> > >;

typedef struct _tree<std::__1::__value_type<unsigned long, id<ASLayoutable> >, std::__1::__map_value_compare<unsigned long, std::__1::__value_type<unsigned long, id<ASLayoutable> >, std::__1::less<unsigned long>, true>, std::__1::allocator<std::__1::__value_type<unsigned long, id<ASLayoutable> > > > {
	__tree_node<std::__1::__value_type<unsigned long, id<ASLayoutable> >, void *> __begin_node_;
	compressed_pair<std::__1::__tree_end_node<std::__1::__tree_node_base<void *> *>, std::__1::allocator<std::__1::__tree_node<std::__1::__value_type<unsigned long, id<ASLayoutable> >, void *> > > __pair1_;
	compressed_pair<unsigned long, std::__1::__map_value_compare<unsigned long, std::__1::__value_type<unsigned long, id<ASLayoutable> >, std::__1::less<unsigned long>, true> > __pair3_;
} tree<std::__1::__value_type<unsigned long, id<ASLayoutable> >, std::__1::__map_value_compare<unsigned long, std::__1::__value_type<unsigned long, id<ASLayoutable> >, std::__1::less<unsigned long>, true>, std::__1::allocator<std::__1::__value_type<unsigned long, id<ASLayoutable> > > >;

typedef struct map<unsigned long, id<ASLayoutable>, std::__1::less<unsigned long>, std::__1::allocator<std::__1::pair<const unsigned long, id<ASLayoutable> > > > {
	tree<std::__1::__value_type<unsigned long, id<ASLayoutable> >, std::__1::__map_value_compare<unsigned long, std::__1::__value_type<unsigned long, id<ASLayoutable> >, std::__1::less<unsigned long>, true>, std::__1::allocator<std::__1::__value_type<unsigned long, id<ASLayoutable> > > > __tree_;
} map<unsigned long, id<ASLayoutable>, std::__1::less<unsigned long>, std::__1::allocator<std::__1::pair<const unsigned long, id<ASLayoutable> > > >;

typedef struct CATransform3D {
	double m11;
	double m12;
	double m13;
	double m14;
	double m21;
	double m22;
	double m23;
	double m24;
	double m31;
	double m32;
	double m33;
	double m34;
	double m41;
	double m42;
	double m43;
	double m44;
} CATransform3D;

typedef struct ASTextKitAttributes {
	NSAttributedString* attributedString;
	NSAttributedString* truncationAttributedString;
	NSCharacterSet* avoidTailTruncationSet;
	long long lineBreakMode;
	unsigned long long maximumNumberOfLines;
	NSArray* exclusionPaths;
	CGSize shadowOffset;
	UIColor* shadowColor;
	double shadowOpacity;
	double shadowRadius;
	NSArray* pointSizeScaleFactors;
	id layoutManagerCreationBlock;
	layoutManagerDelegate ;
	textStorageCreationBlock ^<NSLayoutManagerDelegate>;
} ASTextKitAttributes;

typedef struct _compressed_pair<_NSRange *, std::__1::allocator<_NSRange> > {
	_NSRange __first_;
} compressed_pair<_NSRange *, std::__1::allocator<_NSRange> >;

typedef struct vector<_NSRange, std::__1::allocator<_NSRange> > {
	_NSRange __begin_;
	_NSRange __end_;
	compressed_pair<_NSRange *, std::__1::allocator<_NSRange> > __end_cap_;
} vector<_NSRange, std::__1::allocator<_NSRange> >;

typedef struct __CTFrame* CTFrameRef;

typedef struct __CTFramesetter* CTFramesetterRef;

typedef struct __CTLine* CTLineRef;

typedef struct _compressed_pair<FBMLFaceBoxRequest *__strong *, std::__1::allocator<FBMLFaceBoxRequest *> > {
	id __first_;
} compressed_pair<FBMLFaceBoxRequest *__strong *, std::__1::allocator<FBMLFaceBoxRequest *> >;

typedef struct vector<FBMLFaceBoxRequest *, std::__1::allocator<FBMLFaceBoxRequest *> > {
	id __begin_;
	id __end_;
	compressed_pair<FBMLFaceBoxRequest *__strong *, std::__1::allocator<FBMLFaceBoxRequest *> > __end_cap_;
} vector<FBMLFaceBoxRequest *, std::__1::allocator<FBMLFaceBoxRequest *> >;

typedef struct priority_queue<FBMLFaceBoxRequest *, std::__1::vector<FBMLFaceBoxRequest *, std::__1::allocator<FBMLFaceBoxRequest *> >, request_queue_comparator> {
	vector<FBMLFaceBoxRequest *, std::__1::allocator<FBMLFaceBoxRequest *> > c;
	const equest_queue_comparator comp;
} priority_queue<FBMLFaceBoxRequest *, std::__1::vector<FBMLFaceBoxRequest *, std::__1::allocator<FBMLFaceBoxRequest *> >, request_queue_comparator>;

typedef struct __CFWriteStream* CFWriteStreamRef;

typedef struct __SCNetworkReachability* SCNetworkReachabilityRef;

typedef struct FBStreamingFlagsManager {
	unordered_map<NSString *, unsigned long, FB::HashFunctor<NSObject *>, FB::EqualFunctor<NSObject *>, std::__1::allocator<std::__1::pair<NSString *const, unsigned long> > > _maxImageFlagPerUrlKey;
	mutex _lock;
} FBStreamingFlagsManager;

typedef struct shared_ptr<facebook::mobile::graphstore::FBAsyncMutationAwareGraphStore::Expander> {
	Expander __ptr_;
	__shared_weak_count __cntrl_;
} shared_ptr<facebook::mobile::graphstore::FBAsyncMutationAwareGraphStore::Expander>;

typedef struct shared_ptr<facebook::mobile::graphstore::FBAsyncMutationAwareGraphStore> {
	FBAsyncMutationAwareGraphStore __ptr_;
	__shared_weak_count __cntrl_;
} shared_ptr<facebook::mobile::graphstore::FBAsyncMutationAwareGraphStore>;

typedef struct shared_ptr<facebook::graphql::GraphQLService> {
	GraphQLService __ptr_;
	__shared_weak_count __cntrl_;
} shared_ptr<facebook::graphql::GraphQLService>;

typedef struct _compressed_pair<SubPageInfo *, std::__1::allocator<SubPageInfo> > {
	SubPageInfo __first_;
} compressed_pair<SubPageInfo *, std::__1::allocator<SubPageInfo> >;

typedef struct vector<SubPageInfo, std::__1::allocator<SubPageInfo> > {
	SubPageInfo __begin_;
	SubPageInfo __end_;
	compressed_pair<SubPageInfo *, std::__1::allocator<SubPageInfo> > __end_cap_;
} vector<SubPageInfo, std::__1::allocator<SubPageInfo> >;

typedef struct _compressed_pair<unsigned long, std::__1::__map_value_compare<FBMemModelObject *, std::__1::__value_type<FBMemModelObject *, FBMemModelObject *>, std::__1::less<FBMemModelObject *>, true> > {
	unsigned long long __first_;
} compressed_pair<unsigned long, std::__1::__map_value_compare<FBMemModelObject *, std::__1::__value_type<FBMemModelObject *, FBMemModelObject *>, std::__1::less<FBMemModelObject *>, true> >;

typedef struct _compressed_pair<std::__1::__tree_end_node<std::__1::__tree_node_base<void *> *>, std::__1::allocator<std::__1::__tree_node<std::__1::__value_type<FBMemModelObject *, FBMemModelObject *>, void *> > > {
	tree_end_node<std::__1::__tree_node_base<void *> *> __first_;
} compressed_pair<std::__1::__tree_end_node<std::__1::__tree_node_base<void *> *>, std::__1::allocator<std::__1::__tree_node<std::__1::__value_type<FBMemModelObject *, FBMemModelObject *>, void *> > >;

typedef struct _tree<std::__1::__value_type<FBMemModelObject *, FBMemModelObject *>, std::__1::__map_value_compare<FBMemModelObject *, std::__1::__value_type<FBMemModelObject *, FBMemModelObject *>, std::__1::less<FBMemModelObject *>, true>, std::__1::allocator<std::__1::__value_type<FBMemModelObject *, FBMemModelObject *> > > {
	__tree_node<std::__1::__value_type<FBMemModelObject *, FBMemModelObject *>, void *> __begin_node_;
	compressed_pair<std::__1::__tree_end_node<std::__1::__tree_node_base<void *> *>, std::__1::allocator<std::__1::__tree_node<std::__1::__value_type<FBMemModelObject *, FBMemModelObject *>, void *> > > __pair1_;
	compressed_pair<unsigned long, std::__1::__map_value_compare<FBMemModelObject *, std::__1::__value_type<FBMemModelObject *, FBMemModelObject *>, std::__1::less<FBMemModelObject *>, true> > __pair3_;
} tree<std::__1::__value_type<FBMemModelObject *, FBMemModelObject *>, std::__1::__map_value_compare<FBMemModelObject *, std::__1::__value_type<FBMemModelObject *, FBMemModelObject *>, std::__1::less<FBMemModelObject *>, true>, std::__1::allocator<std::__1::__value_type<FBMemModelObject *, FBMemModelObject *> > >;

typedef struct map<FBMemModelObject *, FBMemModelObject *, std::__1::less<FBMemModelObject *>, std::__1::allocator<std::__1::pair<FBMemModelObject *const, FBMemModelObject *> > > {
	tree<std::__1::__value_type<FBMemModelObject *, FBMemModelObject *>, std::__1::__map_value_compare<FBMemModelObject *, std::__1::__value_type<FBMemModelObject *, FBMemModelObject *>, std::__1::less<FBMemModelObject *>, true>, std::__1::allocator<std::__1::__value_type<FBMemModelObject *, FBMemModelObject *> > > __tree_;
} map<FBMemModelObject *, FBMemModelObject *, std::__1::less<FBMemModelObject *>, std::__1::allocator<std::__1::pair<FBMemModelObject *const, FBMemModelObject *> > >;

typedef struct _compressed_pair<unsigned long, std::__1::__map_value_compare<FBConsistentLookasideCacheObservationHandle *, std::__1::__value_type<FBConsistentLookasideCacheObservationHandle *, FBMemModelObject *>, std::__1::less<FBConsistentLookasideCacheObservationHandle *>, true> > {
	unsigned long long __first_;
} compressed_pair<unsigned long, std::__1::__map_value_compare<FBConsistentLookasideCacheObservationHandle *, std::__1::__value_type<FBConsistentLookasideCacheObservationHandle *, FBMemModelObject *>, std::__1::less<FBConsistentLookasideCacheObservationHandle *>, true> >;

typedef struct _compressed_pair<std::__1::__tree_end_node<std::__1::__tree_node_base<void *> *>, std::__1::allocator<std::__1::__tree_node<std::__1::__value_type<FBConsistentLookasideCacheObservationHandle *, FBMemModelObject *>, void *> > > {
	tree_end_node<std::__1::__tree_node_base<void *> *> __first_;
} compressed_pair<std::__1::__tree_end_node<std::__1::__tree_node_base<void *> *>, std::__1::allocator<std::__1::__tree_node<std::__1::__value_type<FBConsistentLookasideCacheObservationHandle *, FBMemModelObject *>, void *> > >;

typedef struct _tree<std::__1::__value_type<FBConsistentLookasideCacheObservationHandle *, FBMemModelObject *>, std::__1::__map_value_compare<FBConsistentLookasideCacheObservationHandle *, std::__1::__value_type<FBConsistentLookasideCacheObservationHandle *, FBMemModelObject *>, std::__1::less<FBConsistentLookasideCacheObservationHandle *>, true>, std::__1::allocator<std::__1::__value_type<FBConsistentLookasideCacheObservationHandle *, FBMemModelObject *> > > {
	__tree_node<std::__1::__value_type<FBConsistentLookasideCacheObservationHandle *, FBMemModelObject *>, void *> __begin_node_;
	compressed_pair<std::__1::__tree_end_node<std::__1::__tree_node_base<void *> *>, std::__1::allocator<std::__1::__tree_node<std::__1::__value_type<FBConsistentLookasideCacheObservationHandle *, FBMemModelObject *>, void *> > > __pair1_;
	compressed_pair<unsigned long, std::__1::__map_value_compare<FBConsistentLookasideCacheObservationHandle *, std::__1::__value_type<FBConsistentLookasideCacheObservationHandle *, FBMemModelObject *>, std::__1::less<FBConsistentLookasideCacheObservationHandle *>, true> > __pair3_;
} tree<std::__1::__value_type<FBConsistentLookasideCacheObservationHandle *, FBMemModelObject *>, std::__1::__map_value_compare<FBConsistentLookasideCacheObservationHandle *, std::__1::__value_type<FBConsistentLookasideCacheObservationHandle *, FBMemModelObject *>, std::__1::less<FBConsistentLookasideCacheObservationHandle *>, true>, std::__1::allocator<std::__1::__value_type<FBConsistentLookasideCacheObservationHandle *, FBMemModelObject *> > >;

typedef struct map<FBConsistentLookasideCacheObservationHandle *, FBMemModelObject *, std::__1::less<FBConsistentLookasideCacheObservationHandle *>, std::__1::allocator<std::__1::pair<FBConsistentLookasideCacheObservationHandle *const, FBMemModelObject *> > > {
	tree<std::__1::__value_type<FBConsistentLookasideCacheObservationHandle *, FBMemModelObject *>, std::__1::__map_value_compare<FBConsistentLookasideCacheObservationHandle *, std::__1::__value_type<FBConsistentLookasideCacheObservationHandle *, FBMemModelObject *>, std::__1::less<FBConsistentLookasideCacheObservationHandle *>, true>, std::__1::allocator<std::__1::__value_type<FBConsistentLookasideCacheObservationHandle *, FBMemModelObject *> > > __tree_;
} map<FBConsistentLookasideCacheObservationHandle *, FBMemModelObject *, std::__1::less<FBConsistentLookasideCacheObservationHandle *>, std::__1::allocator<std::__1::pair<FBConsistentLookasideCacheObservationHandle *const, FBMemModelObject *> > >;

typedef struct {
	BOOL field1;
	BOOL field2;
	id field3;
	BOOL field4;
} SCD_Struct_FB933;

typedef struct {
	UIColor* titleColorNormal;
	UIColor* titleColorHighlighted;
	UIImage* backgroundImageNormal;
	UIImage* backgroundImageHighlighted;
} SCD_Struct_FI934;

typedef struct {
	id field1;
	id field2;
	BOOL field3;
	double field4;
} SCD_Struct_FI935;

typedef struct _compressed_pair<proxygen::mqttclient::RadioStatusObserver *, std::__1::default_delete<proxygen::mqttclient::RadioStatusObserver> > {
	RadioStatusObserver __first_;
} compressed_pair<proxygen::mqttclient::RadioStatusObserver *, std::__1::default_delete<proxygen::mqttclient::RadioStatusObserver> >;

typedef struct unique_ptr<proxygen::mqttclient::RadioStatusObserver, std::__1::default_delete<proxygen::mqttclient::RadioStatusObserver> > {
	compressed_pair<proxygen::mqttclient::RadioStatusObserver *, std::__1::default_delete<proxygen::mqttclient::RadioStatusObserver> > __ptr_;
} unique_ptr<proxygen::mqttclient::RadioStatusObserver, std::__1::default_delete<proxygen::mqttclient::RadioStatusObserver> >;

typedef struct _compressed_pair<proxygen::mqttclient::MQTTClient *, folly::DelayedDestruction::Destructor> {
	MQTTClient __first_;
} compressed_pair<proxygen::mqttclient::MQTTClient *, folly::DelayedDestruction::Destructor>;

typedef struct unique_ptr<proxygen::mqttclient::MQTTClient, folly::DelayedDestruction::Destructor> {
	compressed_pair<proxygen::mqttclient::MQTTClient *, folly::DelayedDestruction::Destructor> __ptr_;
} unique_ptr<proxygen::mqttclient::MQTTClient, folly::DelayedDestruction::Destructor>;

typedef struct shared_ptr<MQTTClientGlue> {
	MQTTClientGlue __ptr_;
	__shared_weak_count __cntrl_;
} shared_ptr<MQTTClientGlue>;

typedef struct _compressed_pair<FBWhistleConnectionStatsLogger *, std::__1::default_delete<FBWhistleConnectionStatsLogger> > {
	FBWhistleConnectionStatsLogger __first_;
} compressed_pair<FBWhistleConnectionStatsLogger *, std::__1::default_delete<FBWhistleConnectionStatsLogger> >;

typedef struct unique_ptr<FBWhistleConnectionStatsLogger, std::__1::default_delete<FBWhistleConnectionStatsLogger> > {
	compressed_pair<FBWhistleConnectionStatsLogger *, std::__1::default_delete<FBWhistleConnectionStatsLogger> > __ptr_;
} unique_ptr<FBWhistleConnectionStatsLogger, std::__1::default_delete<FBWhistleConnectionStatsLogger> >;

typedef struct _compressed_pair<FBWhistleForegroundConnectionStatsLogger *, std::__1::default_delete<FBWhistleForegroundConnectionStatsLogger> > {
	FBWhistleForegroundConnectionStatsLogger __first_;
} compressed_pair<FBWhistleForegroundConnectionStatsLogger *, std::__1::default_delete<FBWhistleForegroundConnectionStatsLogger> >;

typedef struct unique_ptr<FBWhistleForegroundConnectionStatsLogger, std::__1::default_delete<FBWhistleForegroundConnectionStatsLogger> > {
	compressed_pair<FBWhistleForegroundConnectionStatsLogger *, std::__1::default_delete<FBWhistleForegroundConnectionStatsLogger> > __ptr_;
} unique_ptr<FBWhistleForegroundConnectionStatsLogger, std::__1::default_delete<FBWhistleForegroundConnectionStatsLogger> >;

typedef struct shared_ptr<WhistleBackgroundTokenManager> {
	WhistleBackgroundTokenManager __ptr_;
	__shared_weak_count __cntrl_;
} shared_ptr<WhistleBackgroundTokenManager>;

typedef struct shared_ptr<proxygen::mqttclient::EvbMQTTClientProxyFactory> {
	EvbMQTTClientProxyFactory __ptr_;
	__shared_weak_count __cntrl_;
} shared_ptr<proxygen::mqttclient::EvbMQTTClientProxyFactory>;

typedef struct shared_ptr<folly::SSLContext> {
	SSLContext __ptr_;
	__shared_weak_count __cntrl_;
} shared_ptr<folly::SSLContext>;

typedef struct atomic<long> {
	Aq __a_;
} atomic<long>;

typedef struct SmoothLoopTime {
	double expCoeff_;
	double value_;
	long long oldBusyLeftover_;
} SmoothLoopTime;

typedef struct type {
	unsigned char __lx[48];
} type;

typedef struct _compressed_pair<unsigned long, std::__1::allocator<std::__1::__hash_node<std::__1::__hash_value_type<unsigned long long, std::__1::shared_ptr<void> >, void *> *> > {
	unsigned long long __first_;
} compressed_pair<unsigned long, std::__1::allocator<std::__1::__hash_node<std::__1::__hash_value_type<unsigned long long, std::__1::shared_ptr<void> >, void *> *> >;

typedef struct _compressed_pair<unsigned long, std::__1::__unordered_map_hasher<unsigned long long, std::__1::__hash_value_type<unsigned long long, std::__1::shared_ptr<void> >, std::__1::hash<unsigned long long>, true> > {
	unsigned long long __first_;
} compressed_pair<unsigned long, std::__1::__unordered_map_hasher<unsigned long long, std::__1::__hash_value_type<unsigned long long, std::__1::shared_ptr<void> >, std::__1::hash<unsigned long long>, true> >;

typedef struct _compressed_pair<float, std::__1::__unordered_map_equal<unsigned long long, std::__1::__hash_value_type<unsigned long long, std::__1::shared_ptr<void> >, std::__1::equal_to<unsigned long long>, true> > {
	float __first_;
} compressed_pair<float, std::__1::__unordered_map_equal<unsigned long long, std::__1::__hash_value_type<unsigned long long, std::__1::shared_ptr<void> >, std::__1::equal_to<unsigned long long>, true> >;

typedef struct _compressed_pair<unsigned long, std::__1::allocator<std::__1::__hash_node<folly::detail::EventBaseLocalBaseBase *, void *> *> > {
	unsigned long long __first_;
} compressed_pair<unsigned long, std::__1::allocator<std::__1::__hash_node<folly::detail::EventBaseLocalBaseBase *, void *> *> >;

typedef struct _compressed_pair<unsigned long, std::__1::hash<folly::detail::EventBaseLocalBaseBase *> > {
	unsigned long long __first_;
} compressed_pair<unsigned long, std::__1::hash<folly::detail::EventBaseLocalBaseBase *> >;

typedef struct _compressed_pair<float, std::__1::equal_to<folly::detail::EventBaseLocalBaseBase *> > {
	float __first_;
} compressed_pair<float, std::__1::equal_to<folly::detail::EventBaseLocalBaseBase *> >;

typedef struct _hash_node_base<std::__1::__hash_node<folly::detail::EventBaseLocalBaseBase *, void *> *> {
	__hash_node<folly::detail::EventBaseLocalBaseBase *, void *> __next_;
} hash_node_base<std::__1::__hash_node<folly::detail::EventBaseLocalBaseBase *, void *> *>;

typedef struct _compressed_pair<std::__1::__hash_node_base<std::__1::__hash_node<folly::detail::EventBaseLocalBaseBase *, void *> *>, std::__1::allocator<std::__1::__hash_node<folly::detail::EventBaseLocalBaseBase *, void *> > > {
	hash_node_base<std::__1::__hash_node<folly::detail::EventBaseLocalBaseBase *, void *> *> __first_;
} compressed_pair<std::__1::__hash_node_base<std::__1::__hash_node<folly::detail::EventBaseLocalBaseBase *, void *> *>, std::__1::allocator<std::__1::__hash_node<folly::detail::EventBaseLocalBaseBase *, void *> > >;

typedef struct _bucket_list_deallocator<std::__1::allocator<std::__1::__hash_node<folly::detail::EventBaseLocalBaseBase *, void *> *> > {
	compressed_pair<unsigned long, std::__1::allocator<std::__1::__hash_node<folly::detail::EventBaseLocalBaseBase *, void *> *> > __data_;
} bucket_list_deallocator<std::__1::allocator<std::__1::__hash_node<folly::detail::EventBaseLocalBaseBase *, void *> *> >;

typedef struct _compressed_pair<std::__1::__hash_node<folly::detail::EventBaseLocalBaseBase *, void *> **, std::__1::__bucket_list_deallocator<std::__1::allocator<std::__1::__hash_node<folly::detail::EventBaseLocalBaseBase *, void *> *> > > {
	__hash_node<folly::detail::EventBaseLocalBaseBase *, void *> __first_;
	bucket_list_deallocator<std::__1::allocator<std::__1::__hash_node<folly::detail::EventBaseLocalBaseBase *, void *> *> > __second_;
} compressed_pair<std::__1::__hash_node<folly::detail::EventBaseLocalBaseBase *, void *> **, std::__1::__bucket_list_deallocator<std::__1::allocator<std::__1::__hash_node<folly::detail::EventBaseLocalBaseBase *, void *> *> > >;

typedef struct unique_ptr<std::__1::__hash_node<folly::detail::EventBaseLocalBaseBase *, void *> *[], std::__1::__bucket_list_deallocator<std::__1::allocator<std::__1::__hash_node<folly::detail::EventBaseLocalBaseBase *, void *> *> > > {
	compressed_pair<std::__1::__hash_node<folly::detail::EventBaseLocalBaseBase *, void *> **, std::__1::__bucket_list_deallocator<std::__1::allocator<std::__1::__hash_node<folly::detail::EventBaseLocalBaseBase *, void *> *> > > __ptr_;
} unique_ptr<std::__1::__hash_node<folly::detail::EventBaseLocalBaseBase *, void *> *[], std::__1::__bucket_list_deallocator<std::__1::allocator<std::__1::__hash_node<folly::detail::EventBaseLocalBaseBase *, void *> *> > >;

typedef struct _hash_table<folly::detail::EventBaseLocalBaseBase *, std::__1::hash<folly::detail::EventBaseLocalBaseBase *>, std::__1::equal_to<folly::detail::EventBaseLocalBaseBase *>, std::__1::allocator<folly::detail::EventBaseLocalBaseBase *> > {
	unique_ptr<std::__1::__hash_node<folly::detail::EventBaseLocalBaseBase *, void *> *[], std::__1::__bucket_list_deallocator<std::__1::allocator<std::__1::__hash_node<folly::detail::EventBaseLocalBaseBase *, void *> *> > > __bucket_list_;
	compressed_pair<std::__1::__hash_node_base<std::__1::__hash_node<folly::detail::EventBaseLocalBaseBase *, void *> *>, std::__1::allocator<std::__1::__hash_node<folly::detail::EventBaseLocalBaseBase *, void *> > > __p1_;
	compressed_pair<unsigned long, std::__1::hash<folly::detail::EventBaseLocalBaseBase *> > __p2_;
	compressed_pair<float, std::__1::equal_to<folly::detail::EventBaseLocalBaseBase *> > __p3_;
} hash_table<folly::detail::EventBaseLocalBaseBase *, std::__1::hash<folly::detail::EventBaseLocalBaseBase *>, std::__1::equal_to<folly::detail::EventBaseLocalBaseBase *>, std::__1::allocator<folly::detail::EventBaseLocalBaseBase *> >;

typedef struct unordered_set<folly::detail::EventBaseLocalBaseBase *, std::__1::hash<folly::detail::EventBaseLocalBaseBase *>, std::__1::equal_to<folly::detail::EventBaseLocalBaseBase *>, std::__1::allocator<folly::detail::EventBaseLocalBaseBase *> > {
	hash_table<folly::detail::EventBaseLocalBaseBase *, std::__1::hash<folly::detail::EventBaseLocalBaseBase *>, std::__1::equal_to<folly::detail::EventBaseLocalBaseBase *>, std::__1::allocator<folly::detail::EventBaseLocalBaseBase *> > __table_;
} unordered_set<folly::detail::EventBaseLocalBaseBase *, std::__1::hash<folly::detail::EventBaseLocalBaseBase *>, std::__1::equal_to<folly::detail::EventBaseLocalBaseBase *>, std::__1::allocator<folly::detail::EventBaseLocalBaseBase *> >;

typedef struct _hash_node_base<std::__1::__hash_node<std::__1::__hash_value_type<unsigned long long, std::__1::shared_ptr<void> >, void *> *> {
	__hash_node<std::__1::__hash_value_type<unsigned long long, std::__1::shared_ptr<void> >, void *> __next_;
} hash_node_base<std::__1::__hash_node<std::__1::__hash_value_type<unsigned long long, std::__1::shared_ptr<void> >, void *> *>;

typedef struct _compressed_pair<std::__1::__hash_node_base<std::__1::__hash_node<std::__1::__hash_value_type<unsigned long long, std::__1::shared_ptr<void> >, void *> *>, std::__1::allocator<std::__1::__hash_node<std::__1::__hash_value_type<unsigned long long, std::__1::shared_ptr<void> >, void *> > > {
	hash_node_base<std::__1::__hash_node<std::__1::__hash_value_type<unsigned long long, std::__1::shared_ptr<void> >, void *> *> __first_;
} compressed_pair<std::__1::__hash_node_base<std::__1::__hash_node<std::__1::__hash_value_type<unsigned long long, std::__1::shared_ptr<void> >, void *> *>, std::__1::allocator<std::__1::__hash_node<std::__1::__hash_value_type<unsigned long long, std::__1::shared_ptr<void> >, void *> > >;

typedef struct _bucket_list_deallocator<std::__1::allocator<std::__1::__hash_node<std::__1::__hash_value_type<unsigned long long, std::__1::shared_ptr<void> >, void *> *> > {
	compressed_pair<unsigned long, std::__1::allocator<std::__1::__hash_node<std::__1::__hash_value_type<unsigned long long, std::__1::shared_ptr<void> >, void *> *> > __data_;
} bucket_list_deallocator<std::__1::allocator<std::__1::__hash_node<std::__1::__hash_value_type<unsigned long long, std::__1::shared_ptr<void> >, void *> *> >;

typedef struct _compressed_pair<std::__1::__hash_node<std::__1::__hash_value_type<unsigned long long, std::__1::shared_ptr<void> >, void *> **, std::__1::__bucket_list_deallocator<std::__1::allocator<std::__1::__hash_node<std::__1::__hash_value_type<unsigned long long, std::__1::shared_ptr<void> >, void *> *> > > {
	__hash_node<std::__1::__hash_value_type<unsigned long long, std::__1::shared_ptr<void> >, void *> __first_;
	bucket_list_deallocator<std::__1::allocator<std::__1::__hash_node<std::__1::__hash_value_type<unsigned long long, std::__1::shared_ptr<void> >, void *> *> > __second_;
} compressed_pair<std::__1::__hash_node<std::__1::__hash_value_type<unsigned long long, std::__1::shared_ptr<void> >, void *> **, std::__1::__bucket_list_deallocator<std::__1::allocator<std::__1::__hash_node<std::__1::__hash_value_type<unsigned long long, std::__1::shared_ptr<void> >, void *> *> > >;

typedef struct unique_ptr<std::__1::__hash_node<std::__1::__hash_value_type<unsigned long long, std::__1::shared_ptr<void> >, void *> *[], std::__1::__bucket_list_deallocator<std::__1::allocator<std::__1::__hash_node<std::__1::__hash_value_type<unsigned long long, std::__1::shared_ptr<void> >, void *> *> > > {
	compressed_pair<std::__1::__hash_node<std::__1::__hash_value_type<unsigned long long, std::__1::shared_ptr<void> >, void *> **, std::__1::__bucket_list_deallocator<std::__1::allocator<std::__1::__hash_node<std::__1::__hash_value_type<unsigned long long, std::__1::shared_ptr<void> >, void *> *> > > __ptr_;
} unique_ptr<std::__1::__hash_node<std::__1::__hash_value_type<unsigned long long, std::__1::shared_ptr<void> >, void *> *[], std::__1::__bucket_list_deallocator<std::__1::allocator<std::__1::__hash_node<std::__1::__hash_value_type<unsigned long long, std::__1::shared_ptr<void> >, void *> *> > >;

typedef struct _hash_table<std::__1::__hash_value_type<unsigned long long, std::__1::shared_ptr<void> >, std::__1::__unordered_map_hasher<unsigned long long, std::__1::__hash_value_type<unsigned long long, std::__1::shared_ptr<void> >, std::__1::hash<unsigned long long>, true>, std::__1::__unordered_map_equal<unsigned long long, std::__1::__hash_value_type<unsigned long long, std::__1::shared_ptr<void> >, std::__1::equal_to<unsigned long long>, true>, std::__1::allocator<std::__1::__hash_value_type<unsigned long long, std::__1::shared_ptr<void> > > > {
	unique_ptr<std::__1::__hash_node<std::__1::__hash_value_type<unsigned long long, std::__1::shared_ptr<void> >, void *> *[], std::__1::__bucket_list_deallocator<std::__1::allocator<std::__1::__hash_node<std::__1::__hash_value_type<unsigned long long, std::__1::shared_ptr<void> >, void *> *> > > __bucket_list_;
	compressed_pair<std::__1::__hash_node_base<std::__1::__hash_node<std::__1::__hash_value_type<unsigned long long, std::__1::shared_ptr<void> >, void *> *>, std::__1::allocator<std::__1::__hash_node<std::__1::__hash_value_type<unsigned long long, std::__1::shared_ptr<void> >, void *> > > __p1_;
	compressed_pair<unsigned long, std::__1::__unordered_map_hasher<unsigned long long, std::__1::__hash_value_type<unsigned long long, std::__1::shared_ptr<void> >, std::__1::hash<unsigned long long>, true> > __p2_;
	compressed_pair<float, std::__1::__unordered_map_equal<unsigned long long, std::__1::__hash_value_type<unsigned long long, std::__1::shared_ptr<void> >, std::__1::equal_to<unsigned long long>, true> > __p3_;
} hash_table<std::__1::__hash_value_type<unsigned long long, std::__1::shared_ptr<void> >, std::__1::__unordered_map_hasher<unsigned long long, std::__1::__hash_value_type<unsigned long long, std::__1::shared_ptr<void> >, std::__1::hash<unsigned long long>, true>, std::__1::__unordered_map_equal<unsigned long long, std::__1::__hash_value_type<unsigned long long, std::__1::shared_ptr<void> >, std::__1::equal_to<unsigned long long>, true>, std::__1::allocator<std::__1::__hash_value_type<unsigned long long, std::__1::shared_ptr<void> > > >;

typedef struct unordered_map<unsigned long long, std::__1::shared_ptr<void>, std::__1::hash<unsigned long long>, std::__1::equal_to<unsigned long long>, std::__1::allocator<std::__1::pair<const unsigned long long, std::__1::shared_ptr<void> > > > {
	hash_table<std::__1::__hash_value_type<unsigned long long, std::__1::shared_ptr<void> >, std::__1::__unordered_map_hasher<unsigned long long, std::__1::__hash_value_type<unsigned long long, std::__1::shared_ptr<void> >, std::__1::hash<unsigned long long>, true>, std::__1::__unordered_map_equal<unsigned long long, std::__1::__hash_value_type<unsigned long long, std::__1::shared_ptr<void> >, std::__1::equal_to<unsigned long long>, true>, std::__1::allocator<std::__1::__hash_value_type<unsigned long long, std::__1::shared_ptr<void> > > > __table_;
} unordered_map<unsigned long long, std::__1::shared_ptr<void>, std::__1::hash<unsigned long long>, std::__1::equal_to<unsigned long long>, std::__1::allocator<std::__1::pair<const unsigned long long, std::__1::shared_ptr<void> > > >;

typedef struct shared_ptr<folly::EventBaseObserver> {
	EventBaseObserver __ptr_;
	__shared_weak_count __cntrl_;
} shared_ptr<folly::EventBaseObserver>;

typedef struct Function<void ()> {
	Data data_;
	void big;
	type) tiny;
	/*function pointer*/void* call_;
	/*function pointer*/void* exec_;
} Function<void ()>;

typedef struct _compressed_pair<folly::EventBase::FunctionRunner *, std::__1::default_delete<folly::EventBase::FunctionRunner> > {
	FunctionRunner __first_;
} compressed_pair<folly::EventBase::FunctionRunner *, std::__1::default_delete<folly::EventBase::FunctionRunner> >;

typedef struct unique_ptr<folly::EventBase::FunctionRunner, std::__1::default_delete<folly::EventBase::FunctionRunner> > {
	compressed_pair<folly::EventBase::FunctionRunner *, std::__1::default_delete<folly::EventBase::FunctionRunner> > __ptr_;
} unique_ptr<folly::EventBase::FunctionRunner, std::__1::default_delete<folly::EventBase::FunctionRunner> >;

typedef struct _compressed_pair<folly::NotificationQueue<folly::Function<void ()> > *, std::__1::default_delete<folly::NotificationQueue<folly::Function<void ()> > > > {
	NotificationQueue<folly::Function<void ()> > __first_;
} compressed_pair<folly::NotificationQueue<folly::Function<void ()> > *, std::__1::default_delete<folly::NotificationQueue<folly::Function<void ()> > > >;

typedef struct unique_ptr<folly::NotificationQueue<folly::Function<void ()> >, std::__1::default_delete<folly::NotificationQueue<folly::Function<void ()> > > > {
	compressed_pair<folly::NotificationQueue<folly::Function<void ()> > *, std::__1::default_delete<folly::NotificationQueue<folly::Function<void ()> > > > __ptr_;
} unique_ptr<folly::NotificationQueue<folly::Function<void ()> >, std::__1::default_delete<folly::NotificationQueue<folly::Function<void ()> > > >;

typedef struct atomic<_opaque_pthread_t *> {
	A_opaque_pthread_t __a_;
} atomic<_opaque_pthread_t *>;

typedef struct default_header_holder<boost::intrusive::list_node_traits<void *> > {
	list_node<void *> next_;
	list_node<void *> prev_;
} default_header_holder<boost::intrusive::list_node_traits<void *> >;

typedef struct root_plus_size {
	default_header_holder<boost::intrusive::list_node_traits<void *> > m_header;
} root_plus_size;

typedef struct data_t {
	const oot_plus_size root_plus_size_;
} data_t;

typedef struct list<folly::EventBase::LoopCallback, boost::intrusive::constant_time_size<false>, void, void, void> {
	data_t data_;
} list<folly::EventBase::LoopCallback, boost::intrusive::constant_time_size<false>, void, void, void>;

typedef struct _compressed_pair<folly::HHWheelTimer *, folly::DelayedDestruction::Destructor> {
	HHWheelTimer __first_;
} compressed_pair<folly::HHWheelTimer *, folly::DelayedDestruction::Destructor>;

typedef struct unique_ptr<folly::HHWheelTimer, folly::DelayedDestruction::Destructor> {
	compressed_pair<folly::HHWheelTimer *, folly::DelayedDestruction::Destructor> __ptr_;
} unique_ptr<folly::HHWheelTimer, folly::DelayedDestruction::Destructor>;

typedef struct _compressed_pair<folly::TimeoutManager::CobTimeouts *, std::__1::default_delete<folly::TimeoutManager::CobTimeouts> > {
	CobTimeouts __first_;
} compressed_pair<folly::TimeoutManager::CobTimeouts *, std::__1::default_delete<folly::TimeoutManager::CobTimeouts> >;

typedef struct unique_ptr<folly::TimeoutManager::CobTimeouts, std::__1::default_delete<folly::TimeoutManager::CobTimeouts> > {
	compressed_pair<folly::TimeoutManager::CobTimeouts *, std::__1::default_delete<folly::TimeoutManager::CobTimeouts> > __ptr_;
} unique_ptr<folly::TimeoutManager::CobTimeouts, std::__1::default_delete<folly::TimeoutManager::CobTimeouts> >;

typedef struct EventBase {
	/*function pointer*/void* _vptr$TimeoutManager;
	unique_ptr<folly::TimeoutManager::CobTimeouts, std::__1::default_delete<folly::TimeoutManager::CobTimeouts> > cobTimeouts_;
	/*function pointer*/void* _vptr$DrivableExecutor;
	unique_ptr<folly::HHWheelTimer, folly::DelayedDestruction::Destructor> wheelTimer_;
	list<folly::EventBase::LoopCallback, boost::intrusive::constant_time_size<false>, void, void, void> loopCallbacks_;
	list<folly::EventBase::LoopCallback, boost::intrusive::constant_time_size<false>, void, void, void> runBeforeLoopCallbacks_;
	list<folly::EventBase::LoopCallback, boost::intrusive::constant_time_size<false>, void, void, void> onDestructionCallbacks_;
	list<folly::EventBase::LoopCallback, boost::intrusive::constant_time_size<false>, void, void, void> runOnceCallbacks_;
	atomic<bool> stop_;
	atomic<_opaque_pthread_t *> loopThread_;
	event_base evb_;
	unique_ptr<folly::NotificationQueue<folly::Function<void ()> >, std::__1::default_delete<folly::NotificationQueue<folly::Function<void ()> > > > queue_;
	unique_ptr<folly::EventBase::FunctionRunner, std::__1::default_delete<folly::EventBase::FunctionRunner> > fnRunner_;
	long long loopKeepAliveCount_;
	atomic<long> loopKeepAliveCountAtomic_;
	BOOL loopKeepAliveActive_;
	long long maxLatency_;
	SmoothLoopTime avgLoopTime_;
	SmoothLoopTime maxLatencyLoopTime_;
	Function<void ()> maxLatencyCob_;
	BOOL enableTimeMeasurement_;
	unsigned long long nextLoopCnt_;
	unsigned long long latestLoopCnt_;
	unsigned long long startWork_;
	BOOL invokingLoop_;
	shared_ptr<folly::EventBaseObserver> observer_;
	unsigned observerSampleCount_;
	ExecutionObserver executionObserver_;
	basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char> > name_;
	mutex onDestructionCallbacksMutex_;
	mutex localStorageMutex_;
	unordered_map<unsigned long long, std::__1::shared_ptr<void>, std::__1::hash<unsigned long long>, std::__1::equal_to<unsigned long long>, std::__1::allocator<std::__1::pair<const unsigned long long, std::__1::shared_ptr<void> > > > localStorage_;
	unordered_set<folly::detail::EventBaseLocalBaseBase *, std::__1::hash<folly::detail::EventBaseLocalBaseBase *>, std::__1::equal_to<folly::detail::EventBaseLocalBaseBase *>, std::__1::allocator<folly::detail::EventBaseLocalBaseBase *> > localStorageToDtor_;
} EventBase;

typedef struct _compressed_pair<WhistleAppThreadExecutor *, std::__1::default_delete<WhistleAppThreadExecutor> > {
	WhistleAppThreadExecutor __first_;
} compressed_pair<WhistleAppThreadExecutor *, std::__1::default_delete<WhistleAppThreadExecutor> >;

typedef struct unique_ptr<WhistleAppThreadExecutor, std::__1::default_delete<WhistleAppThreadExecutor> > {
	compressed_pair<WhistleAppThreadExecutor *, std::__1::default_delete<WhistleAppThreadExecutor> > __ptr_;
} unique_ptr<WhistleAppThreadExecutor, std::__1::default_delete<WhistleAppThreadExecutor> >;

typedef struct jpeg_decompress_struct {
	jpeg_error_mgr err;
	jpeg_memory_mgr mem;
	jpeg_progress_mgr progress;
	void client_data;
	int is_decompressor;
	int global_state;
	jpeg_source_mgr src;
	unsigned image_width;
	unsigned image_height;
	int num_components;
	int jpeg_color_space;
	int out_color_space;
	unsigned scale_num;
	unsigned scale_denom;
	double output_gamma;
	int buffered_image;
	int raw_data_out;
	int dct_method;
	int do_fancy_upsampling;
	int do_block_smoothing;
	int quantize_colors;
	int dither_mode;
	int two_pass_quantize;
	int desired_number_of_colors;
	int enable_1pass_quant;
	int enable_external_quant;
	int enable_2pass_quant;
	unsigned output_width;
	unsigned output_height;
	int out_color_components;
	int output_components;
	int rec_outbuf_height;
	int actual_number_of_colors;
	char* colormap;
	unsigned output_scanline;
	int input_scan_number;
	unsigned input_iMCU_row;
	int output_scan_number;
	unsigned output_iMCU_row;
	int coef_bits[64];
	/*function pointer*/void* quant_tbl_ptrs[4];
	/*function pointer*/void* dc_huff_tbl_ptrs[4];
	/*function pointer*/void* ac_huff_tbl_ptrs[4];
	int data_precision;
	/*function pointer*/void* comp_info;
	int is_baseline;
	int progressive_mode;
	int arith_code;
	unsigned char arith_dc_L[16];
	unsigned char arith_dc_U[16];
	unsigned char arith_ac_K[16];
	unsigned restart_interval;
	int saw_JFIF_marker;
	unsigned char JFIF_major_version;
	unsigned char JFIF_minor_version;
	unsigned char density_unit;
	unsigned short X_density;
	unsigned short Y_density;
	int saw_Adobe_marker;
	unsigned char Adobe_transform;
	int CCIR601_sampling;
	jpeg_marker_struct marker_list;
	int max_h_samp_factor;
	int max_v_samp_factor;
	int min_DCT_h_scaled_size;
	int min_DCT_v_scaled_size;
	unsigned total_iMCU_rows;
	char* sample_range_limit;
	int comps_in_scan;
	/*function pointer*/void* cur_comp_info[4];
	unsigned MCUs_per_row;
	unsigned MCU_rows_in_scan;
	int blocks_in_MCU;
	int MCU_membership[10];
	int Ss;
	int Se;
	int Ah;
	int Al;
	int block_size;
	int natural_order;
	int lim_Se;
	int unread_marker;
	jpeg_decomp_master master;
	jpeg_d_main_controller main;
	jpeg_d_coef_controller coef;
	jpeg_d_post_controller post;
	jpeg_input_controller inputctl;
	jpeg_marker_reader marker;
	jpeg_entropy_decoder entropy;
	jpeg_inverse_dct idct;
	jpeg_upsampler upsample;
	jpeg_color_deconverter cconvert;
	jpeg_color_quantizer cquantize;
} jpeg_decompress_struct;

typedef struct jpeg_error_mgr {
	/*function pointer*/void* error_exit;
	/*function pointer*/void* emit_message;
	/*function pointer*/void* output_message;
	/*function pointer*/void* format_message;
	/*function pointer*/void* reset_error_mgr;
	int msg_code;
	/*function pointer*/void* msg_parm;
	int i[8];
	char s[80];
	int trace_level;
	long long num_warnings;
	char* jpeg_message_table;
	int last_jpeg_message;
	char* addon_message_table;
	int first_addon_message;
	int last_addon_message;
} jpeg_error_mgr;

typedef struct FBProgressiveJPEGErrorManager {
	jpeg_error_mgr pub;
	int setjmp_buffer[48];
} FBProgressiveJPEGErrorManager;

typedef struct FBPJPEGEncodingInfo {
	short _version;
	int _fileSize;
	NSArray* _scanOffsets;
} FBPJPEGEncodingInfo;

typedef struct {
	BOOL paddingForHasValue_[1];
	FBPJPEGEncodingInfo value;
} SCD_Struct_FB993;

typedef struct Optional<FBPJPEGEncodingInfo> {
	StorageNonTriviallyDestructible storage_;
} Optional<FBPJPEGEncodingInfo>;

typedef struct shared_ptr<Sync::MomentsLiteNativeSessionContext> {
	MomentsLiteNativeSessionContext __ptr_;
	__shared_weak_count __cntrl_;
} shared_ptr<Sync::MomentsLiteNativeSessionContext>;

typedef struct _compressed_pair<Sync::NativeSession *, std::__1::default_delete<Sync::NativeSession> > {
	NativeSession __first_;
} compressed_pair<Sync::NativeSession *, std::__1::default_delete<Sync::NativeSession> >;

typedef struct unique_ptr<Sync::NativeSession, std::__1::default_delete<Sync::NativeSession> > {
	compressed_pair<Sync::NativeSession *, std::__1::default_delete<Sync::NativeSession> > __ptr_;
} unique_ptr<Sync::NativeSession, std::__1::default_delete<Sync::NativeSession> >;

typedef struct _compressed_pair<std::__1::basic_string<char> *, std::__1::allocator<std::__1::basic_string<char> > > {
	basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char> > __first_;
} compressed_pair<std::__1::basic_string<char> *, std::__1::allocator<std::__1::basic_string<char> > >;

typedef struct vector<std::__1::basic_string<char>, std::__1::allocator<std::__1::basic_string<char> > > {
	basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char> > __begin_;
	basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char> > __end_;
	compressed_pair<std::__1::basic_string<char> *, std::__1::allocator<std::__1::basic_string<char> > > __end_cap_;
} vector<std::__1::basic_string<char>, std::__1::allocator<std::__1::basic_string<char> > >;

typedef struct _compressed_pair<facebook::mobile::graphstore::MutationAwareGraphStore::MutationHandle *, std::__1::default_delete<facebook::mobile::graphstore::MutationAwareGraphStore::MutationHandle> > {
	MutationHandle __first_;
} compressed_pair<facebook::mobile::graphstore::MutationAwareGraphStore::MutationHandle *, std::__1::default_delete<facebook::mobile::graphstore::MutationAwareGraphStore::MutationHandle> >;

typedef struct unique_ptr<facebook::mobile::graphstore::MutationAwareGraphStore::MutationHandle, std::__1::default_delete<facebook::mobile::graphstore::MutationAwareGraphStore::MutationHandle> > {
	compressed_pair<facebook::mobile::graphstore::MutationAwareGraphStore::MutationHandle *, std::__1::default_delete<facebook::mobile::graphstore::MutationAwareGraphStore::MutationHandle> > __ptr_;
} unique_ptr<facebook::mobile::graphstore::MutationAwareGraphStore::MutationHandle, std::__1::default_delete<facebook::mobile::graphstore::MutationAwareGraphStore::MutationHandle> >;

typedef struct shared_ptr<facebook::mobile::graphstore::AsyncMutationAwareGraphStore> {
	AsyncMutationAwareGraphStore __ptr_;
	__shared_weak_count __cntrl_;
} shared_ptr<facebook::mobile::graphstore::AsyncMutationAwareGraphStore>;

typedef struct _compressed_pair<facebook::mobile::FBMemModel::detail::RecordAndSnapshot *, std::__1::default_delete<facebook::mobile::FBMemModel::detail::RecordAndSnapshot> > {
	RecordAndSnapshot __first_;
} compressed_pair<facebook::mobile::FBMemModel::detail::RecordAndSnapshot *, std::__1::default_delete<facebook::mobile::FBMemModel::detail::RecordAndSnapshot> >;

typedef struct unique_ptr<facebook::mobile::FBMemModel::detail::RecordAndSnapshot, std::__1::default_delete<facebook::mobile::FBMemModel::detail::RecordAndSnapshot> > {
	compressed_pair<facebook::mobile::FBMemModel::detail::RecordAndSnapshot *, std::__1::default_delete<facebook::mobile::FBMemModel::detail::RecordAndSnapshot> > __ptr_;
} unique_ptr<facebook::mobile::FBMemModel::detail::RecordAndSnapshot, std::__1::default_delete<facebook::mobile::FBMemModel::detail::RecordAndSnapshot> >;

typedef struct _compressed_pair<facebook::mobile::FBMemModel::detail::BuilderImplGraphStore *, std::__1::default_delete<facebook::mobile::FBMemModel::detail::BuilderImplGraphStore> > {
	BuilderImplGraphStore __first_;
} compressed_pair<facebook::mobile::FBMemModel::detail::BuilderImplGraphStore *, std::__1::default_delete<facebook::mobile::FBMemModel::detail::BuilderImplGraphStore> >;

typedef struct unique_ptr<facebook::mobile::FBMemModel::detail::BuilderImplGraphStore, std::__1::default_delete<facebook::mobile::FBMemModel::detail::BuilderImplGraphStore> > {
	compressed_pair<facebook::mobile::FBMemModel::detail::BuilderImplGraphStore *, std::__1::default_delete<facebook::mobile::FBMemModel::detail::BuilderImplGraphStore> > __ptr_;
} unique_ptr<facebook::mobile::FBMemModel::detail::BuilderImplGraphStore, std::__1::default_delete<facebook::mobile::FBMemModel::detail::BuilderImplGraphStore> >;

typedef struct _compressed_pair<facebook::mobile::graphstore::parser::GraphStoreGraphQLFactory *, std::__1::default_delete<facebook::mobile::graphstore::parser::GraphStoreGraphQLFactory> > {
	GraphStoreGraphQLFactory __first_;
} compressed_pair<facebook::mobile::graphstore::parser::GraphStoreGraphQLFactory *, std::__1::default_delete<facebook::mobile::graphstore::parser::GraphStoreGraphQLFactory> >;

typedef struct unique_ptr<facebook::mobile::graphstore::parser::GraphStoreGraphQLFactory, std::__1::default_delete<facebook::mobile::graphstore::parser::GraphStoreGraphQLFactory> > {
	compressed_pair<facebook::mobile::graphstore::parser::GraphStoreGraphQLFactory *, std::__1::default_delete<facebook::mobile::graphstore::parser::GraphStoreGraphQLFactory> > __ptr_;
} unique_ptr<facebook::mobile::graphstore::parser::GraphStoreGraphQLFactory, std::__1::default_delete<facebook::mobile::graphstore::parser::GraphStoreGraphQLFactory> >;

typedef struct _compressed_pair<unsigned long, std::__1::allocator<std::__1::__hash_node<std::__1::__hash_value_type<NSString *, std::__1::shared_ptr<int> >, void *> *> > {
	unsigned long long __first_;
} compressed_pair<unsigned long, std::__1::allocator<std::__1::__hash_node<std::__1::__hash_value_type<NSString *, std::__1::shared_ptr<int> >, void *> *> >;

typedef struct _compressed_pair<unsigned long, std::__1::__unordered_map_hasher<NSString *, std::__1::__hash_value_type<NSString *, std::__1::shared_ptr<int> >, FB::HashFunctor<NSObject *>, true> > {
	unsigned long long __first_;
} compressed_pair<unsigned long, std::__1::__unordered_map_hasher<NSString *, std::__1::__hash_value_type<NSString *, std::__1::shared_ptr<int> >, FB::HashFunctor<NSObject *>, true> >;

typedef struct _compressed_pair<float, std::__1::__unordered_map_equal<NSString *, std::__1::__hash_value_type<NSString *, std::__1::shared_ptr<int> >, FB::EqualFunctor<NSObject *>, true> > {
	float __first_;
} compressed_pair<float, std::__1::__unordered_map_equal<NSString *, std::__1::__hash_value_type<NSString *, std::__1::shared_ptr<int> >, FB::EqualFunctor<NSObject *>, true> >;

typedef struct _hash_node_base<std::__1::__hash_node<std::__1::__hash_value_type<NSString *, std::__1::shared_ptr<int> >, void *> *> {
	__hash_node<std::__1::__hash_value_type<NSString *, std::__1::shared_ptr<int> >, void *> __next_;
} hash_node_base<std::__1::__hash_node<std::__1::__hash_value_type<NSString *, std::__1::shared_ptr<int> >, void *> *>;

typedef struct _compressed_pair<std::__1::__hash_node_base<std::__1::__hash_node<std::__1::__hash_value_type<NSString *, std::__1::shared_ptr<int> >, void *> *>, std::__1::allocator<std::__1::__hash_node<std::__1::__hash_value_type<NSString *, std::__1::shared_ptr<int> >, void *> > > {
	hash_node_base<std::__1::__hash_node<std::__1::__hash_value_type<NSString *, std::__1::shared_ptr<int> >, void *> *> __first_;
} compressed_pair<std::__1::__hash_node_base<std::__1::__hash_node<std::__1::__hash_value_type<NSString *, std::__1::shared_ptr<int> >, void *> *>, std::__1::allocator<std::__1::__hash_node<std::__1::__hash_value_type<NSString *, std::__1::shared_ptr<int> >, void *> > >;

typedef struct _bucket_list_deallocator<std::__1::allocator<std::__1::__hash_node<std::__1::__hash_value_type<NSString *, std::__1::shared_ptr<int> >, void *> *> > {
	compressed_pair<unsigned long, std::__1::allocator<std::__1::__hash_node<std::__1::__hash_value_type<NSString *, std::__1::shared_ptr<int> >, void *> *> > __data_;
} bucket_list_deallocator<std::__1::allocator<std::__1::__hash_node<std::__1::__hash_value_type<NSString *, std::__1::shared_ptr<int> >, void *> *> >;

typedef struct _compressed_pair<std::__1::__hash_node<std::__1::__hash_value_type<NSString *, std::__1::shared_ptr<int> >, void *> **, std::__1::__bucket_list_deallocator<std::__1::allocator<std::__1::__hash_node<std::__1::__hash_value_type<NSString *, std::__1::shared_ptr<int> >, void *> *> > > {
	__hash_node<std::__1::__hash_value_type<NSString *, std::__1::shared_ptr<int> >, void *> __first_;
	bucket_list_deallocator<std::__1::allocator<std::__1::__hash_node<std::__1::__hash_value_type<NSString *, std::__1::shared_ptr<int> >, void *> *> > __second_;
} compressed_pair<std::__1::__hash_node<std::__1::__hash_value_type<NSString *, std::__1::shared_ptr<int> >, void *> **, std::__1::__bucket_list_deallocator<std::__1::allocator<std::__1::__hash_node<std::__1::__hash_value_type<NSString *, std::__1::shared_ptr<int> >, void *> *> > >;

typedef struct unique_ptr<std::__1::__hash_node<std::__1::__hash_value_type<NSString *, std::__1::shared_ptr<int> >, void *> *[], std::__1::__bucket_list_deallocator<std::__1::allocator<std::__1::__hash_node<std::__1::__hash_value_type<NSString *, std::__1::shared_ptr<int> >, void *> *> > > {
	compressed_pair<std::__1::__hash_node<std::__1::__hash_value_type<NSString *, std::__1::shared_ptr<int> >, void *> **, std::__1::__bucket_list_deallocator<std::__1::allocator<std::__1::__hash_node<std::__1::__hash_value_type<NSString *, std::__1::shared_ptr<int> >, void *> *> > > __ptr_;
} unique_ptr<std::__1::__hash_node<std::__1::__hash_value_type<NSString *, std::__1::shared_ptr<int> >, void *> *[], std::__1::__bucket_list_deallocator<std::__1::allocator<std::__1::__hash_node<std::__1::__hash_value_type<NSString *, std::__1::shared_ptr<int> >, void *> *> > >;

typedef struct _hash_table<std::__1::__hash_value_type<NSString *, std::__1::shared_ptr<int> >, std::__1::__unordered_map_hasher<NSString *, std::__1::__hash_value_type<NSString *, std::__1::shared_ptr<int> >, FB::HashFunctor<NSObject *>, true>, std::__1::__unordered_map_equal<NSString *, std::__1::__hash_value_type<NSString *, std::__1::shared_ptr<int> >, FB::EqualFunctor<NSObject *>, true>, std::__1::allocator<std::__1::__hash_value_type<NSString *, std::__1::shared_ptr<int> > > > {
	unique_ptr<std::__1::__hash_node<std::__1::__hash_value_type<NSString *, std::__1::shared_ptr<int> >, void *> *[], std::__1::__bucket_list_deallocator<std::__1::allocator<std::__1::__hash_node<std::__1::__hash_value_type<NSString *, std::__1::shared_ptr<int> >, void *> *> > > __bucket_list_;
	compressed_pair<std::__1::__hash_node_base<std::__1::__hash_node<std::__1::__hash_value_type<NSString *, std::__1::shared_ptr<int> >, void *> *>, std::__1::allocator<std::__1::__hash_node<std::__1::__hash_value_type<NSString *, std::__1::shared_ptr<int> >, void *> > > __p1_;
	compressed_pair<unsigned long, std::__1::__unordered_map_hasher<NSString *, std::__1::__hash_value_type<NSString *, std::__1::shared_ptr<int> >, FB::HashFunctor<NSObject *>, true> > __p2_;
	compressed_pair<float, std::__1::__unordered_map_equal<NSString *, std::__1::__hash_value_type<NSString *, std::__1::shared_ptr<int> >, FB::EqualFunctor<NSObject *>, true> > __p3_;
} hash_table<std::__1::__hash_value_type<NSString *, std::__1::shared_ptr<int> >, std::__1::__unordered_map_hasher<NSString *, std::__1::__hash_value_type<NSString *, std::__1::shared_ptr<int> >, FB::HashFunctor<NSObject *>, true>, std::__1::__unordered_map_equal<NSString *, std::__1::__hash_value_type<NSString *, std::__1::shared_ptr<int> >, FB::EqualFunctor<NSObject *>, true>, std::__1::allocator<std::__1::__hash_value_type<NSString *, std::__1::shared_ptr<int> > > >;

typedef struct unordered_map<NSString *, std::__1::shared_ptr<int>, FB::HashFunctor<NSObject *>, FB::EqualFunctor<NSObject *>, std::__1::allocator<std::__1::pair<NSString *const, std::__1::shared_ptr<int> > > > {
	hash_table<std::__1::__hash_value_type<NSString *, std::__1::shared_ptr<int> >, std::__1::__unordered_map_hasher<NSString *, std::__1::__hash_value_type<NSString *, std::__1::shared_ptr<int> >, FB::HashFunctor<NSObject *>, true>, std::__1::__unordered_map_equal<NSString *, std::__1::__hash_value_type<NSString *, std::__1::shared_ptr<int> >, FB::EqualFunctor<NSObject *>, true>, std::__1::allocator<std::__1::__hash_value_type<NSString *, std::__1::shared_ptr<int> > > > __table_;
} unordered_map<NSString *, std::__1::shared_ptr<int>, FB::HashFunctor<NSObject *>, FB::EqualFunctor<NSObject *>, std::__1::allocator<std::__1::pair<NSString *const, std::__1::shared_ptr<int> > > >;

typedef struct _compressed_pair<unsigned long, std::__1::allocator<std::__1::__hash_node<std::__1::__hash_value_type<FBDiskStoreIdentifier, FBPKVSObjectStore *>, void *> *> > {
	unsigned long long __first_;
} compressed_pair<unsigned long, std::__1::allocator<std::__1::__hash_node<std::__1::__hash_value_type<FBDiskStoreIdentifier, FBPKVSObjectStore *>, void *> *> >;

typedef struct _compressed_pair<unsigned long, std::__1::__unordered_map_hasher<FBDiskStoreIdentifier, std::__1::__hash_value_type<FBDiskStoreIdentifier, FBPKVSObjectStore *>, std::__1::hash<FBDiskStoreIdentifier>, true> > {
	unsigned long long __first_;
} compressed_pair<unsigned long, std::__1::__unordered_map_hasher<FBDiskStoreIdentifier, std::__1::__hash_value_type<FBDiskStoreIdentifier, FBPKVSObjectStore *>, std::__1::hash<FBDiskStoreIdentifier>, true> >;

typedef struct _compressed_pair<float, std::__1::__unordered_map_equal<FBDiskStoreIdentifier, std::__1::__hash_value_type<FBDiskStoreIdentifier, FBPKVSObjectStore *>, std::__1::equal_to<FBDiskStoreIdentifier>, true> > {
	float __first_;
} compressed_pair<float, std::__1::__unordered_map_equal<FBDiskStoreIdentifier, std::__1::__hash_value_type<FBDiskStoreIdentifier, FBPKVSObjectStore *>, std::__1::equal_to<FBDiskStoreIdentifier>, true> >;

typedef struct _hash_node_base<std::__1::__hash_node<std::__1::__hash_value_type<FBDiskStoreIdentifier, FBPKVSObjectStore *>, void *> *> {
	__hash_node<std::__1::__hash_value_type<FBDiskStoreIdentifier, FBPKVSObjectStore *>, void *> __next_;
} hash_node_base<std::__1::__hash_node<std::__1::__hash_value_type<FBDiskStoreIdentifier, FBPKVSObjectStore *>, void *> *>;

typedef struct _compressed_pair<std::__1::__hash_node_base<std::__1::__hash_node<std::__1::__hash_value_type<FBDiskStoreIdentifier, FBPKVSObjectStore *>, void *> *>, std::__1::allocator<std::__1::__hash_node<std::__1::__hash_value_type<FBDiskStoreIdentifier, FBPKVSObjectStore *>, void *> > > {
	hash_node_base<std::__1::__hash_node<std::__1::__hash_value_type<FBDiskStoreIdentifier, FBPKVSObjectStore *>, void *> *> __first_;
} compressed_pair<std::__1::__hash_node_base<std::__1::__hash_node<std::__1::__hash_value_type<FBDiskStoreIdentifier, FBPKVSObjectStore *>, void *> *>, std::__1::allocator<std::__1::__hash_node<std::__1::__hash_value_type<FBDiskStoreIdentifier, FBPKVSObjectStore *>, void *> > >;

typedef struct _bucket_list_deallocator<std::__1::allocator<std::__1::__hash_node<std::__1::__hash_value_type<FBDiskStoreIdentifier, FBPKVSObjectStore *>, void *> *> > {
	compressed_pair<unsigned long, std::__1::allocator<std::__1::__hash_node<std::__1::__hash_value_type<FBDiskStoreIdentifier, FBPKVSObjectStore *>, void *> *> > __data_;
} bucket_list_deallocator<std::__1::allocator<std::__1::__hash_node<std::__1::__hash_value_type<FBDiskStoreIdentifier, FBPKVSObjectStore *>, void *> *> >;

typedef struct _compressed_pair<std::__1::__hash_node<std::__1::__hash_value_type<FBDiskStoreIdentifier, FBPKVSObjectStore *>, void *> **, std::__1::__bucket_list_deallocator<std::__1::allocator<std::__1::__hash_node<std::__1::__hash_value_type<FBDiskStoreIdentifier, FBPKVSObjectStore *>, void *> *> > > {
	__hash_node<std::__1::__hash_value_type<FBDiskStoreIdentifier, FBPKVSObjectStore *>, void *> __first_;
	bucket_list_deallocator<std::__1::allocator<std::__1::__hash_node<std::__1::__hash_value_type<FBDiskStoreIdentifier, FBPKVSObjectStore *>, void *> *> > __second_;
} compressed_pair<std::__1::__hash_node<std::__1::__hash_value_type<FBDiskStoreIdentifier, FBPKVSObjectStore *>, void *> **, std::__1::__bucket_list_deallocator<std::__1::allocator<std::__1::__hash_node<std::__1::__hash_value_type<FBDiskStoreIdentifier, FBPKVSObjectStore *>, void *> *> > >;

typedef struct unique_ptr<std::__1::__hash_node<std::__1::__hash_value_type<FBDiskStoreIdentifier, FBPKVSObjectStore *>, void *> *[], std::__1::__bucket_list_deallocator<std::__1::allocator<std::__1::__hash_node<std::__1::__hash_value_type<FBDiskStoreIdentifier, FBPKVSObjectStore *>, void *> *> > > {
	compressed_pair<std::__1::__hash_node<std::__1::__hash_value_type<FBDiskStoreIdentifier, FBPKVSObjectStore *>, void *> **, std::__1::__bucket_list_deallocator<std::__1::allocator<std::__1::__hash_node<std::__1::__hash_value_type<FBDiskStoreIdentifier, FBPKVSObjectStore *>, void *> *> > > __ptr_;
} unique_ptr<std::__1::__hash_node<std::__1::__hash_value_type<FBDiskStoreIdentifier, FBPKVSObjectStore *>, void *> *[], std::__1::__bucket_list_deallocator<std::__1::allocator<std::__1::__hash_node<std::__1::__hash_value_type<FBDiskStoreIdentifier, FBPKVSObjectStore *>, void *> *> > >;

typedef struct _hash_table<std::__1::__hash_value_type<FBDiskStoreIdentifier, FBPKVSObjectStore *>, std::__1::__unordered_map_hasher<FBDiskStoreIdentifier, std::__1::__hash_value_type<FBDiskStoreIdentifier, FBPKVSObjectStore *>, std::__1::hash<FBDiskStoreIdentifier>, true>, std::__1::__unordered_map_equal<FBDiskStoreIdentifier, std::__1::__hash_value_type<FBDiskStoreIdentifier, FBPKVSObjectStore *>, std::__1::equal_to<FBDiskStoreIdentifier>, true>, std::__1::allocator<std::__1::__hash_value_type<FBDiskStoreIdentifier, FBPKVSObjectStore *> > > {
	unique_ptr<std::__1::__hash_node<std::__1::__hash_value_type<FBDiskStoreIdentifier, FBPKVSObjectStore *>, void *> *[], std::__1::__bucket_list_deallocator<std::__1::allocator<std::__1::__hash_node<std::__1::__hash_value_type<FBDiskStoreIdentifier, FBPKVSObjectStore *>, void *> *> > > __bucket_list_;
	compressed_pair<std::__1::__hash_node_base<std::__1::__hash_node<std::__1::__hash_value_type<FBDiskStoreIdentifier, FBPKVSObjectStore *>, void *> *>, std::__1::allocator<std::__1::__hash_node<std::__1::__hash_value_type<FBDiskStoreIdentifier, FBPKVSObjectStore *>, void *> > > __p1_;
	compressed_pair<unsigned long, std::__1::__unordered_map_hasher<FBDiskStoreIdentifier, std::__1::__hash_value_type<FBDiskStoreIdentifier, FBPKVSObjectStore *>, std::__1::hash<FBDiskStoreIdentifier>, true> > __p2_;
	compressed_pair<float, std::__1::__unordered_map_equal<FBDiskStoreIdentifier, std::__1::__hash_value_type<FBDiskStoreIdentifier, FBPKVSObjectStore *>, std::__1::equal_to<FBDiskStoreIdentifier>, true> > __p3_;
} hash_table<std::__1::__hash_value_type<FBDiskStoreIdentifier, FBPKVSObjectStore *>, std::__1::__unordered_map_hasher<FBDiskStoreIdentifier, std::__1::__hash_value_type<FBDiskStoreIdentifier, FBPKVSObjectStore *>, std::__1::hash<FBDiskStoreIdentifier>, true>, std::__1::__unordered_map_equal<FBDiskStoreIdentifier, std::__1::__hash_value_type<FBDiskStoreIdentifier, FBPKVSObjectStore *>, std::__1::equal_to<FBDiskStoreIdentifier>, true>, std::__1::allocator<std::__1::__hash_value_type<FBDiskStoreIdentifier, FBPKVSObjectStore *> > >;

typedef struct unordered_map<FBDiskStoreIdentifier, FBPKVSObjectStore *, std::__1::hash<FBDiskStoreIdentifier>, std::__1::equal_to<FBDiskStoreIdentifier>, std::__1::allocator<std::__1::pair<const FBDiskStoreIdentifier, FBPKVSObjectStore *> > > {
	hash_table<std::__1::__hash_value_type<FBDiskStoreIdentifier, FBPKVSObjectStore *>, std::__1::__unordered_map_hasher<FBDiskStoreIdentifier, std::__1::__hash_value_type<FBDiskStoreIdentifier, FBPKVSObjectStore *>, std::__1::hash<FBDiskStoreIdentifier>, true>, std::__1::__unordered_map_equal<FBDiskStoreIdentifier, std::__1::__hash_value_type<FBDiskStoreIdentifier, FBPKVSObjectStore *>, std::__1::equal_to<FBDiskStoreIdentifier>, true>, std::__1::allocator<std::__1::__hash_value_type<FBDiskStoreIdentifier, FBPKVSObjectStore *> > > __table_;
} unordered_map<FBDiskStoreIdentifier, FBPKVSObjectStore *, std::__1::hash<FBDiskStoreIdentifier>, std::__1::equal_to<FBDiskStoreIdentifier>, std::__1::allocator<std::__1::pair<const FBDiskStoreIdentifier, FBPKVSObjectStore *> > >;

typedef struct _compressed_pair<double *, std::__1::allocator<double> > {
	double __first_;
} compressed_pair<double *, std::__1::allocator<double> >;

typedef struct vector<double, std::__1::allocator<double> > {
	double __begin_;
	double __end_;
	compressed_pair<double *, std::__1::allocator<double> > __end_cap_;
} vector<double, std::__1::allocator<double> >;

typedef union {
	CGRect rect;
	CGPoint point;
} SCD_Union_FB1031;

typedef struct CGFont* CGFontRef;

typedef struct FBTextViewComponentActions {
	/*^block*/id shouldChangeTextInRangeBlock;
	CKTypedComponentAction<> textDidChangeAction;
	CKTypedComponentAction<> didBeginEditingAction;
	CKTypedComponentAction<> didEndEditingAction;
} FBTextViewComponentActions;

typedef struct FBTextViewComponentPlaceholderAttributes {
	NSString* text;
	UIColor* textColor;
	BOOL shouldWrap;
	BOOL shouldHideWhenEditing;
} FBTextViewComponentPlaceholderAttributes;

typedef struct FBTextViewComponentLayoutManagerAttributes {
	double hyphenationFactor;
	BOOL usesFontLeading;
} FBTextViewComponentLayoutManagerAttributes;

typedef struct FBTextViewComponentTextContainerAttributes {
	long long lineBreakMode;
	double lineFragmentPadding;
	unsigned long long maximumNumberOfLines;
} FBTextViewComponentTextContainerAttributes;

typedef struct FBTextViewComponentInputAccessoryAttributes {
	BOOL showDoneButton;
} FBTextViewComponentInputAccessoryAttributes;

typedef struct FBTextViewComponentViewConfiguration {
	FBTextViewComponentPlaceholderAttributes placeholder;
	FBTextViewComponentLayoutManagerAttributes layoutManagerAttributes;
	FBTextViewComponentTextContainerAttributes textContainerAttributes;
	FBTextViewComponentInputAccessoryAttributes inputAccessory;
	UIFont* font;
	UIColor* textColor;
	long long autocorrectionType;
	long long spellCheckingType;
	long long textAlignment;
	UIEdgeInsets textContainerInset;
	long long keyboardType;
	long long returnKeyType;
	unsigned long long maximumContainerHeightInLines;
	UIColor* backgroundColor;
	BOOL scrollEnabled;
	BOOL editable;
	NSString* accessibilityIdentifier;
} FBTextViewComponentViewConfiguration;

typedef struct FBCaptureManagerConfiguration {
	BOOL isFlipFrontCameraOutputEnabled;
	long long startingDevicePosition;
	BOOL use32BGRAPixelFormat;
	BOOL useSampleBufferPhotoCapturer;
	BOOL useStillPhotoCapturerWhenNoFilters;
	BOOL onlyUsedAsMediaPipelineInput;
} FBCaptureManagerConfiguration;

typedef struct FBCameraAnalyticsPayload {
	NSString* cameraType;
	NSString* cameraSessionID;
	NSString* productSessionID;
} FBCameraAnalyticsPayload;

typedef const struct variant<FBCamera::PerfStatusSuccess, FBCamera::PerfStatusAbort, FBCamera::PerfStatusFail, FBCamera::PerfStatusNoTracking, boost::detail::variant::void_, boost::detail::variant::void_, boost::detail::variant::void_, boost::detail::variant::void_, boost::detail::variant::void_, boost::detail::variant::void_, boost::detail::variant::void_, boost::detail::variant::void_, boost::detail::variant::void_, boost::detail::variant::void_, boost::detail::variant::void_, boost::detail::variant::void_, boost::detail::variant::void_, boost::detail::variant::void_, boost::detail::variant::void_, boost::detail::variant::void_>ialigned_storage<8, 8>(data_t[8c]a8)* ariant<FBCamera::PerfStatusSuccess, FBCamera::PerfStatusAbort, FBCamera::PerfStatusFail, FBCamera::PerfStatusNoTracking, boost::detail::variant::void_, boost::detail::variant::void_, boost::detail::variant::void_, boost::detail::variant::void_, boost::detail::variant::void_, boost::detail::variant::void_, boost::detail::variant::void_, boost::detail::variant::void_, boost::detail::variant::void_, boost::detail::variant::void_, boost::detail::variant::void_, boost::detail::variant::void_, boost::detail::variant::void_, boost::detail::variant::void_, boost::detail::variant::void_, boost::detail::variant::void_>Ref;

typedef struct {
	unsigned long long fontSize;
	unsigned long long lineHeight;
	long long tracking;
} SCD_Struct_FI1042;

typedef struct _compressed_pair<proxygen::ConnectionLogger *, std::__1::default_delete<proxygen::ConnectionLogger> > {
	ConnectionLogger __first_;
} compressed_pair<proxygen::ConnectionLogger *, std::__1::default_delete<proxygen::ConnectionLogger> >;

typedef struct unique_ptr<proxygen::ConnectionLogger, std::__1::default_delete<proxygen::ConnectionLogger> > {
	compressed_pair<proxygen::ConnectionLogger *, std::__1::default_delete<proxygen::ConnectionLogger> > __ptr_;
} unique_ptr<proxygen::ConnectionLogger, std::__1::default_delete<proxygen::ConnectionLogger> >;

typedef struct TimeUtilGeneric<std::__1::chrono::steady_clock> {
	/*function pointer*/void* _vptr$TimeUtilGeneric;
} TimeUtilGeneric<std::__1::chrono::steady_clock>;

typedef struct AggregateBytes {
	int rawBytesRecv;
	int rawBytesWrite;
	int bgRawBytesRecv;
	int bgRawBytesWrite;
	int fgRawBytesRecv;
	int fgRawBytesWrite;
} AggregateBytes;

typedef struct _compressed_pair<proxygen::httpclient::monitor::NetworkStatusMonitor *, std::__1::default_delete<proxygen::httpclient::monitor::NetworkStatusMonitor> > {
	NetworkStatusMonitor __first_;
} compressed_pair<proxygen::httpclient::monitor::NetworkStatusMonitor *, std::__1::default_delete<proxygen::httpclient::monitor::NetworkStatusMonitor> >;

typedef struct unique_ptr<proxygen::httpclient::monitor::NetworkStatusMonitor, std::__1::default_delete<proxygen::httpclient::monitor::NetworkStatusMonitor> > {
	compressed_pair<proxygen::httpclient::monitor::NetworkStatusMonitor *, std::__1::default_delete<proxygen::httpclient::monitor::NetworkStatusMonitor> > __ptr_;
} unique_ptr<proxygen::httpclient::monitor::NetworkStatusMonitor, std::__1::default_delete<proxygen::httpclient::monitor::NetworkStatusMonitor> >;

typedef struct {
	unsigned objectDidMeetVisibilityThreshold : 1;
	unsigned stoppedTrackingObjectWithoutMeetingVisibilityThreshold : 1;
	unsigned stoppedTrackingObjectAfterMeetingVisibilityThreshold : 1;
} SCD_Struct_FB1049;

typedef struct _compressed_pair<NSValue *__strong **, std::__1::allocator<NSValue *__strong *> > {
	id __first_;
} compressed_pair<NSValue *__strong **, std::__1::allocator<NSValue *__strong *> >;

typedef struct _compressed_pair<unsigned long, std::__1::allocator<NSValue *> > {
	unsigned long long __first_;
} compressed_pair<unsigned long, std::__1::allocator<NSValue *> >;

typedef struct _split_buffer<NSValue *__strong *, std::__1::allocator<NSValue *__strong *> > {
	id __first_;
	id __begin_;
	id __end_;
	compressed_pair<NSValue *__strong **, std::__1::allocator<NSValue *__strong *> > __end_cap_;
} split_buffer<NSValue *__strong *, std::__1::allocator<NSValue *__strong *> >;

typedef struct deque<NSValue *, std::__1::allocator<NSValue *> > {
	split_buffer<NSValue *__strong *, std::__1::allocator<NSValue *__strong *> > __map_;
	unsigned long long __start_;
	compressed_pair<unsigned long, std::__1::allocator<NSValue *> > __size_;
} deque<NSValue *, std::__1::allocator<NSValue *> >;

typedef struct _tree_const_iterator<std::__1::__value_type<id, id>, std::__1::__tree_node<std::__1::__value_type<id, id>, void *> *, long> {
	__tree_node<std::__1::__value_type<id, id>, void *> __ptr_;
} tree_const_iterator<std::__1::__value_type<id, id>, std::__1::__tree_node<std::__1::__value_type<id, id>, void *> *, long>;

typedef struct _map_const_iterator<std::__1::__tree_const_iterator<std::__1::__value_type<id, id>, std::__1::__tree_node<std::__1::__value_type<id, id>, void *> *, long> > {
	tree_const_iterator<std::__1::__value_type<id, id>, std::__1::__tree_node<std::__1::__value_type<id, id>, void *> *, long> __i_;
} map_const_iterator<std::__1::__tree_const_iterator<std::__1::__value_type<id, id>, std::__1::__tree_node<std::__1::__value_type<id, id>, void *> *, long> >;

typedef struct FBOrderedDictionaryDynamicKeyComparator {
	/*^block*/id _f;
} FBOrderedDictionaryDynamicKeyComparator;

typedef struct _map_value_compare<id, std::__1::__value_type<id, id>, FBOrderedDictionaryDynamicKeyComparator, false> {
	FBOrderedDictionaryDynamicKeyComparator comp;
} map_value_compare<id, std::__1::__value_type<id, id>, FBOrderedDictionaryDynamicKeyComparator, false>;

typedef struct _compressed_pair<unsigned long, std::__1::__map_value_compare<id, std::__1::__value_type<id, id>, FBOrderedDictionaryDynamicKeyComparator, false> > {
	unsigned long long __first_;
	map_value_compare<id, std::__1::__value_type<id, id>, FBOrderedDictionaryDynamicKeyComparator, false> __second_;
} compressed_pair<unsigned long, std::__1::__map_value_compare<id, std::__1::__value_type<id, id>, FBOrderedDictionaryDynamicKeyComparator, false> >;

typedef struct _compressed_pair<std::__1::__tree_end_node<std::__1::__tree_node_base<void *> *>, std::__1::allocator<std::__1::__tree_node<std::__1::__value_type<id, id>, void *> > > {
	tree_end_node<std::__1::__tree_node_base<void *> *> __first_;
} compressed_pair<std::__1::__tree_end_node<std::__1::__tree_node_base<void *> *>, std::__1::allocator<std::__1::__tree_node<std::__1::__value_type<id, id>, void *> > >;

typedef struct _tree<std::__1::__value_type<id, id>, std::__1::__map_value_compare<id, std::__1::__value_type<id, id>, FBOrderedDictionaryDynamicKeyComparator, false>, std::__1::allocator<std::__1::__value_type<id, id> > > {
	__tree_node<std::__1::__value_type<id, id>, void *> __begin_node_;
	compressed_pair<std::__1::__tree_end_node<std::__1::__tree_node_base<void *> *>, std::__1::allocator<std::__1::__tree_node<std::__1::__value_type<id, id>, void *> > > __pair1_;
	compressed_pair<unsigned long, std::__1::__map_value_compare<id, std::__1::__value_type<id, id>, FBOrderedDictionaryDynamicKeyComparator, false> > __pair3_;
} tree<std::__1::__value_type<id, id>, std::__1::__map_value_compare<id, std::__1::__value_type<id, id>, FBOrderedDictionaryDynamicKeyComparator, false>, std::__1::allocator<std::__1::__value_type<id, id> > >;

typedef struct map<id, id, FBOrderedDictionaryDynamicKeyComparator, std::__1::allocator<std::__1::pair<const id, id> > > {
	tree<std::__1::__value_type<id, id>, std::__1::__map_value_compare<id, std::__1::__value_type<id, id>, FBOrderedDictionaryDynamicKeyComparator, false>, std::__1::allocator<std::__1::__value_type<id, id> > > __tree_;
} map<id, id, FBOrderedDictionaryDynamicKeyComparator, std::__1::allocator<std::__1::pair<const id, id> > >;

typedef struct _compressed_pair<std::__1::function<NSString *()> *, std::__1::allocator<std::__1::function<NSString *()> > > {
	function<NSString *()> __first_;
} compressed_pair<std::__1::function<NSString *()> *, std::__1::allocator<std::__1::function<NSString *()> > >;

typedef struct vector<std::__1::function<NSString *()>, std::__1::allocator<std::__1::function<NSString *()> > > {
	function<NSString *()> __begin_;
	function<NSString *()> __end_;
	compressed_pair<std::__1::function<NSString *()> *, std::__1::allocator<std::__1::function<NSString *()> > > __end_cap_;
} vector<std::__1::function<NSString *()>, std::__1::allocator<std::__1::function<NSString *()> > >;

typedef struct {
	float x;
	float y;
} SCD_Struct_FB1064;

typedef union GLKVector2 {
	SCD_Struct_FB1064 field1;
	SCD_Struct_FB1064 field2;
	float v[2];
} GLKVector2;

typedef struct FBGraphUILineGraphViewRange {
	double minFraction;
	double maxFraction;
} FBGraphUILineGraphViewRange;

typedef struct _compressed_pair<void (__strong **)(), std::__1::allocator<void (__strong *)()> > {
	/*^block*/id __first_;
} compressed_pair<void (__strong **)(), std::__1::allocator<void (__strong *)()> >;

typedef struct _compressed_pair<unsigned long, std::__1::allocator<void ()()> > {
	unsigned long long __first_;
} compressed_pair<unsigned long, std::__1::allocator<void ()()> >;

typedef struct _split_buffer<void (__strong *)(), std::__1::allocator<void (__strong *)()> > {
	/*^block*/id __first_;
	/*^block*/id __begin_;
	/*^block*/id __end_;
	compressed_pair<void (__strong **)(), std::__1::allocator<void (__strong *)()> > __end_cap_;
} split_buffer<void (__strong *)(), std::__1::allocator<void (__strong *)()> >;

typedef struct deque<void ()(), std::__1::allocator<void ()()> > {
	split_buffer<void (__strong *)(), std::__1::allocator<void (__strong *)()> > __map_;
	unsigned long long __start_;
	compressed_pair<unsigned long, std::__1::allocator<void ()()> > __size_;
} deque<void ()(), std::__1::allocator<void ()()> >;

typedef struct queue<void ()(), std::__1::deque<void ()(), std::__1::allocator<void ()()> > > {
	deque<void ()(), std::__1::allocator<void ()()> > c;
} queue<void ()(), std::__1::deque<void ()(), std::__1::allocator<void ()()> > >;

typedef struct shared_ptr<facebook::mobile::xplat::compactdisk::Invalidatable> {
	Invalidatable __ptr_;
	__shared_weak_count __cntrl_;
} shared_ptr<facebook::mobile::xplat::compactdisk::Invalidatable>;

typedef struct CuIntent__isset {
	unsigned id : 1;
	unsigned slots : 1;
	unsigned confidence : 1;
} CuIntent__isset;

typedef struct CuSystemAction__isset {
	unsigned intent : 1;
	unsigned text : 1;
	unsigned spoken : 1;
	unsigned languageId : 1;
	unsigned applicationSpecificSystemActionJson : 1;
} CuSystemAction__isset;

typedef struct CuResponse__isset {
	unsigned requestId : 1;
	unsigned nBestIntents : 1;
	unsigned tcAction : 1;
} CuResponse__isset;

typedef struct Intent__isset {
	unsigned cuResponse : 1;
} Intent__isset;

typedef struct _compressed_pair<langtech::cu::CuSlot *, std::__1::allocator<langtech::cu::CuSlot> > {
	CuSlot __first_;
} compressed_pair<langtech::cu::CuSlot *, std::__1::allocator<langtech::cu::CuSlot> >;

typedef struct vector<langtech::cu::CuSlot, std::__1::allocator<langtech::cu::CuSlot> > {
	CuSlot __begin_;
	CuSlot __end_;
	compressed_pair<langtech::cu::CuSlot *, std::__1::allocator<langtech::cu::CuSlot> > __end_cap_;
} vector<langtech::cu::CuSlot, std::__1::allocator<langtech::cu::CuSlot> >;

typedef struct CuIntent {
	/*function pointer*/void* _vptr$CuIntent;
	basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char> > id;
	vector<langtech::cu::CuSlot, std::__1::allocator<langtech::cu::CuSlot> > slots;
	double confidence;
	CuIntent__isset __isset;
} CuIntent;

typedef struct CuSystemAction {
	/*function pointer*/void* _vptr$CuSystemAction;
	CuIntent intent;
	basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char> > text;
	basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char> > spoken;
	basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char> > languageId;
	basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char> > applicationSpecificSystemActionJson;
	CuSystemAction__isset __isset;
} CuSystemAction;

typedef struct _compressed_pair<langtech::cu::CuIntent *, std::__1::allocator<langtech::cu::CuIntent> > {
	CuIntent __first_;
} compressed_pair<langtech::cu::CuIntent *, std::__1::allocator<langtech::cu::CuIntent> >;

typedef struct vector<langtech::cu::CuIntent, std::__1::allocator<langtech::cu::CuIntent> > {
	CuIntent __begin_;
	CuIntent __end_;
	compressed_pair<langtech::cu::CuIntent *, std::__1::allocator<langtech::cu::CuIntent> > __end_cap_;
} vector<langtech::cu::CuIntent, std::__1::allocator<langtech::cu::CuIntent> >;

typedef struct CuResponse {
	/*function pointer*/void* _vptr$CuResponse;
	basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char> > requestId;
	vector<langtech::cu::CuIntent, std::__1::allocator<langtech::cu::CuIntent> > nBestIntents;
	CuSystemAction tcAction;
	CuResponse__isset __isset;
} CuResponse;

typedef struct Intent {
	/*function pointer*/void* _vptr$Intent;
	CuResponse cuResponse;
	Intent__isset __isset;
} Intent;

typedef struct _compressed_pair<facebook::shortwave::AsrClient *, std::__1::default_delete<facebook::shortwave::AsrClient> > {
	AsrClient __first_;
} compressed_pair<facebook::shortwave::AsrClient *, std::__1::default_delete<facebook::shortwave::AsrClient> >;

typedef struct unique_ptr<facebook::shortwave::AsrClient, std::__1::default_delete<facebook::shortwave::AsrClient> > {
	compressed_pair<facebook::shortwave::AsrClient *, std::__1::default_delete<facebook::shortwave::AsrClient> > __ptr_;
} unique_ptr<facebook::shortwave::AsrClient, std::__1::default_delete<facebook::shortwave::AsrClient> >;

typedef struct shared_ptr<facebook::shortwave::AsrTurn> {
	AsrTurn __ptr_;
	__shared_weak_count __cntrl_;
} shared_ptr<facebook::shortwave::AsrTurn>;

typedef struct TokenList__isset {
	unsigned tokens : 1;
	unsigned confidence : 1;
	unsigned amLmScore : 1;
	unsigned durationInMs : 1;
} TokenList__isset;

typedef struct Result__isset {
	unsigned tokens : 1;
	unsigned durationInMs : 1;
	unsigned amLmScore : 1;
} Result__isset;

typedef struct _compressed_pair<facebook::langtech::ninja::anchovy::Token *, std::__1::allocator<facebook::langtech::ninja::anchovy::Token> > {
	Token __first_;
} compressed_pair<facebook::langtech::ninja::anchovy::Token *, std::__1::allocator<facebook::langtech::ninja::anchovy::Token> >;

typedef struct vector<facebook::langtech::ninja::anchovy::Token, std::__1::allocator<facebook::langtech::ninja::anchovy::Token> > {
	Token __begin_;
	Token __end_;
	compressed_pair<facebook::langtech::ninja::anchovy::Token *, std::__1::allocator<facebook::langtech::ninja::anchovy::Token> > __end_cap_;
} vector<facebook::langtech::ninja::anchovy::Token, std::__1::allocator<facebook::langtech::ninja::anchovy::Token> >;

typedef struct TokenList {
	/*function pointer*/void* _vptr$TokenList;
	vector<facebook::langtech::ninja::anchovy::Token, std::__1::allocator<facebook::langtech::ninja::anchovy::Token> > tokens;
	double confidence;
	double amLmScore;
	long long durationInMs;
	TokenList__isset __isset;
} TokenList;

typedef struct Result {
	/*function pointer*/void* _vptr$Result;
	TokenList tokens;
	int durationInMs;
	double amLmScore;
	Result__isset __isset;
} Result;

typedef struct Settings {
	basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char> > protocol;
	basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char> > host;
	basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char> > port;
	BOOL insecure;
} Settings;

typedef struct MQBoolVector3 {
	BOOL x;
	BOOL y;
	BOOL z;
} MQBoolVector3;

typedef struct MQFloatVector3 {
	float x;
	float y;
	float z;
} MQFloatVector3;

typedef struct _compressed_pair<msqrd::apple::Logger *, std::__1::default_delete<msqrd::apple::Logger> > {
	Logger __first_;
} compressed_pair<msqrd::apple::Logger *, std::__1::default_delete<msqrd::apple::Logger> >;

typedef struct unique_ptr<msqrd::apple::Logger, std::__1::default_delete<msqrd::apple::Logger> > {
	compressed_pair<msqrd::apple::Logger *, std::__1::default_delete<msqrd::apple::Logger> > __ptr_;
} unique_ptr<msqrd::apple::Logger, std::__1::default_delete<msqrd::apple::Logger> >;

typedef struct _compressed_pair<msqrd::fx::GraphicsEngine *, std::__1::default_delete<msqrd::fx::GraphicsEngine> > {
	GraphicsEngine __first_;
} compressed_pair<msqrd::fx::GraphicsEngine *, std::__1::default_delete<msqrd::fx::GraphicsEngine> >;

typedef struct unique_ptr<msqrd::fx::GraphicsEngine, std::__1::default_delete<msqrd::fx::GraphicsEngine> > {
	compressed_pair<msqrd::fx::GraphicsEngine *, std::__1::default_delete<msqrd::fx::GraphicsEngine> > __ptr_;
} unique_ptr<msqrd::fx::GraphicsEngine, std::__1::default_delete<msqrd::fx::GraphicsEngine> >;

typedef struct _compressed_pair<msqrd::fx::RenderSession *, std::__1::default_delete<msqrd::fx::RenderSession> > {
	RenderSession __first_;
} compressed_pair<msqrd::fx::RenderSession *, std::__1::default_delete<msqrd::fx::RenderSession> >;

typedef struct unique_ptr<msqrd::fx::RenderSession, std::__1::default_delete<msqrd::fx::RenderSession> > {
	compressed_pair<msqrd::fx::RenderSession *, std::__1::default_delete<msqrd::fx::RenderSession> > __ptr_;
} unique_ptr<msqrd::fx::RenderSession, std::__1::default_delete<msqrd::fx::RenderSession> >;

typedef struct shared_ptr<msqrd::tracking::FaceTracker> {
	FaceTracker __ptr_;
	__shared_weak_count __cntrl_;
} shared_ptr<msqrd::tracking::FaceTracker>;

typedef struct _compressed_pair<msqrd::fx::SynchronousFaceTrackingProcessor *, std::__1::default_delete<msqrd::fx::SynchronousFaceTrackingProcessor> > {
	SynchronousFaceTrackingProcessor __first_;
} compressed_pair<msqrd::fx::SynchronousFaceTrackingProcessor *, std::__1::default_delete<msqrd::fx::SynchronousFaceTrackingProcessor> >;

typedef struct unique_ptr<msqrd::fx::SynchronousFaceTrackingProcessor, std::__1::default_delete<msqrd::fx::SynchronousFaceTrackingProcessor> > {
	compressed_pair<msqrd::fx::SynchronousFaceTrackingProcessor *, std::__1::default_delete<msqrd::fx::SynchronousFaceTrackingProcessor> > __ptr_;
} unique_ptr<msqrd::fx::SynchronousFaceTrackingProcessor, std::__1::default_delete<msqrd::fx::SynchronousFaceTrackingProcessor> >;

typedef struct _compressed_pair<std::__1::shared_ptr<msqrd::fx::scripting::api::IModuleFactory> *, std::__1::allocator<std::__1::shared_ptr<msqrd::fx::scripting::api::IModuleFactory> > > {
	shared_ptr<msqrd::fx::scripting::api::IModuleFactory> __first_;
} compressed_pair<std::__1::shared_ptr<msqrd::fx::scripting::api::IModuleFactory> *, std::__1::allocator<std::__1::shared_ptr<msqrd::fx::scripting::api::IModuleFactory> > >;

typedef struct vector<std::__1::shared_ptr<msqrd::fx::scripting::api::IModuleFactory>, std::__1::allocator<std::__1::shared_ptr<msqrd::fx::scripting::api::IModuleFactory> > > {
	shared_ptr<msqrd::fx::scripting::api::IModuleFactory> __begin_;
	shared_ptr<msqrd::fx::scripting::api::IModuleFactory> __end_;
	compressed_pair<std::__1::shared_ptr<msqrd::fx::scripting::api::IModuleFactory> *, std::__1::allocator<std::__1::shared_ptr<msqrd::fx::scripting::api::IModuleFactory> > > __end_cap_;
} vector<std::__1::shared_ptr<msqrd::fx::scripting::api::IModuleFactory>, std::__1::allocator<std::__1::shared_ptr<msqrd::fx::scripting::api::IModuleFactory> > >;

typedef struct tvec4<float> {
	/*function pointer*/void* ;
	SCD_Struct_FB436 ;
	SCD_Struct_FB436 ;
	SCD_Struct_FB436) ;
} tvec4<float>;

typedef struct tmat4x4<float> {
	tvec4<float> value[4];
} tmat4x4<float>;

typedef struct SCNVector3 {
	float x;
	float y;
	float z;
} SCNVector3;

typedef struct SCNMatrix4 {
	float m11;
	float m12;
	float m13;
	float m14;
	float m21;
	float m22;
	float m23;
	float m24;
	float m31;
	float m32;
	float m33;
	float m34;
	float m41;
	float m42;
	float m43;
	float m44;
} SCNMatrix4;

typedef struct MQVector2 {
	float x;
	float y;
} MQVector2;

typedef struct _compressed_pair<std::__1::vector<msq::face, std::__1::allocator<msq::face> > *, std::__1::default_delete<std::__1::vector<msq::face, std::__1::allocator<msq::face> > > > {
	vector<msq::face, std::__1::allocator<msq::face> > __first_;
} compressed_pair<std::__1::vector<msq::face, std::__1::allocator<msq::face> > *, std::__1::default_delete<std::__1::vector<msq::face, std::__1::allocator<msq::face> > > >;

typedef struct unique_ptr<std::__1::vector<msq::face, std::__1::allocator<msq::face> >, std::__1::default_delete<std::__1::vector<msq::face, std::__1::allocator<msq::face> > > > {
	compressed_pair<std::__1::vector<msq::face, std::__1::allocator<msq::face> > *, std::__1::default_delete<std::__1::vector<msq::face, std::__1::allocator<msq::face> > > > __ptr_;
} unique_ptr<std::__1::vector<msq::face, std::__1::allocator<msq::face> >, std::__1::default_delete<std::__1::vector<msq::face, std::__1::allocator<msq::face> > > >;

typedef struct sockaddr_storage {
	unsigned char ss_len;
	unsigned char ss_family;
	char __ss_pad1[6];
	long long __ss_align;
	char __ss_pad2[112];
} sockaddr_storage;

typedef struct {
	float field1;
	float field2;
	float field3;
	float field4;
	float field5;
	float field6;
	float field7;
	float field8;
} SCD_Struct_MQ1116;

typedef struct _compressed_pair<facebook::mobile::fragmentmodel::DynamicFragmentBuilder *, std::__1::default_delete<facebook::mobile::fragmentmodel::DynamicFragmentBuilder> > {
	DynamicFragmentBuilder __first_;
} compressed_pair<facebook::mobile::fragmentmodel::DynamicFragmentBuilder *, std::__1::default_delete<facebook::mobile::fragmentmodel::DynamicFragmentBuilder> >;

typedef struct unique_ptr<facebook::mobile::fragmentmodel::DynamicFragmentBuilder, std::__1::default_delete<facebook::mobile::fragmentmodel::DynamicFragmentBuilder> > {
	compressed_pair<facebook::mobile::fragmentmodel::DynamicFragmentBuilder *, std::__1::default_delete<facebook::mobile::fragmentmodel::DynamicFragmentBuilder> > __ptr_;
} unique_ptr<facebook::mobile::fragmentmodel::DynamicFragmentBuilder, std::__1::default_delete<facebook::mobile::fragmentmodel::DynamicFragmentBuilder> >;

typedef struct _compressed_pair<webrtc::OpenGles20 *, std::__1::default_delete<webrtc::OpenGles20> > {
	OpenGles20 __first_;
} compressed_pair<webrtc::OpenGles20 *, std::__1::default_delete<webrtc::OpenGles20> >;

typedef struct unique_ptr<webrtc::OpenGles20, std::__1::default_delete<webrtc::OpenGles20> > {
	compressed_pair<webrtc::OpenGles20 *, std::__1::default_delete<webrtc::OpenGles20> > __ptr_;
} unique_ptr<webrtc::OpenGles20, std::__1::default_delete<webrtc::OpenGles20> >;

typedef struct {
	unsigned long long size;
	unsigned long long rss;
	unsigned long long swap;
} SCD_Struct_FB1121;

typedef struct FBInspirationPageTransitionPerfLoggerTrackState {
	long long appearingPageIndex;
	long long disappearingPageIndex;
} FBInspirationPageTransitionPerfLoggerTrackState;

typedef struct _compressed_pair<facebook::mobile::json::JsonDelegatingParser<facebook::graphql::parsing::GraphQLRootHandler> *, std::__1::default_delete<facebook::mobile::json::JsonDelegatingParser<facebook::graphql::parsing::GraphQLRootHandler> > > {
	JsonDelegatingParser<facebook::graphql::parsing::GraphQLRootHandler> __first_;
} compressed_pair<facebook::mobile::json::JsonDelegatingParser<facebook::graphql::parsing::GraphQLRootHandler> *, std::__1::default_delete<facebook::mobile::json::JsonDelegatingParser<facebook::graphql::parsing::GraphQLRootHandler> > >;

typedef struct unique_ptr<facebook::mobile::json::JsonDelegatingParser<facebook::graphql::parsing::GraphQLRootHandler>, std::__1::default_delete<facebook::mobile::json::JsonDelegatingParser<facebook::graphql::parsing::GraphQLRootHandler> > > {
	compressed_pair<facebook::mobile::json::JsonDelegatingParser<facebook::graphql::parsing::GraphQLRootHandler> *, std::__1::default_delete<facebook::mobile::json::JsonDelegatingParser<facebook::graphql::parsing::GraphQLRootHandler> > > __ptr_;
} unique_ptr<facebook::mobile::json::JsonDelegatingParser<facebook::graphql::parsing::GraphQLRootHandler>, std::__1::default_delete<facebook::mobile::json::JsonDelegatingParser<facebook::graphql::parsing::GraphQLRootHandler> > >;

typedef struct _compressed_pair<facebook::mobile::json::JsonDelegatingParser<facebook::graphql::parsing::GraphQLBatchResponseHandler> *, std::__1::default_delete<facebook::mobile::json::JsonDelegatingParser<facebook::graphql::parsing::GraphQLBatchResponseHandler> > > {
	JsonDelegatingParser<facebook::graphql::parsing::GraphQLBatchResponseHandler> __first_;
} compressed_pair<facebook::mobile::json::JsonDelegatingParser<facebook::graphql::parsing::GraphQLBatchResponseHandler> *, std::__1::default_delete<facebook::mobile::json::JsonDelegatingParser<facebook::graphql::parsing::GraphQLBatchResponseHandler> > >;

typedef struct unique_ptr<facebook::mobile::json::JsonDelegatingParser<facebook::graphql::parsing::GraphQLBatchResponseHandler>, std::__1::default_delete<facebook::mobile::json::JsonDelegatingParser<facebook::graphql::parsing::GraphQLBatchResponseHandler> > > {
	compressed_pair<facebook::mobile::json::JsonDelegatingParser<facebook::graphql::parsing::GraphQLBatchResponseHandler> *, std::__1::default_delete<facebook::mobile::json::JsonDelegatingParser<facebook::graphql::parsing::GraphQLBatchResponseHandler> > > __ptr_;
} unique_ptr<facebook::mobile::json::JsonDelegatingParser<facebook::graphql::parsing::GraphQLBatchResponseHandler>, std::__1::default_delete<facebook::mobile::json::JsonDelegatingParser<facebook::graphql::parsing::GraphQLBatchResponseHandler> > >;

typedef struct _compressed_pair<unsigned long, std::__1::__map_value_compare<std::__1::basic_string<char>, std::__1::__value_type<std::__1::basic_string<char>, std::__1::pair<__CFHost *, double> >, std::__1::less<std::__1::basic_string<char> >, true> > {
	unsigned long long __first_;
} compressed_pair<unsigned long, std::__1::__map_value_compare<std::__1::basic_string<char>, std::__1::__value_type<std::__1::basic_string<char>, std::__1::pair<__CFHost *, double> >, std::__1::less<std::__1::basic_string<char> >, true> >;

typedef struct _compressed_pair<std::__1::__tree_end_node<std::__1::__tree_node_base<void *> *>, std::__1::allocator<std::__1::__tree_node<std::__1::__value_type<std::__1::basic_string<char>, std::__1::pair<__CFHost *, double> >, void *> > > {
	tree_end_node<std::__1::__tree_node_base<void *> *> __first_;
} compressed_pair<std::__1::__tree_end_node<std::__1::__tree_node_base<void *> *>, std::__1::allocator<std::__1::__tree_node<std::__1::__value_type<std::__1::basic_string<char>, std::__1::pair<__CFHost *, double> >, void *> > >;

typedef struct _tree<std::__1::__value_type<std::__1::basic_string<char>, std::__1::pair<__CFHost *, double> >, std::__1::__map_value_compare<std::__1::basic_string<char>, std::__1::__value_type<std::__1::basic_string<char>, std::__1::pair<__CFHost *, double> >, std::__1::less<std::__1::basic_string<char> >, true>, std::__1::allocator<std::__1::__value_type<std::__1::basic_string<char>, std::__1::pair<__CFHost *, double> > > > {
	__tree_node<std::__1::__value_type<std::__1::basic_string<char>, std::__1::pair<__CFHost *, double> >, void *> __begin_node_;
	compressed_pair<std::__1::__tree_end_node<std::__1::__tree_node_base<void *> *>, std::__1::allocator<std::__1::__tree_node<std::__1::__value_type<std::__1::basic_string<char>, std::__1::pair<__CFHost *, double> >, void *> > > __pair1_;
	compressed_pair<unsigned long, std::__1::__map_value_compare<std::__1::basic_string<char>, std::__1::__value_type<std::__1::basic_string<char>, std::__1::pair<__CFHost *, double> >, std::__1::less<std::__1::basic_string<char> >, true> > __pair3_;
} tree<std::__1::__value_type<std::__1::basic_string<char>, std::__1::pair<__CFHost *, double> >, std::__1::__map_value_compare<std::__1::basic_string<char>, std::__1::__value_type<std::__1::basic_string<char>, std::__1::pair<__CFHost *, double> >, std::__1::less<std::__1::basic_string<char> >, true>, std::__1::allocator<std::__1::__value_type<std::__1::basic_string<char>, std::__1::pair<__CFHost *, double> > > >;

typedef struct map<std::__1::basic_string<char>, std::__1::pair<__CFHost *, double>, std::__1::less<std::__1::basic_string<char> >, std::__1::allocator<std::__1::pair<const std::__1::basic_string<char>, std::__1::pair<__CFHost *, double> > > > {
	tree<std::__1::__value_type<std::__1::basic_string<char>, std::__1::pair<__CFHost *, double> >, std::__1::__map_value_compare<std::__1::basic_string<char>, std::__1::__value_type<std::__1::basic_string<char>, std::__1::pair<__CFHost *, double> >, std::__1::less<std::__1::basic_string<char> >, true>, std::__1::allocator<std::__1::__value_type<std::__1::basic_string<char>, std::__1::pair<__CFHost *, double> > > > __tree_;
} map<std::__1::basic_string<char>, std::__1::pair<__CFHost *, double>, std::__1::less<std::__1::basic_string<char> >, std::__1::allocator<std::__1::pair<const std::__1::basic_string<char>, std::__1::pair<__CFHost *, double> > > >;

typedef struct __CFHost* CFHostRef;

typedef struct {
	long long field1;
	int field2;
} SCD_Struct_FB1132;

typedef struct shared_ptr<const facebook::tigon::TigonRequestStats> {
	TigonRequestStats __ptr_;
	__shared_weak_count __cntrl_;
} shared_ptr<const facebook::tigon::TigonRequestStats>;

typedef struct shared_ptr<const facebook::FBTigon::HttpExecutorRequestProps> {
	HttpExecutorRequestProps __ptr_;
	__shared_weak_count __cntrl_;
} shared_ptr<const facebook::FBTigon::HttpExecutorRequestProps>;

typedef struct shared_ptr<facebook::tigon::TigonRequestToken> {
	TigonRequestToken __ptr_;
	__shared_weak_count __cntrl_;
} shared_ptr<facebook::tigon::TigonRequestToken>;

typedef struct _compressed_pair<(anonymous namespace)::UpperStaticStack *, std::__1::default_delete<(anonymous namespace)::UpperStaticStack> > {
	UpperStaticStack __first_;
} compressed_pair<(anonymous namespace)::UpperStaticStack *, std::__1::default_delete<(anonymous namespace)::UpperStaticStack> >;

typedef struct unique_ptr<(anonymous namespace)::UpperStaticStack, std::__1::default_delete<(anonymous namespace)::UpperStaticStack> > {
	compressed_pair<(anonymous namespace)::UpperStaticStack *, std::__1::default_delete<(anonymous namespace)::UpperStaticStack> > __ptr_;
} unique_ptr<(anonymous namespace)::UpperStaticStack, std::__1::default_delete<(anonymous namespace)::UpperStaticStack> >;

typedef struct shared_ptr<(anonymous namespace)::UpperSwappableStack> {
	UpperSwappableStack __ptr_;
	__shared_weak_count __cntrl_;
} shared_ptr<(anonymous namespace)::UpperSwappableStack>;

typedef struct _compressed_pair<facebook::mobile::xplat::executor::DispatchQueueExecutor *, std::__1::default_delete<facebook::mobile::xplat::executor::DispatchQueueExecutor> > {
	DispatchQueueExecutor __first_;
} compressed_pair<facebook::mobile::xplat::executor::DispatchQueueExecutor *, std::__1::default_delete<facebook::mobile::xplat::executor::DispatchQueueExecutor> >;

typedef struct unique_ptr<facebook::mobile::xplat::executor::DispatchQueueExecutor, std::__1::default_delete<facebook::mobile::xplat::executor::DispatchQueueExecutor> > {
	compressed_pair<facebook::mobile::xplat::executor::DispatchQueueExecutor *, std::__1::default_delete<facebook::mobile::xplat::executor::DispatchQueueExecutor> > __ptr_;
} unique_ptr<facebook::mobile::xplat::executor::DispatchQueueExecutor, std::__1::default_delete<facebook::mobile::xplat::executor::DispatchQueueExecutor> >;

typedef struct _compressed_pair<(anonymous namespace)::LowerStaticStack *, std::__1::default_delete<(anonymous namespace)::LowerStaticStack> > {
	LowerStaticStack __first_;
} compressed_pair<(anonymous namespace)::LowerStaticStack *, std::__1::default_delete<(anonymous namespace)::LowerStaticStack> >;

typedef struct unique_ptr<(anonymous namespace)::LowerStaticStack, std::__1::default_delete<(anonymous namespace)::LowerStaticStack> > {
	compressed_pair<(anonymous namespace)::LowerStaticStack *, std::__1::default_delete<(anonymous namespace)::LowerStaticStack> > __ptr_;
} unique_ptr<(anonymous namespace)::LowerStaticStack, std::__1::default_delete<(anonymous namespace)::LowerStaticStack> >;

typedef struct shared_ptr<(anonymous namespace)::LowerSwappableStack> {
	LowerSwappableStack __ptr_;
	__shared_weak_count __cntrl_;
} shared_ptr<(anonymous namespace)::LowerSwappableStack>;

typedef const struct shared_ptr<facebook::tigon::TigonObserver>* shared_ptr<facebook::tigon::TigonObserver>Ref;

typedef const struct shared_ptr<facebook::tigon::TigonDebugObserver>* shared_ptr<facebook::tigon::TigonDebugObserver>Ref;

typedef struct _compressed_pair<std::__1::function<facebook::tigon::TigonRequestPluginResult (facebook::tigon::TigonRequest *)> *, std::__1::allocator<std::__1::function<facebook::tigon::TigonRequestPluginResult (facebook::tigon::TigonRequest *)> > > {
	function<facebook::tigon::TigonRequestPluginResult (facebook::tigon::TigonRequest *)> __first_;
} compressed_pair<std::__1::function<facebook::tigon::TigonRequestPluginResult (facebook::tigon::TigonRequest *)> *, std::__1::allocator<std::__1::function<facebook::tigon::TigonRequestPluginResult (facebook::tigon::TigonRequest *)> > >;

typedef struct vector<std::__1::function<facebook::tigon::TigonRequestPluginResult (facebook::tigon::TigonRequest *)>, std::__1::allocator<std::__1::function<facebook::tigon::TigonRequestPluginResult (facebook::tigon::TigonRequest *)> > > {
	function<facebook::tigon::TigonRequestPluginResult (facebook::tigon::TigonRequest *)> __begin_;
	function<facebook::tigon::TigonRequestPluginResult (facebook::tigon::TigonRequest *)> __end_;
	compressed_pair<std::__1::function<facebook::tigon::TigonRequestPluginResult (facebook::tigon::TigonRequest *)> *, std::__1::allocator<std::__1::function<facebook::tigon::TigonRequestPluginResult (facebook::tigon::TigonRequest *)> > > __end_cap_;
} vector<std::__1::function<facebook::tigon::TigonRequestPluginResult (facebook::tigon::TigonRequest *)>, std::__1::allocator<std::__1::function<facebook::tigon::TigonRequestPluginResult (facebook::tigon::TigonRequest *)> > >;

typedef struct _compressed_pair<std::__1::function<void (const facebook::tigon::TigonRequest &, const facebook::tigon::TigonResponse &)> *, std::__1::allocator<std::__1::function<void (const facebook::tigon::TigonRequest &, const facebook::tigon::TigonResponse &)> > > {
	function<void (const facebook::tigon::TigonRequest &, const facebook::tigon::TigonResponse &)> __first_;
} compressed_pair<std::__1::function<void (const facebook::tigon::TigonRequest &, const facebook::tigon::TigonResponse &)> *, std::__1::allocator<std::__1::function<void (const facebook::tigon::TigonRequest &, const facebook::tigon::TigonResponse &)> > >;

typedef struct vector<std::__1::function<void (const facebook::tigon::TigonRequest &, const facebook::tigon::TigonResponse &)>, std::__1::allocator<std::__1::function<void (const facebook::tigon::TigonRequest &, const facebook::tigon::TigonResponse &)> > > {
	function<void (const facebook::tigon::TigonRequest &, const facebook::tigon::TigonResponse &)> __begin_;
	function<void (const facebook::tigon::TigonRequest &, const facebook::tigon::TigonResponse &)> __end_;
	compressed_pair<std::__1::function<void (const facebook::tigon::TigonRequest &, const facebook::tigon::TigonResponse &)> *, std::__1::allocator<std::__1::function<void (const facebook::tigon::TigonRequest &, const facebook::tigon::TigonResponse &)> > > __end_cap_;
} vector<std::__1::function<void (const facebook::tigon::TigonRequest &, const facebook::tigon::TigonResponse &)>, std::__1::allocator<std::__1::function<void (const facebook::tigon::TigonRequest &, const facebook::tigon::TigonResponse &)> > >;

typedef struct shared_ptr<facebook::tigon::TigonRetryPolicy> {
	TigonRetryPolicy __ptr_;
	__shared_weak_count __cntrl_;
} shared_ptr<facebook::tigon::TigonRetryPolicy>;

typedef struct shared_ptr<facebook::tigon::TigonPriorityQueuePolicy> {
	TigonPriorityQueuePolicy __ptr_;
	__shared_weak_count __cntrl_;
} shared_ptr<facebook::tigon::TigonPriorityQueuePolicy>;

typedef struct shared_ptr<facebook::tigon::TigonPiggyBackPolicy> {
	TigonPiggyBackPolicy __ptr_;
	__shared_weak_count __cntrl_;
} shared_ptr<facebook::tigon::TigonPiggyBackPolicy>;

typedef struct shared_ptr<mobileconfig::FBMobileConfigMmapHandle> {
	FBMobileConfigMmapHandle __ptr_;
	__shared_weak_count __cntrl_;
} shared_ptr<mobileconfig::FBMobileConfigMmapHandle>;

typedef struct weak_ptr<mobileconfig::IFBMobileConfigManager> {
	IFBMobileConfigManager __ptr_;
	__shared_weak_count __cntrl_;
} weak_ptr<mobileconfig::IFBMobileConfigManager>;

typedef struct shared_ptr<mobileconfig::FBRateLimiter<unsigned long long> > {
	FBRateLimiter<unsigned long long> __ptr_;
	__shared_weak_count __cntrl_;
} shared_ptr<mobileconfig::FBRateLimiter<unsigned long long> >;

typedef struct shared_ptr<mobileconfig::IFBMobileConfigManager> {
	IFBMobileConfigManager __ptr_;
	__shared_weak_count __cntrl_;
} shared_ptr<mobileconfig::IFBMobileConfigManager>;

typedef struct _compressed_pair<FB::Functional::Callback<id<MNServiceControllable> > *, std::__1::allocator<FB::Functional::Callback<id<MNServiceControllable> > > > {
	Callback<id<MNServiceControllable> > __first_;
} compressed_pair<FB::Functional::Callback<id<MNServiceControllable> > *, std::__1::allocator<FB::Functional::Callback<id<MNServiceControllable> > > >;

typedef struct vector<FB::Functional::Callback<id<MNServiceControllable> >, std::__1::allocator<FB::Functional::Callback<id<MNServiceControllable> > > > {
	Callback<id<MNServiceControllable> > __begin_;
	Callback<id<MNServiceControllable> > __end_;
	compressed_pair<FB::Functional::Callback<id<MNServiceControllable> > *, std::__1::allocator<FB::Functional::Callback<id<MNServiceControllable> > > > __end_cap_;
} vector<FB::Functional::Callback<id<MNServiceControllable> >, std::__1::allocator<FB::Functional::Callback<id<MNServiceControllable> > > >;

typedef struct Promise<id<MNServiceControllable> > {
	unsigned long long ResolutionState;
	<MNServiceControllable>* _result;
	vector<FB::Functional::Callback<id<MNServiceControllable> >, std::__1::allocator<FB::Functional::Callback<id<MNServiceControllable> > > > _resolutionHandlers;
	unsigned long long _resolutionState;
	mutex _mutex;
} Promise<id<MNServiceControllable> >;

typedef struct _compressed_pair<unsigned long, std::__1::allocator<std::__1::__hash_node<std::__1::__hash_value_type<int, unsigned long long>, void *> *> > {
	unsigned long long __first_;
} compressed_pair<unsigned long, std::__1::allocator<std::__1::__hash_node<std::__1::__hash_value_type<int, unsigned long long>, void *> *> >;

typedef struct _compressed_pair<unsigned long, std::__1::__unordered_map_hasher<int, std::__1::__hash_value_type<int, unsigned long long>, std::__1::hash<int>, true> > {
	unsigned long long __first_;
} compressed_pair<unsigned long, std::__1::__unordered_map_hasher<int, std::__1::__hash_value_type<int, unsigned long long>, std::__1::hash<int>, true> >;

typedef struct _compressed_pair<float, std::__1::__unordered_map_equal<int, std::__1::__hash_value_type<int, unsigned long long>, std::__1::equal_to<int>, true> > {
	float __first_;
} compressed_pair<float, std::__1::__unordered_map_equal<int, std::__1::__hash_value_type<int, unsigned long long>, std::__1::equal_to<int>, true> >;

typedef struct _hash_node_base<std::__1::__hash_node<std::__1::__hash_value_type<int, unsigned long long>, void *> *> {
	__hash_node<std::__1::__hash_value_type<int, unsigned long long>, void *> __next_;
} hash_node_base<std::__1::__hash_node<std::__1::__hash_value_type<int, unsigned long long>, void *> *>;

typedef struct _compressed_pair<std::__1::__hash_node_base<std::__1::__hash_node<std::__1::__hash_value_type<int, unsigned long long>, void *> *>, std::__1::allocator<std::__1::__hash_node<std::__1::__hash_value_type<int, unsigned long long>, void *> > > {
	hash_node_base<std::__1::__hash_node<std::__1::__hash_value_type<int, unsigned long long>, void *> *> __first_;
} compressed_pair<std::__1::__hash_node_base<std::__1::__hash_node<std::__1::__hash_value_type<int, unsigned long long>, void *> *>, std::__1::allocator<std::__1::__hash_node<std::__1::__hash_value_type<int, unsigned long long>, void *> > >;

typedef struct _bucket_list_deallocator<std::__1::allocator<std::__1::__hash_node<std::__1::__hash_value_type<int, unsigned long long>, void *> *> > {
	compressed_pair<unsigned long, std::__1::allocator<std::__1::__hash_node<std::__1::__hash_value_type<int, unsigned long long>, void *> *> > __data_;
} bucket_list_deallocator<std::__1::allocator<std::__1::__hash_node<std::__1::__hash_value_type<int, unsigned long long>, void *> *> >;

typedef struct _compressed_pair<std::__1::__hash_node<std::__1::__hash_value_type<int, unsigned long long>, void *> **, std::__1::__bucket_list_deallocator<std::__1::allocator<std::__1::__hash_node<std::__1::__hash_value_type<int, unsigned long long>, void *> *> > > {
	__hash_node<std::__1::__hash_value_type<int, unsigned long long>, void *> __first_;
	bucket_list_deallocator<std::__1::allocator<std::__1::__hash_node<std::__1::__hash_value_type<int, unsigned long long>, void *> *> > __second_;
} compressed_pair<std::__1::__hash_node<std::__1::__hash_value_type<int, unsigned long long>, void *> **, std::__1::__bucket_list_deallocator<std::__1::allocator<std::__1::__hash_node<std::__1::__hash_value_type<int, unsigned long long>, void *> *> > >;

typedef struct unique_ptr<std::__1::__hash_node<std::__1::__hash_value_type<int, unsigned long long>, void *> *[], std::__1::__bucket_list_deallocator<std::__1::allocator<std::__1::__hash_node<std::__1::__hash_value_type<int, unsigned long long>, void *> *> > > {
	compressed_pair<std::__1::__hash_node<std::__1::__hash_value_type<int, unsigned long long>, void *> **, std::__1::__bucket_list_deallocator<std::__1::allocator<std::__1::__hash_node<std::__1::__hash_value_type<int, unsigned long long>, void *> *> > > __ptr_;
} unique_ptr<std::__1::__hash_node<std::__1::__hash_value_type<int, unsigned long long>, void *> *[], std::__1::__bucket_list_deallocator<std::__1::allocator<std::__1::__hash_node<std::__1::__hash_value_type<int, unsigned long long>, void *> *> > >;

typedef struct _hash_table<std::__1::__hash_value_type<int, unsigned long long>, std::__1::__unordered_map_hasher<int, std::__1::__hash_value_type<int, unsigned long long>, std::__1::hash<int>, true>, std::__1::__unordered_map_equal<int, std::__1::__hash_value_type<int, unsigned long long>, std::__1::equal_to<int>, true>, std::__1::allocator<std::__1::__hash_value_type<int, unsigned long long> > > {
	unique_ptr<std::__1::__hash_node<std::__1::__hash_value_type<int, unsigned long long>, void *> *[], std::__1::__bucket_list_deallocator<std::__1::allocator<std::__1::__hash_node<std::__1::__hash_value_type<int, unsigned long long>, void *> *> > > __bucket_list_;
	compressed_pair<std::__1::__hash_node_base<std::__1::__hash_node<std::__1::__hash_value_type<int, unsigned long long>, void *> *>, std::__1::allocator<std::__1::__hash_node<std::__1::__hash_value_type<int, unsigned long long>, void *> > > __p1_;
	compressed_pair<unsigned long, std::__1::__unordered_map_hasher<int, std::__1::__hash_value_type<int, unsigned long long>, std::__1::hash<int>, true> > __p2_;
	compressed_pair<float, std::__1::__unordered_map_equal<int, std::__1::__hash_value_type<int, unsigned long long>, std::__1::equal_to<int>, true> > __p3_;
} hash_table<std::__1::__hash_value_type<int, unsigned long long>, std::__1::__unordered_map_hasher<int, std::__1::__hash_value_type<int, unsigned long long>, std::__1::hash<int>, true>, std::__1::__unordered_map_equal<int, std::__1::__hash_value_type<int, unsigned long long>, std::__1::equal_to<int>, true>, std::__1::allocator<std::__1::__hash_value_type<int, unsigned long long> > >;

typedef struct unordered_map<int, unsigned long long, std::__1::hash<int>, std::__1::equal_to<int>, std::__1::allocator<std::__1::pair<const int, unsigned long long> > > {
	hash_table<std::__1::__hash_value_type<int, unsigned long long>, std::__1::__unordered_map_hasher<int, std::__1::__hash_value_type<int, unsigned long long>, std::__1::hash<int>, true>, std::__1::__unordered_map_equal<int, std::__1::__hash_value_type<int, unsigned long long>, std::__1::equal_to<int>, true>, std::__1::allocator<std::__1::__hash_value_type<int, unsigned long long> > > __table_;
} unordered_map<int, unsigned long long, std::__1::hash<int>, std::__1::equal_to<int>, std::__1::allocator<std::__1::pair<const int, unsigned long long> > >;

typedef struct shared_ptr<facebook::mobile::graphql::FragmentDescriptionCache> {
	FragmentDescriptionCache __ptr_;
	__shared_weak_count __cntrl_;
} shared_ptr<facebook::mobile::graphql::FragmentDescriptionCache>;

typedef struct {
	id field1;
	/*function pointer*/void* field2;
	id field3;
	/*function pointer*/void* field4;
	id field5;
	/*function pointer*/void* field6;
} SCD_Struct_FB1171;

typedef struct _compressed_pair<unsigned long, std::__1::allocator<std::__1::__hash_node<std::__1::__hash_value_type<unsigned long, unsigned long>, void *> *> > {
	unsigned long long __first_;
} compressed_pair<unsigned long, std::__1::allocator<std::__1::__hash_node<std::__1::__hash_value_type<unsigned long, unsigned long>, void *> *> >;

typedef struct _compressed_pair<unsigned long, std::__1::__unordered_map_hasher<unsigned long, std::__1::__hash_value_type<unsigned long, unsigned long>, std::__1::hash<unsigned long>, true> > {
	unsigned long long __first_;
} compressed_pair<unsigned long, std::__1::__unordered_map_hasher<unsigned long, std::__1::__hash_value_type<unsigned long, unsigned long>, std::__1::hash<unsigned long>, true> >;

typedef struct _compressed_pair<float, std::__1::__unordered_map_equal<unsigned long, std::__1::__hash_value_type<unsigned long, unsigned long>, std::__1::equal_to<unsigned long>, true> > {
	float __first_;
} compressed_pair<float, std::__1::__unordered_map_equal<unsigned long, std::__1::__hash_value_type<unsigned long, unsigned long>, std::__1::equal_to<unsigned long>, true> >;

typedef struct _hash_node_base<std::__1::__hash_node<std::__1::__hash_value_type<unsigned long, unsigned long>, void *> *> {
	__hash_node<std::__1::__hash_value_type<unsigned long, unsigned long>, void *> __next_;
} hash_node_base<std::__1::__hash_node<std::__1::__hash_value_type<unsigned long, unsigned long>, void *> *>;

typedef struct _compressed_pair<std::__1::__hash_node_base<std::__1::__hash_node<std::__1::__hash_value_type<unsigned long, unsigned long>, void *> *>, std::__1::allocator<std::__1::__hash_node<std::__1::__hash_value_type<unsigned long, unsigned long>, void *> > > {
	hash_node_base<std::__1::__hash_node<std::__1::__hash_value_type<unsigned long, unsigned long>, void *> *> __first_;
} compressed_pair<std::__1::__hash_node_base<std::__1::__hash_node<std::__1::__hash_value_type<unsigned long, unsigned long>, void *> *>, std::__1::allocator<std::__1::__hash_node<std::__1::__hash_value_type<unsigned long, unsigned long>, void *> > >;

typedef struct _bucket_list_deallocator<std::__1::allocator<std::__1::__hash_node<std::__1::__hash_value_type<unsigned long, unsigned long>, void *> *> > {
	compressed_pair<unsigned long, std::__1::allocator<std::__1::__hash_node<std::__1::__hash_value_type<unsigned long, unsigned long>, void *> *> > __data_;
} bucket_list_deallocator<std::__1::allocator<std::__1::__hash_node<std::__1::__hash_value_type<unsigned long, unsigned long>, void *> *> >;

typedef struct _compressed_pair<std::__1::__hash_node<std::__1::__hash_value_type<unsigned long, unsigned long>, void *> **, std::__1::__bucket_list_deallocator<std::__1::allocator<std::__1::__hash_node<std::__1::__hash_value_type<unsigned long, unsigned long>, void *> *> > > {
	__hash_node<std::__1::__hash_value_type<unsigned long, unsigned long>, void *> __first_;
	bucket_list_deallocator<std::__1::allocator<std::__1::__hash_node<std::__1::__hash_value_type<unsigned long, unsigned long>, void *> *> > __second_;
} compressed_pair<std::__1::__hash_node<std::__1::__hash_value_type<unsigned long, unsigned long>, void *> **, std::__1::__bucket_list_deallocator<std::__1::allocator<std::__1::__hash_node<std::__1::__hash_value_type<unsigned long, unsigned long>, void *> *> > >;

typedef struct unique_ptr<std::__1::__hash_node<std::__1::__hash_value_type<unsigned long, unsigned long>, void *> *[], std::__1::__bucket_list_deallocator<std::__1::allocator<std::__1::__hash_node<std::__1::__hash_value_type<unsigned long, unsigned long>, void *> *> > > {
	compressed_pair<std::__1::__hash_node<std::__1::__hash_value_type<unsigned long, unsigned long>, void *> **, std::__1::__bucket_list_deallocator<std::__1::allocator<std::__1::__hash_node<std::__1::__hash_value_type<unsigned long, unsigned long>, void *> *> > > __ptr_;
} unique_ptr<std::__1::__hash_node<std::__1::__hash_value_type<unsigned long, unsigned long>, void *> *[], std::__1::__bucket_list_deallocator<std::__1::allocator<std::__1::__hash_node<std::__1::__hash_value_type<unsigned long, unsigned long>, void *> *> > >;

typedef struct _hash_table<std::__1::__hash_value_type<unsigned long, unsigned long>, std::__1::__unordered_map_hasher<unsigned long, std::__1::__hash_value_type<unsigned long, unsigned long>, std::__1::hash<unsigned long>, true>, std::__1::__unordered_map_equal<unsigned long, std::__1::__hash_value_type<unsigned long, unsigned long>, std::__1::equal_to<unsigned long>, true>, std::__1::allocator<std::__1::__hash_value_type<unsigned long, unsigned long> > > {
	unique_ptr<std::__1::__hash_node<std::__1::__hash_value_type<unsigned long, unsigned long>, void *> *[], std::__1::__bucket_list_deallocator<std::__1::allocator<std::__1::__hash_node<std::__1::__hash_value_type<unsigned long, unsigned long>, void *> *> > > __bucket_list_;
	compressed_pair<std::__1::__hash_node_base<std::__1::__hash_node<std::__1::__hash_value_type<unsigned long, unsigned long>, void *> *>, std::__1::allocator<std::__1::__hash_node<std::__1::__hash_value_type<unsigned long, unsigned long>, void *> > > __p1_;
	compressed_pair<unsigned long, std::__1::__unordered_map_hasher<unsigned long, std::__1::__hash_value_type<unsigned long, unsigned long>, std::__1::hash<unsigned long>, true> > __p2_;
	compressed_pair<float, std::__1::__unordered_map_equal<unsigned long, std::__1::__hash_value_type<unsigned long, unsigned long>, std::__1::equal_to<unsigned long>, true> > __p3_;
} hash_table<std::__1::__hash_value_type<unsigned long, unsigned long>, std::__1::__unordered_map_hasher<unsigned long, std::__1::__hash_value_type<unsigned long, unsigned long>, std::__1::hash<unsigned long>, true>, std::__1::__unordered_map_equal<unsigned long, std::__1::__hash_value_type<unsigned long, unsigned long>, std::__1::equal_to<unsigned long>, true>, std::__1::allocator<std::__1::__hash_value_type<unsigned long, unsigned long> > >;

typedef struct unordered_map<unsigned long, unsigned long, std::__1::hash<unsigned long>, std::__1::equal_to<unsigned long>, std::__1::allocator<std::__1::pair<const unsigned long, unsigned long> > > {
	hash_table<std::__1::__hash_value_type<unsigned long, unsigned long>, std::__1::__unordered_map_hasher<unsigned long, std::__1::__hash_value_type<unsigned long, unsigned long>, std::__1::hash<unsigned long>, true>, std::__1::__unordered_map_equal<unsigned long, std::__1::__hash_value_type<unsigned long, unsigned long>, std::__1::equal_to<unsigned long>, true>, std::__1::allocator<std::__1::__hash_value_type<unsigned long, unsigned long> > > __table_;
} unordered_map<unsigned long, unsigned long, std::__1::hash<unsigned long>, std::__1::equal_to<unsigned long>, std::__1::allocator<std::__1::pair<const unsigned long, unsigned long> > >;

typedef struct {
	unsigned didScroll : 1;
	unsigned willBeginDragging : 1;
	unsigned didEndDragging : 1;
	unsigned willBeginDecelerating : 1;
	unsigned didEndDecelerating : 1;
	unsigned didBeginZooming : 1;
	unsigned didEndZooming : 1;
	unsigned shouldBeginScrubbing : 1;
	unsigned didBeginScrubbing : 1;
	unsigned didScrub : 1;
	unsigned didEndScrubbing : 1;
} SCD_Struct_FB1182;

typedef struct _compressed_pair<long *, std::__1::allocator<long> > {
	long long __first_;
} compressed_pair<long *, std::__1::allocator<long> >;

typedef struct vector<long, std::__1::allocator<long> > {
	long long __begin_;
	long long __end_;
	compressed_pair<long *, std::__1::allocator<long> > __end_cap_;
} vector<long, std::__1::allocator<long> >;

typedef struct {
	CGRect startBounds;
	CGRect endBounds;
	double startTime;
	double endTime;
	double currentTime;
} SCD_Struct_FB1185;

typedef struct FBUIMetricsCount {
	long long numberOfFIGViews;
	long long totalNumberOfViews;
} FBUIMetricsCount;

typedef struct shared_ptr<compactdisk::experimental::BinaryResource> {
	BinaryResource __ptr_;
	__shared_weak_count __cntrl_;
} shared_ptr<compactdisk::experimental::BinaryResource>;

typedef struct shared_ptr<compactdisk::experimental::CompactDiskManager> {
	CompactDiskManager __ptr_;
	__shared_weak_count __cntrl_;
} shared_ptr<compactdisk::experimental::CompactDiskManager>;

typedef struct duration<long long, std::__1::ratio<1, 1> > {
	long long __rep_;
} duration<long long, std::__1::ratio<1, 1> >;

typedef struct shared_ptr<compactdisk::experimental::StaleRemover> {
	StaleRemover __ptr_;
	__shared_weak_count __cntrl_;
} shared_ptr<compactdisk::experimental::StaleRemover>;

typedef struct shared_ptr<compactdisk::experimental::Evictor> {
	Evictor __ptr_;
	__shared_weak_count __cntrl_;
} shared_ptr<compactdisk::experimental::Evictor>;

typedef struct path {
	basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char> > m_pathname;
} path;

typedef struct shared_ptr<compactdisk::experimental::Scope> {
	Scope __ptr_;
	__shared_weak_count __cntrl_;
} shared_ptr<compactdisk::experimental::Scope>;

typedef struct DiskCacheConfig {
	/*function pointer*/void* _vptr$CommonConfig;
	basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char> > name_;
	unsigned long long maxSize_;
	basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char> > versionID_;
	shared_ptr<compactdisk::experimental::Scope> scope_;
	path parentDirectory_;
	int diskStorageType_;
	duration<long long, std::__1::ratio<1, 1> > staleAge_;
	int evictionPolicy_;
	shared_ptr<compactdisk::experimental::Evictor> evictor_;
	shared_ptr<compactdisk::experimental::StaleRemover> staleRemover_;
} DiskCacheConfig;

typedef struct Builder {
	/*function pointer*/void* _vptr$Builder;
	DiskCacheConfig config_;
} Builder;

typedef struct shared_ptr<compactdisk::experimental::DiskCache> {
	DiskCache __ptr_;
	__shared_weak_count __cntrl_;
} shared_ptr<compactdisk::experimental::DiskCache>;

typedef struct shared_ptr<compactdisk::experimental::FileDiskStorage::BinaryResource> {
	BinaryResource __ptr_;
	__shared_weak_count __cntrl_;
} shared_ptr<compactdisk::experimental::FileDiskStorage::BinaryResource>;

typedef struct _compressed_pair<std::__1::basic_istream<char> *, std::__1::default_delete<std::__1::basic_istream<char> > > {
	basic_istream<char, std::__1::char_traits<char> > __first_;
} compressed_pair<std::__1::basic_istream<char> *, std::__1::default_delete<std::__1::basic_istream<char> > >;

typedef struct unique_ptr<std::__1::basic_istream<char>, std::__1::default_delete<std::__1::basic_istream<char> > > {
	compressed_pair<std::__1::basic_istream<char> *, std::__1::default_delete<std::__1::basic_istream<char> > > __ptr_;
} unique_ptr<std::__1::basic_istream<char>, std::__1::default_delete<std::__1::basic_istream<char> > >;

typedef struct shared_ptr<facebook::mobile::xplat::compactdisk::DiskCacheEventListener> {
	DiskCacheEventListener __ptr_;
	__shared_weak_count __cntrl_;
} shared_ptr<facebook::mobile::xplat::compactdisk::DiskCacheEventListener>;

typedef struct shared_ptr<facebook::mobile::xplat::compactdisk::DiskCache> {
	DiskCache __ptr_;
	__shared_weak_count __cntrl_;
} shared_ptr<facebook::mobile::xplat::compactdisk::DiskCache>;

typedef struct {
	BOOL paddingForHasValue_[1];
	long long value;
} SCD_Struct_FB1202;

typedef struct aligned_storage<96, 8> {
	data_t data_;
	char buf[96];
	a8) align_;
} aligned_storage<96, 8>;

typedef struct variant<facebook::mobile::xplat::compactdisk::ManualConfig, facebook::mobile::xplat::compactdisk::ManagedConfig, boost::detail::variant::void_, boost::detail::variant::void_, boost::detail::variant::void_, boost::detail::variant::void_, boost::detail::variant::void_, boost::detail::variant::void_, boost::detail::variant::void_, boost::detail::variant::void_, boost::detail::variant::void_, boost::detail::variant::void_, boost::detail::variant::void_, boost::detail::variant::void_, boost::detail::variant::void_, boost::detail::variant::void_, boost::detail::variant::void_, boost::detail::variant::void_, boost::detail::variant::void_, boost::detail::variant::void_> {
	int which_;
	aligned_storage<96, 8> storage_;
} variant<facebook::mobile::xplat::compactdisk::ManualConfig, facebook::mobile::xplat::compactdisk::ManagedConfig, boost::detail::variant::void_, boost::detail::variant::void_, boost::detail::variant::void_, boost::detail::variant::void_, boost::detail::variant::void_, boost::detail::variant::void_, boost::detail::variant::void_, boost::detail::variant::void_, boost::detail::variant::void_, boost::detail::variant::void_, boost::detail::variant::void_, boost::detail::variant::void_, boost::detail::variant::void_, boost::detail::variant::void_, boost::detail::variant::void_, boost::detail::variant::void_, boost::detail::variant::void_, boost::detail::variant::void_>;

typedef struct StorageTriviallyDestructible {
	/*function pointer*/void* ;
	BOOL hasValue;
	SCD_Struct_FB1202) ;
} StorageTriviallyDestructible;

typedef struct Optional<long long> {
	StorageTriviallyDestructible storage_;
} Optional<long long>;

typedef struct {
	BOOL paddingForHasValue_[1];
	int value;
} SCD_Struct_FB1207;

typedef struct exception_ptr {
	void __ptr_;
} exception_ptr;

typedef struct {
	BOOL paddingForHasValue_[1];
	basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char> > value;
} SCD_Struct_FB1209;

typedef struct Optional<std::__1::basic_string<char> > {
	StorageNonTriviallyDestructible storage_;
} Optional<std::__1::basic_string<char> >;

typedef struct Optional<facebook::mobile::xplat::compactdisk::EvictionReason> {
	StorageTriviallyDestructible storage_;
} Optional<facebook::mobile::xplat::compactdisk::EvictionReason>;

typedef struct DiskCacheEvent {
	basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char> > key_;
	basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char> > name_;
	Optional<long long> size_;
	Optional<long long> cacheSize_;
	Optional<long long> age_;
	Optional<facebook::mobile::xplat::compactdisk::EvictionReason> evictionReason_;
	Optional<std::__1::basic_string<char> > tag_;
	exception_ptr exception_;
} DiskCacheEvent;

typedef struct shared_ptr<facebook::mobile::xplat::compactdisk::DiskSizeCalculator> {
	DiskSizeCalculator __ptr_;
	__shared_weak_count __cntrl_;
} shared_ptr<facebook::mobile::xplat::compactdisk::DiskSizeCalculator>;

typedef struct shared_ptr<facebook::mobile::xplat::compactdisk::UnmanagedStore> {
	UnmanagedStore __ptr_;
	__shared_weak_count __cntrl_;
} shared_ptr<facebook::mobile::xplat::compactdisk::UnmanagedStore>;

typedef struct shared_ptr<facebook::mobile::xplat::compactdisk::StoreManager> {
	StoreManager __ptr_;
	__shared_weak_count __cntrl_;
} shared_ptr<facebook::mobile::xplat::compactdisk::StoreManager>;

typedef struct _compressed_pair<facebook::mobile::xplat::compactdisk::LazySingletonMap<std::__1::basic_string<char>, (anonymous namespace)::ValueWrapper<FBDiskStore *>, FBDiskCacheConfig *> *, std::__1::default_delete<facebook::mobile::xplat::compactdisk::LazySingletonMap<std::__1::basic_string<char>, (anonymous namespace)::ValueWrapper<FBDiskStore *>, FBDiskCacheConfig *> > > {
	LazySingletonMap<std::__1::basic_string<char>, (anonymous namespace)::ValueWrapper<FBDiskStore *>, FBDiskCacheConfig *> __first_;
} compressed_pair<facebook::mobile::xplat::compactdisk::LazySingletonMap<std::__1::basic_string<char>, (anonymous namespace)::ValueWrapper<FBDiskStore *>, FBDiskCacheConfig *> *, std::__1::default_delete<facebook::mobile::xplat::compactdisk::LazySingletonMap<std::__1::basic_string<char>, (anonymous namespace)::ValueWrapper<FBDiskStore *>, FBDiskCacheConfig *> > >;

typedef struct unique_ptr<facebook::mobile::xplat::compactdisk::LazySingletonMap<std::__1::basic_string<char>, (anonymous namespace)::ValueWrapper<FBDiskStore *>, FBDiskCacheConfig *>, std::__1::default_delete<facebook::mobile::xplat::compactdisk::LazySingletonMap<std::__1::basic_string<char>, (anonymous namespace)::ValueWrapper<FBDiskStore *>, FBDiskCacheConfig *> > > {
	compressed_pair<facebook::mobile::xplat::compactdisk::LazySingletonMap<std::__1::basic_string<char>, (anonymous namespace)::ValueWrapper<FBDiskStore *>, FBDiskCacheConfig *> *, std::__1::default_delete<facebook::mobile::xplat::compactdisk::LazySingletonMap<std::__1::basic_string<char>, (anonymous namespace)::ValueWrapper<FBDiskStore *>, FBDiskCacheConfig *> > > __ptr_;
} unique_ptr<facebook::mobile::xplat::compactdisk::LazySingletonMap<std::__1::basic_string<char>, (anonymous namespace)::ValueWrapper<FBDiskStore *>, FBDiskCacheConfig *>, std::__1::default_delete<facebook::mobile::xplat::compactdisk::LazySingletonMap<std::__1::basic_string<char>, (anonymous namespace)::ValueWrapper<FBDiskStore *>, FBDiskCacheConfig *> > >;

typedef struct _compressed_pair<facebook::mobile::xplat::compactdisk::LazySingletonMap<std::__1::basic_string<char>, (anonymous namespace)::ValueWrapper<FBPersistentKeyValueStore *>, FBDiskCacheConfig *> *, std::__1::default_delete<facebook::mobile::xplat::compactdisk::LazySingletonMap<std::__1::basic_string<char>, (anonymous namespace)::ValueWrapper<FBPersistentKeyValueStore *>, FBDiskCacheConfig *> > > {
	LazySingletonMap<std::__1::basic_string<char>, (anonymous namespace)::ValueWrapper<FBPersistentKeyValueStore *>, FBDiskCacheConfig *> __first_;
} compressed_pair<facebook::mobile::xplat::compactdisk::LazySingletonMap<std::__1::basic_string<char>, (anonymous namespace)::ValueWrapper<FBPersistentKeyValueStore *>, FBDiskCacheConfig *> *, std::__1::default_delete<facebook::mobile::xplat::compactdisk::LazySingletonMap<std::__1::basic_string<char>, (anonymous namespace)::ValueWrapper<FBPersistentKeyValueStore *>, FBDiskCacheConfig *> > >;

typedef struct unique_ptr<facebook::mobile::xplat::compactdisk::LazySingletonMap<std::__1::basic_string<char>, (anonymous namespace)::ValueWrapper<FBPersistentKeyValueStore *>, FBDiskCacheConfig *>, std::__1::default_delete<facebook::mobile::xplat::compactdisk::LazySingletonMap<std::__1::basic_string<char>, (anonymous namespace)::ValueWrapper<FBPersistentKeyValueStore *>, FBDiskCacheConfig *> > > {
	compressed_pair<facebook::mobile::xplat::compactdisk::LazySingletonMap<std::__1::basic_string<char>, (anonymous namespace)::ValueWrapper<FBPersistentKeyValueStore *>, FBDiskCacheConfig *> *, std::__1::default_delete<facebook::mobile::xplat::compactdisk::LazySingletonMap<std::__1::basic_string<char>, (anonymous namespace)::ValueWrapper<FBPersistentKeyValueStore *>, FBDiskCacheConfig *> > > __ptr_;
} unique_ptr<facebook::mobile::xplat::compactdisk::LazySingletonMap<std::__1::basic_string<char>, (anonymous namespace)::ValueWrapper<FBPersistentKeyValueStore *>, FBDiskCacheConfig *>, std::__1::default_delete<facebook::mobile::xplat::compactdisk::LazySingletonMap<std::__1::basic_string<char>, (anonymous namespace)::ValueWrapper<FBPersistentKeyValueStore *>, FBDiskCacheConfig *> > >;

typedef struct _compressed_pair<facebook::mobile::xplat::compactdisk::LazySingletonMap<std::__1::basic_string<char>, (anonymous namespace)::ValueWrapper<FBDiskCache *>, FBDiskCacheConfig *> *, std::__1::default_delete<facebook::mobile::xplat::compactdisk::LazySingletonMap<std::__1::basic_string<char>, (anonymous namespace)::ValueWrapper<FBDiskCache *>, FBDiskCacheConfig *> > > {
	LazySingletonMap<std::__1::basic_string<char>, (anonymous namespace)::ValueWrapper<FBDiskCache *>, FBDiskCacheConfig *> __first_;
} compressed_pair<facebook::mobile::xplat::compactdisk::LazySingletonMap<std::__1::basic_string<char>, (anonymous namespace)::ValueWrapper<FBDiskCache *>, FBDiskCacheConfig *> *, std::__1::default_delete<facebook::mobile::xplat::compactdisk::LazySingletonMap<std::__1::basic_string<char>, (anonymous namespace)::ValueWrapper<FBDiskCache *>, FBDiskCacheConfig *> > >;

typedef struct unique_ptr<facebook::mobile::xplat::compactdisk::LazySingletonMap<std::__1::basic_string<char>, (anonymous namespace)::ValueWrapper<FBDiskCache *>, FBDiskCacheConfig *>, std::__1::default_delete<facebook::mobile::xplat::compactdisk::LazySingletonMap<std::__1::basic_string<char>, (anonymous namespace)::ValueWrapper<FBDiskCache *>, FBDiskCacheConfig *> > > {
	compressed_pair<facebook::mobile::xplat::compactdisk::LazySingletonMap<std::__1::basic_string<char>, (anonymous namespace)::ValueWrapper<FBDiskCache *>, FBDiskCacheConfig *> *, std::__1::default_delete<facebook::mobile::xplat::compactdisk::LazySingletonMap<std::__1::basic_string<char>, (anonymous namespace)::ValueWrapper<FBDiskCache *>, FBDiskCacheConfig *> > > __ptr_;
} unique_ptr<facebook::mobile::xplat::compactdisk::LazySingletonMap<std::__1::basic_string<char>, (anonymous namespace)::ValueWrapper<FBDiskCache *>, FBDiskCacheConfig *>, std::__1::default_delete<facebook::mobile::xplat::compactdisk::LazySingletonMap<std::__1::basic_string<char>, (anonymous namespace)::ValueWrapper<FBDiskCache *>, FBDiskCacheConfig *> > >;

typedef struct _compressed_pair<unsigned long, std::__1::allocator<std::__1::__hash_node<std::__1::__hash_value_type<std::__1::basic_string<char>, std::__1::shared_future<FBDiskStoreManagerWrapper> >, void *> *> > {
	unsigned long long __first_;
} compressed_pair<unsigned long, std::__1::allocator<std::__1::__hash_node<std::__1::__hash_value_type<std::__1::basic_string<char>, std::__1::shared_future<FBDiskStoreManagerWrapper> >, void *> *> >;

typedef struct _compressed_pair<unsigned long, std::__1::__unordered_map_hasher<std::__1::basic_string<char>, std::__1::__hash_value_type<std::__1::basic_string<char>, std::__1::shared_future<FBDiskStoreManagerWrapper> >, std::__1::hash<std::__1::basic_string<char> >, true> > {
	unsigned long long __first_;
} compressed_pair<unsigned long, std::__1::__unordered_map_hasher<std::__1::basic_string<char>, std::__1::__hash_value_type<std::__1::basic_string<char>, std::__1::shared_future<FBDiskStoreManagerWrapper> >, std::__1::hash<std::__1::basic_string<char> >, true> >;

typedef struct _compressed_pair<float, std::__1::__unordered_map_equal<std::__1::basic_string<char>, std::__1::__hash_value_type<std::__1::basic_string<char>, std::__1::shared_future<FBDiskStoreManagerWrapper> >, std::__1::equal_to<std::__1::basic_string<char> >, true> > {
	float __first_;
} compressed_pair<float, std::__1::__unordered_map_equal<std::__1::basic_string<char>, std::__1::__hash_value_type<std::__1::basic_string<char>, std::__1::shared_future<FBDiskStoreManagerWrapper> >, std::__1::equal_to<std::__1::basic_string<char> >, true> >;

typedef struct _hash_node_base<std::__1::__hash_node<std::__1::__hash_value_type<std::__1::basic_string<char>, std::__1::shared_future<FBDiskStoreManagerWrapper> >, void *> *> {
	__hash_node<std::__1::__hash_value_type<std::__1::basic_string<char>, std::__1::shared_future<FBDiskStoreManagerWrapper> >, void *> __next_;
} hash_node_base<std::__1::__hash_node<std::__1::__hash_value_type<std::__1::basic_string<char>, std::__1::shared_future<FBDiskStoreManagerWrapper> >, void *> *>;

typedef struct _compressed_pair<std::__1::__hash_node_base<std::__1::__hash_node<std::__1::__hash_value_type<std::__1::basic_string<char>, std::__1::shared_future<FBDiskStoreManagerWrapper> >, void *> *>, std::__1::allocator<std::__1::__hash_node<std::__1::__hash_value_type<std::__1::basic_string<char>, std::__1::shared_future<FBDiskStoreManagerWrapper> >, void *> > > {
	hash_node_base<std::__1::__hash_node<std::__1::__hash_value_type<std::__1::basic_string<char>, std::__1::shared_future<FBDiskStoreManagerWrapper> >, void *> *> __first_;
} compressed_pair<std::__1::__hash_node_base<std::__1::__hash_node<std::__1::__hash_value_type<std::__1::basic_string<char>, std::__1::shared_future<FBDiskStoreManagerWrapper> >, void *> *>, std::__1::allocator<std::__1::__hash_node<std::__1::__hash_value_type<std::__1::basic_string<char>, std::__1::shared_future<FBDiskStoreManagerWrapper> >, void *> > >;

typedef struct _bucket_list_deallocator<std::__1::allocator<std::__1::__hash_node<std::__1::__hash_value_type<std::__1::basic_string<char>, std::__1::shared_future<FBDiskStoreManagerWrapper> >, void *> *> > {
	compressed_pair<unsigned long, std::__1::allocator<std::__1::__hash_node<std::__1::__hash_value_type<std::__1::basic_string<char>, std::__1::shared_future<FBDiskStoreManagerWrapper> >, void *> *> > __data_;
} bucket_list_deallocator<std::__1::allocator<std::__1::__hash_node<std::__1::__hash_value_type<std::__1::basic_string<char>, std::__1::shared_future<FBDiskStoreManagerWrapper> >, void *> *> >;

typedef struct _compressed_pair<std::__1::__hash_node<std::__1::__hash_value_type<std::__1::basic_string<char>, std::__1::shared_future<FBDiskStoreManagerWrapper> >, void *> **, std::__1::__bucket_list_deallocator<std::__1::allocator<std::__1::__hash_node<std::__1::__hash_value_type<std::__1::basic_string<char>, std::__1::shared_future<FBDiskStoreManagerWrapper> >, void *> *> > > {
	__hash_node<std::__1::__hash_value_type<std::__1::basic_string<char>, std::__1::shared_future<FBDiskStoreManagerWrapper> >, void *> __first_;
	bucket_list_deallocator<std::__1::allocator<std::__1::__hash_node<std::__1::__hash_value_type<std::__1::basic_string<char>, std::__1::shared_future<FBDiskStoreManagerWrapper> >, void *> *> > __second_;
} compressed_pair<std::__1::__hash_node<std::__1::__hash_value_type<std::__1::basic_string<char>, std::__1::shared_future<FBDiskStoreManagerWrapper> >, void *> **, std::__1::__bucket_list_deallocator<std::__1::allocator<std::__1::__hash_node<std::__1::__hash_value_type<std::__1::basic_string<char>, std::__1::shared_future<FBDiskStoreManagerWrapper> >, void *> *> > >;

typedef struct unique_ptr<std::__1::__hash_node<std::__1::__hash_value_type<std::__1::basic_string<char>, std::__1::shared_future<FBDiskStoreManagerWrapper> >, void *> *[], std::__1::__bucket_list_deallocator<std::__1::allocator<std::__1::__hash_node<std::__1::__hash_value_type<std::__1::basic_string<char>, std::__1::shared_future<FBDiskStoreManagerWrapper> >, void *> *> > > {
	compressed_pair<std::__1::__hash_node<std::__1::__hash_value_type<std::__1::basic_string<char>, std::__1::shared_future<FBDiskStoreManagerWrapper> >, void *> **, std::__1::__bucket_list_deallocator<std::__1::allocator<std::__1::__hash_node<std::__1::__hash_value_type<std::__1::basic_string<char>, std::__1::shared_future<FBDiskStoreManagerWrapper> >, void *> *> > > __ptr_;
} unique_ptr<std::__1::__hash_node<std::__1::__hash_value_type<std::__1::basic_string<char>, std::__1::shared_future<FBDiskStoreManagerWrapper> >, void *> *[], std::__1::__bucket_list_deallocator<std::__1::allocator<std::__1::__hash_node<std::__1::__hash_value_type<std::__1::basic_string<char>, std::__1::shared_future<FBDiskStoreManagerWrapper> >, void *> *> > >;

typedef struct _hash_table<std::__1::__hash_value_type<std::__1::basic_string<char>, std::__1::shared_future<FBDiskStoreManagerWrapper> >, std::__1::__unordered_map_hasher<std::__1::basic_string<char>, std::__1::__hash_value_type<std::__1::basic_string<char>, std::__1::shared_future<FBDiskStoreManagerWrapper> >, std::__1::hash<std::__1::basic_string<char> >, true>, std::__1::__unordered_map_equal<std::__1::basic_string<char>, std::__1::__hash_value_type<std::__1::basic_string<char>, std::__1::shared_future<FBDiskStoreManagerWrapper> >, std::__1::equal_to<std::__1::basic_string<char> >, true>, std::__1::allocator<std::__1::__hash_value_type<std::__1::basic_string<char>, std::__1::shared_future<FBDiskStoreManagerWrapper> > > > {
	unique_ptr<std::__1::__hash_node<std::__1::__hash_value_type<std::__1::basic_string<char>, std::__1::shared_future<FBDiskStoreManagerWrapper> >, void *> *[], std::__1::__bucket_list_deallocator<std::__1::allocator<std::__1::__hash_node<std::__1::__hash_value_type<std::__1::basic_string<char>, std::__1::shared_future<FBDiskStoreManagerWrapper> >, void *> *> > > __bucket_list_;
	compressed_pair<std::__1::__hash_node_base<std::__1::__hash_node<std::__1::__hash_value_type<std::__1::basic_string<char>, std::__1::shared_future<FBDiskStoreManagerWrapper> >, void *> *>, std::__1::allocator<std::__1::__hash_node<std::__1::__hash_value_type<std::__1::basic_string<char>, std::__1::shared_future<FBDiskStoreManagerWrapper> >, void *> > > __p1_;
	compressed_pair<unsigned long, std::__1::__unordered_map_hasher<std::__1::basic_string<char>, std::__1::__hash_value_type<std::__1::basic_string<char>, std::__1::shared_future<FBDiskStoreManagerWrapper> >, std::__1::hash<std::__1::basic_string<char> >, true> > __p2_;
	compressed_pair<float, std::__1::__unordered_map_equal<std::__1::basic_string<char>, std::__1::__hash_value_type<std::__1::basic_string<char>, std::__1::shared_future<FBDiskStoreManagerWrapper> >, std::__1::equal_to<std::__1::basic_string<char> >, true> > __p3_;
} hash_table<std::__1::__hash_value_type<std::__1::basic_string<char>, std::__1::shared_future<FBDiskStoreManagerWrapper> >, std::__1::__unordered_map_hasher<std::__1::basic_string<char>, std::__1::__hash_value_type<std::__1::basic_string<char>, std::__1::shared_future<FBDiskStoreManagerWrapper> >, std::__1::hash<std::__1::basic_string<char> >, true>, std::__1::__unordered_map_equal<std::__1::basic_string<char>, std::__1::__hash_value_type<std::__1::basic_string<char>, std::__1::shared_future<FBDiskStoreManagerWrapper> >, std::__1::equal_to<std::__1::basic_string<char> >, true>, std::__1::allocator<std::__1::__hash_value_type<std::__1::basic_string<char>, std::__1::shared_future<FBDiskStoreManagerWrapper> > > >;

typedef struct unordered_map<std::__1::basic_string<char>, std::__1::shared_future<FBDiskStoreManagerWrapper>, std::__1::hash<std::__1::basic_string<char> >, std::__1::equal_to<std::__1::basic_string<char> >, std::__1::allocator<std::__1::pair<const std::__1::basic_string<char>, std::__1::shared_future<FBDiskStoreManagerWrapper> > > > {
	hash_table<std::__1::__hash_value_type<std::__1::basic_string<char>, std::__1::shared_future<FBDiskStoreManagerWrapper> >, std::__1::__unordered_map_hasher<std::__1::basic_string<char>, std::__1::__hash_value_type<std::__1::basic_string<char>, std::__1::shared_future<FBDiskStoreManagerWrapper> >, std::__1::hash<std::__1::basic_string<char> >, true>, std::__1::__unordered_map_equal<std::__1::basic_string<char>, std::__1::__hash_value_type<std::__1::basic_string<char>, std::__1::shared_future<FBDiskStoreManagerWrapper> >, std::__1::equal_to<std::__1::basic_string<char> >, true>, std::__1::allocator<std::__1::__hash_value_type<std::__1::basic_string<char>, std::__1::shared_future<FBDiskStoreManagerWrapper> > > > __table_;
} unordered_map<std::__1::basic_string<char>, std::__1::shared_future<FBDiskStoreManagerWrapper>, std::__1::hash<std::__1::basic_string<char> >, std::__1::equal_to<std::__1::basic_string<char> >, std::__1::allocator<std::__1::pair<const std::__1::basic_string<char>, std::__1::shared_future<FBDiskStoreManagerWrapper> > > >;

typedef struct shared_ptr<facebook::mobile::xplat::compactdisk::StoreManagerFactory> {
	StoreManagerFactory __ptr_;
	__shared_weak_count __cntrl_;
} shared_ptr<facebook::mobile::xplat::compactdisk::StoreManagerFactory>;

typedef struct shared_ptr<facebook::mobile::xplat::compactdisk::LazyDispatcher> {
	LazyDispatcher __ptr_;
	__shared_weak_count __cntrl_;
} shared_ptr<facebook::mobile::xplat::compactdisk::LazyDispatcher>;

typedef struct shared_ptr<facebook::mobile::xplat::compactdisk::PersistentKeyValueStore> {
	PersistentKeyValueStore __ptr_;
	__shared_weak_count __cntrl_;
} shared_ptr<facebook::mobile::xplat::compactdisk::PersistentKeyValueStore>;

typedef struct StalePruningConfig {
	long long staleAge_;
} StalePruningConfig;

typedef struct shared_ptr<facebook::mobile::xplat::compactdisk::EvictionComparator> {
	EvictionComparator __ptr_;
	__shared_weak_count __cntrl_;
} shared_ptr<facebook::mobile::xplat::compactdisk::EvictionComparator>;

typedef struct EvictionConfig {
	long long maxSize_;
	long long lowSpaceMaxSize_;
	BOOL strictEnforcement_;
	shared_ptr<facebook::mobile::xplat::compactdisk::EvictionComparator> evictionComparator_;
} EvictionConfig;

typedef struct ManualConfig {
	Optional<long long> maxSize_;
	Optional<long long> lowSpaceMaxSize_;
} ManualConfig;

typedef struct _compressed_pair<facebook::mobile::xplat::compactdisk::EventListenerPair *, std::__1::allocator<facebook::mobile::xplat::compactdisk::EventListenerPair> > {
	EventListenerPair __first_;
} compressed_pair<facebook::mobile::xplat::compactdisk::EventListenerPair *, std::__1::allocator<facebook::mobile::xplat::compactdisk::EventListenerPair> >;

typedef struct vector<facebook::mobile::xplat::compactdisk::EventListenerPair, std::__1::allocator<facebook::mobile::xplat::compactdisk::EventListenerPair> > {
	EventListenerPair __begin_;
	EventListenerPair __end_;
	compressed_pair<facebook::mobile::xplat::compactdisk::EventListenerPair *, std::__1::allocator<facebook::mobile::xplat::compactdisk::EventListenerPair> > __end_cap_;
} vector<facebook::mobile::xplat::compactdisk::EventListenerPair, std::__1::allocator<facebook::mobile::xplat::compactdisk::EventListenerPair> >;

typedef struct {
	BOOL paddingForHasValue_[1];
	EvictionConfig value;
} SCD_Struct_FB1241;

typedef struct Optional<facebook::mobile::xplat::compactdisk::EvictionConfig> {
	StorageNonTriviallyDestructible storage_;
} Optional<facebook::mobile::xplat::compactdisk::EvictionConfig>;

typedef struct {
	BOOL paddingForHasValue_[1];
	StalePruningConfig value;
} SCD_Struct_FB1243;

typedef struct Optional<facebook::mobile::xplat::compactdisk::StalePruningConfig> {
	StorageTriviallyDestructible storage_;
} Optional<facebook::mobile::xplat::compactdisk::StalePruningConfig>;

typedef struct ManagedConfig {
	BOOL inlineData_;
	Optional<facebook::mobile::xplat::compactdisk::StalePruningConfig> stalePruning_;
	Optional<facebook::mobile::xplat::compactdisk::EvictionConfig> eviction_;
	vector<facebook::mobile::xplat::compactdisk::EventListenerPair, std::__1::allocator<facebook::mobile::xplat::compactdisk::EventListenerPair> > eventListenerPairs_;
} ManagedConfig;

typedef struct shared_ptr<facebook::mobile::xplat::compactdisk::TrashCollector> {
	TrashCollector __ptr_;
	__shared_weak_count __cntrl_;
} shared_ptr<facebook::mobile::xplat::compactdisk::TrashCollector>;

typedef struct _compressed_pair<unsigned long, std::__1::allocator<std::__1::__hash_node<std::__1::__hash_value_type<FBMobileTraceSite, unsigned long long>, void *> *> > {
	unsigned long long __first_;
} compressed_pair<unsigned long, std::__1::allocator<std::__1::__hash_node<std::__1::__hash_value_type<FBMobileTraceSite, unsigned long long>, void *> *> >;

typedef struct _compressed_pair<unsigned long, std::__1::__unordered_map_hasher<FBMobileTraceSite, std::__1::__hash_value_type<FBMobileTraceSite, unsigned long long>, FB::HashFunctor<FBMobileTraceSite>, true> > {
	unsigned long long __first_;
} compressed_pair<unsigned long, std::__1::__unordered_map_hasher<FBMobileTraceSite, std::__1::__hash_value_type<FBMobileTraceSite, unsigned long long>, FB::HashFunctor<FBMobileTraceSite>, true> >;

typedef struct _compressed_pair<float, std::__1::__unordered_map_equal<FBMobileTraceSite, std::__1::__hash_value_type<FBMobileTraceSite, unsigned long long>, FB::EqualFunctor<FBMobileTraceSite>, true> > {
	float __first_;
} compressed_pair<float, std::__1::__unordered_map_equal<FBMobileTraceSite, std::__1::__hash_value_type<FBMobileTraceSite, unsigned long long>, FB::EqualFunctor<FBMobileTraceSite>, true> >;

typedef struct _hash_node_base<std::__1::__hash_node<std::__1::__hash_value_type<FBMobileTraceSite, unsigned long long>, void *> *> {
	__hash_node<std::__1::__hash_value_type<FBMobileTraceSite, unsigned long long>, void *> __next_;
} hash_node_base<std::__1::__hash_node<std::__1::__hash_value_type<FBMobileTraceSite, unsigned long long>, void *> *>;

typedef struct _compressed_pair<std::__1::__hash_node_base<std::__1::__hash_node<std::__1::__hash_value_type<FBMobileTraceSite, unsigned long long>, void *> *>, std::__1::allocator<std::__1::__hash_node<std::__1::__hash_value_type<FBMobileTraceSite, unsigned long long>, void *> > > {
	hash_node_base<std::__1::__hash_node<std::__1::__hash_value_type<FBMobileTraceSite, unsigned long long>, void *> *> __first_;
} compressed_pair<std::__1::__hash_node_base<std::__1::__hash_node<std::__1::__hash_value_type<FBMobileTraceSite, unsigned long long>, void *> *>, std::__1::allocator<std::__1::__hash_node<std::__1::__hash_value_type<FBMobileTraceSite, unsigned long long>, void *> > >;

typedef struct _bucket_list_deallocator<std::__1::allocator<std::__1::__hash_node<std::__1::__hash_value_type<FBMobileTraceSite, unsigned long long>, void *> *> > {
	compressed_pair<unsigned long, std::__1::allocator<std::__1::__hash_node<std::__1::__hash_value_type<FBMobileTraceSite, unsigned long long>, void *> *> > __data_;
} bucket_list_deallocator<std::__1::allocator<std::__1::__hash_node<std::__1::__hash_value_type<FBMobileTraceSite, unsigned long long>, void *> *> >;

typedef struct _compressed_pair<std::__1::__hash_node<std::__1::__hash_value_type<FBMobileTraceSite, unsigned long long>, void *> **, std::__1::__bucket_list_deallocator<std::__1::allocator<std::__1::__hash_node<std::__1::__hash_value_type<FBMobileTraceSite, unsigned long long>, void *> *> > > {
	__hash_node<std::__1::__hash_value_type<FBMobileTraceSite, unsigned long long>, void *> __first_;
	bucket_list_deallocator<std::__1::allocator<std::__1::__hash_node<std::__1::__hash_value_type<FBMobileTraceSite, unsigned long long>, void *> *> > __second_;
} compressed_pair<std::__1::__hash_node<std::__1::__hash_value_type<FBMobileTraceSite, unsigned long long>, void *> **, std::__1::__bucket_list_deallocator<std::__1::allocator<std::__1::__hash_node<std::__1::__hash_value_type<FBMobileTraceSite, unsigned long long>, void *> *> > >;

typedef struct unique_ptr<std::__1::__hash_node<std::__1::__hash_value_type<FBMobileTraceSite, unsigned long long>, void *> *[], std::__1::__bucket_list_deallocator<std::__1::allocator<std::__1::__hash_node<std::__1::__hash_value_type<FBMobileTraceSite, unsigned long long>, void *> *> > > {
	compressed_pair<std::__1::__hash_node<std::__1::__hash_value_type<FBMobileTraceSite, unsigned long long>, void *> **, std::__1::__bucket_list_deallocator<std::__1::allocator<std::__1::__hash_node<std::__1::__hash_value_type<FBMobileTraceSite, unsigned long long>, void *> *> > > __ptr_;
} unique_ptr<std::__1::__hash_node<std::__1::__hash_value_type<FBMobileTraceSite, unsigned long long>, void *> *[], std::__1::__bucket_list_deallocator<std::__1::allocator<std::__1::__hash_node<std::__1::__hash_value_type<FBMobileTraceSite, unsigned long long>, void *> *> > >;

typedef struct _hash_table<std::__1::__hash_value_type<FBMobileTraceSite, unsigned long long>, std::__1::__unordered_map_hasher<FBMobileTraceSite, std::__1::__hash_value_type<FBMobileTraceSite, unsigned long long>, FB::HashFunctor<FBMobileTraceSite>, true>, std::__1::__unordered_map_equal<FBMobileTraceSite, std::__1::__hash_value_type<FBMobileTraceSite, unsigned long long>, FB::EqualFunctor<FBMobileTraceSite>, true>, std::__1::allocator<std::__1::__hash_value_type<FBMobileTraceSite, unsigned long long> > > {
	unique_ptr<std::__1::__hash_node<std::__1::__hash_value_type<FBMobileTraceSite, unsigned long long>, void *> *[], std::__1::__bucket_list_deallocator<std::__1::allocator<std::__1::__hash_node<std::__1::__hash_value_type<FBMobileTraceSite, unsigned long long>, void *> *> > > __bucket_list_;
	compressed_pair<std::__1::__hash_node_base<std::__1::__hash_node<std::__1::__hash_value_type<FBMobileTraceSite, unsigned long long>, void *> *>, std::__1::allocator<std::__1::__hash_node<std::__1::__hash_value_type<FBMobileTraceSite, unsigned long long>, void *> > > __p1_;
	compressed_pair<unsigned long, std::__1::__unordered_map_hasher<FBMobileTraceSite, std::__1::__hash_value_type<FBMobileTraceSite, unsigned long long>, FB::HashFunctor<FBMobileTraceSite>, true> > __p2_;
	compressed_pair<float, std::__1::__unordered_map_equal<FBMobileTraceSite, std::__1::__hash_value_type<FBMobileTraceSite, unsigned long long>, FB::EqualFunctor<FBMobileTraceSite>, true> > __p3_;
} hash_table<std::__1::__hash_value_type<FBMobileTraceSite, unsigned long long>, std::__1::__unordered_map_hasher<FBMobileTraceSite, std::__1::__hash_value_type<FBMobileTraceSite, unsigned long long>, FB::HashFunctor<FBMobileTraceSite>, true>, std::__1::__unordered_map_equal<FBMobileTraceSite, std::__1::__hash_value_type<FBMobileTraceSite, unsigned long long>, FB::EqualFunctor<FBMobileTraceSite>, true>, std::__1::allocator<std::__1::__hash_value_type<FBMobileTraceSite, unsigned long long> > >;

typedef struct unordered_map<FBMobileTraceSite, unsigned long long, FB::HashFunctor<FBMobileTraceSite>, FB::EqualFunctor<FBMobileTraceSite>, std::__1::allocator<std::__1::pair<const FBMobileTraceSite, unsigned long long> > > {
	hash_table<std::__1::__hash_value_type<FBMobileTraceSite, unsigned long long>, std::__1::__unordered_map_hasher<FBMobileTraceSite, std::__1::__hash_value_type<FBMobileTraceSite, unsigned long long>, FB::HashFunctor<FBMobileTraceSite>, true>, std::__1::__unordered_map_equal<FBMobileTraceSite, std::__1::__hash_value_type<FBMobileTraceSite, unsigned long long>, FB::EqualFunctor<FBMobileTraceSite>, true>, std::__1::allocator<std::__1::__hash_value_type<FBMobileTraceSite, unsigned long long> > > __table_;
} unordered_map<FBMobileTraceSite, unsigned long long, FB::HashFunctor<FBMobileTraceSite>, FB::EqualFunctor<FBMobileTraceSite>, std::__1::allocator<std::__1::pair<const FBMobileTraceSite, unsigned long long> > >;

typedef struct _compressed_pair<unsigned long, std::__1::allocator<std::__1::__hash_node<std::__1::__hash_value_type<FBMobileTraceSite, unsigned int>, void *> *> > {
	unsigned long long __first_;
} compressed_pair<unsigned long, std::__1::allocator<std::__1::__hash_node<std::__1::__hash_value_type<FBMobileTraceSite, unsigned int>, void *> *> >;

typedef struct _compressed_pair<unsigned long, std::__1::__unordered_map_hasher<FBMobileTraceSite, std::__1::__hash_value_type<FBMobileTraceSite, unsigned int>, FB::HashFunctor<FBMobileTraceSite>, true> > {
	unsigned long long __first_;
} compressed_pair<unsigned long, std::__1::__unordered_map_hasher<FBMobileTraceSite, std::__1::__hash_value_type<FBMobileTraceSite, unsigned int>, FB::HashFunctor<FBMobileTraceSite>, true> >;

typedef struct _compressed_pair<float, std::__1::__unordered_map_equal<FBMobileTraceSite, std::__1::__hash_value_type<FBMobileTraceSite, unsigned int>, FB::EqualFunctor<FBMobileTraceSite>, true> > {
	float __first_;
} compressed_pair<float, std::__1::__unordered_map_equal<FBMobileTraceSite, std::__1::__hash_value_type<FBMobileTraceSite, unsigned int>, FB::EqualFunctor<FBMobileTraceSite>, true> >;

typedef struct _hash_node_base<std::__1::__hash_node<std::__1::__hash_value_type<FBMobileTraceSite, unsigned int>, void *> *> {
	__hash_node<std::__1::__hash_value_type<FBMobileTraceSite, unsigned int>, void *> __next_;
} hash_node_base<std::__1::__hash_node<std::__1::__hash_value_type<FBMobileTraceSite, unsigned int>, void *> *>;

typedef struct _compressed_pair<std::__1::__hash_node_base<std::__1::__hash_node<std::__1::__hash_value_type<FBMobileTraceSite, unsigned int>, void *> *>, std::__1::allocator<std::__1::__hash_node<std::__1::__hash_value_type<FBMobileTraceSite, unsigned int>, void *> > > {
	hash_node_base<std::__1::__hash_node<std::__1::__hash_value_type<FBMobileTraceSite, unsigned int>, void *> *> __first_;
} compressed_pair<std::__1::__hash_node_base<std::__1::__hash_node<std::__1::__hash_value_type<FBMobileTraceSite, unsigned int>, void *> *>, std::__1::allocator<std::__1::__hash_node<std::__1::__hash_value_type<FBMobileTraceSite, unsigned int>, void *> > >;

typedef struct _bucket_list_deallocator<std::__1::allocator<std::__1::__hash_node<std::__1::__hash_value_type<FBMobileTraceSite, unsigned int>, void *> *> > {
	compressed_pair<unsigned long, std::__1::allocator<std::__1::__hash_node<std::__1::__hash_value_type<FBMobileTraceSite, unsigned int>, void *> *> > __data_;
} bucket_list_deallocator<std::__1::allocator<std::__1::__hash_node<std::__1::__hash_value_type<FBMobileTraceSite, unsigned int>, void *> *> >;

typedef struct _compressed_pair<std::__1::__hash_node<std::__1::__hash_value_type<FBMobileTraceSite, unsigned int>, void *> **, std::__1::__bucket_list_deallocator<std::__1::allocator<std::__1::__hash_node<std::__1::__hash_value_type<FBMobileTraceSite, unsigned int>, void *> *> > > {
	__hash_node<std::__1::__hash_value_type<FBMobileTraceSite, unsigned int>, void *> __first_;
	bucket_list_deallocator<std::__1::allocator<std::__1::__hash_node<std::__1::__hash_value_type<FBMobileTraceSite, unsigned int>, void *> *> > __second_;
} compressed_pair<std::__1::__hash_node<std::__1::__hash_value_type<FBMobileTraceSite, unsigned int>, void *> **, std::__1::__bucket_list_deallocator<std::__1::allocator<std::__1::__hash_node<std::__1::__hash_value_type<FBMobileTraceSite, unsigned int>, void *> *> > >;

typedef struct unique_ptr<std::__1::__hash_node<std::__1::__hash_value_type<FBMobileTraceSite, unsigned int>, void *> *[], std::__1::__bucket_list_deallocator<std::__1::allocator<std::__1::__hash_node<std::__1::__hash_value_type<FBMobileTraceSite, unsigned int>, void *> *> > > {
	compressed_pair<std::__1::__hash_node<std::__1::__hash_value_type<FBMobileTraceSite, unsigned int>, void *> **, std::__1::__bucket_list_deallocator<std::__1::allocator<std::__1::__hash_node<std::__1::__hash_value_type<FBMobileTraceSite, unsigned int>, void *> *> > > __ptr_;
} unique_ptr<std::__1::__hash_node<std::__1::__hash_value_type<FBMobileTraceSite, unsigned int>, void *> *[], std::__1::__bucket_list_deallocator<std::__1::allocator<std::__1::__hash_node<std::__1::__hash_value_type<FBMobileTraceSite, unsigned int>, void *> *> > >;

typedef struct _hash_table<std::__1::__hash_value_type<FBMobileTraceSite, unsigned int>, std::__1::__unordered_map_hasher<FBMobileTraceSite, std::__1::__hash_value_type<FBMobileTraceSite, unsigned int>, FB::HashFunctor<FBMobileTraceSite>, true>, std::__1::__unordered_map_equal<FBMobileTraceSite, std::__1::__hash_value_type<FBMobileTraceSite, unsigned int>, FB::EqualFunctor<FBMobileTraceSite>, true>, std::__1::allocator<std::__1::__hash_value_type<FBMobileTraceSite, unsigned int> > > {
	unique_ptr<std::__1::__hash_node<std::__1::__hash_value_type<FBMobileTraceSite, unsigned int>, void *> *[], std::__1::__bucket_list_deallocator<std::__1::allocator<std::__1::__hash_node<std::__1::__hash_value_type<FBMobileTraceSite, unsigned int>, void *> *> > > __bucket_list_;
	compressed_pair<std::__1::__hash_node_base<std::__1::__hash_node<std::__1::__hash_value_type<FBMobileTraceSite, unsigned int>, void *> *>, std::__1::allocator<std::__1::__hash_node<std::__1::__hash_value_type<FBMobileTraceSite, unsigned int>, void *> > > __p1_;
	compressed_pair<unsigned long, std::__1::__unordered_map_hasher<FBMobileTraceSite, std::__1::__hash_value_type<FBMobileTraceSite, unsigned int>, FB::HashFunctor<FBMobileTraceSite>, true> > __p2_;
	compressed_pair<float, std::__1::__unordered_map_equal<FBMobileTraceSite, std::__1::__hash_value_type<FBMobileTraceSite, unsigned int>, FB::EqualFunctor<FBMobileTraceSite>, true> > __p3_;
} hash_table<std::__1::__hash_value_type<FBMobileTraceSite, unsigned int>, std::__1::__unordered_map_hasher<FBMobileTraceSite, std::__1::__hash_value_type<FBMobileTraceSite, unsigned int>, FB::HashFunctor<FBMobileTraceSite>, true>, std::__1::__unordered_map_equal<FBMobileTraceSite, std::__1::__hash_value_type<FBMobileTraceSite, unsigned int>, FB::EqualFunctor<FBMobileTraceSite>, true>, std::__1::allocator<std::__1::__hash_value_type<FBMobileTraceSite, unsigned int> > >;

typedef struct unordered_map<FBMobileTraceSite, unsigned int, FB::HashFunctor<FBMobileTraceSite>, FB::EqualFunctor<FBMobileTraceSite>, std::__1::allocator<std::__1::pair<const FBMobileTraceSite, unsigned int> > > {
	hash_table<std::__1::__hash_value_type<FBMobileTraceSite, unsigned int>, std::__1::__unordered_map_hasher<FBMobileTraceSite, std::__1::__hash_value_type<FBMobileTraceSite, unsigned int>, FB::HashFunctor<FBMobileTraceSite>, true>, std::__1::__unordered_map_equal<FBMobileTraceSite, std::__1::__hash_value_type<FBMobileTraceSite, unsigned int>, FB::EqualFunctor<FBMobileTraceSite>, true>, std::__1::allocator<std::__1::__hash_value_type<FBMobileTraceSite, unsigned int> > > __table_;
} unordered_map<FBMobileTraceSite, unsigned int, FB::HashFunctor<FBMobileTraceSite>, FB::EqualFunctor<FBMobileTraceSite>, std::__1::allocator<std::__1::pair<const FBMobileTraceSite, unsigned int> > >;

typedef struct FBTraceEvent* FBTraceEventRef;

typedef struct FBDoubleLinkedList {
	FBDoubleLinkedList flink;
	FBDoubleLinkedList blink;
} FBDoubleLinkedList;

typedef struct _compressed_pair<reactivesocket::liger::SharedLigerClient *, std::__1::default_delete<reactivesocket::liger::SharedLigerClient> > {
	SharedLigerClient __first_;
} compressed_pair<reactivesocket::liger::SharedLigerClient *, std::__1::default_delete<reactivesocket::liger::SharedLigerClient> >;

typedef struct unique_ptr<reactivesocket::liger::SharedLigerClient, std::__1::default_delete<reactivesocket::liger::SharedLigerClient> > {
	compressed_pair<reactivesocket::liger::SharedLigerClient *, std::__1::default_delete<reactivesocket::liger::SharedLigerClient> > __ptr_;
} unique_ptr<reactivesocket::liger::SharedLigerClient, std::__1::default_delete<reactivesocket::liger::SharedLigerClient> >;

typedef struct _compressed_pair<reactivesocket::liger::LigerLithiumClient *, std::__1::default_delete<reactivesocket::liger::LigerLithiumClient> > {
	LigerLithiumClient __first_;
} compressed_pair<reactivesocket::liger::LigerLithiumClient *, std::__1::default_delete<reactivesocket::liger::LigerLithiumClient> >;

typedef struct unique_ptr<reactivesocket::liger::LigerLithiumClient, std::__1::default_delete<reactivesocket::liger::LigerLithiumClient> > {
	compressed_pair<reactivesocket::liger::LigerLithiumClient *, std::__1::default_delete<reactivesocket::liger::LigerLithiumClient> > __ptr_;
} unique_ptr<reactivesocket::liger::LigerLithiumClient, std::__1::default_delete<reactivesocket::liger::LigerLithiumClient> >;

typedef struct shared_ptr<reactivesocket::ReactiveSocket> {
	ReactiveSocket __ptr_;
	__shared_weak_count __cntrl_;
} shared_ptr<reactivesocket::ReactiveSocket>;

typedef struct opaqueCMFormatDescription* opaqueCMFormatDescriptionRef;

typedef struct OpaqueCMBlockBuffer* OpaqueCMBlockBufferRef;

typedef struct AudioBuffer {
	unsigned mNumberChannels;
	unsigned mDataByteSize;
	void mData;
} AudioBuffer;

typedef struct FNFMP4MvhdAtom {
	unsigned timescale;
	unsigned duration;
} FNFMP4MvhdAtom;

typedef struct FNFMP4MehdAtom {
	int duration;
} FNFMP4MehdAtom;

typedef struct _compressed_pair<FNFMP4MoofAtom *, std::__1::allocator<FNFMP4MoofAtom> > {
	FNFMP4MoofAtom __first_;
} compressed_pair<FNFMP4MoofAtom *, std::__1::allocator<FNFMP4MoofAtom> >;

typedef struct vector<FNFMP4MoofAtom, std::__1::allocator<FNFMP4MoofAtom> > {
	FNFMP4MoofAtom __begin_;
	FNFMP4MoofAtom __end_;
	compressed_pair<FNFMP4MoofAtom *, std::__1::allocator<FNFMP4MoofAtom> > __end_cap_;
} vector<FNFMP4MoofAtom, std::__1::allocator<FNFMP4MoofAtom> >;

typedef struct _compressed_pair<FNFMP4SidxSegment *, std::__1::allocator<FNFMP4SidxSegment> > {
	FNFMP4SidxSegment __first_;
} compressed_pair<FNFMP4SidxSegment *, std::__1::allocator<FNFMP4SidxSegment> >;

typedef struct vector<FNFMP4SidxSegment, std::__1::allocator<FNFMP4SidxSegment> > {
	FNFMP4SidxSegment __begin_;
	FNFMP4SidxSegment __end_;
	compressed_pair<FNFMP4SidxSegment *, std::__1::allocator<FNFMP4SidxSegment> > __end_cap_;
} vector<FNFMP4SidxSegment, std::__1::allocator<FNFMP4SidxSegment> >;

typedef struct FNFMP4SidxAtom {
	unsigned timescale;
	vector<FNFMP4SidxSegment, std::__1::allocator<FNFMP4SidxSegment> > segments;
} FNFMP4SidxAtom;

typedef struct _compressed_pair<FNFMP4TrexAtom *, std::__1::allocator<FNFMP4TrexAtom> > {
	FNFMP4TrexAtom __first_;
} compressed_pair<FNFMP4TrexAtom *, std::__1::allocator<FNFMP4TrexAtom> >;

typedef struct vector<FNFMP4TrexAtom, std::__1::allocator<FNFMP4TrexAtom> > {
	FNFMP4TrexAtom __begin_;
	FNFMP4TrexAtom __end_;
	compressed_pair<FNFMP4TrexAtom *, std::__1::allocator<FNFMP4TrexAtom> > __end_cap_;
} vector<FNFMP4TrexAtom, std::__1::allocator<FNFMP4TrexAtom> >;

typedef struct FNFMP4MvexAtom {
	FNFMP4MehdAtom mehdAtom;
	vector<FNFMP4TrexAtom, std::__1::allocator<FNFMP4TrexAtom> > trexAtoms;
} FNFMP4MvexAtom;

typedef struct _compressed_pair<FNFMP4TrakAtom *, std::__1::allocator<FNFMP4TrakAtom> > {
	FNFMP4TrakAtom __first_;
} compressed_pair<FNFMP4TrakAtom *, std::__1::allocator<FNFMP4TrakAtom> >;

typedef struct vector<FNFMP4TrakAtom, std::__1::allocator<FNFMP4TrakAtom> > {
	FNFMP4TrakAtom __begin_;
	FNFMP4TrakAtom __end_;
	compressed_pair<FNFMP4TrakAtom *, std::__1::allocator<FNFMP4TrakAtom> > __end_cap_;
} vector<FNFMP4TrakAtom, std::__1::allocator<FNFMP4TrakAtom> >;

typedef struct FNFMP4MoovAtom {
	FNFMP4MvhdAtom mvhdAtom;
	vector<FNFMP4TrakAtom, std::__1::allocator<FNFMP4TrakAtom> > trakAtoms;
	FNFMP4MvexAtom mvexAtom;
} FNFMP4MoovAtom;

typedef struct FNFMP4MoovAtomProvider {
	FNFMP4MoovAtom _moovAtom;
	unsigned long long _moovAtomSize;
	FNFMP4SidxAtom _sidxAtom;
	vector<FNFMP4MoofAtom, std::__1::allocator<FNFMP4MoofAtom> > _moofAtoms;
} FNFMP4MoovAtomProvider;

typedef struct _compressed_pair<unsigned int *, std::__1::allocator<unsigned int> > {
	unsigned __first_;
} compressed_pair<unsigned int *, std::__1::allocator<unsigned int> >;

typedef struct vector<unsigned int, std::__1::allocator<unsigned int> > {
	unsigned __begin_;
	unsigned __end_;
	compressed_pair<unsigned int *, std::__1::allocator<unsigned int> > __end_cap_;
} vector<unsigned int, std::__1::allocator<unsigned int> >;

typedef struct FNFTrackDownloaderState {
	NSURLRequest* urlRequest;
	unsigned long long priorOffset;
	unsigned long long bytesRequested;
	unsigned long long bytesReceived;
	unsigned long long prefetchedBytesCached;
} FNFTrackDownloaderState;

typedef struct _compressed_pair<facebook::tigon::TigonCallbacks *, std::__1::default_delete<facebook::tigon::TigonCallbacks> > {
	TigonCallbacks __first_;
} compressed_pair<facebook::tigon::TigonCallbacks *, std::__1::default_delete<facebook::tigon::TigonCallbacks> >;

typedef struct unique_ptr<facebook::tigon::TigonCallbacks, std::__1::default_delete<facebook::tigon::TigonCallbacks> > {
	compressed_pair<facebook::tigon::TigonCallbacks *, std::__1::default_delete<facebook::tigon::TigonCallbacks> > __ptr_;
} unique_ptr<facebook::tigon::TigonCallbacks, std::__1::default_delete<facebook::tigon::TigonCallbacks> >;

typedef struct OpaqueAudioComponentInstance* OpaqueAudioComponentInstanceRef;

typedef struct {
	char* field1;
	int field2;
	int field3;
	int field4;
	int field5;
} SCD_Struct_FB1297;

typedef struct _compressed_pair<FBAnalyticsModuleStackItem *, std::__1::allocator<FBAnalyticsModuleStackItem> > {
	FBAnalyticsModuleStackItem __first_;
} compressed_pair<FBAnalyticsModuleStackItem *, std::__1::allocator<FBAnalyticsModuleStackItem> >;

typedef struct vector<FBAnalyticsModuleStackItem, std::__1::allocator<FBAnalyticsModuleStackItem> > {
	FBAnalyticsModuleStackItem __begin_;
	FBAnalyticsModuleStackItem __end_;
	compressed_pair<FBAnalyticsModuleStackItem *, std::__1::allocator<FBAnalyticsModuleStackItem> > __end_cap_;
} vector<FBAnalyticsModuleStackItem, std::__1::allocator<FBAnalyticsModuleStackItem> >;

typedef struct FBAnalyticsModuleStack {
	vector<FBAnalyticsModuleStackItem, std::__1::allocator<FBAnalyticsModuleStackItem> > items;
} FBAnalyticsModuleStack;

typedef struct _compressed_pair<unsigned long, std::__1::__map_value_compare<FBDataSegment, std::__1::__value_type<FBDataSegment, NSData *>, cmpOfDataSegment, true> > {
	unsigned long long __first_;
} compressed_pair<unsigned long, std::__1::__map_value_compare<FBDataSegment, std::__1::__value_type<FBDataSegment, NSData *>, cmpOfDataSegment, true> >;

typedef struct _compressed_pair<std::__1::__tree_end_node<std::__1::__tree_node_base<void *> *>, std::__1::allocator<std::__1::__tree_node<std::__1::__value_type<FBDataSegment, NSData *>, void *> > > {
	tree_end_node<std::__1::__tree_node_base<void *> *> __first_;
} compressed_pair<std::__1::__tree_end_node<std::__1::__tree_node_base<void *> *>, std::__1::allocator<std::__1::__tree_node<std::__1::__value_type<FBDataSegment, NSData *>, void *> > >;

typedef struct _tree<std::__1::__value_type<FBDataSegment, NSData *>, std::__1::__map_value_compare<FBDataSegment, std::__1::__value_type<FBDataSegment, NSData *>, cmpOfDataSegment, true>, std::__1::allocator<std::__1::__value_type<FBDataSegment, NSData *> > > {
	__tree_node<std::__1::__value_type<FBDataSegment, NSData *>, void *> __begin_node_;
	compressed_pair<std::__1::__tree_end_node<std::__1::__tree_node_base<void *> *>, std::__1::allocator<std::__1::__tree_node<std::__1::__value_type<FBDataSegment, NSData *>, void *> > > __pair1_;
	compressed_pair<unsigned long, std::__1::__map_value_compare<FBDataSegment, std::__1::__value_type<FBDataSegment, NSData *>, cmpOfDataSegment, true> > __pair3_;
} tree<std::__1::__value_type<FBDataSegment, NSData *>, std::__1::__map_value_compare<FBDataSegment, std::__1::__value_type<FBDataSegment, NSData *>, cmpOfDataSegment, true>, std::__1::allocator<std::__1::__value_type<FBDataSegment, NSData *> > >;

typedef struct map<FBDataSegment, NSData *, cmpOfDataSegment, std::__1::allocator<std::__1::pair<const FBDataSegment, NSData *> > > {
	tree<std::__1::__value_type<FBDataSegment, NSData *>, std::__1::__map_value_compare<FBDataSegment, std::__1::__value_type<FBDataSegment, NSData *>, cmpOfDataSegment, true>, std::__1::allocator<std::__1::__value_type<FBDataSegment, NSData *> > > __tree_;
} map<FBDataSegment, NSData *, cmpOfDataSegment, std::__1::allocator<std::__1::pair<const FBDataSegment, NSData *> > >;

typedef struct _compressed_pair<FNFMP4TrakAtomForSeek *, std::__1::allocator<FNFMP4TrakAtomForSeek> > {
	FNFMP4TrakAtomForSeek __first_;
} compressed_pair<FNFMP4TrakAtomForSeek *, std::__1::allocator<FNFMP4TrakAtomForSeek> >;

typedef struct vector<FNFMP4TrakAtomForSeek, std::__1::allocator<FNFMP4TrakAtomForSeek> > {
	FNFMP4TrakAtomForSeek __begin_;
	FNFMP4TrakAtomForSeek __end_;
	compressed_pair<FNFMP4TrakAtomForSeek *, std::__1::allocator<FNFMP4TrakAtomForSeek> > __end_cap_;
} vector<FNFMP4TrakAtomForSeek, std::__1::allocator<FNFMP4TrakAtomForSeek> >;

typedef struct FNFMP4MoovAtomCompressed {
	vector<FNFMP4TrakAtomForSeek, std::__1::allocator<FNFMP4TrakAtomForSeek> > trakAtoms;
	FNFMP4MvhdAtom mvhdAtom;
} FNFMP4MoovAtomCompressed;

typedef struct OpaqueAudioConverter* OpaqueAudioConverterRef;

typedef struct _compressed_pair<unsigned char *, std::__1::allocator<unsigned char> > {
	char* __first_;
} compressed_pair<unsigned char *, std::__1::allocator<unsigned char> >;

typedef struct vector<unsigned char, std::__1::allocator<unsigned char> > {
	char* __begin_;
	char* __end_;
	compressed_pair<unsigned char *, std::__1::allocator<unsigned char> > __end_cap_;
} vector<unsigned char, std::__1::allocator<unsigned char> >;

typedef struct _compressed_pair<unsigned long, std::__1::allocator<std::__1::__hash_node<std::__1::__hash_value_type<std::__1::basic_string<char>, std::__1::pair<FBRunningWindowStatistcs, std::__1::shared_ptr<facebook::mobile::xplat::statistics::MovingAverage> > >, void *> *> > {
	unsigned long long __first_;
} compressed_pair<unsigned long, std::__1::allocator<std::__1::__hash_node<std::__1::__hash_value_type<std::__1::basic_string<char>, std::__1::pair<FBRunningWindowStatistcs, std::__1::shared_ptr<facebook::mobile::xplat::statistics::MovingAverage> > >, void *> *> >;

typedef struct _compressed_pair<unsigned long, std::__1::__unordered_map_hasher<std::__1::basic_string<char>, std::__1::__hash_value_type<std::__1::basic_string<char>, std::__1::pair<FBRunningWindowStatistcs, std::__1::shared_ptr<facebook::mobile::xplat::statistics::MovingAverage> > >, std::__1::hash<std::__1::basic_string<char> >, true> > {
	unsigned long long __first_;
} compressed_pair<unsigned long, std::__1::__unordered_map_hasher<std::__1::basic_string<char>, std::__1::__hash_value_type<std::__1::basic_string<char>, std::__1::pair<FBRunningWindowStatistcs, std::__1::shared_ptr<facebook::mobile::xplat::statistics::MovingAverage> > >, std::__1::hash<std::__1::basic_string<char> >, true> >;

typedef struct _compressed_pair<float, std::__1::__unordered_map_equal<std::__1::basic_string<char>, std::__1::__hash_value_type<std::__1::basic_string<char>, std::__1::pair<FBRunningWindowStatistcs, std::__1::shared_ptr<facebook::mobile::xplat::statistics::MovingAverage> > >, std::__1::equal_to<std::__1::basic_string<char> >, true> > {
	float __first_;
} compressed_pair<float, std::__1::__unordered_map_equal<std::__1::basic_string<char>, std::__1::__hash_value_type<std::__1::basic_string<char>, std::__1::pair<FBRunningWindowStatistcs, std::__1::shared_ptr<facebook::mobile::xplat::statistics::MovingAverage> > >, std::__1::equal_to<std::__1::basic_string<char> >, true> >;

typedef struct _hash_node_base<std::__1::__hash_node<std::__1::__hash_value_type<std::__1::basic_string<char>, std::__1::pair<FBRunningWindowStatistcs, std::__1::shared_ptr<facebook::mobile::xplat::statistics::MovingAverage> > >, void *> *> {
	__hash_node<std::__1::__hash_value_type<std::__1::basic_string<char>, std::__1::pair<FBRunningWindowStatistcs, std::__1::shared_ptr<facebook::mobile::xplat::statistics::MovingAverage> > >, void *> __next_;
} hash_node_base<std::__1::__hash_node<std::__1::__hash_value_type<std::__1::basic_string<char>, std::__1::pair<FBRunningWindowStatistcs, std::__1::shared_ptr<facebook::mobile::xplat::statistics::MovingAverage> > >, void *> *>;

typedef struct _compressed_pair<std::__1::__hash_node_base<std::__1::__hash_node<std::__1::__hash_value_type<std::__1::basic_string<char>, std::__1::pair<FBRunningWindowStatistcs, std::__1::shared_ptr<facebook::mobile::xplat::statistics::MovingAverage> > >, void *> *>, std::__1::allocator<std::__1::__hash_node<std::__1::__hash_value_type<std::__1::basic_string<char>, std::__1::pair<FBRunningWindowStatistcs, std::__1::shared_ptr<facebook::mobile::xplat::statistics::MovingAverage> > >, void *> > > {
	hash_node_base<std::__1::__hash_node<std::__1::__hash_value_type<std::__1::basic_string<char>, std::__1::pair<FBRunningWindowStatistcs, std::__1::shared_ptr<facebook::mobile::xplat::statistics::MovingAverage> > >, void *> *> __first_;
} compressed_pair<std::__1::__hash_node_base<std::__1::__hash_node<std::__1::__hash_value_type<std::__1::basic_string<char>, std::__1::pair<FBRunningWindowStatistcs, std::__1::shared_ptr<facebook::mobile::xplat::statistics::MovingAverage> > >, void *> *>, std::__1::allocator<std::__1::__hash_node<std::__1::__hash_value_type<std::__1::basic_string<char>, std::__1::pair<FBRunningWindowStatistcs, std::__1::shared_ptr<facebook::mobile::xplat::statistics::MovingAverage> > >, void *> > >;

typedef struct _bucket_list_deallocator<std::__1::allocator<std::__1::__hash_node<std::__1::__hash_value_type<std::__1::basic_string<char>, std::__1::pair<FBRunningWindowStatistcs, std::__1::shared_ptr<facebook::mobile::xplat::statistics::MovingAverage> > >, void *> *> > {
	compressed_pair<unsigned long, std::__1::allocator<std::__1::__hash_node<std::__1::__hash_value_type<std::__1::basic_string<char>, std::__1::pair<FBRunningWindowStatistcs, std::__1::shared_ptr<facebook::mobile::xplat::statistics::MovingAverage> > >, void *> *> > __data_;
} bucket_list_deallocator<std::__1::allocator<std::__1::__hash_node<std::__1::__hash_value_type<std::__1::basic_string<char>, std::__1::pair<FBRunningWindowStatistcs, std::__1::shared_ptr<facebook::mobile::xplat::statistics::MovingAverage> > >, void *> *> >;

typedef struct _compressed_pair<std::__1::__hash_node<std::__1::__hash_value_type<std::__1::basic_string<char>, std::__1::pair<FBRunningWindowStatistcs, std::__1::shared_ptr<facebook::mobile::xplat::statistics::MovingAverage> > >, void *> **, std::__1::__bucket_list_deallocator<std::__1::allocator<std::__1::__hash_node<std::__1::__hash_value_type<std::__1::basic_string<char>, std::__1::pair<FBRunningWindowStatistcs, std::__1::shared_ptr<facebook::mobile::xplat::statistics::MovingAverage> > >, void *> *> > > {
	__hash_node<std::__1::__hash_value_type<std::__1::basic_string<char>, std::__1::pair<FBRunningWindowStatistcs, std::__1::shared_ptr<facebook::mobile::xplat::statistics::MovingAverage> > >, void *> __first_;
	bucket_list_deallocator<std::__1::allocator<std::__1::__hash_node<std::__1::__hash_value_type<std::__1::basic_string<char>, std::__1::pair<FBRunningWindowStatistcs, std::__1::shared_ptr<facebook::mobile::xplat::statistics::MovingAverage> > >, void *> *> > __second_;
} compressed_pair<std::__1::__hash_node<std::__1::__hash_value_type<std::__1::basic_string<char>, std::__1::pair<FBRunningWindowStatistcs, std::__1::shared_ptr<facebook::mobile::xplat::statistics::MovingAverage> > >, void *> **, std::__1::__bucket_list_deallocator<std::__1::allocator<std::__1::__hash_node<std::__1::__hash_value_type<std::__1::basic_string<char>, std::__1::pair<FBRunningWindowStatistcs, std::__1::shared_ptr<facebook::mobile::xplat::statistics::MovingAverage> > >, void *> *> > >;

typedef struct unique_ptr<std::__1::__hash_node<std::__1::__hash_value_type<std::__1::basic_string<char>, std::__1::pair<FBRunningWindowStatistcs, std::__1::shared_ptr<facebook::mobile::xplat::statistics::MovingAverage> > >, void *> *[], std::__1::__bucket_list_deallocator<std::__1::allocator<std::__1::__hash_node<std::__1::__hash_value_type<std::__1::basic_string<char>, std::__1::pair<FBRunningWindowStatistcs, std::__1::shared_ptr<facebook::mobile::xplat::statistics::MovingAverage> > >, void *> *> > > {
	compressed_pair<std::__1::__hash_node<std::__1::__hash_value_type<std::__1::basic_string<char>, std::__1::pair<FBRunningWindowStatistcs, std::__1::shared_ptr<facebook::mobile::xplat::statistics::MovingAverage> > >, void *> **, std::__1::__bucket_list_deallocator<std::__1::allocator<std::__1::__hash_node<std::__1::__hash_value_type<std::__1::basic_string<char>, std::__1::pair<FBRunningWindowStatistcs, std::__1::shared_ptr<facebook::mobile::xplat::statistics::MovingAverage> > >, void *> *> > > __ptr_;
} unique_ptr<std::__1::__hash_node<std::__1::__hash_value_type<std::__1::basic_string<char>, std::__1::pair<FBRunningWindowStatistcs, std::__1::shared_ptr<facebook::mobile::xplat::statistics::MovingAverage> > >, void *> *[], std::__1::__bucket_list_deallocator<std::__1::allocator<std::__1::__hash_node<std::__1::__hash_value_type<std::__1::basic_string<char>, std::__1::pair<FBRunningWindowStatistcs, std::__1::shared_ptr<facebook::mobile::xplat::statistics::MovingAverage> > >, void *> *> > >;

typedef struct _hash_table<std::__1::__hash_value_type<std::__1::basic_string<char>, std::__1::pair<FBRunningWindowStatistcs, std::__1::shared_ptr<facebook::mobile::xplat::statistics::MovingAverage> > >, std::__1::__unordered_map_hasher<std::__1::basic_string<char>, std::__1::__hash_value_type<std::__1::basic_string<char>, std::__1::pair<FBRunningWindowStatistcs, std::__1::shared_ptr<facebook::mobile::xplat::statistics::MovingAverage> > >, std::__1::hash<std::__1::basic_string<char> >, true>, std::__1::__unordered_map_equal<std::__1::basic_string<char>, std::__1::__hash_value_type<std::__1::basic_string<char>, std::__1::pair<FBRunningWindowStatistcs, std::__1::shared_ptr<facebook::mobile::xplat::statistics::MovingAverage> > >, std::__1::equal_to<std::__1::basic_string<char> >, true>, std::__1::allocator<std::__1::__hash_value_type<std::__1::basic_string<char>, std::__1::pair<FBRunningWindowStatistcs, std::__1::shared_ptr<facebook::mobile::xplat::statistics::MovingAverage> > > > > {
	unique_ptr<std::__1::__hash_node<std::__1::__hash_value_type<std::__1::basic_string<char>, std::__1::pair<FBRunningWindowStatistcs, std::__1::shared_ptr<facebook::mobile::xplat::statistics::MovingAverage> > >, void *> *[], std::__1::__bucket_list_deallocator<std::__1::allocator<std::__1::__hash_node<std::__1::__hash_value_type<std::__1::basic_string<char>, std::__1::pair<FBRunningWindowStatistcs, std::__1::shared_ptr<facebook::mobile::xplat::statistics::MovingAverage> > >, void *> *> > > __bucket_list_;
	compressed_pair<std::__1::__hash_node_base<std::__1::__hash_node<std::__1::__hash_value_type<std::__1::basic_string<char>, std::__1::pair<FBRunningWindowStatistcs, std::__1::shared_ptr<facebook::mobile::xplat::statistics::MovingAverage> > >, void *> *>, std::__1::allocator<std::__1::__hash_node<std::__1::__hash_value_type<std::__1::basic_string<char>, std::__1::pair<FBRunningWindowStatistcs, std::__1::shared_ptr<facebook::mobile::xplat::statistics::MovingAverage> > >, void *> > > __p1_;
	compressed_pair<unsigned long, std::__1::__unordered_map_hasher<std::__1::basic_string<char>, std::__1::__hash_value_type<std::__1::basic_string<char>, std::__1::pair<FBRunningWindowStatistcs, std::__1::shared_ptr<facebook::mobile::xplat::statistics::MovingAverage> > >, std::__1::hash<std::__1::basic_string<char> >, true> > __p2_;
	compressed_pair<float, std::__1::__unordered_map_equal<std::__1::basic_string<char>, std::__1::__hash_value_type<std::__1::basic_string<char>, std::__1::pair<FBRunningWindowStatistcs, std::__1::shared_ptr<facebook::mobile::xplat::statistics::MovingAverage> > >, std::__1::equal_to<std::__1::basic_string<char> >, true> > __p3_;
} hash_table<std::__1::__hash_value_type<std::__1::basic_string<char>, std::__1::pair<FBRunningWindowStatistcs, std::__1::shared_ptr<facebook::mobile::xplat::statistics::MovingAverage> > >, std::__1::__unordered_map_hasher<std::__1::basic_string<char>, std::__1::__hash_value_type<std::__1::basic_string<char>, std::__1::pair<FBRunningWindowStatistcs, std::__1::shared_ptr<facebook::mobile::xplat::statistics::MovingAverage> > >, std::__1::hash<std::__1::basic_string<char> >, true>, std::__1::__unordered_map_equal<std::__1::basic_string<char>, std::__1::__hash_value_type<std::__1::basic_string<char>, std::__1::pair<FBRunningWindowStatistcs, std::__1::shared_ptr<facebook::mobile::xplat::statistics::MovingAverage> > >, std::__1::equal_to<std::__1::basic_string<char> >, true>, std::__1::allocator<std::__1::__hash_value_type<std::__1::basic_string<char>, std::__1::pair<FBRunningWindowStatistcs, std::__1::shared_ptr<facebook::mobile::xplat::statistics::MovingAverage> > > > >;

typedef struct unordered_map<std::__1::basic_string<char>, std::__1::pair<FBRunningWindowStatistcs, std::__1::shared_ptr<facebook::mobile::xplat::statistics::MovingAverage> >, std::__1::hash<std::__1::basic_string<char> >, std::__1::equal_to<std::__1::basic_string<char> >, std::__1::allocator<std::__1::pair<const std::__1::basic_string<char>, std::__1::pair<FBRunningWindowStatistcs, std::__1::shared_ptr<facebook::mobile::xplat::statistics::MovingAverage> > > > > {
	hash_table<std::__1::__hash_value_type<std::__1::basic_string<char>, std::__1::pair<FBRunningWindowStatistcs, std::__1::shared_ptr<facebook::mobile::xplat::statistics::MovingAverage> > >, std::__1::__unordered_map_hasher<std::__1::basic_string<char>, std::__1::__hash_value_type<std::__1::basic_string<char>, std::__1::pair<FBRunningWindowStatistcs, std::__1::shared_ptr<facebook::mobile::xplat::statistics::MovingAverage> > >, std::__1::hash<std::__1::basic_string<char> >, true>, std::__1::__unordered_map_equal<std::__1::basic_string<char>, std::__1::__hash_value_type<std::__1::basic_string<char>, std::__1::pair<FBRunningWindowStatistcs, std::__1::shared_ptr<facebook::mobile::xplat::statistics::MovingAverage> > >, std::__1::equal_to<std::__1::basic_string<char> >, true>, std::__1::allocator<std::__1::__hash_value_type<std::__1::basic_string<char>, std::__1::pair<FBRunningWindowStatistcs, std::__1::shared_ptr<facebook::mobile::xplat::statistics::MovingAverage> > > > > __table_;
} unordered_map<std::__1::basic_string<char>, std::__1::pair<FBRunningWindowStatistcs, std::__1::shared_ptr<facebook::mobile::xplat::statistics::MovingAverage> >, std::__1::hash<std::__1::basic_string<char> >, std::__1::equal_to<std::__1::basic_string<char> >, std::__1::allocator<std::__1::pair<const std::__1::basic_string<char>, std::__1::pair<FBRunningWindowStatistcs, std::__1::shared_ptr<facebook::mobile::xplat::statistics::MovingAverage> > > > >;

typedef struct OpaqueVTCompressionSession* OpaqueVTCompressionSessionRef;

typedef struct shared_ptr<AVCFrame> {
	AVCFrame __ptr_;
	__shared_weak_count __cntrl_;
} shared_ptr<AVCFrame>;

typedef struct shared_ptr<H264SPS> {
	H264SPS __ptr_;
	__shared_weak_count __cntrl_;
} shared_ptr<H264SPS>;

typedef struct AVCFrameSplitter {
	unsigned long long m_nalucount;
	unsigned long long m_framecount;
	unsigned long long m_bytecount;
	shared_ptr<H264SPS> m_sps;
	shared_ptr<AVCFrame> m_currframe;
} AVCFrameSplitter;

typedef struct shared_ptr<std::__1::basic_string<char> > {
	basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char> > __ptr_;
	__shared_weak_count __cntrl_;
} shared_ptr<std::__1::basic_string<char> >;

typedef struct FBFLVFrame {
	vector<unsigned char, std::__1::allocator<unsigned char> > data;
	SCD_Struct_FB100 pts;
	SCD_Struct_FB100 dts;
	BOOL isIDR;
	BOOL isASC;
} FBFLVFrame;

typedef struct _compressed_pair<unsigned long, std::__1::allocator<FBFLVFrame> > {
	unsigned long long __first_;
} compressed_pair<unsigned long, std::__1::allocator<FBFLVFrame> >;

typedef struct _compressed_pair<FBFLVFrame **, std::__1::allocator<FBFLVFrame *> > {
	FBFLVFrame __first_;
} compressed_pair<FBFLVFrame **, std::__1::allocator<FBFLVFrame *> >;

typedef struct _split_buffer<FBFLVFrame *, std::__1::allocator<FBFLVFrame *> > {
	FBFLVFrame __first_;
	FBFLVFrame __begin_;
	FBFLVFrame __end_;
	compressed_pair<FBFLVFrame **, std::__1::allocator<FBFLVFrame *> > __end_cap_;
} split_buffer<FBFLVFrame *, std::__1::allocator<FBFLVFrame *> >;

typedef struct deque<FBFLVFrame, std::__1::allocator<FBFLVFrame> > {
	split_buffer<FBFLVFrame *, std::__1::allocator<FBFLVFrame *> > __map_;
	unsigned long long __start_;
	compressed_pair<unsigned long, std::__1::allocator<FBFLVFrame> > __size_;
} deque<FBFLVFrame, std::__1::allocator<FBFLVFrame> >;

typedef struct atomic<long long> {
	Aq __a_;
} atomic<long long>;

typedef struct Stats {
	unsigned long long framesSent;
	unsigned long long totalFrames;
	unsigned long long timestamp;
} Stats;

typedef struct atomic<FBRtmpSessionState> {
	Ai __a_;
} atomic<FBRtmpSessionState>;

typedef struct atomic<CMTime> {
	A? __a_;
} atomic<CMTime>;

typedef struct TCPInfo {
	long long t_dupacks;
	long long t_state;
	long long t_flags;
	long long t_force;
	long long snd_una;
	long long snd_max;
	long long snd_nxt;
	long long snd_up;
	long long snd_wl1;
	long long snd_wl2;
	long long iss;
	long long irs;
	long long rcv_nxt;
	long long rcv_adv;
	long long rcv_wnd;
	long long rcv_up;
	long long snd_wnd;
	long long snd_cwnd;
	long long snd_ssthresh;
	long long t_maxopd;
	long long t_rcvtime;
	long long t_starttime;
	long long t_rtttime;
	long long t_rtseq;
	long long t_rxtcur;
	long long t_maxseg;
	long long t_srtt;
	long long t_rttvar;
	long long t_rxtshift;
	long long t_rttmin;
	long long t_rttupdated;
	long long max_sndwnd;
	long long t_softerror;
	char t_oobflags;
	char t_iobc;
	long long snd_scale;
	long long rcv_scale;
	long long request_r_scale;
	long long requested_s_scale;
	long long ts_recent;
	long long ts_recent_age;
	long long last_ack_sent;
	long long cc_send;
	long long cc_recv;
	long long snd_recover;
	long long snd_cwnd_prev;
	long long snd_ssthresh_prev;
	long long t_badrxtwin;
	long long snd_sbbytes;
	long long rtt;
	long long rttvar;
} TCPInfo;

typedef struct {
	BOOL paddingForHasValue_[1];
	double value;
} SCD_Struct_FB1336;

typedef struct Optional<double> {
	StorageTriviallyDestructible storage_;
} Optional<double>;

typedef struct {
	BOOL paddingForHasValue_[1];
	TCPInfo value;
} SCD_Struct_FB1338;

typedef struct Optional<facebook::tcp::TCPInfo> {
	StorageTriviallyDestructible storage_;
} Optional<facebook::tcp::TCPInfo>;

typedef struct FBRtmpConnectionMeasurements {
	Optional<facebook::tcp::TCPInfo> tcpInfo;
	Optional<double> throughputUsingPing;
	Optional<double> initialRttUsingPing;
	Optional<double> rttUsingPing;
} FBRtmpConnectionMeasurements;

typedef struct InlineSyncExecutor {
	/*function pointer*/void* _vptr$Executor;
} InlineSyncExecutor;

typedef struct shared_ptr<(anonymous namespace)::StreamingReachabilityEvent> {
	StreamingReachabilityEvent __ptr_;
	__shared_weak_count __cntrl_;
} shared_ptr<(anonymous namespace)::StreamingReachabilityEvent>;

typedef struct BandwidthMonitor* BandwidthMonitorRef;

typedef struct RTMPPacket {
	unsigned char m_headerType;
	unsigned char m_packetType;
	unsigned char m_hasAbsTimestamp;
	int m_nChannel;
	unsigned m_nTimeStamp;
	int m_nInfoField2;
	unsigned m_nBodySize;
	unsigned m_nBytesRead;
	RTMPChunk m_chunk;
	char* m_body;
} RTMPPacket;

typedef struct _compressed_pair<unsigned long, std::__1::allocator<FBRtmpPingInfo> > {
	unsigned long long __first_;
} compressed_pair<unsigned long, std::__1::allocator<FBRtmpPingInfo> >;

typedef struct _compressed_pair<FBRtmpPingInfo **, std::__1::allocator<FBRtmpPingInfo *> > {
	FBRtmpPingInfo __first_;
} compressed_pair<FBRtmpPingInfo **, std::__1::allocator<FBRtmpPingInfo *> >;

typedef struct _split_buffer<FBRtmpPingInfo *, std::__1::allocator<FBRtmpPingInfo *> > {
	FBRtmpPingInfo __first_;
	FBRtmpPingInfo __begin_;
	FBRtmpPingInfo __end_;
	compressed_pair<FBRtmpPingInfo **, std::__1::allocator<FBRtmpPingInfo *> > __end_cap_;
} split_buffer<FBRtmpPingInfo *, std::__1::allocator<FBRtmpPingInfo *> >;

typedef struct deque<FBRtmpPingInfo, std::__1::allocator<FBRtmpPingInfo> > {
	split_buffer<FBRtmpPingInfo *, std::__1::allocator<FBRtmpPingInfo *> > __map_;
	unsigned long long __start_;
	compressed_pair<unsigned long, std::__1::allocator<FBRtmpPingInfo> > __size_;
} deque<FBRtmpPingInfo, std::__1::allocator<FBRtmpPingInfo> >;

typedef struct RTMP_OnConnectContext {
	RTMP rtmp;
	NSData* connectionToken;
} RTMP_OnConnectContext;

typedef struct _compressed_pair<facebook::livestreaming::RtmpSSLConnectionContext *, std::__1::default_delete<facebook::livestreaming::RtmpSSLConnectionContext> > {
	RtmpSSLConnectionContext __first_;
} compressed_pair<facebook::livestreaming::RtmpSSLConnectionContext *, std::__1::default_delete<facebook::livestreaming::RtmpSSLConnectionContext> >;

typedef struct unique_ptr<facebook::livestreaming::RtmpSSLConnectionContext, std::__1::default_delete<facebook::livestreaming::RtmpSSLConnectionContext> > {
	compressed_pair<facebook::livestreaming::RtmpSSLConnectionContext *, std::__1::default_delete<facebook::livestreaming::RtmpSSLConnectionContext> > __ptr_;
} unique_ptr<facebook::livestreaming::RtmpSSLConnectionContext, std::__1::default_delete<facebook::livestreaming::RtmpSSLConnectionContext> >;

typedef struct shared_ptr<facebook::mobile::xplat::statistics::MovingAverage> {
	MovingAverage __ptr_;
	__shared_weak_count __cntrl_;
} shared_ptr<facebook::mobile::xplat::statistics::MovingAverage>;

typedef struct FBVideoBroadcastPipelineHolder {
	FBRtmpSession* rtmpSession;
	FBAACEncoder* audioEncoder;
	<FBVideoEncoder>* videoEncoder;
	FBAACPacketizer* audioPacketizer;
	FBH264Packetizer* videoPacketizer;
	FBDiskVideoRecorder* diskRecorder;
} FBVideoBroadcastPipelineHolder;

typedef struct _compressed_pair<unsigned long, std::__1::allocator<std::__1::__hash_node<std::__1::__hash_value_type<std::__1::basic_string<char>, double>, void *> *> > {
	unsigned long long __first_;
} compressed_pair<unsigned long, std::__1::allocator<std::__1::__hash_node<std::__1::__hash_value_type<std::__1::basic_string<char>, double>, void *> *> >;

typedef struct _compressed_pair<unsigned long, std::__1::__unordered_map_hasher<std::__1::basic_string<char>, std::__1::__hash_value_type<std::__1::basic_string<char>, double>, std::__1::hash<std::__1::basic_string<char> >, true> > {
	unsigned long long __first_;
} compressed_pair<unsigned long, std::__1::__unordered_map_hasher<std::__1::basic_string<char>, std::__1::__hash_value_type<std::__1::basic_string<char>, double>, std::__1::hash<std::__1::basic_string<char> >, true> >;

typedef struct _compressed_pair<float, std::__1::__unordered_map_equal<std::__1::basic_string<char>, std::__1::__hash_value_type<std::__1::basic_string<char>, double>, std::__1::equal_to<std::__1::basic_string<char> >, true> > {
	float __first_;
} compressed_pair<float, std::__1::__unordered_map_equal<std::__1::basic_string<char>, std::__1::__hash_value_type<std::__1::basic_string<char>, double>, std::__1::equal_to<std::__1::basic_string<char> >, true> >;

typedef struct _hash_node_base<std::__1::__hash_node<std::__1::__hash_value_type<std::__1::basic_string<char>, double>, void *> *> {
	__hash_node<std::__1::__hash_value_type<std::__1::basic_string<char>, double>, void *> __next_;
} hash_node_base<std::__1::__hash_node<std::__1::__hash_value_type<std::__1::basic_string<char>, double>, void *> *>;

typedef struct _compressed_pair<std::__1::__hash_node_base<std::__1::__hash_node<std::__1::__hash_value_type<std::__1::basic_string<char>, double>, void *> *>, std::__1::allocator<std::__1::__hash_node<std::__1::__hash_value_type<std::__1::basic_string<char>, double>, void *> > > {
	hash_node_base<std::__1::__hash_node<std::__1::__hash_value_type<std::__1::basic_string<char>, double>, void *> *> __first_;
} compressed_pair<std::__1::__hash_node_base<std::__1::__hash_node<std::__1::__hash_value_type<std::__1::basic_string<char>, double>, void *> *>, std::__1::allocator<std::__1::__hash_node<std::__1::__hash_value_type<std::__1::basic_string<char>, double>, void *> > >;

typedef struct _bucket_list_deallocator<std::__1::allocator<std::__1::__hash_node<std::__1::__hash_value_type<std::__1::basic_string<char>, double>, void *> *> > {
	compressed_pair<unsigned long, std::__1::allocator<std::__1::__hash_node<std::__1::__hash_value_type<std::__1::basic_string<char>, double>, void *> *> > __data_;
} bucket_list_deallocator<std::__1::allocator<std::__1::__hash_node<std::__1::__hash_value_type<std::__1::basic_string<char>, double>, void *> *> >;

typedef struct _compressed_pair<std::__1::__hash_node<std::__1::__hash_value_type<std::__1::basic_string<char>, double>, void *> **, std::__1::__bucket_list_deallocator<std::__1::allocator<std::__1::__hash_node<std::__1::__hash_value_type<std::__1::basic_string<char>, double>, void *> *> > > {
	__hash_node<std::__1::__hash_value_type<std::__1::basic_string<char>, double>, void *> __first_;
	bucket_list_deallocator<std::__1::allocator<std::__1::__hash_node<std::__1::__hash_value_type<std::__1::basic_string<char>, double>, void *> *> > __second_;
} compressed_pair<std::__1::__hash_node<std::__1::__hash_value_type<std::__1::basic_string<char>, double>, void *> **, std::__1::__bucket_list_deallocator<std::__1::allocator<std::__1::__hash_node<std::__1::__hash_value_type<std::__1::basic_string<char>, double>, void *> *> > >;

typedef struct unique_ptr<std::__1::__hash_node<std::__1::__hash_value_type<std::__1::basic_string<char>, double>, void *> *[], std::__1::__bucket_list_deallocator<std::__1::allocator<std::__1::__hash_node<std::__1::__hash_value_type<std::__1::basic_string<char>, double>, void *> *> > > {
	compressed_pair<std::__1::__hash_node<std::__1::__hash_value_type<std::__1::basic_string<char>, double>, void *> **, std::__1::__bucket_list_deallocator<std::__1::allocator<std::__1::__hash_node<std::__1::__hash_value_type<std::__1::basic_string<char>, double>, void *> *> > > __ptr_;
} unique_ptr<std::__1::__hash_node<std::__1::__hash_value_type<std::__1::basic_string<char>, double>, void *> *[], std::__1::__bucket_list_deallocator<std::__1::allocator<std::__1::__hash_node<std::__1::__hash_value_type<std::__1::basic_string<char>, double>, void *> *> > >;

typedef struct _hash_table<std::__1::__hash_value_type<std::__1::basic_string<char>, double>, std::__1::__unordered_map_hasher<std::__1::basic_string<char>, std::__1::__hash_value_type<std::__1::basic_string<char>, double>, std::__1::hash<std::__1::basic_string<char> >, true>, std::__1::__unordered_map_equal<std::__1::basic_string<char>, std::__1::__hash_value_type<std::__1::basic_string<char>, double>, std::__1::equal_to<std::__1::basic_string<char> >, true>, std::__1::allocator<std::__1::__hash_value_type<std::__1::basic_string<char>, double> > > {
	unique_ptr<std::__1::__hash_node<std::__1::__hash_value_type<std::__1::basic_string<char>, double>, void *> *[], std::__1::__bucket_list_deallocator<std::__1::allocator<std::__1::__hash_node<std::__1::__hash_value_type<std::__1::basic_string<char>, double>, void *> *> > > __bucket_list_;
	compressed_pair<std::__1::__hash_node_base<std::__1::__hash_node<std::__1::__hash_value_type<std::__1::basic_string<char>, double>, void *> *>, std::__1::allocator<std::__1::__hash_node<std::__1::__hash_value_type<std::__1::basic_string<char>, double>, void *> > > __p1_;
	compressed_pair<unsigned long, std::__1::__unordered_map_hasher<std::__1::basic_string<char>, std::__1::__hash_value_type<std::__1::basic_string<char>, double>, std::__1::hash<std::__1::basic_string<char> >, true> > __p2_;
	compressed_pair<float, std::__1::__unordered_map_equal<std::__1::basic_string<char>, std::__1::__hash_value_type<std::__1::basic_string<char>, double>, std::__1::equal_to<std::__1::basic_string<char> >, true> > __p3_;
} hash_table<std::__1::__hash_value_type<std::__1::basic_string<char>, double>, std::__1::__unordered_map_hasher<std::__1::basic_string<char>, std::__1::__hash_value_type<std::__1::basic_string<char>, double>, std::__1::hash<std::__1::basic_string<char> >, true>, std::__1::__unordered_map_equal<std::__1::basic_string<char>, std::__1::__hash_value_type<std::__1::basic_string<char>, double>, std::__1::equal_to<std::__1::basic_string<char> >, true>, std::__1::allocator<std::__1::__hash_value_type<std::__1::basic_string<char>, double> > >;

typedef struct unordered_map<std::__1::basic_string<char>, double, std::__1::hash<std::__1::basic_string<char> >, std::__1::equal_to<std::__1::basic_string<char> >, std::__1::allocator<std::__1::pair<const std::__1::basic_string<char>, double> > > {
	hash_table<std::__1::__hash_value_type<std::__1::basic_string<char>, double>, std::__1::__unordered_map_hasher<std::__1::basic_string<char>, std::__1::__hash_value_type<std::__1::basic_string<char>, double>, std::__1::hash<std::__1::basic_string<char> >, true>, std::__1::__unordered_map_equal<std::__1::basic_string<char>, std::__1::__hash_value_type<std::__1::basic_string<char>, double>, std::__1::equal_to<std::__1::basic_string<char> >, true>, std::__1::allocator<std::__1::__hash_value_type<std::__1::basic_string<char>, double> > > __table_;
} unordered_map<std::__1::basic_string<char>, double, std::__1::hash<std::__1::basic_string<char> >, std::__1::equal_to<std::__1::basic_string<char> >, std::__1::allocator<std::__1::pair<const std::__1::basic_string<char>, double> > >;

typedef struct FBNetworkSpeedTestStatus {
	int state;
	double estimatedUploadBandwidthInKBps;
	unsigned long long timeTaken;
	NSArray* measurements;
	BOOL speedTestPassesThreshold;
} FBNetworkSpeedTestStatus;

typedef struct shared_ptr<std::__1::unordered_set<std::__1::shared_ptr<facebook::tigon::TigonAppStateRequestToken>, std::__1::hash<std::__1::shared_ptr<facebook::tigon::TigonAppStateRequestToken> >, std::__1::equal_to<std::__1::shared_ptr<facebook::tigon::TigonAppStateRequestToken> >, std::__1::allocator<std::__1::shared_ptr<facebook::tigon::TigonAppStateRequestToken> > > > {
	unordered_set<std::__1::shared_ptr<facebook::tigon::TigonAppStateRequestToken>, std::__1::hash<std::__1::shared_ptr<facebook::tigon::TigonAppStateRequestToken> >, std::__1::equal_to<std::__1::shared_ptr<facebook::tigon::TigonAppStateRequestToken> >, std::__1::allocator<std::__1::shared_ptr<facebook::tigon::TigonAppStateRequestToken> > > __ptr_;
	__shared_weak_count __cntrl_;
} shared_ptr<std::__1::unordered_set<std::__1::shared_ptr<facebook::tigon::TigonAppStateRequestToken>, std::__1::hash<std::__1::shared_ptr<facebook::tigon::TigonAppStateRequestToken> >, std::__1::equal_to<std::__1::shared_ptr<facebook::tigon::TigonAppStateRequestToken> >, std::__1::allocator<std::__1::shared_ptr<facebook::tigon::TigonAppStateRequestToken> > > >;

typedef struct shared_ptr<std::__1::mutex> {
	mutex __ptr_;
	__shared_weak_count __cntrl_;
} shared_ptr<std::__1::mutex>;

typedef struct StyleTransferBufferSize {
	int width;
	int height;
} StyleTransferBufferSize;

typedef struct StyleTransferCachedBufferSizes {
	StyleTransferBufferSize scaledBufferSize;
	StyleTransferBufferSize inputBufferSize;
} StyleTransferCachedBufferSizes;

typedef struct promise<std::__1::shared_ptr<facebook::react::RCTMessageThread> > {
	__assoc_state<std::__1::shared_ptr<facebook::react::RCTMessageThread> > __state_;
} promise<std::__1::shared_ptr<facebook::react::RCTMessageThread> >;

typedef struct shared_ptr<facebook::react::RCTMessageThread> {
	RCTMessageThread __ptr_;
	__shared_weak_count __cntrl_;
} shared_ptr<facebook::react::RCTMessageThread>;

typedef struct shared_ptr<facebook::react::Instance> {
	Instance __ptr_;
	__shared_weak_count __cntrl_;
} shared_ptr<facebook::react::Instance>;

typedef struct __CFArray* CFArrayRef;

typedef struct atomic<FBVideoRecorderState> {
	Aq __a_;
} atomic<FBVideoRecorderState>;

typedef struct FBMPVideoRecorderConfiguration {
	double bitratePerPixel;
	double aspectRatioOfVideoNaturalSize;
	long long bufferOrientation;
	long long targetOrientation;
	BOOL shouldMirrorVideo;
} FBMPVideoRecorderConfiguration;

typedef struct FBMPVideoAssetInputConfiguration {
	BOOL loopVideo;
	CGSize outputSize;
} FBMPVideoAssetInputConfiguration;

typedef struct {
	SCD_Struct_FB100 field1;
	SCD_Struct_FB100 field2;
	SCD_Struct_FB100 field3;
} SCD_Struct_FB1376;

typedef struct CMSampleBufferSmartPtr {
	opaqueCMSampleBuffer _ptr;
} CMSampleBufferSmartPtr;

typedef struct CaptureCompletionContext {
	long long orientation;
	NSObject<OS_dispatch_queue>* queue;
	/*^block*/id block;
} CaptureCompletionContext;

typedef struct FBHScrollPaginatorDotsConfiguration {
	unsigned long long totalDots;
	UIColor* deselectedColor;
	UIColor* selectedColor;
	UIColor* borderColor;
	double borderWidth;
	double dotsSize;
	UIColor* backgroundColor;
	double dotSpacing;
	UIEdgeInsets insets;
} FBHScrollPaginatorDotsConfiguration;

typedef struct FBHScrollOptions {
	Class expandToTargetClass;
	double hExpansionLeftAndRightInset;
	long long nearingEndOffset;
	long long nearingStartOffset;
	CKTypedComponentAction<> endDraggingScrollViewAction;
	NSString* accessibilityIdentifier;
	unsigned long long delaysContentTouchesOption;
	BOOL disableBounce;
	BOOL disableScrolling;
	CKTypedComponentAction<> didScrollAction;
	CKTypedComponentAction<> nearingEndAction;
	CKTypedComponentAction<> nearingStartAction;
	CKTypedComponentAction<> scrollToComponentAction;
	CKTypedComponentAction<> didStartScrollingAction;
	CKTypedComponentAction<> didEndScrollingAction;
	unsigned long long touchThroughOption;
	BOOL enablePagedAccessibilitySupport;
	unsigned long long scrollingBehaviorOption;
} FBHScrollOptions;

typedef struct _compressed_pair<UICollectionViewLayoutAttributes *__strong *, std::__1::allocator<UICollectionViewLayoutAttributes *> > {
	id __first_;
} compressed_pair<UICollectionViewLayoutAttributes *__strong *, std::__1::allocator<UICollectionViewLayoutAttributes *> >;

typedef struct vector<UICollectionViewLayoutAttributes *, std::__1::allocator<UICollectionViewLayoutAttributes *> > {
	id __begin_;
	id __end_;
	compressed_pair<UICollectionViewLayoutAttributes *__strong *, std::__1::allocator<UICollectionViewLayoutAttributes *> > __end_cap_;
} vector<UICollectionViewLayoutAttributes *, std::__1::allocator<UICollectionViewLayoutAttributes *> >;

typedef struct _compressed_pair<unsigned long, std::__1::allocator<std::__1::__hash_node<std::__1::__hash_value_type<UICollectionViewCell *, FBHScrollMountInfo>, void *> *> > {
	unsigned long long __first_;
} compressed_pair<unsigned long, std::__1::allocator<std::__1::__hash_node<std::__1::__hash_value_type<UICollectionViewCell *, FBHScrollMountInfo>, void *> *> >;

typedef struct _compressed_pair<unsigned long, std::__1::__unordered_map_hasher<UICollectionViewCell *, std::__1::__hash_value_type<UICollectionViewCell *, FBHScrollMountInfo>, FB::HashFunctor<NSObject *>, true> > {
	unsigned long long __first_;
} compressed_pair<unsigned long, std::__1::__unordered_map_hasher<UICollectionViewCell *, std::__1::__hash_value_type<UICollectionViewCell *, FBHScrollMountInfo>, FB::HashFunctor<NSObject *>, true> >;

typedef struct _compressed_pair<float, std::__1::__unordered_map_equal<UICollectionViewCell *, std::__1::__hash_value_type<UICollectionViewCell *, FBHScrollMountInfo>, std::__1::equal_to<UICollectionViewCell *>, true> > {
	float __first_;
} compressed_pair<float, std::__1::__unordered_map_equal<UICollectionViewCell *, std::__1::__hash_value_type<UICollectionViewCell *, FBHScrollMountInfo>, std::__1::equal_to<UICollectionViewCell *>, true> >;

typedef struct _hash_node_base<std::__1::__hash_node<std::__1::__hash_value_type<UICollectionViewCell *, FBHScrollMountInfo>, void *> *> {
	__hash_node<std::__1::__hash_value_type<UICollectionViewCell *, FBHScrollMountInfo>, void *> __next_;
} hash_node_base<std::__1::__hash_node<std::__1::__hash_value_type<UICollectionViewCell *, FBHScrollMountInfo>, void *> *>;

typedef struct _compressed_pair<std::__1::__hash_node_base<std::__1::__hash_node<std::__1::__hash_value_type<UICollectionViewCell *, FBHScrollMountInfo>, void *> *>, std::__1::allocator<std::__1::__hash_node<std::__1::__hash_value_type<UICollectionViewCell *, FBHScrollMountInfo>, void *> > > {
	hash_node_base<std::__1::__hash_node<std::__1::__hash_value_type<UICollectionViewCell *, FBHScrollMountInfo>, void *> *> __first_;
} compressed_pair<std::__1::__hash_node_base<std::__1::__hash_node<std::__1::__hash_value_type<UICollectionViewCell *, FBHScrollMountInfo>, void *> *>, std::__1::allocator<std::__1::__hash_node<std::__1::__hash_value_type<UICollectionViewCell *, FBHScrollMountInfo>, void *> > >;

typedef struct _bucket_list_deallocator<std::__1::allocator<std::__1::__hash_node<std::__1::__hash_value_type<UICollectionViewCell *, FBHScrollMountInfo>, void *> *> > {
	compressed_pair<unsigned long, std::__1::allocator<std::__1::__hash_node<std::__1::__hash_value_type<UICollectionViewCell *, FBHScrollMountInfo>, void *> *> > __data_;
} bucket_list_deallocator<std::__1::allocator<std::__1::__hash_node<std::__1::__hash_value_type<UICollectionViewCell *, FBHScrollMountInfo>, void *> *> >;

typedef struct _compressed_pair<std::__1::__hash_node<std::__1::__hash_value_type<UICollectionViewCell *, FBHScrollMountInfo>, void *> **, std::__1::__bucket_list_deallocator<std::__1::allocator<std::__1::__hash_node<std::__1::__hash_value_type<UICollectionViewCell *, FBHScrollMountInfo>, void *> *> > > {
	__hash_node<std::__1::__hash_value_type<UICollectionViewCell *, FBHScrollMountInfo>, void *> __first_;
	bucket_list_deallocator<std::__1::allocator<std::__1::__hash_node<std::__1::__hash_value_type<UICollectionViewCell *, FBHScrollMountInfo>, void *> *> > __second_;
} compressed_pair<std::__1::__hash_node<std::__1::__hash_value_type<UICollectionViewCell *, FBHScrollMountInfo>, void *> **, std::__1::__bucket_list_deallocator<std::__1::allocator<std::__1::__hash_node<std::__1::__hash_value_type<UICollectionViewCell *, FBHScrollMountInfo>, void *> *> > >;

typedef struct unique_ptr<std::__1::__hash_node<std::__1::__hash_value_type<UICollectionViewCell *, FBHScrollMountInfo>, void *> *[], std::__1::__bucket_list_deallocator<std::__1::allocator<std::__1::__hash_node<std::__1::__hash_value_type<UICollectionViewCell *, FBHScrollMountInfo>, void *> *> > > {
	compressed_pair<std::__1::__hash_node<std::__1::__hash_value_type<UICollectionViewCell *, FBHScrollMountInfo>, void *> **, std::__1::__bucket_list_deallocator<std::__1::allocator<std::__1::__hash_node<std::__1::__hash_value_type<UICollectionViewCell *, FBHScrollMountInfo>, void *> *> > > __ptr_;
} unique_ptr<std::__1::__hash_node<std::__1::__hash_value_type<UICollectionViewCell *, FBHScrollMountInfo>, void *> *[], std::__1::__bucket_list_deallocator<std::__1::allocator<std::__1::__hash_node<std::__1::__hash_value_type<UICollectionViewCell *, FBHScrollMountInfo>, void *> *> > >;

typedef struct _hash_table<std::__1::__hash_value_type<UICollectionViewCell *, FBHScrollMountInfo>, std::__1::__unordered_map_hasher<UICollectionViewCell *, std::__1::__hash_value_type<UICollectionViewCell *, FBHScrollMountInfo>, FB::HashFunctor<NSObject *>, true>, std::__1::__unordered_map_equal<UICollectionViewCell *, std::__1::__hash_value_type<UICollectionViewCell *, FBHScrollMountInfo>, std::__1::equal_to<UICollectionViewCell *>, true>, std::__1::allocator<std::__1::__hash_value_type<UICollectionViewCell *, FBHScrollMountInfo> > > {
	unique_ptr<std::__1::__hash_node<std::__1::__hash_value_type<UICollectionViewCell *, FBHScrollMountInfo>, void *> *[], std::__1::__bucket_list_deallocator<std::__1::allocator<std::__1::__hash_node<std::__1::__hash_value_type<UICollectionViewCell *, FBHScrollMountInfo>, void *> *> > > __bucket_list_;
	compressed_pair<std::__1::__hash_node_base<std::__1::__hash_node<std::__1::__hash_value_type<UICollectionViewCell *, FBHScrollMountInfo>, void *> *>, std::__1::allocator<std::__1::__hash_node<std::__1::__hash_value_type<UICollectionViewCell *, FBHScrollMountInfo>, void *> > > __p1_;
	compressed_pair<unsigned long, std::__1::__unordered_map_hasher<UICollectionViewCell *, std::__1::__hash_value_type<UICollectionViewCell *, FBHScrollMountInfo>, FB::HashFunctor<NSObject *>, true> > __p2_;
	compressed_pair<float, std::__1::__unordered_map_equal<UICollectionViewCell *, std::__1::__hash_value_type<UICollectionViewCell *, FBHScrollMountInfo>, std::__1::equal_to<UICollectionViewCell *>, true> > __p3_;
} hash_table<std::__1::__hash_value_type<UICollectionViewCell *, FBHScrollMountInfo>, std::__1::__unordered_map_hasher<UICollectionViewCell *, std::__1::__hash_value_type<UICollectionViewCell *, FBHScrollMountInfo>, FB::HashFunctor<NSObject *>, true>, std::__1::__unordered_map_equal<UICollectionViewCell *, std::__1::__hash_value_type<UICollectionViewCell *, FBHScrollMountInfo>, std::__1::equal_to<UICollectionViewCell *>, true>, std::__1::allocator<std::__1::__hash_value_type<UICollectionViewCell *, FBHScrollMountInfo> > >;

typedef struct unordered_map<UICollectionViewCell *, FBHScrollMountInfo, FB::HashFunctor<NSObject *>, std::__1::equal_to<UICollectionViewCell *>, std::__1::allocator<std::__1::pair<UICollectionViewCell *const, FBHScrollMountInfo> > > {
	hash_table<std::__1::__hash_value_type<UICollectionViewCell *, FBHScrollMountInfo>, std::__1::__unordered_map_hasher<UICollectionViewCell *, std::__1::__hash_value_type<UICollectionViewCell *, FBHScrollMountInfo>, FB::HashFunctor<NSObject *>, true>, std::__1::__unordered_map_equal<UICollectionViewCell *, std::__1::__hash_value_type<UICollectionViewCell *, FBHScrollMountInfo>, std::__1::equal_to<UICollectionViewCell *>, true>, std::__1::allocator<std::__1::__hash_value_type<UICollectionViewCell *, FBHScrollMountInfo> > > __table_;
} unordered_map<UICollectionViewCell *, FBHScrollMountInfo, FB::HashFunctor<NSObject *>, std::__1::equal_to<UICollectionViewCell *>, std::__1::allocator<std::__1::pair<UICollectionViewCell *const, FBHScrollMountInfo> > >;

typedef struct _compressed_pair<unsigned long, std::__1::allocator<std::__1::__hash_node<std::__1::__hash_value_type<id, UICollectionViewCell *>, void *> *> > {
	unsigned long long __first_;
} compressed_pair<unsigned long, std::__1::allocator<std::__1::__hash_node<std::__1::__hash_value_type<id, UICollectionViewCell *>, void *> *> >;

typedef struct _compressed_pair<unsigned long, std::__1::__unordered_map_hasher<id, std::__1::__hash_value_type<id, UICollectionViewCell *>, FB::HashFunctor<NSObject *>, true> > {
	unsigned long long __first_;
} compressed_pair<unsigned long, std::__1::__unordered_map_hasher<id, std::__1::__hash_value_type<id, UICollectionViewCell *>, FB::HashFunctor<NSObject *>, true> >;

typedef struct _compressed_pair<float, std::__1::__unordered_map_equal<id, std::__1::__hash_value_type<id, UICollectionViewCell *>, std::__1::equal_to<id>, true> > {
	float __first_;
} compressed_pair<float, std::__1::__unordered_map_equal<id, std::__1::__hash_value_type<id, UICollectionViewCell *>, std::__1::equal_to<id>, true> >;

typedef struct _hash_node_base<std::__1::__hash_node<std::__1::__hash_value_type<id, UICollectionViewCell *>, void *> *> {
	__hash_node<std::__1::__hash_value_type<id, UICollectionViewCell *>, void *> __next_;
} hash_node_base<std::__1::__hash_node<std::__1::__hash_value_type<id, UICollectionViewCell *>, void *> *>;

typedef struct _compressed_pair<std::__1::__hash_node_base<std::__1::__hash_node<std::__1::__hash_value_type<id, UICollectionViewCell *>, void *> *>, std::__1::allocator<std::__1::__hash_node<std::__1::__hash_value_type<id, UICollectionViewCell *>, void *> > > {
	hash_node_base<std::__1::__hash_node<std::__1::__hash_value_type<id, UICollectionViewCell *>, void *> *> __first_;
} compressed_pair<std::__1::__hash_node_base<std::__1::__hash_node<std::__1::__hash_value_type<id, UICollectionViewCell *>, void *> *>, std::__1::allocator<std::__1::__hash_node<std::__1::__hash_value_type<id, UICollectionViewCell *>, void *> > >;

typedef struct _bucket_list_deallocator<std::__1::allocator<std::__1::__hash_node<std::__1::__hash_value_type<id, UICollectionViewCell *>, void *> *> > {
	compressed_pair<unsigned long, std::__1::allocator<std::__1::__hash_node<std::__1::__hash_value_type<id, UICollectionViewCell *>, void *> *> > __data_;
} bucket_list_deallocator<std::__1::allocator<std::__1::__hash_node<std::__1::__hash_value_type<id, UICollectionViewCell *>, void *> *> >;

typedef struct _compressed_pair<std::__1::__hash_node<std::__1::__hash_value_type<id, UICollectionViewCell *>, void *> **, std::__1::__bucket_list_deallocator<std::__1::allocator<std::__1::__hash_node<std::__1::__hash_value_type<id, UICollectionViewCell *>, void *> *> > > {
	__hash_node<std::__1::__hash_value_type<id, UICollectionViewCell *>, void *> __first_;
	bucket_list_deallocator<std::__1::allocator<std::__1::__hash_node<std::__1::__hash_value_type<id, UICollectionViewCell *>, void *> *> > __second_;
} compressed_pair<std::__1::__hash_node<std::__1::__hash_value_type<id, UICollectionViewCell *>, void *> **, std::__1::__bucket_list_deallocator<std::__1::allocator<std::__1::__hash_node<std::__1::__hash_value_type<id, UICollectionViewCell *>, void *> *> > >;

typedef struct unique_ptr<std::__1::__hash_node<std::__1::__hash_value_type<id, UICollectionViewCell *>, void *> *[], std::__1::__bucket_list_deallocator<std::__1::allocator<std::__1::__hash_node<std::__1::__hash_value_type<id, UICollectionViewCell *>, void *> *> > > {
	compressed_pair<std::__1::__hash_node<std::__1::__hash_value_type<id, UICollectionViewCell *>, void *> **, std::__1::__bucket_list_deallocator<std::__1::allocator<std::__1::__hash_node<std::__1::__hash_value_type<id, UICollectionViewCell *>, void *> *> > > __ptr_;
} unique_ptr<std::__1::__hash_node<std::__1::__hash_value_type<id, UICollectionViewCell *>, void *> *[], std::__1::__bucket_list_deallocator<std::__1::allocator<std::__1::__hash_node<std::__1::__hash_value_type<id, UICollectionViewCell *>, void *> *> > >;

typedef struct _hash_table<std::__1::__hash_value_type<id, UICollectionViewCell *>, std::__1::__unordered_map_hasher<id, std::__1::__hash_value_type<id, UICollectionViewCell *>, FB::HashFunctor<NSObject *>, true>, std::__1::__unordered_map_equal<id, std::__1::__hash_value_type<id, UICollectionViewCell *>, std::__1::equal_to<id>, true>, std::__1::allocator<std::__1::__hash_value_type<id, UICollectionViewCell *> > > {
	unique_ptr<std::__1::__hash_node<std::__1::__hash_value_type<id, UICollectionViewCell *>, void *> *[], std::__1::__bucket_list_deallocator<std::__1::allocator<std::__1::__hash_node<std::__1::__hash_value_type<id, UICollectionViewCell *>, void *> *> > > __bucket_list_;
	compressed_pair<std::__1::__hash_node_base<std::__1::__hash_node<std::__1::__hash_value_type<id, UICollectionViewCell *>, void *> *>, std::__1::allocator<std::__1::__hash_node<std::__1::__hash_value_type<id, UICollectionViewCell *>, void *> > > __p1_;
	compressed_pair<unsigned long, std::__1::__unordered_map_hasher<id, std::__1::__hash_value_type<id, UICollectionViewCell *>, FB::HashFunctor<NSObject *>, true> > __p2_;
	compressed_pair<float, std::__1::__unordered_map_equal<id, std::__1::__hash_value_type<id, UICollectionViewCell *>, std::__1::equal_to<id>, true> > __p3_;
} hash_table<std::__1::__hash_value_type<id, UICollectionViewCell *>, std::__1::__unordered_map_hasher<id, std::__1::__hash_value_type<id, UICollectionViewCell *>, FB::HashFunctor<NSObject *>, true>, std::__1::__unordered_map_equal<id, std::__1::__hash_value_type<id, UICollectionViewCell *>, std::__1::equal_to<id>, true>, std::__1::allocator<std::__1::__hash_value_type<id, UICollectionViewCell *> > >;

typedef struct unordered_map<id, UICollectionViewCell *, FB::HashFunctor<NSObject *>, std::__1::equal_to<id>, std::__1::allocator<std::__1::pair<const id, UICollectionViewCell *> > > {
	hash_table<std::__1::__hash_value_type<id, UICollectionViewCell *>, std::__1::__unordered_map_hasher<id, std::__1::__hash_value_type<id, UICollectionViewCell *>, FB::HashFunctor<NSObject *>, true>, std::__1::__unordered_map_equal<id, std::__1::__hash_value_type<id, UICollectionViewCell *>, std::__1::equal_to<id>, true>, std::__1::allocator<std::__1::__hash_value_type<id, UICollectionViewCell *> > > __table_;
} unordered_map<id, UICollectionViewCell *, FB::HashFunctor<NSObject *>, std::__1::equal_to<id>, std::__1::allocator<std::__1::pair<const id, UICollectionViewCell *> > >;

typedef struct FBHScrollOffsetState {
	id scopeFrameToken;
	double offsetFromChild;
} FBHScrollOffsetState;

typedef struct FBImpressionContentOffsetTrigger {
	double minimumContentOffset;
	double maximumContentOffset;
} FBImpressionContentOffsetTrigger;

typedef struct shared_ptr<Sync::User> {
	User __ptr_;
	__shared_weak_count __cntrl_;
} shared_ptr<Sync::User>;

typedef struct CollageCellSize {
	int widthUnits;
	int heightUnits;
} CollageCellSize;

typedef struct CollageCellOrigin {
	int x;
	int y;
} CollageCellOrigin;

typedef struct CollageCellLayout {
	CollageCellSize size;
	CollageCellOrigin origin;
} CollageCellLayout;

typedef struct shared_ptr<Sync::Folder> {
	Folder __ptr_;
	__shared_weak_count __cntrl_;
} shared_ptr<Sync::Folder>;

typedef struct shared_ptr<Sync::FolderActivityItem> {
	FolderActivityItem __ptr_;
	__shared_weak_count __cntrl_;
} shared_ptr<Sync::FolderActivityItem>;

typedef struct shared_ptr<const Sync::FolderStory> {
	FolderStory __ptr_;
	__shared_weak_count __cntrl_;
} shared_ptr<const Sync::FolderStory>;

typedef struct shared_ptr<Sync::Notification> {
	Notification __ptr_;
	__shared_weak_count __cntrl_;
} shared_ptr<Sync::Notification>;

typedef struct shared_ptr<Sync::Photo> {
	Photo __ptr_;
	__shared_weak_count __cntrl_;
} shared_ptr<Sync::Photo>;

typedef struct shared_ptr<Sync::LocalAsset> {
	LocalAsset __ptr_;
	__shared_weak_count __cntrl_;
} shared_ptr<Sync::LocalAsset>;

typedef struct shared_ptr<Sync::ShoeboxPhoto> {
	ShoeboxPhoto __ptr_;
	__shared_weak_count __cntrl_;
} shared_ptr<Sync::ShoeboxPhoto>;

typedef struct shared_ptr<Sync::PhotoCluster> {
	PhotoCluster __ptr_;
	__shared_weak_count __cntrl_;
} shared_ptr<Sync::PhotoCluster>;

typedef struct shared_ptr<Sync::PhotoConceptGroupIdentifier> {
	PhotoConceptGroupIdentifier __ptr_;
	__shared_weak_count __cntrl_;
} shared_ptr<Sync::PhotoConceptGroupIdentifier>;

typedef struct shared_ptr<Sync::LocalReminder> {
	LocalReminder __ptr_;
	__shared_weak_count __cntrl_;
} shared_ptr<Sync::LocalReminder>;

typedef struct shared_ptr<Sync::LocalReminderNotificationData> {
	LocalReminderNotificationData __ptr_;
	__shared_weak_count __cntrl_;
} shared_ptr<Sync::LocalReminderNotificationData>;

typedef struct shared_ptr<Sync::SuggestionUnit> {
	SuggestionUnit __ptr_;
	__shared_weak_count __cntrl_;
} shared_ptr<Sync::SuggestionUnit>;

typedef struct _compressed_pair<Sync::SuggestionsWindowState *, std::__1::default_delete<Sync::SuggestionsWindowState> > {
	SuggestionsWindowState __first_;
} compressed_pair<Sync::SuggestionsWindowState *, std::__1::default_delete<Sync::SuggestionsWindowState> >;

typedef struct unique_ptr<Sync::SuggestionsWindowState, std::__1::default_delete<Sync::SuggestionsWindowState> > {
	compressed_pair<Sync::SuggestionsWindowState *, std::__1::default_delete<Sync::SuggestionsWindowState> > __ptr_;
} unique_ptr<Sync::SuggestionsWindowState, std::__1::default_delete<Sync::SuggestionsWindowState> >;

typedef struct _compressed_pair<Sync::SuggestionCardConfig *, std::__1::default_delete<Sync::SuggestionCardConfig> > {
	SuggestionCardConfig __first_;
} compressed_pair<Sync::SuggestionCardConfig *, std::__1::default_delete<Sync::SuggestionCardConfig> >;

typedef struct unique_ptr<Sync::SuggestionCardConfig, std::__1::default_delete<Sync::SuggestionCardConfig> > {
	compressed_pair<Sync::SuggestionCardConfig *, std::__1::default_delete<Sync::SuggestionCardConfig> > __ptr_;
} unique_ptr<Sync::SuggestionCardConfig, std::__1::default_delete<Sync::SuggestionCardConfig> >;

typedef struct SRZIndexRange {
	long long location;
	long long length;
} SRZIndexRange;

typedef struct _compressed_pair<_SRLayoutAttributes *, std::__1::allocator<_SRLayoutAttributes> > {
	_SRLayoutAttributes __first_;
} compressed_pair<_SRLayoutAttributes *, std::__1::allocator<_SRLayoutAttributes> >;

typedef struct vector<_SRLayoutAttributes, std::__1::allocator<_SRLayoutAttributes> > {
	_SRLayoutAttributes __begin_;
	_SRLayoutAttributes __end_;
	compressed_pair<_SRLayoutAttributes *, std::__1::allocator<_SRLayoutAttributes> > __end_cap_;
} vector<_SRLayoutAttributes, std::__1::allocator<_SRLayoutAttributes> >;

typedef struct SRStickyFooterLayoutData {
	<SRCollectionLayoutFragment>* contentLayout;
	long long countOfContentItems;
	<SRCollectionLayoutFragment>* footerLayout;
	double footerZIndexShift;
	double footerOriginYShift;
} SRStickyFooterLayoutData;

typedef struct SRStickyHeaderLayoutData {
	double headerZIndexShift;
	double headerOriginYShift;
	long long countOfHeaderItems;
	<SRCollectionLayoutFragment>* contentLayout;
	<SRCollectionLayoutFragment>* headerLayout;
	CGSize headerContentSize;
	CGRect collectionViewBounds;
} SRStickyHeaderLayoutData;

typedef struct _compressed_pair<SRVerticalStackLayoutData *, std::__1::allocator<SRVerticalStackLayoutData> > {
	SRVerticalStackLayoutData __first_;
} compressed_pair<SRVerticalStackLayoutData *, std::__1::allocator<SRVerticalStackLayoutData> >;

typedef struct vector<SRVerticalStackLayoutData, std::__1::allocator<SRVerticalStackLayoutData> > {
	SRVerticalStackLayoutData __begin_;
	SRVerticalStackLayoutData __end_;
	compressed_pair<SRVerticalStackLayoutData *, std::__1::allocator<SRVerticalStackLayoutData> > __end_cap_;
} vector<SRVerticalStackLayoutData, std::__1::allocator<SRVerticalStackLayoutData> >;

typedef struct _compressed_pair<unsigned long, std::__1::__map_value_compare<int, std::__1::__value_type<int, int>, std::__1::less<int>, true> > {
	unsigned long long __first_;
} compressed_pair<unsigned long, std::__1::__map_value_compare<int, std::__1::__value_type<int, int>, std::__1::less<int>, true> >;

typedef struct _compressed_pair<std::__1::__tree_end_node<std::__1::__tree_node_base<void *> *>, std::__1::allocator<std::__1::__tree_node<std::__1::__value_type<int, int>, void *> > > {
	tree_end_node<std::__1::__tree_node_base<void *> *> __first_;
} compressed_pair<std::__1::__tree_end_node<std::__1::__tree_node_base<void *> *>, std::__1::allocator<std::__1::__tree_node<std::__1::__value_type<int, int>, void *> > >;

typedef struct _tree<std::__1::__value_type<int, int>, std::__1::__map_value_compare<int, std::__1::__value_type<int, int>, std::__1::less<int>, true>, std::__1::allocator<std::__1::__value_type<int, int> > > {
	__tree_node<std::__1::__value_type<int, int>, void *> __begin_node_;
	compressed_pair<std::__1::__tree_end_node<std::__1::__tree_node_base<void *> *>, std::__1::allocator<std::__1::__tree_node<std::__1::__value_type<int, int>, void *> > > __pair1_;
	compressed_pair<unsigned long, std::__1::__map_value_compare<int, std::__1::__value_type<int, int>, std::__1::less<int>, true> > __pair3_;
} tree<std::__1::__value_type<int, int>, std::__1::__map_value_compare<int, std::__1::__value_type<int, int>, std::__1::less<int>, true>, std::__1::allocator<std::__1::__value_type<int, int> > >;

typedef struct map<int, int, std::__1::less<int>, std::__1::allocator<std::__1::pair<const int, int> > > {
	tree<std::__1::__value_type<int, int>, std::__1::__map_value_compare<int, std::__1::__value_type<int, int>, std::__1::less<int>, true>, std::__1::allocator<std::__1::__value_type<int, int> > > __tree_;
} map<int, int, std::__1::less<int>, std::__1::allocator<std::__1::pair<const int, int> > >;

typedef struct _compressed_pair<int *, std::__1::allocator<int> > {
	int __first_;
} compressed_pair<int *, std::__1::allocator<int> >;

typedef struct vector<int, std::__1::allocator<int> > {
	int __begin_;
	int __end_;
	compressed_pair<int *, std::__1::allocator<int> > __end_cap_;
} vector<int, std::__1::allocator<int> >;

typedef struct _compressed_pair<_SRCollectionUpdateInstruction *, std::__1::allocator<_SRCollectionUpdateInstruction> > {
	_SRCollectionUpdateInstruction __first_;
} compressed_pair<_SRCollectionUpdateInstruction *, std::__1::allocator<_SRCollectionUpdateInstruction> >;

typedef struct vector<_SRCollectionUpdateInstruction, std::__1::allocator<_SRCollectionUpdateInstruction> > {
	_SRCollectionUpdateInstruction __begin_;
	_SRCollectionUpdateInstruction __end_;
	compressed_pair<_SRCollectionUpdateInstruction *, std::__1::allocator<_SRCollectionUpdateInstruction> > __end_cap_;
} vector<_SRCollectionUpdateInstruction, std::__1::allocator<_SRCollectionUpdateInstruction> >;

typedef struct _compressed_pair<SRCollectionFragmentController *__strong *, std::__1::allocator<SRCollectionFragmentController *> > {
	id __first_;
} compressed_pair<SRCollectionFragmentController *__strong *, std::__1::allocator<SRCollectionFragmentController *> >;

typedef struct vector<SRCollectionFragmentController *, std::__1::allocator<SRCollectionFragmentController *> > {
	id __begin_;
	id __end_;
	compressed_pair<SRCollectionFragmentController *__strong *, std::__1::allocator<SRCollectionFragmentController *> > __end_cap_;
} vector<SRCollectionFragmentController *, std::__1::allocator<SRCollectionFragmentController *> >;

typedef struct _compressed_pair<unsigned long, std::__1::__map_value_compare<long, std::__1::__value_type<long, std::__1::vector<_CellLayoutDesc, std::__1::allocator<_CellLayoutDesc> > >, std::__1::less<long>, true> > {
	unsigned long long __first_;
} compressed_pair<unsigned long, std::__1::__map_value_compare<long, std::__1::__value_type<long, std::__1::vector<_CellLayoutDesc, std::__1::allocator<_CellLayoutDesc> > >, std::__1::less<long>, true> >;

typedef struct _compressed_pair<std::__1::__tree_end_node<std::__1::__tree_node_base<void *> *>, std::__1::allocator<std::__1::__tree_node<std::__1::__value_type<long, std::__1::vector<_CellLayoutDesc, std::__1::allocator<_CellLayoutDesc> > >, void *> > > {
	tree_end_node<std::__1::__tree_node_base<void *> *> __first_;
} compressed_pair<std::__1::__tree_end_node<std::__1::__tree_node_base<void *> *>, std::__1::allocator<std::__1::__tree_node<std::__1::__value_type<long, std::__1::vector<_CellLayoutDesc, std::__1::allocator<_CellLayoutDesc> > >, void *> > >;

typedef struct _tree<std::__1::__value_type<long, std::__1::vector<_CellLayoutDesc, std::__1::allocator<_CellLayoutDesc> > >, std::__1::__map_value_compare<long, std::__1::__value_type<long, std::__1::vector<_CellLayoutDesc, std::__1::allocator<_CellLayoutDesc> > >, std::__1::less<long>, true>, std::__1::allocator<std::__1::__value_type<long, std::__1::vector<_CellLayoutDesc, std::__1::allocator<_CellLayoutDesc> > > > > {
	__tree_node<std::__1::__value_type<long, std::__1::vector<_CellLayoutDesc, std::__1::allocator<_CellLayoutDesc> > >, void *> __begin_node_;
	compressed_pair<std::__1::__tree_end_node<std::__1::__tree_node_base<void *> *>, std::__1::allocator<std::__1::__tree_node<std::__1::__value_type<long, std::__1::vector<_CellLayoutDesc, std::__1::allocator<_CellLayoutDesc> > >, void *> > > __pair1_;
	compressed_pair<unsigned long, std::__1::__map_value_compare<long, std::__1::__value_type<long, std::__1::vector<_CellLayoutDesc, std::__1::allocator<_CellLayoutDesc> > >, std::__1::less<long>, true> > __pair3_;
} tree<std::__1::__value_type<long, std::__1::vector<_CellLayoutDesc, std::__1::allocator<_CellLayoutDesc> > >, std::__1::__map_value_compare<long, std::__1::__value_type<long, std::__1::vector<_CellLayoutDesc, std::__1::allocator<_CellLayoutDesc> > >, std::__1::less<long>, true>, std::__1::allocator<std::__1::__value_type<long, std::__1::vector<_CellLayoutDesc, std::__1::allocator<_CellLayoutDesc> > > > >;

typedef struct map<long, std::__1::vector<_CellLayoutDesc, std::__1::allocator<_CellLayoutDesc> >, std::__1::less<long>, std::__1::allocator<std::__1::pair<const long, std::__1::vector<_CellLayoutDesc, std::__1::allocator<_CellLayoutDesc> > > > > {
	tree<std::__1::__value_type<long, std::__1::vector<_CellLayoutDesc, std::__1::allocator<_CellLayoutDesc> > >, std::__1::__map_value_compare<long, std::__1::__value_type<long, std::__1::vector<_CellLayoutDesc, std::__1::allocator<_CellLayoutDesc> > >, std::__1::less<long>, true>, std::__1::allocator<std::__1::__value_type<long, std::__1::vector<_CellLayoutDesc, std::__1::allocator<_CellLayoutDesc> > > > > __tree_;
} map<long, std::__1::vector<_CellLayoutDesc, std::__1::allocator<_CellLayoutDesc> >, std::__1::less<long>, std::__1::allocator<std::__1::pair<const long, std::__1::vector<_CellLayoutDesc, std::__1::allocator<_CellLayoutDesc> > > > >;

typedef struct _compressed_pair<unsigned long, std::__1::allocator<std::__1::__hash_node<int, void *> *> > {
	unsigned long long __first_;
} compressed_pair<unsigned long, std::__1::allocator<std::__1::__hash_node<int, void *> *> >;

typedef struct _compressed_pair<unsigned long, std::__1::hash<int> > {
	unsigned long long __first_;
} compressed_pair<unsigned long, std::__1::hash<int> >;

typedef struct _compressed_pair<float, std::__1::equal_to<int> > {
	float __first_;
} compressed_pair<float, std::__1::equal_to<int> >;

typedef struct _hash_node_base<std::__1::__hash_node<int, void *> *> {
	__hash_node<int, void *> __next_;
} hash_node_base<std::__1::__hash_node<int, void *> *>;

typedef struct _compressed_pair<std::__1::__hash_node_base<std::__1::__hash_node<int, void *> *>, std::__1::allocator<std::__1::__hash_node<int, void *> > > {
	hash_node_base<std::__1::__hash_node<int, void *> *> __first_;
} compressed_pair<std::__1::__hash_node_base<std::__1::__hash_node<int, void *> *>, std::__1::allocator<std::__1::__hash_node<int, void *> > >;

typedef struct _bucket_list_deallocator<std::__1::allocator<std::__1::__hash_node<int, void *> *> > {
	compressed_pair<unsigned long, std::__1::allocator<std::__1::__hash_node<int, void *> *> > __data_;
} bucket_list_deallocator<std::__1::allocator<std::__1::__hash_node<int, void *> *> >;

typedef struct _compressed_pair<std::__1::__hash_node<int, void *> **, std::__1::__bucket_list_deallocator<std::__1::allocator<std::__1::__hash_node<int, void *> *> > > {
	__hash_node<int, void *> __first_;
	bucket_list_deallocator<std::__1::allocator<std::__1::__hash_node<int, void *> *> > __second_;
} compressed_pair<std::__1::__hash_node<int, void *> **, std::__1::__bucket_list_deallocator<std::__1::allocator<std::__1::__hash_node<int, void *> *> > >;

typedef struct unique_ptr<std::__1::__hash_node<int, void *> *[], std::__1::__bucket_list_deallocator<std::__1::allocator<std::__1::__hash_node<int, void *> *> > > {
	compressed_pair<std::__1::__hash_node<int, void *> **, std::__1::__bucket_list_deallocator<std::__1::allocator<std::__1::__hash_node<int, void *> *> > > __ptr_;
} unique_ptr<std::__1::__hash_node<int, void *> *[], std::__1::__bucket_list_deallocator<std::__1::allocator<std::__1::__hash_node<int, void *> *> > >;

typedef struct _hash_table<int, std::__1::hash<int>, std::__1::equal_to<int>, std::__1::allocator<int> > {
	unique_ptr<std::__1::__hash_node<int, void *> *[], std::__1::__bucket_list_deallocator<std::__1::allocator<std::__1::__hash_node<int, void *> *> > > __bucket_list_;
	compressed_pair<std::__1::__hash_node_base<std::__1::__hash_node<int, void *> *>, std::__1::allocator<std::__1::__hash_node<int, void *> > > __p1_;
	compressed_pair<unsigned long, std::__1::hash<int> > __p2_;
	compressed_pair<float, std::__1::equal_to<int> > __p3_;
} hash_table<int, std::__1::hash<int>, std::__1::equal_to<int>, std::__1::allocator<int> >;

typedef struct unordered_set<int, std::__1::hash<int>, std::__1::equal_to<int>, std::__1::allocator<int> > {
	hash_table<int, std::__1::hash<int>, std::__1::equal_to<int>, std::__1::allocator<int> > __table_;
} unordered_set<int, std::__1::hash<int>, std::__1::equal_to<int>, std::__1::allocator<int> >;

typedef struct SRLayoutAttributes {
	CGRect frame;
	unsigned long long index;
	CGAffineTransform transform;
	CATransform3D transform3D;
	BOOL hidden;
	double alpha;
	long long zIndex;
} SRLayoutAttributes;

typedef struct _compressed_pair<unsigned long, std::__1::allocator<std::__1::__hash_node<std::__1::__hash_value_type<long, SRFHLevelView *>, void *> *> > {
	unsigned long long __first_;
} compressed_pair<unsigned long, std::__1::allocator<std::__1::__hash_node<std::__1::__hash_value_type<long, SRFHLevelView *>, void *> *> >;

typedef struct _compressed_pair<unsigned long, std::__1::__unordered_map_hasher<long, std::__1::__hash_value_type<long, SRFHLevelView *>, std::__1::hash<long>, true> > {
	unsigned long long __first_;
} compressed_pair<unsigned long, std::__1::__unordered_map_hasher<long, std::__1::__hash_value_type<long, SRFHLevelView *>, std::__1::hash<long>, true> >;

typedef struct _compressed_pair<float, std::__1::__unordered_map_equal<long, std::__1::__hash_value_type<long, SRFHLevelView *>, std::__1::equal_to<long>, true> > {
	float __first_;
} compressed_pair<float, std::__1::__unordered_map_equal<long, std::__1::__hash_value_type<long, SRFHLevelView *>, std::__1::equal_to<long>, true> >;

typedef struct _hash_node_base<std::__1::__hash_node<std::__1::__hash_value_type<long, SRFHLevelView *>, void *> *> {
	__hash_node<std::__1::__hash_value_type<long, SRFHLevelView *>, void *> __next_;
} hash_node_base<std::__1::__hash_node<std::__1::__hash_value_type<long, SRFHLevelView *>, void *> *>;

typedef struct _compressed_pair<std::__1::__hash_node_base<std::__1::__hash_node<std::__1::__hash_value_type<long, SRFHLevelView *>, void *> *>, std::__1::allocator<std::__1::__hash_node<std::__1::__hash_value_type<long, SRFHLevelView *>, void *> > > {
	hash_node_base<std::__1::__hash_node<std::__1::__hash_value_type<long, SRFHLevelView *>, void *> *> __first_;
} compressed_pair<std::__1::__hash_node_base<std::__1::__hash_node<std::__1::__hash_value_type<long, SRFHLevelView *>, void *> *>, std::__1::allocator<std::__1::__hash_node<std::__1::__hash_value_type<long, SRFHLevelView *>, void *> > >;

typedef struct _bucket_list_deallocator<std::__1::allocator<std::__1::__hash_node<std::__1::__hash_value_type<long, SRFHLevelView *>, void *> *> > {
	compressed_pair<unsigned long, std::__1::allocator<std::__1::__hash_node<std::__1::__hash_value_type<long, SRFHLevelView *>, void *> *> > __data_;
} bucket_list_deallocator<std::__1::allocator<std::__1::__hash_node<std::__1::__hash_value_type<long, SRFHLevelView *>, void *> *> >;

typedef struct _compressed_pair<std::__1::__hash_node<std::__1::__hash_value_type<long, SRFHLevelView *>, void *> **, std::__1::__bucket_list_deallocator<std::__1::allocator<std::__1::__hash_node<std::__1::__hash_value_type<long, SRFHLevelView *>, void *> *> > > {
	__hash_node<std::__1::__hash_value_type<long, SRFHLevelView *>, void *> __first_;
	bucket_list_deallocator<std::__1::allocator<std::__1::__hash_node<std::__1::__hash_value_type<long, SRFHLevelView *>, void *> *> > __second_;
} compressed_pair<std::__1::__hash_node<std::__1::__hash_value_type<long, SRFHLevelView *>, void *> **, std::__1::__bucket_list_deallocator<std::__1::allocator<std::__1::__hash_node<std::__1::__hash_value_type<long, SRFHLevelView *>, void *> *> > >;

typedef struct unique_ptr<std::__1::__hash_node<std::__1::__hash_value_type<long, SRFHLevelView *>, void *> *[], std::__1::__bucket_list_deallocator<std::__1::allocator<std::__1::__hash_node<std::__1::__hash_value_type<long, SRFHLevelView *>, void *> *> > > {
	compressed_pair<std::__1::__hash_node<std::__1::__hash_value_type<long, SRFHLevelView *>, void *> **, std::__1::__bucket_list_deallocator<std::__1::allocator<std::__1::__hash_node<std::__1::__hash_value_type<long, SRFHLevelView *>, void *> *> > > __ptr_;
} unique_ptr<std::__1::__hash_node<std::__1::__hash_value_type<long, SRFHLevelView *>, void *> *[], std::__1::__bucket_list_deallocator<std::__1::allocator<std::__1::__hash_node<std::__1::__hash_value_type<long, SRFHLevelView *>, void *> *> > >;

typedef struct _hash_table<std::__1::__hash_value_type<long, SRFHLevelView *>, std::__1::__unordered_map_hasher<long, std::__1::__hash_value_type<long, SRFHLevelView *>, std::__1::hash<long>, true>, std::__1::__unordered_map_equal<long, std::__1::__hash_value_type<long, SRFHLevelView *>, std::__1::equal_to<long>, true>, std::__1::allocator<std::__1::__hash_value_type<long, SRFHLevelView *> > > {
	unique_ptr<std::__1::__hash_node<std::__1::__hash_value_type<long, SRFHLevelView *>, void *> *[], std::__1::__bucket_list_deallocator<std::__1::allocator<std::__1::__hash_node<std::__1::__hash_value_type<long, SRFHLevelView *>, void *> *> > > __bucket_list_;
	compressed_pair<std::__1::__hash_node_base<std::__1::__hash_node<std::__1::__hash_value_type<long, SRFHLevelView *>, void *> *>, std::__1::allocator<std::__1::__hash_node<std::__1::__hash_value_type<long, SRFHLevelView *>, void *> > > __p1_;
	compressed_pair<unsigned long, std::__1::__unordered_map_hasher<long, std::__1::__hash_value_type<long, SRFHLevelView *>, std::__1::hash<long>, true> > __p2_;
	compressed_pair<float, std::__1::__unordered_map_equal<long, std::__1::__hash_value_type<long, SRFHLevelView *>, std::__1::equal_to<long>, true> > __p3_;
} hash_table<std::__1::__hash_value_type<long, SRFHLevelView *>, std::__1::__unordered_map_hasher<long, std::__1::__hash_value_type<long, SRFHLevelView *>, std::__1::hash<long>, true>, std::__1::__unordered_map_equal<long, std::__1::__hash_value_type<long, SRFHLevelView *>, std::__1::equal_to<long>, true>, std::__1::allocator<std::__1::__hash_value_type<long, SRFHLevelView *> > >;

typedef struct unordered_map<long, SRFHLevelView *, std::__1::hash<long>, std::__1::equal_to<long>, std::__1::allocator<std::__1::pair<const long, SRFHLevelView *> > > {
	hash_table<std::__1::__hash_value_type<long, SRFHLevelView *>, std::__1::__unordered_map_hasher<long, std::__1::__hash_value_type<long, SRFHLevelView *>, std::__1::hash<long>, true>, std::__1::__unordered_map_equal<long, std::__1::__hash_value_type<long, SRFHLevelView *>, std::__1::equal_to<long>, true>, std::__1::allocator<std::__1::__hash_value_type<long, SRFHLevelView *> > > __table_;
} unordered_map<long, SRFHLevelView *, std::__1::hash<long>, std::__1::equal_to<long>, std::__1::allocator<std::__1::pair<const long, SRFHLevelView *> > >;

typedef struct _compressed_pair<unsigned long, std::__1::allocator<std::__1::__hash_node<std::__1::__hash_value_type<std::__1::tuple<std::__1::basic_string<char>, long>, std::__1::vector<SRFragmentCell *, std::__1::allocator<SRFragmentCell *> > >, void *> *> > {
	unsigned long long __first_;
} compressed_pair<unsigned long, std::__1::allocator<std::__1::__hash_node<std::__1::__hash_value_type<std::__1::tuple<std::__1::basic_string<char>, long>, std::__1::vector<SRFragmentCell *, std::__1::allocator<SRFragmentCell *> > >, void *> *> >;

typedef struct _compressed_pair<unsigned long, std::__1::__unordered_map_hasher<std::__1::tuple<std::__1::basic_string<char>, long>, std::__1::__hash_value_type<std::__1::tuple<std::__1::basic_string<char>, long>, std::__1::vector<SRFragmentCell *, std::__1::allocator<SRFragmentCell *> > >, Fragment::string_int_hash, true> > {
	unsigned long long __first_;
} compressed_pair<unsigned long, std::__1::__unordered_map_hasher<std::__1::tuple<std::__1::basic_string<char>, long>, std::__1::__hash_value_type<std::__1::tuple<std::__1::basic_string<char>, long>, std::__1::vector<SRFragmentCell *, std::__1::allocator<SRFragmentCell *> > >, Fragment::string_int_hash, true> >;

typedef struct _compressed_pair<float, std::__1::__unordered_map_equal<std::__1::tuple<std::__1::basic_string<char>, long>, std::__1::__hash_value_type<std::__1::tuple<std::__1::basic_string<char>, long>, std::__1::vector<SRFragmentCell *, std::__1::allocator<SRFragmentCell *> > >, std::__1::equal_to<std::__1::tuple<std::__1::basic_string<char>, long> >, true> > {
	float __first_;
} compressed_pair<float, std::__1::__unordered_map_equal<std::__1::tuple<std::__1::basic_string<char>, long>, std::__1::__hash_value_type<std::__1::tuple<std::__1::basic_string<char>, long>, std::__1::vector<SRFragmentCell *, std::__1::allocator<SRFragmentCell *> > >, std::__1::equal_to<std::__1::tuple<std::__1::basic_string<char>, long> >, true> >;

typedef struct _hash_node_base<std::__1::__hash_node<std::__1::__hash_value_type<std::__1::tuple<std::__1::basic_string<char>, long>, std::__1::vector<SRFragmentCell *, std::__1::allocator<SRFragmentCell *> > >, void *> *> {
	__hash_node<std::__1::__hash_value_type<std::__1::tuple<std::__1::basic_string<char>, long>, std::__1::vector<SRFragmentCell *, std::__1::allocator<SRFragmentCell *> > >, void *> __next_;
} hash_node_base<std::__1::__hash_node<std::__1::__hash_value_type<std::__1::tuple<std::__1::basic_string<char>, long>, std::__1::vector<SRFragmentCell *, std::__1::allocator<SRFragmentCell *> > >, void *> *>;

typedef struct _compressed_pair<std::__1::__hash_node_base<std::__1::__hash_node<std::__1::__hash_value_type<std::__1::tuple<std::__1::basic_string<char>, long>, std::__1::vector<SRFragmentCell *, std::__1::allocator<SRFragmentCell *> > >, void *> *>, std::__1::allocator<std::__1::__hash_node<std::__1::__hash_value_type<std::__1::tuple<std::__1::basic_string<char>, long>, std::__1::vector<SRFragmentCell *, std::__1::allocator<SRFragmentCell *> > >, void *> > > {
	hash_node_base<std::__1::__hash_node<std::__1::__hash_value_type<std::__1::tuple<std::__1::basic_string<char>, long>, std::__1::vector<SRFragmentCell *, std::__1::allocator<SRFragmentCell *> > >, void *> *> __first_;
} compressed_pair<std::__1::__hash_node_base<std::__1::__hash_node<std::__1::__hash_value_type<std::__1::tuple<std::__1::basic_string<char>, long>, std::__1::vector<SRFragmentCell *, std::__1::allocator<SRFragmentCell *> > >, void *> *>, std::__1::allocator<std::__1::__hash_node<std::__1::__hash_value_type<std::__1::tuple<std::__1::basic_string<char>, long>, std::__1::vector<SRFragmentCell *, std::__1::allocator<SRFragmentCell *> > >, void *> > >;

typedef struct _bucket_list_deallocator<std::__1::allocator<std::__1::__hash_node<std::__1::__hash_value_type<std::__1::tuple<std::__1::basic_string<char>, long>, std::__1::vector<SRFragmentCell *, std::__1::allocator<SRFragmentCell *> > >, void *> *> > {
	compressed_pair<unsigned long, std::__1::allocator<std::__1::__hash_node<std::__1::__hash_value_type<std::__1::tuple<std::__1::basic_string<char>, long>, std::__1::vector<SRFragmentCell *, std::__1::allocator<SRFragmentCell *> > >, void *> *> > __data_;
} bucket_list_deallocator<std::__1::allocator<std::__1::__hash_node<std::__1::__hash_value_type<std::__1::tuple<std::__1::basic_string<char>, long>, std::__1::vector<SRFragmentCell *, std::__1::allocator<SRFragmentCell *> > >, void *> *> >;

typedef struct _compressed_pair<std::__1::__hash_node<std::__1::__hash_value_type<std::__1::tuple<std::__1::basic_string<char>, long>, std::__1::vector<SRFragmentCell *, std::__1::allocator<SRFragmentCell *> > >, void *> **, std::__1::__bucket_list_deallocator<std::__1::allocator<std::__1::__hash_node<std::__1::__hash_value_type<std::__1::tuple<std::__1::basic_string<char>, long>, std::__1::vector<SRFragmentCell *, std::__1::allocator<SRFragmentCell *> > >, void *> *> > > {
	__hash_node<std::__1::__hash_value_type<std::__1::tuple<std::__1::basic_string<char>, long>, std::__1::vector<SRFragmentCell *, std::__1::allocator<SRFragmentCell *> > >, void *> __first_;
	bucket_list_deallocator<std::__1::allocator<std::__1::__hash_node<std::__1::__hash_value_type<std::__1::tuple<std::__1::basic_string<char>, long>, std::__1::vector<SRFragmentCell *, std::__1::allocator<SRFragmentCell *> > >, void *> *> > __second_;
} compressed_pair<std::__1::__hash_node<std::__1::__hash_value_type<std::__1::tuple<std::__1::basic_string<char>, long>, std::__1::vector<SRFragmentCell *, std::__1::allocator<SRFragmentCell *> > >, void *> **, std::__1::__bucket_list_deallocator<std::__1::allocator<std::__1::__hash_node<std::__1::__hash_value_type<std::__1::tuple<std::__1::basic_string<char>, long>, std::__1::vector<SRFragmentCell *, std::__1::allocator<SRFragmentCell *> > >, void *> *> > >;

typedef struct unique_ptr<std::__1::__hash_node<std::__1::__hash_value_type<std::__1::tuple<std::__1::basic_string<char>, long>, std::__1::vector<SRFragmentCell *, std::__1::allocator<SRFragmentCell *> > >, void *> *[], std::__1::__bucket_list_deallocator<std::__1::allocator<std::__1::__hash_node<std::__1::__hash_value_type<std::__1::tuple<std::__1::basic_string<char>, long>, std::__1::vector<SRFragmentCell *, std::__1::allocator<SRFragmentCell *> > >, void *> *> > > {
	compressed_pair<std::__1::__hash_node<std::__1::__hash_value_type<std::__1::tuple<std::__1::basic_string<char>, long>, std::__1::vector<SRFragmentCell *, std::__1::allocator<SRFragmentCell *> > >, void *> **, std::__1::__bucket_list_deallocator<std::__1::allocator<std::__1::__hash_node<std::__1::__hash_value_type<std::__1::tuple<std::__1::basic_string<char>, long>, std::__1::vector<SRFragmentCell *, std::__1::allocator<SRFragmentCell *> > >, void *> *> > > __ptr_;
} unique_ptr<std::__1::__hash_node<std::__1::__hash_value_type<std::__1::tuple<std::__1::basic_string<char>, long>, std::__1::vector<SRFragmentCell *, std::__1::allocator<SRFragmentCell *> > >, void *> *[], std::__1::__bucket_list_deallocator<std::__1::allocator<std::__1::__hash_node<std::__1::__hash_value_type<std::__1::tuple<std::__1::basic_string<char>, long>, std::__1::vector<SRFragmentCell *, std::__1::allocator<SRFragmentCell *> > >, void *> *> > >;

typedef struct _hash_table<std::__1::__hash_value_type<std::__1::tuple<std::__1::basic_string<char>, long>, std::__1::vector<SRFragmentCell *, std::__1::allocator<SRFragmentCell *> > >, std::__1::__unordered_map_hasher<std::__1::tuple<std::__1::basic_string<char>, long>, std::__1::__hash_value_type<std::__1::tuple<std::__1::basic_string<char>, long>, std::__1::vector<SRFragmentCell *, std::__1::allocator<SRFragmentCell *> > >, Fragment::string_int_hash, true>, std::__1::__unordered_map_equal<std::__1::tuple<std::__1::basic_string<char>, long>, std::__1::__hash_value_type<std::__1::tuple<std::__1::basic_string<char>, long>, std::__1::vector<SRFragmentCell *, std::__1::allocator<SRFragmentCell *> > >, std::__1::equal_to<std::__1::tuple<std::__1::basic_string<char>, long> >, true>, std::__1::allocator<std::__1::__hash_value_type<std::__1::tuple<std::__1::basic_string<char>, long>, std::__1::vector<SRFragmentCell *, std::__1::allocator<SRFragmentCell *> > > > > {
	unique_ptr<std::__1::__hash_node<std::__1::__hash_value_type<std::__1::tuple<std::__1::basic_string<char>, long>, std::__1::vector<SRFragmentCell *, std::__1::allocator<SRFragmentCell *> > >, void *> *[], std::__1::__bucket_list_deallocator<std::__1::allocator<std::__1::__hash_node<std::__1::__hash_value_type<std::__1::tuple<std::__1::basic_string<char>, long>, std::__1::vector<SRFragmentCell *, std::__1::allocator<SRFragmentCell *> > >, void *> *> > > __bucket_list_;
	compressed_pair<std::__1::__hash_node_base<std::__1::__hash_node<std::__1::__hash_value_type<std::__1::tuple<std::__1::basic_string<char>, long>, std::__1::vector<SRFragmentCell *, std::__1::allocator<SRFragmentCell *> > >, void *> *>, std::__1::allocator<std::__1::__hash_node<std::__1::__hash_value_type<std::__1::tuple<std::__1::basic_string<char>, long>, std::__1::vector<SRFragmentCell *, std::__1::allocator<SRFragmentCell *> > >, void *> > > __p1_;
	compressed_pair<unsigned long, std::__1::__unordered_map_hasher<std::__1::tuple<std::__1::basic_string<char>, long>, std::__1::__hash_value_type<std::__1::tuple<std::__1::basic_string<char>, long>, std::__1::vector<SRFragmentCell *, std::__1::allocator<SRFragmentCell *> > >, Fragment::string_int_hash, true> > __p2_;
	compressed_pair<float, std::__1::__unordered_map_equal<std::__1::tuple<std::__1::basic_string<char>, long>, std::__1::__hash_value_type<std::__1::tuple<std::__1::basic_string<char>, long>, std::__1::vector<SRFragmentCell *, std::__1::allocator<SRFragmentCell *> > >, std::__1::equal_to<std::__1::tuple<std::__1::basic_string<char>, long> >, true> > __p3_;
} hash_table<std::__1::__hash_value_type<std::__1::tuple<std::__1::basic_string<char>, long>, std::__1::vector<SRFragmentCell *, std::__1::allocator<SRFragmentCell *> > >, std::__1::__unordered_map_hasher<std::__1::tuple<std::__1::basic_string<char>, long>, std::__1::__hash_value_type<std::__1::tuple<std::__1::basic_string<char>, long>, std::__1::vector<SRFragmentCell *, std::__1::allocator<SRFragmentCell *> > >, Fragment::string_int_hash, true>, std::__1::__unordered_map_equal<std::__1::tuple<std::__1::basic_string<char>, long>, std::__1::__hash_value_type<std::__1::tuple<std::__1::basic_string<char>, long>, std::__1::vector<SRFragmentCell *, std::__1::allocator<SRFragmentCell *> > >, std::__1::equal_to<std::__1::tuple<std::__1::basic_string<char>, long> >, true>, std::__1::allocator<std::__1::__hash_value_type<std::__1::tuple<std::__1::basic_string<char>, long>, std::__1::vector<SRFragmentCell *, std::__1::allocator<SRFragmentCell *> > > > >;

typedef struct unordered_map<std::__1::tuple<std::__1::basic_string<char>, long>, std::__1::vector<SRFragmentCell *, std::__1::allocator<SRFragmentCell *> >, Fragment::string_int_hash, std::__1::equal_to<std::__1::tuple<std::__1::basic_string<char>, long> >, std::__1::allocator<std::__1::pair<const std::__1::tuple<std::__1::basic_string<char>, long>, std::__1::vector<SRFragmentCell *, std::__1::allocator<SRFragmentCell *> > > > > {
	hash_table<std::__1::__hash_value_type<std::__1::tuple<std::__1::basic_string<char>, long>, std::__1::vector<SRFragmentCell *, std::__1::allocator<SRFragmentCell *> > >, std::__1::__unordered_map_hasher<std::__1::tuple<std::__1::basic_string<char>, long>, std::__1::__hash_value_type<std::__1::tuple<std::__1::basic_string<char>, long>, std::__1::vector<SRFragmentCell *, std::__1::allocator<SRFragmentCell *> > >, Fragment::string_int_hash, true>, std::__1::__unordered_map_equal<std::__1::tuple<std::__1::basic_string<char>, long>, std::__1::__hash_value_type<std::__1::tuple<std::__1::basic_string<char>, long>, std::__1::vector<SRFragmentCell *, std::__1::allocator<SRFragmentCell *> > >, std::__1::equal_to<std::__1::tuple<std::__1::basic_string<char>, long> >, true>, std::__1::allocator<std::__1::__hash_value_type<std::__1::tuple<std::__1::basic_string<char>, long>, std::__1::vector<SRFragmentCell *, std::__1::allocator<SRFragmentCell *> > > > > __table_;
} unordered_map<std::__1::tuple<std::__1::basic_string<char>, long>, std::__1::vector<SRFragmentCell *, std::__1::allocator<SRFragmentCell *> >, Fragment::string_int_hash, std::__1::equal_to<std::__1::tuple<std::__1::basic_string<char>, long> >, std::__1::allocator<std::__1::pair<const std::__1::tuple<std::__1::basic_string<char>, long>, std::__1::vector<SRFragmentCell *, std::__1::allocator<SRFragmentCell *> > > > >;

typedef struct _compressed_pair<unsigned long, std::__1::allocator<std::__1::__hash_node<std::__1::__hash_value_type<long, SRFragmentCell *>, void *> *> > {
	unsigned long long __first_;
} compressed_pair<unsigned long, std::__1::allocator<std::__1::__hash_node<std::__1::__hash_value_type<long, SRFragmentCell *>, void *> *> >;

typedef struct _compressed_pair<unsigned long, std::__1::__unordered_map_hasher<long, std::__1::__hash_value_type<long, SRFragmentCell *>, std::__1::hash<long>, true> > {
	unsigned long long __first_;
} compressed_pair<unsigned long, std::__1::__unordered_map_hasher<long, std::__1::__hash_value_type<long, SRFragmentCell *>, std::__1::hash<long>, true> >;

typedef struct _compressed_pair<float, std::__1::__unordered_map_equal<long, std::__1::__hash_value_type<long, SRFragmentCell *>, std::__1::equal_to<long>, true> > {
	float __first_;
} compressed_pair<float, std::__1::__unordered_map_equal<long, std::__1::__hash_value_type<long, SRFragmentCell *>, std::__1::equal_to<long>, true> >;

typedef struct _hash_node_base<std::__1::__hash_node<std::__1::__hash_value_type<long, SRFragmentCell *>, void *> *> {
	__hash_node<std::__1::__hash_value_type<long, SRFragmentCell *>, void *> __next_;
} hash_node_base<std::__1::__hash_node<std::__1::__hash_value_type<long, SRFragmentCell *>, void *> *>;

typedef struct _compressed_pair<std::__1::__hash_node_base<std::__1::__hash_node<std::__1::__hash_value_type<long, SRFragmentCell *>, void *> *>, std::__1::allocator<std::__1::__hash_node<std::__1::__hash_value_type<long, SRFragmentCell *>, void *> > > {
	hash_node_base<std::__1::__hash_node<std::__1::__hash_value_type<long, SRFragmentCell *>, void *> *> __first_;
} compressed_pair<std::__1::__hash_node_base<std::__1::__hash_node<std::__1::__hash_value_type<long, SRFragmentCell *>, void *> *>, std::__1::allocator<std::__1::__hash_node<std::__1::__hash_value_type<long, SRFragmentCell *>, void *> > >;

typedef struct _bucket_list_deallocator<std::__1::allocator<std::__1::__hash_node<std::__1::__hash_value_type<long, SRFragmentCell *>, void *> *> > {
	compressed_pair<unsigned long, std::__1::allocator<std::__1::__hash_node<std::__1::__hash_value_type<long, SRFragmentCell *>, void *> *> > __data_;
} bucket_list_deallocator<std::__1::allocator<std::__1::__hash_node<std::__1::__hash_value_type<long, SRFragmentCell *>, void *> *> >;

typedef struct _compressed_pair<std::__1::__hash_node<std::__1::__hash_value_type<long, SRFragmentCell *>, void *> **, std::__1::__bucket_list_deallocator<std::__1::allocator<std::__1::__hash_node<std::__1::__hash_value_type<long, SRFragmentCell *>, void *> *> > > {
	__hash_node<std::__1::__hash_value_type<long, SRFragmentCell *>, void *> __first_;
	bucket_list_deallocator<std::__1::allocator<std::__1::__hash_node<std::__1::__hash_value_type<long, SRFragmentCell *>, void *> *> > __second_;
} compressed_pair<std::__1::__hash_node<std::__1::__hash_value_type<long, SRFragmentCell *>, void *> **, std::__1::__bucket_list_deallocator<std::__1::allocator<std::__1::__hash_node<std::__1::__hash_value_type<long, SRFragmentCell *>, void *> *> > >;

typedef struct unique_ptr<std::__1::__hash_node<std::__1::__hash_value_type<long, SRFragmentCell *>, void *> *[], std::__1::__bucket_list_deallocator<std::__1::allocator<std::__1::__hash_node<std::__1::__hash_value_type<long, SRFragmentCell *>, void *> *> > > {
	compressed_pair<std::__1::__hash_node<std::__1::__hash_value_type<long, SRFragmentCell *>, void *> **, std::__1::__bucket_list_deallocator<std::__1::allocator<std::__1::__hash_node<std::__1::__hash_value_type<long, SRFragmentCell *>, void *> *> > > __ptr_;
} unique_ptr<std::__1::__hash_node<std::__1::__hash_value_type<long, SRFragmentCell *>, void *> *[], std::__1::__bucket_list_deallocator<std::__1::allocator<std::__1::__hash_node<std::__1::__hash_value_type<long, SRFragmentCell *>, void *> *> > >;

typedef struct _hash_table<std::__1::__hash_value_type<long, SRFragmentCell *>, std::__1::__unordered_map_hasher<long, std::__1::__hash_value_type<long, SRFragmentCell *>, std::__1::hash<long>, true>, std::__1::__unordered_map_equal<long, std::__1::__hash_value_type<long, SRFragmentCell *>, std::__1::equal_to<long>, true>, std::__1::allocator<std::__1::__hash_value_type<long, SRFragmentCell *> > > {
	unique_ptr<std::__1::__hash_node<std::__1::__hash_value_type<long, SRFragmentCell *>, void *> *[], std::__1::__bucket_list_deallocator<std::__1::allocator<std::__1::__hash_node<std::__1::__hash_value_type<long, SRFragmentCell *>, void *> *> > > __bucket_list_;
	compressed_pair<std::__1::__hash_node_base<std::__1::__hash_node<std::__1::__hash_value_type<long, SRFragmentCell *>, void *> *>, std::__1::allocator<std::__1::__hash_node<std::__1::__hash_value_type<long, SRFragmentCell *>, void *> > > __p1_;
	compressed_pair<unsigned long, std::__1::__unordered_map_hasher<long, std::__1::__hash_value_type<long, SRFragmentCell *>, std::__1::hash<long>, true> > __p2_;
	compressed_pair<float, std::__1::__unordered_map_equal<long, std::__1::__hash_value_type<long, SRFragmentCell *>, std::__1::equal_to<long>, true> > __p3_;
} hash_table<std::__1::__hash_value_type<long, SRFragmentCell *>, std::__1::__unordered_map_hasher<long, std::__1::__hash_value_type<long, SRFragmentCell *>, std::__1::hash<long>, true>, std::__1::__unordered_map_equal<long, std::__1::__hash_value_type<long, SRFragmentCell *>, std::__1::equal_to<long>, true>, std::__1::allocator<std::__1::__hash_value_type<long, SRFragmentCell *> > >;

typedef struct unordered_map<long, SRFragmentCell *, std::__1::hash<long>, std::__1::equal_to<long>, std::__1::allocator<std::__1::pair<const long, SRFragmentCell *> > > {
	hash_table<std::__1::__hash_value_type<long, SRFragmentCell *>, std::__1::__unordered_map_hasher<long, std::__1::__hash_value_type<long, SRFragmentCell *>, std::__1::hash<long>, true>, std::__1::__unordered_map_equal<long, std::__1::__hash_value_type<long, SRFragmentCell *>, std::__1::equal_to<long>, true>, std::__1::allocator<std::__1::__hash_value_type<long, SRFragmentCell *> > > __table_;
} unordered_map<long, SRFragmentCell *, std::__1::hash<long>, std::__1::equal_to<long>, std::__1::allocator<std::__1::pair<const long, SRFragmentCell *> > >;

typedef struct _compressed_pair<unsigned long, std::__1::allocator<std::__1::__hash_node<long, void *> *> > {
	unsigned long long __first_;
} compressed_pair<unsigned long, std::__1::allocator<std::__1::__hash_node<long, void *> *> >;

typedef struct _compressed_pair<unsigned long, std::__1::hash<long> > {
	unsigned long long __first_;
} compressed_pair<unsigned long, std::__1::hash<long> >;

typedef struct _compressed_pair<float, std::__1::equal_to<long> > {
	float __first_;
} compressed_pair<float, std::__1::equal_to<long> >;

typedef struct _hash_node_base<std::__1::__hash_node<long, void *> *> {
	__hash_node<long, void *> __next_;
} hash_node_base<std::__1::__hash_node<long, void *> *>;

typedef struct _compressed_pair<std::__1::__hash_node_base<std::__1::__hash_node<long, void *> *>, std::__1::allocator<std::__1::__hash_node<long, void *> > > {
	hash_node_base<std::__1::__hash_node<long, void *> *> __first_;
} compressed_pair<std::__1::__hash_node_base<std::__1::__hash_node<long, void *> *>, std::__1::allocator<std::__1::__hash_node<long, void *> > >;

typedef struct _bucket_list_deallocator<std::__1::allocator<std::__1::__hash_node<long, void *> *> > {
	compressed_pair<unsigned long, std::__1::allocator<std::__1::__hash_node<long, void *> *> > __data_;
} bucket_list_deallocator<std::__1::allocator<std::__1::__hash_node<long, void *> *> >;

typedef struct _compressed_pair<std::__1::__hash_node<long, void *> **, std::__1::__bucket_list_deallocator<std::__1::allocator<std::__1::__hash_node<long, void *> *> > > {
	__hash_node<long, void *> __first_;
	bucket_list_deallocator<std::__1::allocator<std::__1::__hash_node<long, void *> *> > __second_;
} compressed_pair<std::__1::__hash_node<long, void *> **, std::__1::__bucket_list_deallocator<std::__1::allocator<std::__1::__hash_node<long, void *> *> > >;

typedef struct unique_ptr<std::__1::__hash_node<long, void *> *[], std::__1::__bucket_list_deallocator<std::__1::allocator<std::__1::__hash_node<long, void *> *> > > {
	compressed_pair<std::__1::__hash_node<long, void *> **, std::__1::__bucket_list_deallocator<std::__1::allocator<std::__1::__hash_node<long, void *> *> > > __ptr_;
} unique_ptr<std::__1::__hash_node<long, void *> *[], std::__1::__bucket_list_deallocator<std::__1::allocator<std::__1::__hash_node<long, void *> *> > >;

typedef struct _hash_table<long, std::__1::hash<long>, std::__1::equal_to<long>, std::__1::allocator<long> > {
	unique_ptr<std::__1::__hash_node<long, void *> *[], std::__1::__bucket_list_deallocator<std::__1::allocator<std::__1::__hash_node<long, void *> *> > > __bucket_list_;
	compressed_pair<std::__1::__hash_node_base<std::__1::__hash_node<long, void *> *>, std::__1::allocator<std::__1::__hash_node<long, void *> > > __p1_;
	compressed_pair<unsigned long, std::__1::hash<long> > __p2_;
	compressed_pair<float, std::__1::equal_to<long> > __p3_;
} hash_table<long, std::__1::hash<long>, std::__1::equal_to<long>, std::__1::allocator<long> >;

typedef struct unordered_set<long, std::__1::hash<long>, std::__1::equal_to<long>, std::__1::allocator<long> > {
	hash_table<long, std::__1::hash<long>, std::__1::equal_to<long>, std::__1::allocator<long> > __table_;
} unordered_set<long, std::__1::hash<long>, std::__1::equal_to<long>, std::__1::allocator<long> >;

typedef struct _compressed_pair<unsigned long, std::__1::allocator<std::__1::__hash_node<std::__1::__hash_value_type<long, long>, void *> *> > {
	unsigned long long __first_;
} compressed_pair<unsigned long, std::__1::allocator<std::__1::__hash_node<std::__1::__hash_value_type<long, long>, void *> *> >;

typedef struct _compressed_pair<unsigned long, std::__1::__unordered_map_hasher<long, std::__1::__hash_value_type<long, long>, std::__1::hash<long>, true> > {
	unsigned long long __first_;
} compressed_pair<unsigned long, std::__1::__unordered_map_hasher<long, std::__1::__hash_value_type<long, long>, std::__1::hash<long>, true> >;

typedef struct _compressed_pair<float, std::__1::__unordered_map_equal<long, std::__1::__hash_value_type<long, long>, std::__1::equal_to<long>, true> > {
	float __first_;
} compressed_pair<float, std::__1::__unordered_map_equal<long, std::__1::__hash_value_type<long, long>, std::__1::equal_to<long>, true> >;

typedef struct _hash_node_base<std::__1::__hash_node<std::__1::__hash_value_type<long, long>, void *> *> {
	__hash_node<std::__1::__hash_value_type<long, long>, void *> __next_;
} hash_node_base<std::__1::__hash_node<std::__1::__hash_value_type<long, long>, void *> *>;

typedef struct _compressed_pair<std::__1::__hash_node_base<std::__1::__hash_node<std::__1::__hash_value_type<long, long>, void *> *>, std::__1::allocator<std::__1::__hash_node<std::__1::__hash_value_type<long, long>, void *> > > {
	hash_node_base<std::__1::__hash_node<std::__1::__hash_value_type<long, long>, void *> *> __first_;
} compressed_pair<std::__1::__hash_node_base<std::__1::__hash_node<std::__1::__hash_value_type<long, long>, void *> *>, std::__1::allocator<std::__1::__hash_node<std::__1::__hash_value_type<long, long>, void *> > >;

typedef struct _bucket_list_deallocator<std::__1::allocator<std::__1::__hash_node<std::__1::__hash_value_type<long, long>, void *> *> > {
	compressed_pair<unsigned long, std::__1::allocator<std::__1::__hash_node<std::__1::__hash_value_type<long, long>, void *> *> > __data_;
} bucket_list_deallocator<std::__1::allocator<std::__1::__hash_node<std::__1::__hash_value_type<long, long>, void *> *> >;

typedef struct _compressed_pair<std::__1::__hash_node<std::__1::__hash_value_type<long, long>, void *> **, std::__1::__bucket_list_deallocator<std::__1::allocator<std::__1::__hash_node<std::__1::__hash_value_type<long, long>, void *> *> > > {
	__hash_node<std::__1::__hash_value_type<long, long>, void *> __first_;
	bucket_list_deallocator<std::__1::allocator<std::__1::__hash_node<std::__1::__hash_value_type<long, long>, void *> *> > __second_;
} compressed_pair<std::__1::__hash_node<std::__1::__hash_value_type<long, long>, void *> **, std::__1::__bucket_list_deallocator<std::__1::allocator<std::__1::__hash_node<std::__1::__hash_value_type<long, long>, void *> *> > >;

typedef struct unique_ptr<std::__1::__hash_node<std::__1::__hash_value_type<long, long>, void *> *[], std::__1::__bucket_list_deallocator<std::__1::allocator<std::__1::__hash_node<std::__1::__hash_value_type<long, long>, void *> *> > > {
	compressed_pair<std::__1::__hash_node<std::__1::__hash_value_type<long, long>, void *> **, std::__1::__bucket_list_deallocator<std::__1::allocator<std::__1::__hash_node<std::__1::__hash_value_type<long, long>, void *> *> > > __ptr_;
} unique_ptr<std::__1::__hash_node<std::__1::__hash_value_type<long, long>, void *> *[], std::__1::__bucket_list_deallocator<std::__1::allocator<std::__1::__hash_node<std::__1::__hash_value_type<long, long>, void *> *> > >;

typedef struct _hash_table<std::__1::__hash_value_type<long, long>, std::__1::__unordered_map_hasher<long, std::__1::__hash_value_type<long, long>, std::__1::hash<long>, true>, std::__1::__unordered_map_equal<long, std::__1::__hash_value_type<long, long>, std::__1::equal_to<long>, true>, std::__1::allocator<std::__1::__hash_value_type<long, long> > > {
	unique_ptr<std::__1::__hash_node<std::__1::__hash_value_type<long, long>, void *> *[], std::__1::__bucket_list_deallocator<std::__1::allocator<std::__1::__hash_node<std::__1::__hash_value_type<long, long>, void *> *> > > __bucket_list_;
	compressed_pair<std::__1::__hash_node_base<std::__1::__hash_node<std::__1::__hash_value_type<long, long>, void *> *>, std::__1::allocator<std::__1::__hash_node<std::__1::__hash_value_type<long, long>, void *> > > __p1_;
	compressed_pair<unsigned long, std::__1::__unordered_map_hasher<long, std::__1::__hash_value_type<long, long>, std::__1::hash<long>, true> > __p2_;
	compressed_pair<float, std::__1::__unordered_map_equal<long, std::__1::__hash_value_type<long, long>, std::__1::equal_to<long>, true> > __p3_;
} hash_table<std::__1::__hash_value_type<long, long>, std::__1::__unordered_map_hasher<long, std::__1::__hash_value_type<long, long>, std::__1::hash<long>, true>, std::__1::__unordered_map_equal<long, std::__1::__hash_value_type<long, long>, std::__1::equal_to<long>, true>, std::__1::allocator<std::__1::__hash_value_type<long, long> > >;

typedef struct unordered_map<long, long, std::__1::hash<long>, std::__1::equal_to<long>, std::__1::allocator<std::__1::pair<const long, long> > > {
	hash_table<std::__1::__hash_value_type<long, long>, std::__1::__unordered_map_hasher<long, std::__1::__hash_value_type<long, long>, std::__1::hash<long>, true>, std::__1::__unordered_map_equal<long, std::__1::__hash_value_type<long, long>, std::__1::equal_to<long>, true>, std::__1::allocator<std::__1::__hash_value_type<long, long> > > __table_;
} unordered_map<long, long, std::__1::hash<long>, std::__1::equal_to<long>, std::__1::allocator<std::__1::pair<const long, long> > >;

typedef struct OpusMSDecoder* OpusMSDecoderRef;

typedef struct _compressed_pair<short *, std::__1::allocator<short> > {
	short __first_;
} compressed_pair<short *, std::__1::allocator<short> >;

typedef struct vector<short, std::__1::allocator<short> > {
	short __begin_;
	short __end_;
	compressed_pair<short *, std::__1::allocator<short> > __end_cap_;
} vector<short, std::__1::allocator<short> >;

typedef struct SMPTETime {
	short mSubframes;
	short mSubframeDivisor;
	unsigned mCounter;
	unsigned mType;
	unsigned mFlags;
	short mHours;
	short mMinutes;
	short mSeconds;
	short mFrames;
} SMPTETime;

typedef struct AudioQueueBuffer {
	unsigned mAudioDataBytesCapacity;
	void mAudioData;
	unsigned mAudioDataByteSize;
	void mUserData;
	unsigned mPacketDescriptionCapacity;
	AudioStreamPacketDescription mPacketDescriptions;
	unsigned mPacketDescriptionCount;
} AudioQueueBuffer;

typedef struct _compressed_pair<AudioStreamPacketDescription *, std::__1::allocator<AudioStreamPacketDescription> > {
	AudioStreamPacketDescription __first_;
} compressed_pair<AudioStreamPacketDescription *, std::__1::allocator<AudioStreamPacketDescription> >;

typedef struct vector<AudioStreamPacketDescription, std::__1::allocator<AudioStreamPacketDescription> > {
	AudioStreamPacketDescription __begin_;
	AudioStreamPacketDescription __end_;
	compressed_pair<AudioStreamPacketDescription *, std::__1::allocator<AudioStreamPacketDescription> > __end_cap_;
} vector<AudioStreamPacketDescription, std::__1::allocator<AudioStreamPacketDescription> >;

typedef struct AudioTimeStamp {
	double mSampleTime;
	unsigned long long mHostTime;
	double mRateScalar;
	unsigned long long mWordClockTime;
	SMPTETime mSMPTETime;
	unsigned mFlags;
	unsigned mReserved;
} AudioTimeStamp;

typedef struct AQBufferState {
	AudioQueueBuffer buffer;
	AudioTimeStamp timestamp;
	SCD_Struct_FB100 framePts;
	BOOL filled;
	BOOL endOfStream;
	int decodingPacketIndex;
	vector<unsigned char, std::__1::allocator<unsigned char> > data;
	vector<AudioStreamPacketDescription, std::__1::allocator<AudioStreamPacketDescription> > descriptions;
} AQBufferState;

typedef struct shared_ptr<facebook::videostreaming::SimpleVideoRecorder> {
	SimpleVideoRecorder __ptr_;
	__shared_weak_count __cntrl_;
} shared_ptr<facebook::videostreaming::SimpleVideoRecorder>;

typedef struct _compressed_pair<std::__1::shared_ptr<facebook::videostreaming::SimpleVideoRecorder> *, std::__1::allocator<std::__1::shared_ptr<facebook::videostreaming::SimpleVideoRecorder> > > {
	shared_ptr<facebook::videostreaming::SimpleVideoRecorder> __first_;
} compressed_pair<std::__1::shared_ptr<facebook::videostreaming::SimpleVideoRecorder> *, std::__1::allocator<std::__1::shared_ptr<facebook::videostreaming::SimpleVideoRecorder> > >;

typedef struct vector<std::__1::shared_ptr<facebook::videostreaming::SimpleVideoRecorder>, std::__1::allocator<std::__1::shared_ptr<facebook::videostreaming::SimpleVideoRecorder> > > {
	shared_ptr<facebook::videostreaming::SimpleVideoRecorder> __begin_;
	shared_ptr<facebook::videostreaming::SimpleVideoRecorder> __end_;
	compressed_pair<std::__1::shared_ptr<facebook::videostreaming::SimpleVideoRecorder> *, std::__1::allocator<std::__1::shared_ptr<facebook::videostreaming::SimpleVideoRecorder> > > __end_cap_;
} vector<std::__1::shared_ptr<facebook::videostreaming::SimpleVideoRecorder>, std::__1::allocator<std::__1::shared_ptr<facebook::videostreaming::SimpleVideoRecorder> > >;

typedef struct _compressed_pair<FB::Functional::PromiseEither<NSError *, FBManagedFileURL *> *, std::__1::allocator<FB::Functional::PromiseEither<NSError *, FBManagedFileURL *> > > {
	PromiseEither<NSError *, FBManagedFileURL *> __first_;
} compressed_pair<FB::Functional::PromiseEither<NSError *, FBManagedFileURL *> *, std::__1::allocator<FB::Functional::PromiseEither<NSError *, FBManagedFileURL *> > >;

typedef struct vector<FB::Functional::PromiseEither<NSError *, FBManagedFileURL *>, std::__1::allocator<FB::Functional::PromiseEither<NSError *, FBManagedFileURL *> > > {
	PromiseEither<NSError *, FBManagedFileURL *> __begin_;
	PromiseEither<NSError *, FBManagedFileURL *> __end_;
	compressed_pair<FB::Functional::PromiseEither<NSError *, FBManagedFileURL *> *, std::__1::allocator<FB::Functional::PromiseEither<NSError *, FBManagedFileURL *> > > __end_cap_;
} vector<FB::Functional::PromiseEither<NSError *, FBManagedFileURL *>, std::__1::allocator<FB::Functional::PromiseEither<NSError *, FBManagedFileURL *> > >;

typedef struct FBVideoBroadcastSessionLoggingInfo {
	NSString* reason;
	NSError* error;
	BOOL remoteEnded;
} FBVideoBroadcastSessionLoggingInfo;

typedef struct shared_ptr<FB::Functional::PromiseEither<NSError *, NSArray<FBManagedFileURL *> *> > {
	PromiseEither<NSError *, NSArray<FBManagedFileURL *> *> __ptr_;
	__shared_weak_count __cntrl_;
} shared_ptr<FB::Functional::PromiseEither<NSError *, NSArray<FBManagedFileURL *> *> >;

typedef struct shared_ptr<facebook::tigon::TigonService> {
	TigonService __ptr_;
	__shared_weak_count __cntrl_;
} shared_ptr<facebook::tigon::TigonService>;

typedef struct _compressed_pair<facebook::tigon::TigonService *, std::__1::default_delete<facebook::tigon::TigonService> > {
	TigonService __first_;
} compressed_pair<facebook::tigon::TigonService *, std::__1::default_delete<facebook::tigon::TigonService> >;

typedef struct unique_ptr<facebook::tigon::TigonService, std::__1::default_delete<facebook::tigon::TigonService> > {
	compressed_pair<facebook::tigon::TigonService *, std::__1::default_delete<facebook::tigon::TigonService> > __ptr_;
} unique_ptr<facebook::tigon::TigonService, std::__1::default_delete<facebook::tigon::TigonService> >;

typedef struct _compressed_pair<proxygen::httpclient::CertificatePinner *, std::__1::default_delete<proxygen::httpclient::CertificatePinner> > {
	CertificatePinner __first_;
} compressed_pair<proxygen::httpclient::CertificatePinner *, std::__1::default_delete<proxygen::httpclient::CertificatePinner> >;

typedef struct unique_ptr<proxygen::httpclient::CertificatePinner, std::__1::default_delete<proxygen::httpclient::CertificatePinner> > {
	compressed_pair<proxygen::httpclient::CertificatePinner *, std::__1::default_delete<proxygen::httpclient::CertificatePinner> > __ptr_;
} unique_ptr<proxygen::httpclient::CertificatePinner, std::__1::default_delete<proxygen::httpclient::CertificatePinner> >;

typedef struct YGNode* YGNodeRef;

typedef struct _compressed_pair<facebook::xplat::module::CxxModule::Method *, std::__1::default_delete<facebook::xplat::module::CxxModule::Method> > {
	Method __first_;
} compressed_pair<facebook::xplat::module::CxxModule::Method *, std::__1::default_delete<facebook::xplat::module::CxxModule::Method> >;

typedef struct unique_ptr<facebook::xplat::module::CxxModule::Method, std::__1::default_delete<facebook::xplat::module::CxxModule::Method> > {
	compressed_pair<facebook::xplat::module::CxxModule::Method *, std::__1::default_delete<facebook::xplat::module::CxxModule::Method> > __ptr_;
} unique_ptr<facebook::xplat::module::CxxModule::Method, std::__1::default_delete<facebook::xplat::module::CxxModule::Method> >;

typedef struct _compressed_pair<facebook::xplat::module::CxxModule *, std::__1::default_delete<facebook::xplat::module::CxxModule> > {
	CxxModule __first_;
} compressed_pair<facebook::xplat::module::CxxModule *, std::__1::default_delete<facebook::xplat::module::CxxModule> >;

typedef struct unique_ptr<facebook::xplat::module::CxxModule, std::__1::default_delete<facebook::xplat::module::CxxModule> > {
	compressed_pair<facebook::xplat::module::CxxModule *, std::__1::default_delete<facebook::xplat::module::CxxModule> > __ptr_;
} unique_ptr<facebook::xplat::module::CxxModule, std::__1::default_delete<facebook::xplat::module::CxxModule> >;

typedef struct FBMediaTranscodingKitVideoAssetExportParams {
	AVAssetReader* assetReader;
	AVAssetTrack* audioTrack;
	AVAssetTrack* videoTrack;
	AVAssetReaderOutput* audioOutput;
	AVAssetReaderOutput* videoOutput;
	AVAssetWriter* assetWriter;
	AVAssetWriterInput* audioInput;
	AVAssetWriterInput* videoInput;
	AVAssetWriterInputPixelBufferAdaptor* pixelBufferAdaptor;
	NSURL* outputURL;
} FBMediaTranscodingKitVideoAssetExportParams;

typedef struct FBMPSessionConfig {
	BOOL trackPerformance;
} FBMPSessionConfig;

typedef struct _compressed_pair<unsigned long, std::__1::allocator<std::__1::__hash_node<std::__1::__hash_value_type<id, FBMPInternalFilterPerf>, void *> *> > {
	unsigned long long __first_;
} compressed_pair<unsigned long, std::__1::allocator<std::__1::__hash_node<std::__1::__hash_value_type<id, FBMPInternalFilterPerf>, void *> *> >;

typedef struct _compressed_pair<unsigned long, std::__1::__unordered_map_hasher<id, std::__1::__hash_value_type<id, FBMPInternalFilterPerf>, FBMPHashFunctor<NSObject *>, true> > {
	unsigned long long __first_;
} compressed_pair<unsigned long, std::__1::__unordered_map_hasher<id, std::__1::__hash_value_type<id, FBMPInternalFilterPerf>, FBMPHashFunctor<NSObject *>, true> >;

typedef struct _compressed_pair<float, std::__1::__unordered_map_equal<id, std::__1::__hash_value_type<id, FBMPInternalFilterPerf>, std::__1::equal_to<id>, true> > {
	float __first_;
} compressed_pair<float, std::__1::__unordered_map_equal<id, std::__1::__hash_value_type<id, FBMPInternalFilterPerf>, std::__1::equal_to<id>, true> >;

typedef struct _hash_node_base<std::__1::__hash_node<std::__1::__hash_value_type<id, FBMPInternalFilterPerf>, void *> *> {
	__hash_node<std::__1::__hash_value_type<id, FBMPInternalFilterPerf>, void *> __next_;
} hash_node_base<std::__1::__hash_node<std::__1::__hash_value_type<id, FBMPInternalFilterPerf>, void *> *>;

typedef struct _compressed_pair<std::__1::__hash_node_base<std::__1::__hash_node<std::__1::__hash_value_type<id, FBMPInternalFilterPerf>, void *> *>, std::__1::allocator<std::__1::__hash_node<std::__1::__hash_value_type<id, FBMPInternalFilterPerf>, void *> > > {
	hash_node_base<std::__1::__hash_node<std::__1::__hash_value_type<id, FBMPInternalFilterPerf>, void *> *> __first_;
} compressed_pair<std::__1::__hash_node_base<std::__1::__hash_node<std::__1::__hash_value_type<id, FBMPInternalFilterPerf>, void *> *>, std::__1::allocator<std::__1::__hash_node<std::__1::__hash_value_type<id, FBMPInternalFilterPerf>, void *> > >;

typedef struct _bucket_list_deallocator<std::__1::allocator<std::__1::__hash_node<std::__1::__hash_value_type<id, FBMPInternalFilterPerf>, void *> *> > {
	compressed_pair<unsigned long, std::__1::allocator<std::__1::__hash_node<std::__1::__hash_value_type<id, FBMPInternalFilterPerf>, void *> *> > __data_;
} bucket_list_deallocator<std::__1::allocator<std::__1::__hash_node<std::__1::__hash_value_type<id, FBMPInternalFilterPerf>, void *> *> >;

typedef struct _compressed_pair<std::__1::__hash_node<std::__1::__hash_value_type<id, FBMPInternalFilterPerf>, void *> **, std::__1::__bucket_list_deallocator<std::__1::allocator<std::__1::__hash_node<std::__1::__hash_value_type<id, FBMPInternalFilterPerf>, void *> *> > > {
	__hash_node<std::__1::__hash_value_type<id, FBMPInternalFilterPerf>, void *> __first_;
	bucket_list_deallocator<std::__1::allocator<std::__1::__hash_node<std::__1::__hash_value_type<id, FBMPInternalFilterPerf>, void *> *> > __second_;
} compressed_pair<std::__1::__hash_node<std::__1::__hash_value_type<id, FBMPInternalFilterPerf>, void *> **, std::__1::__bucket_list_deallocator<std::__1::allocator<std::__1::__hash_node<std::__1::__hash_value_type<id, FBMPInternalFilterPerf>, void *> *> > >;

typedef struct unique_ptr<std::__1::__hash_node<std::__1::__hash_value_type<id, FBMPInternalFilterPerf>, void *> *[], std::__1::__bucket_list_deallocator<std::__1::allocator<std::__1::__hash_node<std::__1::__hash_value_type<id, FBMPInternalFilterPerf>, void *> *> > > {
	compressed_pair<std::__1::__hash_node<std::__1::__hash_value_type<id, FBMPInternalFilterPerf>, void *> **, std::__1::__bucket_list_deallocator<std::__1::allocator<std::__1::__hash_node<std::__1::__hash_value_type<id, FBMPInternalFilterPerf>, void *> *> > > __ptr_;
} unique_ptr<std::__1::__hash_node<std::__1::__hash_value_type<id, FBMPInternalFilterPerf>, void *> *[], std::__1::__bucket_list_deallocator<std::__1::allocator<std::__1::__hash_node<std::__1::__hash_value_type<id, FBMPInternalFilterPerf>, void *> *> > >;

typedef struct _hash_table<std::__1::__hash_value_type<id, FBMPInternalFilterPerf>, std::__1::__unordered_map_hasher<id, std::__1::__hash_value_type<id, FBMPInternalFilterPerf>, FBMPHashFunctor<NSObject *>, true>, std::__1::__unordered_map_equal<id, std::__1::__hash_value_type<id, FBMPInternalFilterPerf>, std::__1::equal_to<id>, true>, std::__1::allocator<std::__1::__hash_value_type<id, FBMPInternalFilterPerf> > > {
	unique_ptr<std::__1::__hash_node<std::__1::__hash_value_type<id, FBMPInternalFilterPerf>, void *> *[], std::__1::__bucket_list_deallocator<std::__1::allocator<std::__1::__hash_node<std::__1::__hash_value_type<id, FBMPInternalFilterPerf>, void *> *> > > __bucket_list_;
	compressed_pair<std::__1::__hash_node_base<std::__1::__hash_node<std::__1::__hash_value_type<id, FBMPInternalFilterPerf>, void *> *>, std::__1::allocator<std::__1::__hash_node<std::__1::__hash_value_type<id, FBMPInternalFilterPerf>, void *> > > __p1_;
	compressed_pair<unsigned long, std::__1::__unordered_map_hasher<id, std::__1::__hash_value_type<id, FBMPInternalFilterPerf>, FBMPHashFunctor<NSObject *>, true> > __p2_;
	compressed_pair<float, std::__1::__unordered_map_equal<id, std::__1::__hash_value_type<id, FBMPInternalFilterPerf>, std::__1::equal_to<id>, true> > __p3_;
} hash_table<std::__1::__hash_value_type<id, FBMPInternalFilterPerf>, std::__1::__unordered_map_hasher<id, std::__1::__hash_value_type<id, FBMPInternalFilterPerf>, FBMPHashFunctor<NSObject *>, true>, std::__1::__unordered_map_equal<id, std::__1::__hash_value_type<id, FBMPInternalFilterPerf>, std::__1::equal_to<id>, true>, std::__1::allocator<std::__1::__hash_value_type<id, FBMPInternalFilterPerf> > >;

typedef struct unordered_map<id, FBMPInternalFilterPerf, FBMPHashFunctor<NSObject *>, std::__1::equal_to<id>, std::__1::allocator<std::__1::pair<const id, FBMPInternalFilterPerf> > > {
	hash_table<std::__1::__hash_value_type<id, FBMPInternalFilterPerf>, std::__1::__unordered_map_hasher<id, std::__1::__hash_value_type<id, FBMPInternalFilterPerf>, FBMPHashFunctor<NSObject *>, true>, std::__1::__unordered_map_equal<id, std::__1::__hash_value_type<id, FBMPInternalFilterPerf>, std::__1::equal_to<id>, true>, std::__1::allocator<std::__1::__hash_value_type<id, FBMPInternalFilterPerf> > > __table_;
} unordered_map<id, FBMPInternalFilterPerf, FBMPHashFunctor<NSObject *>, std::__1::equal_to<id>, std::__1::allocator<std::__1::pair<const id, FBMPInternalFilterPerf> > >;

typedef struct aligned_storage<16, 8> {
	data_t data_;
	char buf[16];
	a8) align_;
} aligned_storage<16, 8>;

typedef struct variant<FBMPSessionConnectOperation, FBMPSessionDisconnectOperation, FBMPSessionReplaceOperation, FBMPSessionBeginTrackingMovingOperation, FBMPSessionEndTrackingMovingOperation, boost::detail::variant::void_, boost::detail::variant::void_, boost::detail::variant::void_, boost::detail::variant::void_, boost::detail::variant::void_, boost::detail::variant::void_, boost::detail::variant::void_, boost::detail::variant::void_, boost::detail::variant::void_, boost::detail::variant::void_, boost::detail::variant::void_, boost::detail::variant::void_, boost::detail::variant::void_, boost::detail::variant::void_, boost::detail::variant::void_> {
	int which_;
	aligned_storage<16, 8> storage_;
} variant<FBMPSessionConnectOperation, FBMPSessionDisconnectOperation, FBMPSessionReplaceOperation, FBMPSessionBeginTrackingMovingOperation, FBMPSessionEndTrackingMovingOperation, boost::detail::variant::void_, boost::detail::variant::void_, boost::detail::variant::void_, boost::detail::variant::void_, boost::detail::variant::void_, boost::detail::variant::void_, boost::detail::variant::void_, boost::detail::variant::void_, boost::detail::variant::void_, boost::detail::variant::void_, boost::detail::variant::void_, boost::detail::variant::void_, boost::detail::variant::void_, boost::detail::variant::void_, boost::detail::variant::void_>;

typedef struct variant<FBMPSessionConnectOperation, FBMPSessionDisconnectOperation, FBMPSessionReplaceOperation, FBMPSessionBeginTrackingMovingOperation, FBMPSessionEndTrackingMovingOperation, boost::detail::variant::void_, boost::detail::variant::void_, boost::detail::variant::void_, boost::detail::variant::void_, boost::detail::variant::void_, boost::detail::variant::void_, boost::detail::variant::void_, boost::detail::variant::void_, boost::detail::variant::void_, boost::detail::variant::void_, boost::detail::variant::void_, boost::detail::variant::void_, boost::detail::variant::void_, boost::detail::variant::void_, boost::detail::variant::void_>ialigned_storage<16, 8>(data_t[16c]a8)* ariant<FBMPSessionConnectOperation, FBMPSessionDisconnectOperation, FBMPSessionReplaceOperation, FBMPSessionBeginTrackingMovingOperation, FBMPSessionEndTrackingMovingOperation, boost::detail::variant::void_, boost::detail::variant::void_, boost::detail::variant::void_, boost::detail::variant::void_, boost::detail::variant::void_, boost::detail::variant::void_, boost::detail::variant::void_, boost::detail::variant::void_, boost::detail::variant::void_, boost::detail::variant::void_, boost::detail::variant::void_, boost::detail::variant::void_, boost::detail::variant::void_, boost::detail::variant::void_, boost::detail::variant::void_>Ref;

typedef struct _compressed_pair<FBDrawingPoint *, std::__1::allocator<FBDrawingPoint> > {
	FBDrawingPoint __first_;
} compressed_pair<FBDrawingPoint *, std::__1::allocator<FBDrawingPoint> >;

typedef struct vector<FBDrawingPoint, std::__1::allocator<FBDrawingPoint> > {
	FBDrawingPoint __begin_;
	FBDrawingPoint __end_;
	compressed_pair<FBDrawingPoint *, std::__1::allocator<FBDrawingPoint> > __end_cap_;
} vector<FBDrawingPoint, std::__1::allocator<FBDrawingPoint> >;

typedef struct _compressed_pair<FBDrawingStroke *, std::__1::allocator<FBDrawingStroke> > {
	FBDrawingStroke __first_;
} compressed_pair<FBDrawingStroke *, std::__1::allocator<FBDrawingStroke> >;

typedef struct vector<FBDrawingStroke, std::__1::allocator<FBDrawingStroke> > {
	FBDrawingStroke __begin_;
	FBDrawingStroke __end_;
	compressed_pair<FBDrawingStroke *, std::__1::allocator<FBDrawingStroke> > __end_cap_;
} vector<FBDrawingStroke, std::__1::allocator<FBDrawingStroke> >;

typedef struct FBTextFieldInputAccessoryLabelItemConfiguration {
	NSString* text;
	UIFont* font;
	UIColor* color;
} FBTextFieldInputAccessoryLabelItemConfiguration;

typedef struct FBTextFieldInputAccessorySystemItemConfiguration {
	long long item;
	CKTypedComponentAction<> tapAction;
	BOOL resignsFirstResponderOnTap;
	UIColor* color;
} FBTextFieldInputAccessorySystemItemConfiguration;

typedef struct FBTextFieldInputAccessoryCustomItemConfiguration {
	NSString* title;
	long long style;
	CKTypedComponentAction<> tapAction;
	BOOL resignsFirstResponderOnTap;
	UIColor* color;
} FBTextFieldInputAccessoryCustomItemConfiguration;

typedef struct FBTextFieldInputAccessoryViewItemInternalConfiguration {
	long long type;
	FBTextFieldInputAccessorySystemItemConfiguration systemItem;
	FBTextFieldInputAccessoryCustomItemConfiguration customItem;
	FBTextFieldInputAccessoryLabelItemConfiguration labelItem;
} FBTextFieldInputAccessoryViewItemInternalConfiguration;

typedef struct FBTextFieldInputAccessoryViewItemConfiguration {
	FBTextFieldInputAccessoryViewItemInternalConfiguration m_configuration;
} FBTextFieldInputAccessoryViewItemConfiguration;

typedef struct FBTextFieldInputAccessoryViewConfiguration {
	UIColor* backgroundColor;
	double height;
	FBTextFieldInputAccessoryViewItemConfiguration leftItemConfiguration;
	FBTextFieldInputAccessoryViewItemConfiguration rightItemConfiguration;
} FBTextFieldInputAccessoryViewConfiguration;

typedef struct FBTextFieldViewConfiguration {
	long long autocapitalizationType;
	long long autocorrectionType;
	UIColor* backgroundColor;
	long long borderStyle;
	BOOL disabled;
	UIFont* font;
	NSString* accessibilityIdentifier;
	NSString* identifier;
	FBTextFieldInputAccessoryViewConfiguration inputAccessoryViewConfiguration;
	long long keyboardType;
	unsigned long long characterAllowance;
	unsigned long long maxLength;
	NSString* placeholder;
	UIColor* placeholderColor;
	BOOL secureTextEntry;
	NSString* text;
	NSString* initialText;
	UIColor* textColor;
	long long returnKeyType;
	long long textAlignment;
} FBTextFieldViewConfiguration;

typedef struct FBMultiLineStackLayoutComponentStyle {
	double lineSpacing;
	double componentSpacing;
	unsigned long long justifyContent;
} FBMultiLineStackLayoutComponentStyle;

typedef struct _compressed_pair<FBHorizontalLineItem *, std::__1::allocator<FBHorizontalLineItem> > {
	FBHorizontalLineItem __first_;
} compressed_pair<FBHorizontalLineItem *, std::__1::allocator<FBHorizontalLineItem> >;

typedef struct FBFourPartBorderLayoutChildren {
	CKComponent* top;
	CKComponent* left;
	CKComponent* bottom;
	CKComponent* right;
} FBFourPartBorderLayoutChildren;

typedef struct FBAttributeParagraphStyle {
	double lineSpacing;
	double paragraphSpacing;
	long long alignment;
	double headIndent;
	double tailIndent;
	double firstLineHeadIndent;
	double minimumLineHeight;
	double maximumLineHeight;
	long long lineBreakMode;
	long long baseWritingDirection;
	double lineHeightMultiple;
	double paragraphSpacingBefore;
	float hyphenationFactor;
	BOOL allowsDefaultTighteningForTruncation;
} FBAttributeParagraphStyle;

typedef struct FloatMutationData {
	double value;
} FloatMutationData;

typedef struct IntegerMutationData {
	unsigned long long value;
} IntegerMutationData;

typedef struct WritingDirectionMutationData {
	long long writingDirection;
} WritingDirectionMutationData;

typedef struct FontMutationData {
	UIFont* font;
} FontMutationData;

typedef struct ColorMutationData {
	UIColor* color;
} ColorMutationData;

typedef struct StringMutationData {
	NSString* string;
} StringMutationData;

typedef struct AttributedStringMutationData {
	NSAttributedString* attributedString;
} AttributedStringMutationData;

typedef struct AddAttributeMutationData {
	NSString* name;
	<NSCopying><NSObject>* value;
} AddAttributeMutationData;

typedef struct ArbitraryMutationData {
	<FBAttributedStringBuilderMutation>* mutation;
} ArbitraryMutationData;

typedef struct ParagraphStyleMutationData {
	FBAttributeParagraphStyle paragraphStyle;
} ParagraphStyleMutationData;

typedef struct Mutation {
	int type;
	NSRange range;
	/*function pointer*/void* ;
	ParagraphStyleMutationData paragraphStyleMutationData;
	FloatMutationData floatMutationData;
	IntegerMutationData integerMutationData;
	WritingDirectionMutationData) writingDirectionMutationData;
	FontMutationData fontMutationData;
	ColorMutationData colorMutationData;
	StringMutationData stringMutationData;
	AttributedStringMutationData attributedStringMutationData;
	AddAttributeMutationData addAttributeMutationData;
	ArbitraryMutationData arbitraryMutationData;
} Mutation;

typedef struct _compressed_pair<FB::Mutation *, std::__1::allocator<FB::Mutation> > {
	Mutation __first_;
} compressed_pair<FB::Mutation *, std::__1::allocator<FB::Mutation> >;

typedef struct vector<FB::Mutation, std::__1::allocator<FB::Mutation> > {
	Mutation __begin_;
	Mutation __end_;
	compressed_pair<FB::Mutation *, std::__1::allocator<FB::Mutation> > __end_cap_;
} vector<FB::Mutation, std::__1::allocator<FB::Mutation> >;

typedef struct AttributedStringBuilderImpl {
	vector<FB::Mutation, std::__1::allocator<FB::Mutation> > mutations_;
	unsigned long long type_;
	unsigned long long hash_;
	unsigned long long length_;
	BOOL built_;
} AttributedStringBuilderImpl;

typedef struct weak_ptr<webrtc::videocapturemodule::VideoCaptureIos> {
	VideoCaptureIos __ptr_;
	__shared_weak_count __cntrl_;
} weak_ptr<webrtc::videocapturemodule::VideoCaptureIos>;

typedef struct AQBufferParameters {
	unsigned bufferSize;
	unsigned packetCount;
} AQBufferParameters;

typedef struct OpaqueAudioQueueTimeline* OpaqueAudioQueueTimelineRef;

typedef struct OpaqueCMClock* OpaqueCMClockRef;

typedef struct OpaqueCMTimebase* OpaqueCMTimebaseRef;

typedef struct OpaqueVTDecompressionSession* OpaqueVTDecompressionSessionRef;

typedef struct _compressed_pair<unsigned long, std::__1::allocator<opaqueCMSampleBuffer *> > {
	unsigned long long __first_;
} compressed_pair<unsigned long, std::__1::allocator<opaqueCMSampleBuffer *> >;

typedef struct _compressed_pair<opaqueCMSampleBuffer ***, std::__1::allocator<opaqueCMSampleBuffer **> > {
	opaqueCMSampleBuffer __first_;
} compressed_pair<opaqueCMSampleBuffer ***, std::__1::allocator<opaqueCMSampleBuffer **> >;

typedef struct _split_buffer<opaqueCMSampleBuffer **, std::__1::allocator<opaqueCMSampleBuffer **> > {
	opaqueCMSampleBuffer __first_;
	opaqueCMSampleBuffer __begin_;
	opaqueCMSampleBuffer __end_;
	compressed_pair<opaqueCMSampleBuffer ***, std::__1::allocator<opaqueCMSampleBuffer **> > __end_cap_;
} split_buffer<opaqueCMSampleBuffer **, std::__1::allocator<opaqueCMSampleBuffer **> >;

typedef struct deque<opaqueCMSampleBuffer *, std::__1::allocator<opaqueCMSampleBuffer *> > {
	split_buffer<opaqueCMSampleBuffer **, std::__1::allocator<opaqueCMSampleBuffer **> > __map_;
	unsigned long long __start_;
	compressed_pair<unsigned long, std::__1::allocator<opaqueCMSampleBuffer *> > __size_;
} deque<opaqueCMSampleBuffer *, std::__1::allocator<opaqueCMSampleBuffer *> >;

typedef struct {
	BOOL field1;
	BOOL field2;
	BOOL field3;
	BOOL field4;
	BOOL field5;
	int field6;
} SCD_Struct_FN1587;

typedef struct FNFPlayerState {
	BOOL playingRequested;
	BOOL isPlaying;
	BOOL isStalled;
	BOOL endTimeReached;
	BOOL firstAudioFrameEnqueued;
	BOOL stoppedEnqueuingVideo;
	BOOL stoppedEnqueuingAudio;
	BOOL isFirstVideoFrame;
	BOOL recreatedLayerOnError;
	BOOL audioEngineInitialized;
	SCD_Struct_FB100 lastStartingTime;
	SCD_Struct_FB100 lastRequestedStartTime;
	SCD_Struct_FB100 latestEnqueuedVideoPts;
	SCD_Struct_FB100 latestEnqueuedAudioPts;
	SCD_Struct_FB100 latestEnqueuedAudioDts;
	id playbackTimeObserverForAsset;
	id durationTimerForAsset;
	id stallTimerObserver;
	id sampleBufferFlushTimerObserver;
	id levelMeterTimerObserver;
	SCD_Struct_FB100 backgroundPauseTime;
	unsigned sampleAudioFrameSize;
} FNFPlayerState;

typedef struct __CFHTTPMessage* CFHTTPMessageRef;

typedef struct {
	BOOL field1;
	unsigned char field2;
	BOOL field3;
	unsigned long long field4;
} SCD_Struct_RC1590;

typedef struct __CFDictionary* CFDictionaryRef;

typedef struct _compressed_pair<ModuleData *, std::__1::default_delete<ModuleData []> > {
	ModuleData __first_;
} compressed_pair<ModuleData *, std::__1::default_delete<ModuleData []> >;

typedef struct unique_ptr<ModuleData [], std::__1::default_delete<ModuleData []> > {
	compressed_pair<ModuleData *, std::__1::default_delete<ModuleData []> > __ptr_;
} unique_ptr<ModuleData [], std::__1::default_delete<ModuleData []> >;

typedef struct _compressed_pair<__sFILE *, int (*)(__sFILE *)> {
	__sFILE __first_;
	/*function pointer*/void* __second_;
} compressed_pair<__sFILE *, int (*)(__sFILE *)>;

typedef struct unique_ptr<__sFILE, int (*)(__sFILE *)> {
	compressed_pair<__sFILE *, int (*)(__sFILE *)> __ptr_;
} unique_ptr<__sFILE, int (*)(__sFILE *)>;

typedef struct RandomAccessBundleData {
	unique_ptr<__sFILE, int (*)(__sFILE *)> bundle;
	unsigned long long baseOffset;
	unsigned long long numTableEntries;
	unique_ptr<ModuleData [], std::__1::default_delete<ModuleData []> > table;
} RandomAccessBundleData;

typedef struct OpaqueJSValue* OpaqueJSValueRef;

typedef struct {
	CGColor field1;
	CGColor field2;
	CGColor field3;
	CGColor field4;
} SCD_Struct_RC1598;

typedef struct function<void (unsigned long, unsigned long)> {
	type __buf_;
	__base<void (unsigned long, unsigned long)> __f_;
} function<void (unsigned long, unsigned long)>;

typedef struct SSLKeyMaterialCallback* SSLKeyMaterialCallbackRef;

typedef struct _compressed_pair<unsigned long, std::__1::allocator<std::__1::__hash_node<std::__1::__hash_value_type<NSString *, std::__1::shared_future<Id> >, void *> *> > {
	unsigned long long __first_;
} compressed_pair<unsigned long, std::__1::allocator<std::__1::__hash_node<std::__1::__hash_value_type<NSString *, std::__1::shared_future<Id> >, void *> *> >;

typedef struct _compressed_pair<unsigned long, std::__1::__unordered_map_hasher<NSString *, std::__1::__hash_value_type<NSString *, std::__1::shared_future<Id> >, FB::HashFunctor<NSObject *>, true> > {
	unsigned long long __first_;
} compressed_pair<unsigned long, std::__1::__unordered_map_hasher<NSString *, std::__1::__hash_value_type<NSString *, std::__1::shared_future<Id> >, FB::HashFunctor<NSObject *>, true> >;

typedef struct _compressed_pair<float, std::__1::__unordered_map_equal<NSString *, std::__1::__hash_value_type<NSString *, std::__1::shared_future<Id> >, FB::EqualFunctor<NSObject *>, true> > {
	float __first_;
} compressed_pair<float, std::__1::__unordered_map_equal<NSString *, std::__1::__hash_value_type<NSString *, std::__1::shared_future<Id> >, FB::EqualFunctor<NSObject *>, true> >;

typedef struct _hash_node_base<std::__1::__hash_node<std::__1::__hash_value_type<NSString *, std::__1::shared_future<Id> >, void *> *> {
	__hash_node<std::__1::__hash_value_type<NSString *, std::__1::shared_future<Id> >, void *> __next_;
} hash_node_base<std::__1::__hash_node<std::__1::__hash_value_type<NSString *, std::__1::shared_future<Id> >, void *> *>;

typedef struct _compressed_pair<std::__1::__hash_node_base<std::__1::__hash_node<std::__1::__hash_value_type<NSString *, std::__1::shared_future<Id> >, void *> *>, std::__1::allocator<std::__1::__hash_node<std::__1::__hash_value_type<NSString *, std::__1::shared_future<Id> >, void *> > > {
	hash_node_base<std::__1::__hash_node<std::__1::__hash_value_type<NSString *, std::__1::shared_future<Id> >, void *> *> __first_;
} compressed_pair<std::__1::__hash_node_base<std::__1::__hash_node<std::__1::__hash_value_type<NSString *, std::__1::shared_future<Id> >, void *> *>, std::__1::allocator<std::__1::__hash_node<std::__1::__hash_value_type<NSString *, std::__1::shared_future<Id> >, void *> > >;

typedef struct _bucket_list_deallocator<std::__1::allocator<std::__1::__hash_node<std::__1::__hash_value_type<NSString *, std::__1::shared_future<Id> >, void *> *> > {
	compressed_pair<unsigned long, std::__1::allocator<std::__1::__hash_node<std::__1::__hash_value_type<NSString *, std::__1::shared_future<Id> >, void *> *> > __data_;
} bucket_list_deallocator<std::__1::allocator<std::__1::__hash_node<std::__1::__hash_value_type<NSString *, std::__1::shared_future<Id> >, void *> *> >;

typedef struct _compressed_pair<std::__1::__hash_node<std::__1::__hash_value_type<NSString *, std::__1::shared_future<Id> >, void *> **, std::__1::__bucket_list_deallocator<std::__1::allocator<std::__1::__hash_node<std::__1::__hash_value_type<NSString *, std::__1::shared_future<Id> >, void *> *> > > {
	__hash_node<std::__1::__hash_value_type<NSString *, std::__1::shared_future<Id> >, void *> __first_;
	bucket_list_deallocator<std::__1::allocator<std::__1::__hash_node<std::__1::__hash_value_type<NSString *, std::__1::shared_future<Id> >, void *> *> > __second_;
} compressed_pair<std::__1::__hash_node<std::__1::__hash_value_type<NSString *, std::__1::shared_future<Id> >, void *> **, std::__1::__bucket_list_deallocator<std::__1::allocator<std::__1::__hash_node<std::__1::__hash_value_type<NSString *, std::__1::shared_future<Id> >, void *> *> > >;

typedef struct unique_ptr<std::__1::__hash_node<std::__1::__hash_value_type<NSString *, std::__1::shared_future<Id> >, void *> *[], std::__1::__bucket_list_deallocator<std::__1::allocator<std::__1::__hash_node<std::__1::__hash_value_type<NSString *, std::__1::shared_future<Id> >, void *> *> > > {
	compressed_pair<std::__1::__hash_node<std::__1::__hash_value_type<NSString *, std::__1::shared_future<Id> >, void *> **, std::__1::__bucket_list_deallocator<std::__1::allocator<std::__1::__hash_node<std::__1::__hash_value_type<NSString *, std::__1::shared_future<Id> >, void *> *> > > __ptr_;
} unique_ptr<std::__1::__hash_node<std::__1::__hash_value_type<NSString *, std::__1::shared_future<Id> >, void *> *[], std::__1::__bucket_list_deallocator<std::__1::allocator<std::__1::__hash_node<std::__1::__hash_value_type<NSString *, std::__1::shared_future<Id> >, void *> *> > >;

typedef struct _hash_table<std::__1::__hash_value_type<NSString *, std::__1::shared_future<Id> >, std::__1::__unordered_map_hasher<NSString *, std::__1::__hash_value_type<NSString *, std::__1::shared_future<Id> >, FB::HashFunctor<NSObject *>, true>, std::__1::__unordered_map_equal<NSString *, std::__1::__hash_value_type<NSString *, std::__1::shared_future<Id> >, FB::EqualFunctor<NSObject *>, true>, std::__1::allocator<std::__1::__hash_value_type<NSString *, std::__1::shared_future<Id> > > > {
	unique_ptr<std::__1::__hash_node<std::__1::__hash_value_type<NSString *, std::__1::shared_future<Id> >, void *> *[], std::__1::__bucket_list_deallocator<std::__1::allocator<std::__1::__hash_node<std::__1::__hash_value_type<NSString *, std::__1::shared_future<Id> >, void *> *> > > __bucket_list_;
	compressed_pair<std::__1::__hash_node_base<std::__1::__hash_node<std::__1::__hash_value_type<NSString *, std::__1::shared_future<Id> >, void *> *>, std::__1::allocator<std::__1::__hash_node<std::__1::__hash_value_type<NSString *, std::__1::shared_future<Id> >, void *> > > __p1_;
	compressed_pair<unsigned long, std::__1::__unordered_map_hasher<NSString *, std::__1::__hash_value_type<NSString *, std::__1::shared_future<Id> >, FB::HashFunctor<NSObject *>, true> > __p2_;
	compressed_pair<float, std::__1::__unordered_map_equal<NSString *, std::__1::__hash_value_type<NSString *, std::__1::shared_future<Id> >, FB::EqualFunctor<NSObject *>, true> > __p3_;
} hash_table<std::__1::__hash_value_type<NSString *, std::__1::shared_future<Id> >, std::__1::__unordered_map_hasher<NSString *, std::__1::__hash_value_type<NSString *, std::__1::shared_future<Id> >, FB::HashFunctor<NSObject *>, true>, std::__1::__unordered_map_equal<NSString *, std::__1::__hash_value_type<NSString *, std::__1::shared_future<Id> >, FB::EqualFunctor<NSObject *>, true>, std::__1::allocator<std::__1::__hash_value_type<NSString *, std::__1::shared_future<Id> > > >;

typedef struct unordered_map<NSString *, std::__1::shared_future<Id>, FB::HashFunctor<NSObject *>, FB::EqualFunctor<NSObject *>, std::__1::allocator<std::__1::pair<NSString *const, std::__1::shared_future<Id> > > > {
	hash_table<std::__1::__hash_value_type<NSString *, std::__1::shared_future<Id> >, std::__1::__unordered_map_hasher<NSString *, std::__1::__hash_value_type<NSString *, std::__1::shared_future<Id> >, FB::HashFunctor<NSObject *>, true>, std::__1::__unordered_map_equal<NSString *, std::__1::__hash_value_type<NSString *, std::__1::shared_future<Id> >, FB::EqualFunctor<NSObject *>, true>, std::__1::allocator<std::__1::__hash_value_type<NSString *, std::__1::shared_future<Id> > > > __table_;
} unordered_map<NSString *, std::__1::shared_future<Id>, FB::HashFunctor<NSObject *>, FB::EqualFunctor<NSObject *>, std::__1::allocator<std::__1::pair<NSString *const, std::__1::shared_future<Id> > > >;

typedef struct CKComponentBoundsAnimation {
	double duration;
	double delay;
	unsigned long long mode;
	unsigned long long options;
	double springDampingRatio;
	double springInitialVelocity;
} CKComponentBoundsAnimation;

typedef struct _compressed_pair<NTStackLayoutWrappedAbsoluteChild *, std::__1::allocator<NTStackLayoutWrappedAbsoluteChild> > {
	NTStackLayoutWrappedAbsoluteChild __first_;
} compressed_pair<NTStackLayoutWrappedAbsoluteChild *, std::__1::allocator<NTStackLayoutWrappedAbsoluteChild> >;

typedef struct vector<NTStackLayoutWrappedAbsoluteChild, std::__1::allocator<NTStackLayoutWrappedAbsoluteChild> > {
	NTStackLayoutWrappedAbsoluteChild __begin_;
	NTStackLayoutWrappedAbsoluteChild __end_;
	compressed_pair<NTStackLayoutWrappedAbsoluteChild *, std::__1::allocator<NTStackLayoutWrappedAbsoluteChild> > __end_cap_;
} vector<NTStackLayoutWrappedAbsoluteChild, std::__1::allocator<NTStackLayoutWrappedAbsoluteChild> >;

typedef struct ComponentState {
	CKComponent* component;
	CKComponentScopeRoot* scopeRoot;
	unordered_multimap<int, id ()(id), std::__1::hash<int>, std::__1::equal_to<int>, std::__1::allocator<std::__1::pair<const int, id ()(id)> > > stateUpdates;
	NSSet* mountedComponents;
	CGSize size;
} ComponentState;

typedef struct _compressed_pair<FBSectionComponent *__strong *, std::__1::allocator<FBSectionComponent *> > {
	id __first_;
} compressed_pair<FBSectionComponent *__strong *, std::__1::allocator<FBSectionComponent *> >;

typedef struct vector<FBSectionComponent *, std::__1::allocator<FBSectionComponent *> > {
	id __begin_;
	id __end_;
	compressed_pair<FBSectionComponent *__strong *, std::__1::allocator<FBSectionComponent *> > __end_cap_;
} vector<FBSectionComponent *, std::__1::allocator<FBSectionComponent *> >;

typedef struct _compressed_pair<FBSectionComponentGenerator *, std::__1::default_delete<FBSectionComponentGenerator> > {
	FBSectionComponentGenerator __first_;
} compressed_pair<FBSectionComponentGenerator *, std::__1::default_delete<FBSectionComponentGenerator> >;

typedef struct unique_ptr<FBSectionComponentGenerator, std::__1::default_delete<FBSectionComponentGenerator> > {
	compressed_pair<FBSectionComponentGenerator *, std::__1::default_delete<FBSectionComponentGenerator> > __ptr_;
} unique_ptr<FBSectionComponentGenerator, std::__1::default_delete<FBSectionComponentGenerator> >;

typedef struct FBSectionComponentTrackerState {
	FBSectionComponent* component;
	NSDictionary* stateMap;
	NSDictionary* userInfo;
	id sectionComponentGenerationFactory;
	changesetWriter ;
	changesetWriterState ^<FBComponentChangesetWriter>;
} FBSectionComponentTrackerState;

typedef struct _compressed_pair<unsigned long, std::__1::allocator<FBSectionComponentTrackerStateModification> > {
	unsigned long long __first_;
} compressed_pair<unsigned long, std::__1::allocator<FBSectionComponentTrackerStateModification> >;

typedef struct _compressed_pair<FBSectionComponentTrackerStateModification **, std::__1::allocator<FBSectionComponentTrackerStateModification *> > {
	FBSectionComponentTrackerStateModification __first_;
} compressed_pair<FBSectionComponentTrackerStateModification **, std::__1::allocator<FBSectionComponentTrackerStateModification *> >;

typedef struct _split_buffer<FBSectionComponentTrackerStateModification *, std::__1::allocator<FBSectionComponentTrackerStateModification *> > {
	FBSectionComponentTrackerStateModification __first_;
	FBSectionComponentTrackerStateModification __begin_;
	FBSectionComponentTrackerStateModification __end_;
	compressed_pair<FBSectionComponentTrackerStateModification **, std::__1::allocator<FBSectionComponentTrackerStateModification *> > __end_cap_;
} split_buffer<FBSectionComponentTrackerStateModification *, std::__1::allocator<FBSectionComponentTrackerStateModification *> >;

typedef struct deque<FBSectionComponentTrackerStateModification, std::__1::allocator<FBSectionComponentTrackerStateModification> > {
	split_buffer<FBSectionComponentTrackerStateModification *, std::__1::allocator<FBSectionComponentTrackerStateModification *> > __map_;
	unsigned long long __start_;
	compressed_pair<unsigned long, std::__1::allocator<FBSectionComponentTrackerStateModification> > __size_;
} deque<FBSectionComponentTrackerStateModification, std::__1::allocator<FBSectionComponentTrackerStateModification> >;

typedef struct _compressed_pair<FBSectionComponentTrackerComponentStateUpdate *, std::__1::allocator<FBSectionComponentTrackerComponentStateUpdate> > {
	FBSectionComponentTrackerComponentStateUpdate __first_;
} compressed_pair<FBSectionComponentTrackerComponentStateUpdate *, std::__1::allocator<FBSectionComponentTrackerComponentStateUpdate> >;

typedef struct vector<FBSectionComponentTrackerComponentStateUpdate, std::__1::allocator<FBSectionComponentTrackerComponentStateUpdate> > {
	FBSectionComponentTrackerComponentStateUpdate __begin_;
	FBSectionComponentTrackerComponentStateUpdate __end_;
	compressed_pair<FBSectionComponentTrackerComponentStateUpdate *, std::__1::allocator<FBSectionComponentTrackerComponentStateUpdate> > __end_cap_;
} vector<FBSectionComponentTrackerComponentStateUpdate, std::__1::allocator<FBSectionComponentTrackerComponentStateUpdate> >;

typedef struct shared_ptr<bool> {
	BOOL __ptr_;
	__shared_weak_count __cntrl_;
} shared_ptr<bool>;

typedef struct _compressed_pair<TrackerKCF *, std::__1::default_delete<TrackerKCF> > {
	TrackerKCF __first_;
} compressed_pair<TrackerKCF *, std::__1::default_delete<TrackerKCF> >;

typedef struct unique_ptr<TrackerKCF, std::__1::default_delete<TrackerKCF> > {
	compressed_pair<TrackerKCF *, std::__1::default_delete<TrackerKCF> > __ptr_;
} unique_ptr<TrackerKCF, std::__1::default_delete<TrackerKCF> >;

typedef struct shared_ptr<facebook::particleemitter::DynamicEmitter> {
	DynamicEmitter __ptr_;
	__shared_weak_count __cntrl_;
} shared_ptr<facebook::particleemitter::DynamicEmitter>;

typedef struct shared_ptr<facebook::particleemitter::OpticalFlowCalculator> {
	OpticalFlowCalculator __ptr_;
	__shared_weak_count __cntrl_;
} shared_ptr<facebook::particleemitter::OpticalFlowCalculator>;

typedef struct FBPlatformInputs {
	/*function pointer*/void* _vptr$PlatformInputs;
	shared_ptr<facebook::particleemitter::OpticalFlowCalculator> _calculator;
	int _rotation;
	BOOL _mirrored;
} FBPlatformInputs;

typedef struct shared_ptr<folly::dynamic> {
	dynamic __ptr_;
	__shared_weak_count __cntrl_;
} shared_ptr<folly::dynamic>;

typedef struct FBParticleEmitterAnimation {
	UIImage* texture;
	short framerate;
	short numberOfSprites;
	GLKVector2 size;
	short plays;
	unsigned textureIdentifier;
} FBParticleEmitterAnimation;

typedef struct _compressed_pair<FBMPCEncodingObjectContext **, std::__1::allocator<FBMPCEncodingObjectContext *> > {
	FBMPCEncodingObjectContext __first_;
} compressed_pair<FBMPCEncodingObjectContext **, std::__1::allocator<FBMPCEncodingObjectContext *> >;

typedef struct vector<FBMPCEncodingObjectContext *, std::__1::allocator<FBMPCEncodingObjectContext *> > {
	FBMPCEncodingObjectContext __begin_;
	FBMPCEncodingObjectContext __end_;
	compressed_pair<FBMPCEncodingObjectContext **, std::__1::allocator<FBMPCEncodingObjectContext *> > __end_cap_;
} vector<FBMPCEncodingObjectContext *, std::__1::allocator<FBMPCEncodingObjectContext *> >;

typedef struct _compressed_pair<FBMPCDecodingObjectContext *, std::__1::allocator<FBMPCDecodingObjectContext> > {
	FBMPCDecodingObjectContext __first_;
} compressed_pair<FBMPCDecodingObjectContext *, std::__1::allocator<FBMPCDecodingObjectContext> >;

typedef struct vector<FBMPCDecodingObjectContext, std::__1::allocator<FBMPCDecodingObjectContext> > {
	FBMPCDecodingObjectContext __begin_;
	FBMPCDecodingObjectContext __end_;
	compressed_pair<FBMPCDecodingObjectContext *, std::__1::allocator<FBMPCDecodingObjectContext> > __end_cap_;
} vector<FBMPCDecodingObjectContext, std::__1::allocator<FBMPCDecodingObjectContext> >;

typedef struct FBNSStringCache {
	FBNSStringCacheItem items;
	unsigned prng_lfsr;
	unsigned char age[1024];
} FBNSStringCache;

typedef struct MessagePackParseState {
	FBNSStringCache cache;
} MessagePackParseState;

typedef struct _compressed_pair<FBMPCEncodingObjectContext::EncodedObjectRecord *, std::__1::allocator<FBMPCEncodingObjectContext::EncodedObjectRecord> > {
	EncodedObjectRecord __first_;
} compressed_pair<FBMPCEncodingObjectContext::EncodedObjectRecord *, std::__1::allocator<FBMPCEncodingObjectContext::EncodedObjectRecord> >;

typedef struct vector<FBMPCEncodingObjectContext::EncodedObjectRecord, std::__1::allocator<FBMPCEncodingObjectContext::EncodedObjectRecord> > {
	EncodedObjectRecord __begin_;
	EncodedObjectRecord __end_;
	compressed_pair<FBMPCEncodingObjectContext::EncodedObjectRecord *, std::__1::allocator<FBMPCEncodingObjectContext::EncodedObjectRecord> > __end_cap_;
} vector<FBMPCEncodingObjectContext::EncodedObjectRecord, std::__1::allocator<FBMPCEncodingObjectContext::EncodedObjectRecord> >;

typedef struct FBMPCEncodingObjectContext {
	vector<FBMPCEncodingObjectContext::EncodedObjectRecord, std::__1::allocator<FBMPCEncodingObjectContext::EncodedObjectRecord> > _encodedObjects;
} FBMPCEncodingObjectContext;

typedef struct {
	unsigned field1;
	msgpack_object_kv field2;
} SCD_Struct_FB1643;

typedef struct __CVPixelBufferPool* CVPixelBufferPoolRef;

typedef struct FBFramePerformanceResult {
	double durationInSecond;
	long long frameCount;
	double smallDropEvent;
	double largeDropEvent;
	double targetFPS;
} FBFramePerformanceResult;

typedef struct shared_ptr<facebook::image_processing::RGBA8Pixel> {
	RGBA8Pixel __ptr_;
	__shared_weak_count __cntrl_;
} shared_ptr<facebook::image_processing::RGBA8Pixel>;

typedef struct Image<facebook::image_processing::RGBA8Pixel> {
	shared_ptr<facebook::image_processing::RGBA8Pixel> data_;
	unsigned long long widthInPixels;
	unsigned long long heightInPixels;
	unsigned long long bytesPerPixel;
} Image<facebook::image_processing::RGBA8Pixel>;

typedef struct FilterConfig {
	float vibranceValue;
	float equalizationWeight;
	float minimumFaceBrightness;
	float minSlope;
	float maxSlope;
	float bilateralDetailScale;
	float denoising;
	float bilateralDefaultDetailScale;
	float bilateralMaxDetailScale;
	float bilateralLumSigma;
	float bilateralSpaceSigmaFactor;
	BOOL useBilateralGridApproximation;
	float noiseMaskScale;
	int noiseMaskRadius;
	float kneeDenoising;
	float maxDenoising;
} FilterConfig;

typedef struct _compressed_pair<facebook::image_processing::FilteredImage *, std::__1::default_delete<facebook::image_processing::FilteredImage> > {
	FilteredImage __first_;
} compressed_pair<facebook::image_processing::FilteredImage *, std::__1::default_delete<facebook::image_processing::FilteredImage> >;

typedef struct unique_ptr<facebook::image_processing::FilteredImage, std::__1::default_delete<facebook::image_processing::FilteredImage> > {
	compressed_pair<facebook::image_processing::FilteredImage *, std::__1::default_delete<facebook::image_processing::FilteredImage> > __ptr_;
} unique_ptr<facebook::image_processing::FilteredImage, std::__1::default_delete<facebook::image_processing::FilteredImage> >;

typedef struct shared_ptr<facebook::image_processing::ImageMetadata> {
	ImageMetadata __ptr_;
	__shared_weak_count __cntrl_;
} shared_ptr<facebook::image_processing::ImageMetadata>;

typedef struct array<float, 256> {
	float __elems_[256];
} array<float, 256>;

typedef struct _compressed_pair<unsigned long long **, std::__1::allocator<unsigned long long *> > {
	unsigned long long __first_;
} compressed_pair<unsigned long long **, std::__1::allocator<unsigned long long *> >;

typedef struct _compressed_pair<unsigned long, std::__1::allocator<unsigned long long> > {
	unsigned long long __first_;
} compressed_pair<unsigned long, std::__1::allocator<unsigned long long> >;

typedef struct _split_buffer<unsigned long long *, std::__1::allocator<unsigned long long *> > {
	unsigned long long __first_;
	unsigned long long __begin_;
	unsigned long long __end_;
	compressed_pair<unsigned long long **, std::__1::allocator<unsigned long long *> > __end_cap_;
} split_buffer<unsigned long long *, std::__1::allocator<unsigned long long *> >;

typedef struct deque<unsigned long long, std::__1::allocator<unsigned long long> > {
	split_buffer<unsigned long long *, std::__1::allocator<unsigned long long *> > __map_;
	unsigned long long __start_;
	compressed_pair<unsigned long, std::__1::allocator<unsigned long long> > __size_;
} deque<unsigned long long, std::__1::allocator<unsigned long long> >;

typedef struct queue<unsigned long long, std::__1::deque<unsigned long long, std::__1::allocator<unsigned long long> > > {
	deque<unsigned long long, std::__1::allocator<unsigned long long> > c;
} queue<unsigned long long, std::__1::deque<unsigned long long, std::__1::allocator<unsigned long long> > >;

typedef struct CKComponentLifecycleManagerState {
	id model;
	id context;
	 <NSObject>;
	CKSizeRange constrainedSize;
	CKComponentLayout layout;
	id root;
	 CKComponentScopeRoot;
	CKComponentBoundsAnimation boundsAnimation;
} CKComponentLifecycleManagerState;

typedef struct _compressed_pair<unsigned long, std::__1::less<long> > {
	unsigned long long __first_;
} compressed_pair<unsigned long, std::__1::less<long> >;

typedef struct _compressed_pair<unsigned long, std::__1::less<std::__1::pair<long, long> > > {
	unsigned long long __first_;
} compressed_pair<unsigned long, std::__1::less<std::__1::pair<long, long> > >;

typedef struct _compressed_pair<CKComponentPreparationInputItem *__strong *, std::__1::allocator<CKComponentPreparationInputItem *> > {
	id __first_;
} compressed_pair<CKComponentPreparationInputItem *__strong *, std::__1::allocator<CKComponentPreparationInputItem *> >;

typedef struct vector<CKComponentPreparationInputItem *, std::__1::allocator<CKComponentPreparationInputItem *> > {
	id __begin_;
	id __end_;
	compressed_pair<CKComponentPreparationInputItem *__strong *, std::__1::allocator<CKComponentPreparationInputItem *> > __end_cap_;
} vector<CKComponentPreparationInputItem *, std::__1::allocator<CKComponentPreparationInputItem *> >;

typedef struct _compressed_pair<std::__1::__tree_end_node<std::__1::__tree_node_base<void *> *>, std::__1::allocator<std::__1::__tree_node<long, void *> > > {
	tree_end_node<std::__1::__tree_node_base<void *> *> __first_;
} compressed_pair<std::__1::__tree_end_node<std::__1::__tree_node_base<void *> *>, std::__1::allocator<std::__1::__tree_node<long, void *> > >;

typedef struct _compressed_pair<std::__1::__tree_end_node<std::__1::__tree_node_base<void *> *>, std::__1::allocator<std::__1::__tree_node<std::__1::pair<long, long>, void *> > > {
	tree_end_node<std::__1::__tree_node_base<void *> *> __first_;
} compressed_pair<std::__1::__tree_end_node<std::__1::__tree_node_base<void *> *>, std::__1::allocator<std::__1::__tree_node<std::__1::pair<long, long>, void *> > >;

typedef struct _tree<std::__1::pair<long, long>, std::__1::less<std::__1::pair<long, long> >, std::__1::allocator<std::__1::pair<long, long> > > {
	__tree_node<std::__1::pair<long, long>, void *> __begin_node_;
	compressed_pair<std::__1::__tree_end_node<std::__1::__tree_node_base<void *> *>, std::__1::allocator<std::__1::__tree_node<std::__1::pair<long, long>, void *> > > __pair1_;
	compressed_pair<unsigned long, std::__1::less<std::__1::pair<long, long> > > __pair3_;
} tree<std::__1::pair<long, long>, std::__1::less<std::__1::pair<long, long> >, std::__1::allocator<std::__1::pair<long, long> > >;

typedef struct set<std::__1::pair<long, long>, std::__1::less<std::__1::pair<long, long> >, std::__1::allocator<std::__1::pair<long, long> > > {
	tree<std::__1::pair<long, long>, std::__1::less<std::__1::pair<long, long> >, std::__1::allocator<std::__1::pair<long, long> > > __tree_;
} set<std::__1::pair<long, long>, std::__1::less<std::__1::pair<long, long> >, std::__1::allocator<std::__1::pair<long, long> > >;

typedef struct _tree<long, std::__1::less<long>, std::__1::allocator<long> > {
	__tree_node<long, void *> __begin_node_;
	compressed_pair<std::__1::__tree_end_node<std::__1::__tree_node_base<void *> *>, std::__1::allocator<std::__1::__tree_node<long, void *> > > __pair1_;
	compressed_pair<unsigned long, std::__1::less<long> > __pair3_;
} tree<long, std::__1::less<long>, std::__1::allocator<long> >;

typedef struct set<long, std::__1::less<long>, std::__1::allocator<long> > {
	tree<long, std::__1::less<long>, std::__1::allocator<long> > __tree_;
} set<long, std::__1::less<long>, std::__1::allocator<long> >;

typedef struct Sections {
	set<long, std::__1::less<long>, std::__1::allocator<long> > _insertions;
	set<long, std::__1::less<long>, std::__1::allocator<long> > _removals;
	set<std::__1::pair<long, long>, std::__1::less<std::__1::pair<long, long> >, std::__1::allocator<std::__1::pair<long, long> > > _moves;
} Sections;

typedef struct CKComponentPreparationInputBatch {
	unsigned long long ID;
	Sections sections;
	vector<CKComponentPreparationInputItem *, std::__1::allocator<CKComponentPreparationInputItem *> > items;
	BOOL isContiguousTailInsertion;
} CKComponentPreparationInputBatch;

typedef struct _compressed_pair<unsigned long, std::__1::allocator<CKSuspensionControllerChangesetContainer> > {
	unsigned long long __first_;
} compressed_pair<unsigned long, std::__1::allocator<CKSuspensionControllerChangesetContainer> >;

typedef struct _compressed_pair<CKSuspensionControllerChangesetContainer **, std::__1::allocator<CKSuspensionControllerChangesetContainer *> > {
	CKSuspensionControllerChangesetContainer __first_;
} compressed_pair<CKSuspensionControllerChangesetContainer **, std::__1::allocator<CKSuspensionControllerChangesetContainer *> >;

typedef struct _split_buffer<CKSuspensionControllerChangesetContainer *, std::__1::allocator<CKSuspensionControllerChangesetContainer *> > {
	CKSuspensionControllerChangesetContainer __first_;
	CKSuspensionControllerChangesetContainer __begin_;
	CKSuspensionControllerChangesetContainer __end_;
	compressed_pair<CKSuspensionControllerChangesetContainer **, std::__1::allocator<CKSuspensionControllerChangesetContainer *> > __end_cap_;
} split_buffer<CKSuspensionControllerChangesetContainer *, std::__1::allocator<CKSuspensionControllerChangesetContainer *> >;

typedef struct deque<CKSuspensionControllerChangesetContainer, std::__1::allocator<CKSuspensionControllerChangesetContainer> > {
	split_buffer<CKSuspensionControllerChangesetContainer *, std::__1::allocator<CKSuspensionControllerChangesetContainer *> > __map_;
	unsigned long long __start_;
	compressed_pair<unsigned long, std::__1::allocator<CKSuspensionControllerChangesetContainer> > __size_;
} deque<CKSuspensionControllerChangesetContainer, std::__1::allocator<CKSuspensionControllerChangesetContainer> >;

typedef struct CKStackLayoutComponentStyle {
	unsigned long long direction;
	double spacing;
	unsigned long long justifyContent;
	unsigned long long alignItems;
} CKStackLayoutComponentStyle;

typedef struct CKStateConfiguration {
	NSString* title;
	UIColor* titleColor;
	UIImage* image;
	UIImage* backgroundImage;
} CKStateConfiguration;

typedef struct array<CKStateConfiguration, 8> {
	CKStateConfiguration __elems_[8];
} array<CKStateConfiguration, 8>;

typedef struct shared_ptr<const CKComponentViewConfiguration::Repr> {
	Repr __ptr_;
	__shared_weak_count __cntrl_;
} shared_ptr<const CKComponentViewConfiguration::Repr>;

typedef struct CKComponentViewConfiguration {
	shared_ptr<const CKComponentViewConfiguration::Repr> rep;
} CKComponentViewConfiguration;

typedef struct _compressed_pair<CKComponentMountInfo *, std::__1::default_delete<CKComponentMountInfo> > {
	CKComponentMountInfo __first_;
} compressed_pair<CKComponentMountInfo *, std::__1::default_delete<CKComponentMountInfo> >;

typedef struct unique_ptr<CKComponentMountInfo, std::__1::default_delete<CKComponentMountInfo> > {
	compressed_pair<CKComponentMountInfo *, std::__1::default_delete<CKComponentMountInfo> > __ptr_;
} unique_ptr<CKComponentMountInfo, std::__1::default_delete<CKComponentMountInfo> >;

typedef struct _compressed_pair<CKPendingComponentAnimation *, std::__1::allocator<CKPendingComponentAnimation> > {
	CKPendingComponentAnimation __first_;
} compressed_pair<CKPendingComponentAnimation *, std::__1::allocator<CKPendingComponentAnimation> >;

typedef struct vector<CKPendingComponentAnimation, std::__1::allocator<CKPendingComponentAnimation> > {
	CKPendingComponentAnimation __begin_;
	CKPendingComponentAnimation __end_;
	compressed_pair<CKPendingComponentAnimation *, std::__1::allocator<CKPendingComponentAnimation> > __end_cap_;
} vector<CKPendingComponentAnimation, std::__1::allocator<CKPendingComponentAnimation> >;

typedef struct _compressed_pair<unsigned long, std::__1::allocator<std::__1::__hash_node<std::__1::__hash_value_type<unsigned long, CKAppliedComponentAnimation>, void *> *> > {
	unsigned long long __first_;
} compressed_pair<unsigned long, std::__1::allocator<std::__1::__hash_node<std::__1::__hash_value_type<unsigned long, CKAppliedComponentAnimation>, void *> *> >;

typedef struct _compressed_pair<unsigned long, std::__1::__unordered_map_hasher<unsigned long, std::__1::__hash_value_type<unsigned long, CKAppliedComponentAnimation>, std::__1::hash<unsigned long>, true> > {
	unsigned long long __first_;
} compressed_pair<unsigned long, std::__1::__unordered_map_hasher<unsigned long, std::__1::__hash_value_type<unsigned long, CKAppliedComponentAnimation>, std::__1::hash<unsigned long>, true> >;

typedef struct _compressed_pair<float, std::__1::__unordered_map_equal<unsigned long, std::__1::__hash_value_type<unsigned long, CKAppliedComponentAnimation>, std::__1::equal_to<unsigned long>, true> > {
	float __first_;
} compressed_pair<float, std::__1::__unordered_map_equal<unsigned long, std::__1::__hash_value_type<unsigned long, CKAppliedComponentAnimation>, std::__1::equal_to<unsigned long>, true> >;

typedef struct _hash_node_base<std::__1::__hash_node<std::__1::__hash_value_type<unsigned long, CKAppliedComponentAnimation>, void *> *> {
	__hash_node<std::__1::__hash_value_type<unsigned long, CKAppliedComponentAnimation>, void *> __next_;
} hash_node_base<std::__1::__hash_node<std::__1::__hash_value_type<unsigned long, CKAppliedComponentAnimation>, void *> *>;

typedef struct _compressed_pair<std::__1::__hash_node_base<std::__1::__hash_node<std::__1::__hash_value_type<unsigned long, CKAppliedComponentAnimation>, void *> *>, std::__1::allocator<std::__1::__hash_node<std::__1::__hash_value_type<unsigned long, CKAppliedComponentAnimation>, void *> > > {
	hash_node_base<std::__1::__hash_node<std::__1::__hash_value_type<unsigned long, CKAppliedComponentAnimation>, void *> *> __first_;
} compressed_pair<std::__1::__hash_node_base<std::__1::__hash_node<std::__1::__hash_value_type<unsigned long, CKAppliedComponentAnimation>, void *> *>, std::__1::allocator<std::__1::__hash_node<std::__1::__hash_value_type<unsigned long, CKAppliedComponentAnimation>, void *> > >;

typedef struct _bucket_list_deallocator<std::__1::allocator<std::__1::__hash_node<std::__1::__hash_value_type<unsigned long, CKAppliedComponentAnimation>, void *> *> > {
	compressed_pair<unsigned long, std::__1::allocator<std::__1::__hash_node<std::__1::__hash_value_type<unsigned long, CKAppliedComponentAnimation>, void *> *> > __data_;
} bucket_list_deallocator<std::__1::allocator<std::__1::__hash_node<std::__1::__hash_value_type<unsigned long, CKAppliedComponentAnimation>, void *> *> >;

typedef struct _compressed_pair<std::__1::__hash_node<std::__1::__hash_value_type<unsigned long, CKAppliedComponentAnimation>, void *> **, std::__1::__bucket_list_deallocator<std::__1::allocator<std::__1::__hash_node<std::__1::__hash_value_type<unsigned long, CKAppliedComponentAnimation>, void *> *> > > {
	__hash_node<std::__1::__hash_value_type<unsigned long, CKAppliedComponentAnimation>, void *> __first_;
	bucket_list_deallocator<std::__1::allocator<std::__1::__hash_node<std::__1::__hash_value_type<unsigned long, CKAppliedComponentAnimation>, void *> *> > __second_;
} compressed_pair<std::__1::__hash_node<std::__1::__hash_value_type<unsigned long, CKAppliedComponentAnimation>, void *> **, std::__1::__bucket_list_deallocator<std::__1::allocator<std::__1::__hash_node<std::__1::__hash_value_type<unsigned long, CKAppliedComponentAnimation>, void *> *> > >;

typedef struct unique_ptr<std::__1::__hash_node<std::__1::__hash_value_type<unsigned long, CKAppliedComponentAnimation>, void *> *[], std::__1::__bucket_list_deallocator<std::__1::allocator<std::__1::__hash_node<std::__1::__hash_value_type<unsigned long, CKAppliedComponentAnimation>, void *> *> > > {
	compressed_pair<std::__1::__hash_node<std::__1::__hash_value_type<unsigned long, CKAppliedComponentAnimation>, void *> **, std::__1::__bucket_list_deallocator<std::__1::allocator<std::__1::__hash_node<std::__1::__hash_value_type<unsigned long, CKAppliedComponentAnimation>, void *> *> > > __ptr_;
} unique_ptr<std::__1::__hash_node<std::__1::__hash_value_type<unsigned long, CKAppliedComponentAnimation>, void *> *[], std::__1::__bucket_list_deallocator<std::__1::allocator<std::__1::__hash_node<std::__1::__hash_value_type<unsigned long, CKAppliedComponentAnimation>, void *> *> > >;

typedef struct _hash_table<std::__1::__hash_value_type<unsigned long, CKAppliedComponentAnimation>, std::__1::__unordered_map_hasher<unsigned long, std::__1::__hash_value_type<unsigned long, CKAppliedComponentAnimation>, std::__1::hash<unsigned long>, true>, std::__1::__unordered_map_equal<unsigned long, std::__1::__hash_value_type<unsigned long, CKAppliedComponentAnimation>, std::__1::equal_to<unsigned long>, true>, std::__1::allocator<std::__1::__hash_value_type<unsigned long, CKAppliedComponentAnimation> > > {
	unique_ptr<std::__1::__hash_node<std::__1::__hash_value_type<unsigned long, CKAppliedComponentAnimation>, void *> *[], std::__1::__bucket_list_deallocator<std::__1::allocator<std::__1::__hash_node<std::__1::__hash_value_type<unsigned long, CKAppliedComponentAnimation>, void *> *> > > __bucket_list_;
	compressed_pair<std::__1::__hash_node_base<std::__1::__hash_node<std::__1::__hash_value_type<unsigned long, CKAppliedComponentAnimation>, void *> *>, std::__1::allocator<std::__1::__hash_node<std::__1::__hash_value_type<unsigned long, CKAppliedComponentAnimation>, void *> > > __p1_;
	compressed_pair<unsigned long, std::__1::__unordered_map_hasher<unsigned long, std::__1::__hash_value_type<unsigned long, CKAppliedComponentAnimation>, std::__1::hash<unsigned long>, true> > __p2_;
	compressed_pair<float, std::__1::__unordered_map_equal<unsigned long, std::__1::__hash_value_type<unsigned long, CKAppliedComponentAnimation>, std::__1::equal_to<unsigned long>, true> > __p3_;
} hash_table<std::__1::__hash_value_type<unsigned long, CKAppliedComponentAnimation>, std::__1::__unordered_map_hasher<unsigned long, std::__1::__hash_value_type<unsigned long, CKAppliedComponentAnimation>, std::__1::hash<unsigned long>, true>, std::__1::__unordered_map_equal<unsigned long, std::__1::__hash_value_type<unsigned long, CKAppliedComponentAnimation>, std::__1::equal_to<unsigned long>, true>, std::__1::allocator<std::__1::__hash_value_type<unsigned long, CKAppliedComponentAnimation> > >;

typedef struct unordered_map<unsigned long, CKAppliedComponentAnimation, std::__1::hash<unsigned long>, std::__1::equal_to<unsigned long>, std::__1::allocator<std::__1::pair<const unsigned long, CKAppliedComponentAnimation> > > {
	hash_table<std::__1::__hash_value_type<unsigned long, CKAppliedComponentAnimation>, std::__1::__unordered_map_hasher<unsigned long, std::__1::__hash_value_type<unsigned long, CKAppliedComponentAnimation>, std::__1::hash<unsigned long>, true>, std::__1::__unordered_map_equal<unsigned long, std::__1::__hash_value_type<unsigned long, CKAppliedComponentAnimation>, std::__1::equal_to<unsigned long>, true>, std::__1::allocator<std::__1::__hash_value_type<unsigned long, CKAppliedComponentAnimation> > > __table_;
} unordered_map<unsigned long, CKAppliedComponentAnimation, std::__1::hash<unsigned long>, std::__1::equal_to<unsigned long>, std::__1::allocator<std::__1::pair<const unsigned long, CKAppliedComponentAnimation> > >;

typedef struct _compressed_pair<unsigned long, std::__1::allocator<std::__1::__hash_node<std::__1::__hash_value_type<CKMemoizationKey, CKComponent *>, void *> *> > {
	unsigned long long __first_;
} compressed_pair<unsigned long, std::__1::allocator<std::__1::__hash_node<std::__1::__hash_value_type<CKMemoizationKey, CKComponent *>, void *> *> >;

typedef struct _compressed_pair<unsigned long, std::__1::__unordered_map_hasher<CKMemoizationKey, std::__1::__hash_value_type<CKMemoizationKey, CKComponent *>, std::__1::hash<CKMemoizationKey>, true> > {
	unsigned long long __first_;
} compressed_pair<unsigned long, std::__1::__unordered_map_hasher<CKMemoizationKey, std::__1::__hash_value_type<CKMemoizationKey, CKComponent *>, std::__1::hash<CKMemoizationKey>, true> >;

typedef struct _compressed_pair<float, std::__1::__unordered_map_equal<CKMemoizationKey, std::__1::__hash_value_type<CKMemoizationKey, CKComponent *>, std::__1::equal_to<CKMemoizationKey>, true> > {
	float __first_;
} compressed_pair<float, std::__1::__unordered_map_equal<CKMemoizationKey, std::__1::__hash_value_type<CKMemoizationKey, CKComponent *>, std::__1::equal_to<CKMemoizationKey>, true> >;

typedef struct _hash_node_base<std::__1::__hash_node<std::__1::__hash_value_type<CKMemoizationKey, CKComponent *>, void *> *> {
	__hash_node<std::__1::__hash_value_type<CKMemoizationKey, CKComponent *>, void *> __next_;
} hash_node_base<std::__1::__hash_node<std::__1::__hash_value_type<CKMemoizationKey, CKComponent *>, void *> *>;

typedef struct _compressed_pair<std::__1::__hash_node_base<std::__1::__hash_node<std::__1::__hash_value_type<CKMemoizationKey, CKComponent *>, void *> *>, std::__1::allocator<std::__1::__hash_node<std::__1::__hash_value_type<CKMemoizationKey, CKComponent *>, void *> > > {
	hash_node_base<std::__1::__hash_node<std::__1::__hash_value_type<CKMemoizationKey, CKComponent *>, void *> *> __first_;
} compressed_pair<std::__1::__hash_node_base<std::__1::__hash_node<std::__1::__hash_value_type<CKMemoizationKey, CKComponent *>, void *> *>, std::__1::allocator<std::__1::__hash_node<std::__1::__hash_value_type<CKMemoizationKey, CKComponent *>, void *> > >;

typedef struct _bucket_list_deallocator<std::__1::allocator<std::__1::__hash_node<std::__1::__hash_value_type<CKMemoizationKey, CKComponent *>, void *> *> > {
	compressed_pair<unsigned long, std::__1::allocator<std::__1::__hash_node<std::__1::__hash_value_type<CKMemoizationKey, CKComponent *>, void *> *> > __data_;
} bucket_list_deallocator<std::__1::allocator<std::__1::__hash_node<std::__1::__hash_value_type<CKMemoizationKey, CKComponent *>, void *> *> >;

typedef struct _compressed_pair<std::__1::__hash_node<std::__1::__hash_value_type<CKMemoizationKey, CKComponent *>, void *> **, std::__1::__bucket_list_deallocator<std::__1::allocator<std::__1::__hash_node<std::__1::__hash_value_type<CKMemoizationKey, CKComponent *>, void *> *> > > {
	__hash_node<std::__1::__hash_value_type<CKMemoizationKey, CKComponent *>, void *> __first_;
	bucket_list_deallocator<std::__1::allocator<std::__1::__hash_node<std::__1::__hash_value_type<CKMemoizationKey, CKComponent *>, void *> *> > __second_;
} compressed_pair<std::__1::__hash_node<std::__1::__hash_value_type<CKMemoizationKey, CKComponent *>, void *> **, std::__1::__bucket_list_deallocator<std::__1::allocator<std::__1::__hash_node<std::__1::__hash_value_type<CKMemoizationKey, CKComponent *>, void *> *> > >;

typedef struct unique_ptr<std::__1::__hash_node<std::__1::__hash_value_type<CKMemoizationKey, CKComponent *>, void *> *[], std::__1::__bucket_list_deallocator<std::__1::allocator<std::__1::__hash_node<std::__1::__hash_value_type<CKMemoizationKey, CKComponent *>, void *> *> > > {
	compressed_pair<std::__1::__hash_node<std::__1::__hash_value_type<CKMemoizationKey, CKComponent *>, void *> **, std::__1::__bucket_list_deallocator<std::__1::allocator<std::__1::__hash_node<std::__1::__hash_value_type<CKMemoizationKey, CKComponent *>, void *> *> > > __ptr_;
} unique_ptr<std::__1::__hash_node<std::__1::__hash_value_type<CKMemoizationKey, CKComponent *>, void *> *[], std::__1::__bucket_list_deallocator<std::__1::allocator<std::__1::__hash_node<std::__1::__hash_value_type<CKMemoizationKey, CKComponent *>, void *> *> > >;

typedef struct _hash_table<std::__1::__hash_value_type<CKMemoizationKey, CKComponent *>, std::__1::__unordered_map_hasher<CKMemoizationKey, std::__1::__hash_value_type<CKMemoizationKey, CKComponent *>, std::__1::hash<CKMemoizationKey>, true>, std::__1::__unordered_map_equal<CKMemoizationKey, std::__1::__hash_value_type<CKMemoizationKey, CKComponent *>, std::__1::equal_to<CKMemoizationKey>, true>, std::__1::allocator<std::__1::__hash_value_type<CKMemoizationKey, CKComponent *> > > {
	unique_ptr<std::__1::__hash_node<std::__1::__hash_value_type<CKMemoizationKey, CKComponent *>, void *> *[], std::__1::__bucket_list_deallocator<std::__1::allocator<std::__1::__hash_node<std::__1::__hash_value_type<CKMemoizationKey, CKComponent *>, void *> *> > > __bucket_list_;
	compressed_pair<std::__1::__hash_node_base<std::__1::__hash_node<std::__1::__hash_value_type<CKMemoizationKey, CKComponent *>, void *> *>, std::__1::allocator<std::__1::__hash_node<std::__1::__hash_value_type<CKMemoizationKey, CKComponent *>, void *> > > __p1_;
	compressed_pair<unsigned long, std::__1::__unordered_map_hasher<CKMemoizationKey, std::__1::__hash_value_type<CKMemoizationKey, CKComponent *>, std::__1::hash<CKMemoizationKey>, true> > __p2_;
	compressed_pair<float, std::__1::__unordered_map_equal<CKMemoizationKey, std::__1::__hash_value_type<CKMemoizationKey, CKComponent *>, std::__1::equal_to<CKMemoizationKey>, true> > __p3_;
} hash_table<std::__1::__hash_value_type<CKMemoizationKey, CKComponent *>, std::__1::__unordered_map_hasher<CKMemoizationKey, std::__1::__hash_value_type<CKMemoizationKey, CKComponent *>, std::__1::hash<CKMemoizationKey>, true>, std::__1::__unordered_map_equal<CKMemoizationKey, std::__1::__hash_value_type<CKMemoizationKey, CKComponent *>, std::__1::equal_to<CKMemoizationKey>, true>, std::__1::allocator<std::__1::__hash_value_type<CKMemoizationKey, CKComponent *> > >;

typedef struct unordered_multimap<CKMemoizationKey, CKComponent *, std::__1::hash<CKMemoizationKey>, std::__1::equal_to<CKMemoizationKey>, std::__1::allocator<std::__1::pair<const CKMemoizationKey, CKComponent *> > > {
	hash_table<std::__1::__hash_value_type<CKMemoizationKey, CKComponent *>, std::__1::__unordered_map_hasher<CKMemoizationKey, std::__1::__hash_value_type<CKMemoizationKey, CKComponent *>, std::__1::hash<CKMemoizationKey>, true>, std::__1::__unordered_map_equal<CKMemoizationKey, std::__1::__hash_value_type<CKMemoizationKey, CKComponent *>, std::__1::equal_to<CKMemoizationKey>, true>, std::__1::allocator<std::__1::__hash_value_type<CKMemoizationKey, CKComponent *> > > __table_;
} unordered_multimap<CKMemoizationKey, CKComponent *, std::__1::hash<CKMemoizationKey>, std::__1::equal_to<CKMemoizationKey>, std::__1::allocator<std::__1::pair<const CKMemoizationKey, CKComponent *> > >;

typedef struct _compressed_pair<unsigned long, std::__1::allocator<std::__1::__hash_node<std::__1::__hash_value_type<CKLayoutMemoizationKey, CKComponentLayout>, void *> *> > {
	unsigned long long __first_;
} compressed_pair<unsigned long, std::__1::allocator<std::__1::__hash_node<std::__1::__hash_value_type<CKLayoutMemoizationKey, CKComponentLayout>, void *> *> >;

typedef struct _compressed_pair<unsigned long, std::__1::__unordered_map_hasher<CKLayoutMemoizationKey, std::__1::__hash_value_type<CKLayoutMemoizationKey, CKComponentLayout>, CKLayoutMemoizationKey::Hash, true> > {
	unsigned long long __first_;
} compressed_pair<unsigned long, std::__1::__unordered_map_hasher<CKLayoutMemoizationKey, std::__1::__hash_value_type<CKLayoutMemoizationKey, CKComponentLayout>, CKLayoutMemoizationKey::Hash, true> >;

typedef struct _compressed_pair<float, std::__1::__unordered_map_equal<CKLayoutMemoizationKey, std::__1::__hash_value_type<CKLayoutMemoizationKey, CKComponentLayout>, CKLayoutMemoizationKey::Equals, true> > {
	float __first_;
} compressed_pair<float, std::__1::__unordered_map_equal<CKLayoutMemoizationKey, std::__1::__hash_value_type<CKLayoutMemoizationKey, CKComponentLayout>, CKLayoutMemoizationKey::Equals, true> >;

typedef struct _hash_node_base<std::__1::__hash_node<std::__1::__hash_value_type<CKLayoutMemoizationKey, CKComponentLayout>, void *> *> {
	__hash_node<std::__1::__hash_value_type<CKLayoutMemoizationKey, CKComponentLayout>, void *> __next_;
} hash_node_base<std::__1::__hash_node<std::__1::__hash_value_type<CKLayoutMemoizationKey, CKComponentLayout>, void *> *>;

typedef struct _compressed_pair<std::__1::__hash_node_base<std::__1::__hash_node<std::__1::__hash_value_type<CKLayoutMemoizationKey, CKComponentLayout>, void *> *>, std::__1::allocator<std::__1::__hash_node<std::__1::__hash_value_type<CKLayoutMemoizationKey, CKComponentLayout>, void *> > > {
	hash_node_base<std::__1::__hash_node<std::__1::__hash_value_type<CKLayoutMemoizationKey, CKComponentLayout>, void *> *> __first_;
} compressed_pair<std::__1::__hash_node_base<std::__1::__hash_node<std::__1::__hash_value_type<CKLayoutMemoizationKey, CKComponentLayout>, void *> *>, std::__1::allocator<std::__1::__hash_node<std::__1::__hash_value_type<CKLayoutMemoizationKey, CKComponentLayout>, void *> > >;

typedef struct _bucket_list_deallocator<std::__1::allocator<std::__1::__hash_node<std::__1::__hash_value_type<CKLayoutMemoizationKey, CKComponentLayout>, void *> *> > {
	compressed_pair<unsigned long, std::__1::allocator<std::__1::__hash_node<std::__1::__hash_value_type<CKLayoutMemoizationKey, CKComponentLayout>, void *> *> > __data_;
} bucket_list_deallocator<std::__1::allocator<std::__1::__hash_node<std::__1::__hash_value_type<CKLayoutMemoizationKey, CKComponentLayout>, void *> *> >;

typedef struct _compressed_pair<std::__1::__hash_node<std::__1::__hash_value_type<CKLayoutMemoizationKey, CKComponentLayout>, void *> **, std::__1::__bucket_list_deallocator<std::__1::allocator<std::__1::__hash_node<std::__1::__hash_value_type<CKLayoutMemoizationKey, CKComponentLayout>, void *> *> > > {
	__hash_node<std::__1::__hash_value_type<CKLayoutMemoizationKey, CKComponentLayout>, void *> __first_;
	bucket_list_deallocator<std::__1::allocator<std::__1::__hash_node<std::__1::__hash_value_type<CKLayoutMemoizationKey, CKComponentLayout>, void *> *> > __second_;
} compressed_pair<std::__1::__hash_node<std::__1::__hash_value_type<CKLayoutMemoizationKey, CKComponentLayout>, void *> **, std::__1::__bucket_list_deallocator<std::__1::allocator<std::__1::__hash_node<std::__1::__hash_value_type<CKLayoutMemoizationKey, CKComponentLayout>, void *> *> > >;

typedef struct unique_ptr<std::__1::__hash_node<std::__1::__hash_value_type<CKLayoutMemoizationKey, CKComponentLayout>, void *> *[], std::__1::__bucket_list_deallocator<std::__1::allocator<std::__1::__hash_node<std::__1::__hash_value_type<CKLayoutMemoizationKey, CKComponentLayout>, void *> *> > > {
	compressed_pair<std::__1::__hash_node<std::__1::__hash_value_type<CKLayoutMemoizationKey, CKComponentLayout>, void *> **, std::__1::__bucket_list_deallocator<std::__1::allocator<std::__1::__hash_node<std::__1::__hash_value_type<CKLayoutMemoizationKey, CKComponentLayout>, void *> *> > > __ptr_;
} unique_ptr<std::__1::__hash_node<std::__1::__hash_value_type<CKLayoutMemoizationKey, CKComponentLayout>, void *> *[], std::__1::__bucket_list_deallocator<std::__1::allocator<std::__1::__hash_node<std::__1::__hash_value_type<CKLayoutMemoizationKey, CKComponentLayout>, void *> *> > >;

typedef struct _hash_table<std::__1::__hash_value_type<CKLayoutMemoizationKey, CKComponentLayout>, std::__1::__unordered_map_hasher<CKLayoutMemoizationKey, std::__1::__hash_value_type<CKLayoutMemoizationKey, CKComponentLayout>, CKLayoutMemoizationKey::Hash, true>, std::__1::__unordered_map_equal<CKLayoutMemoizationKey, std::__1::__hash_value_type<CKLayoutMemoizationKey, CKComponentLayout>, CKLayoutMemoizationKey::Equals, true>, std::__1::allocator<std::__1::__hash_value_type<CKLayoutMemoizationKey, CKComponentLayout> > > {
	unique_ptr<std::__1::__hash_node<std::__1::__hash_value_type<CKLayoutMemoizationKey, CKComponentLayout>, void *> *[], std::__1::__bucket_list_deallocator<std::__1::allocator<std::__1::__hash_node<std::__1::__hash_value_type<CKLayoutMemoizationKey, CKComponentLayout>, void *> *> > > __bucket_list_;
	compressed_pair<std::__1::__hash_node_base<std::__1::__hash_node<std::__1::__hash_value_type<CKLayoutMemoizationKey, CKComponentLayout>, void *> *>, std::__1::allocator<std::__1::__hash_node<std::__1::__hash_value_type<CKLayoutMemoizationKey, CKComponentLayout>, void *> > > __p1_;
	compressed_pair<unsigned long, std::__1::__unordered_map_hasher<CKLayoutMemoizationKey, std::__1::__hash_value_type<CKLayoutMemoizationKey, CKComponentLayout>, CKLayoutMemoizationKey::Hash, true> > __p2_;
	compressed_pair<float, std::__1::__unordered_map_equal<CKLayoutMemoizationKey, std::__1::__hash_value_type<CKLayoutMemoizationKey, CKComponentLayout>, CKLayoutMemoizationKey::Equals, true> > __p3_;
} hash_table<std::__1::__hash_value_type<CKLayoutMemoizationKey, CKComponentLayout>, std::__1::__unordered_map_hasher<CKLayoutMemoizationKey, std::__1::__hash_value_type<CKLayoutMemoizationKey, CKComponentLayout>, CKLayoutMemoizationKey::Hash, true>, std::__1::__unordered_map_equal<CKLayoutMemoizationKey, std::__1::__hash_value_type<CKLayoutMemoizationKey, CKComponentLayout>, CKLayoutMemoizationKey::Equals, true>, std::__1::allocator<std::__1::__hash_value_type<CKLayoutMemoizationKey, CKComponentLayout> > >;

typedef struct unordered_map<CKLayoutMemoizationKey, CKComponentLayout, CKLayoutMemoizationKey::Hash, CKLayoutMemoizationKey::Equals, std::__1::allocator<std::__1::pair<const CKLayoutMemoizationKey, CKComponentLayout> > > {
	hash_table<std::__1::__hash_value_type<CKLayoutMemoizationKey, CKComponentLayout>, std::__1::__unordered_map_hasher<CKLayoutMemoizationKey, std::__1::__hash_value_type<CKLayoutMemoizationKey, CKComponentLayout>, CKLayoutMemoizationKey::Hash, true>, std::__1::__unordered_map_equal<CKLayoutMemoizationKey, std::__1::__hash_value_type<CKLayoutMemoizationKey, CKComponentLayout>, CKLayoutMemoizationKey::Equals, true>, std::__1::allocator<std::__1::__hash_value_type<CKLayoutMemoizationKey, CKComponentLayout> > > __table_;
} unordered_map<CKLayoutMemoizationKey, CKComponentLayout, CKLayoutMemoizationKey::Hash, CKLayoutMemoizationKey::Equals, std::__1::allocator<std::__1::pair<const CKLayoutMemoizationKey, CKComponentLayout> > >;

typedef struct _compressed_pair<unsigned long, std::__1::allocator<std::__1::__hash_node<std::__1::__hash_value_type<CK::Component::ViewKey, CK::Component::ViewReusePool>, void *> *> > {
	unsigned long long __first_;
} compressed_pair<unsigned long, std::__1::allocator<std::__1::__hash_node<std::__1::__hash_value_type<CK::Component::ViewKey, CK::Component::ViewReusePool>, void *> *> >;

typedef struct _compressed_pair<unsigned long, std::__1::__unordered_map_hasher<CK::Component::ViewKey, std::__1::__hash_value_type<CK::Component::ViewKey, CK::Component::ViewReusePool>, std::__1::hash<CK::Component::ViewKey>, true> > {
	unsigned long long __first_;
} compressed_pair<unsigned long, std::__1::__unordered_map_hasher<CK::Component::ViewKey, std::__1::__hash_value_type<CK::Component::ViewKey, CK::Component::ViewReusePool>, std::__1::hash<CK::Component::ViewKey>, true> >;

typedef struct _compressed_pair<float, std::__1::__unordered_map_equal<CK::Component::ViewKey, std::__1::__hash_value_type<CK::Component::ViewKey, CK::Component::ViewReusePool>, std::__1::equal_to<CK::Component::ViewKey>, true> > {
	float __first_;
} compressed_pair<float, std::__1::__unordered_map_equal<CK::Component::ViewKey, std::__1::__hash_value_type<CK::Component::ViewKey, CK::Component::ViewReusePool>, std::__1::equal_to<CK::Component::ViewKey>, true> >;

typedef struct _compressed_pair<UIView *__strong *, std::__1::allocator<UIView *> > {
	id __first_;
} compressed_pair<UIView *__strong *, std::__1::allocator<UIView *> >;

typedef struct vector<UIView *, std::__1::allocator<UIView *> > {
	id __begin_;
	id __end_;
	compressed_pair<UIView *__strong *, std::__1::allocator<UIView *> > __end_cap_;
} vector<UIView *, std::__1::allocator<UIView *> >;

typedef struct _hash_node_base<std::__1::__hash_node<std::__1::__hash_value_type<CK::Component::ViewKey, CK::Component::ViewReusePool>, void *> *> {
	__hash_node<std::__1::__hash_value_type<CK::Component::ViewKey, CK::Component::ViewReusePool>, void *> __next_;
} hash_node_base<std::__1::__hash_node<std::__1::__hash_value_type<CK::Component::ViewKey, CK::Component::ViewReusePool>, void *> *>;

typedef struct _compressed_pair<std::__1::__hash_node_base<std::__1::__hash_node<std::__1::__hash_value_type<CK::Component::ViewKey, CK::Component::ViewReusePool>, void *> *>, std::__1::allocator<std::__1::__hash_node<std::__1::__hash_value_type<CK::Component::ViewKey, CK::Component::ViewReusePool>, void *> > > {
	hash_node_base<std::__1::__hash_node<std::__1::__hash_value_type<CK::Component::ViewKey, CK::Component::ViewReusePool>, void *> *> __first_;
} compressed_pair<std::__1::__hash_node_base<std::__1::__hash_node<std::__1::__hash_value_type<CK::Component::ViewKey, CK::Component::ViewReusePool>, void *> *>, std::__1::allocator<std::__1::__hash_node<std::__1::__hash_value_type<CK::Component::ViewKey, CK::Component::ViewReusePool>, void *> > >;

typedef struct _bucket_list_deallocator<std::__1::allocator<std::__1::__hash_node<std::__1::__hash_value_type<CK::Component::ViewKey, CK::Component::ViewReusePool>, void *> *> > {
	compressed_pair<unsigned long, std::__1::allocator<std::__1::__hash_node<std::__1::__hash_value_type<CK::Component::ViewKey, CK::Component::ViewReusePool>, void *> *> > __data_;
} bucket_list_deallocator<std::__1::allocator<std::__1::__hash_node<std::__1::__hash_value_type<CK::Component::ViewKey, CK::Component::ViewReusePool>, void *> *> >;

typedef struct _compressed_pair<std::__1::__hash_node<std::__1::__hash_value_type<CK::Component::ViewKey, CK::Component::ViewReusePool>, void *> **, std::__1::__bucket_list_deallocator<std::__1::allocator<std::__1::__hash_node<std::__1::__hash_value_type<CK::Component::ViewKey, CK::Component::ViewReusePool>, void *> *> > > {
	__hash_node<std::__1::__hash_value_type<CK::Component::ViewKey, CK::Component::ViewReusePool>, void *> __first_;
	bucket_list_deallocator<std::__1::allocator<std::__1::__hash_node<std::__1::__hash_value_type<CK::Component::ViewKey, CK::Component::ViewReusePool>, void *> *> > __second_;
} compressed_pair<std::__1::__hash_node<std::__1::__hash_value_type<CK::Component::ViewKey, CK::Component::ViewReusePool>, void *> **, std::__1::__bucket_list_deallocator<std::__1::allocator<std::__1::__hash_node<std::__1::__hash_value_type<CK::Component::ViewKey, CK::Component::ViewReusePool>, void *> *> > >;

typedef struct unique_ptr<std::__1::__hash_node<std::__1::__hash_value_type<CK::Component::ViewKey, CK::Component::ViewReusePool>, void *> *[], std::__1::__bucket_list_deallocator<std::__1::allocator<std::__1::__hash_node<std::__1::__hash_value_type<CK::Component::ViewKey, CK::Component::ViewReusePool>, void *> *> > > {
	compressed_pair<std::__1::__hash_node<std::__1::__hash_value_type<CK::Component::ViewKey, CK::Component::ViewReusePool>, void *> **, std::__1::__bucket_list_deallocator<std::__1::allocator<std::__1::__hash_node<std::__1::__hash_value_type<CK::Component::ViewKey, CK::Component::ViewReusePool>, void *> *> > > __ptr_;
} unique_ptr<std::__1::__hash_node<std::__1::__hash_value_type<CK::Component::ViewKey, CK::Component::ViewReusePool>, void *> *[], std::__1::__bucket_list_deallocator<std::__1::allocator<std::__1::__hash_node<std::__1::__hash_value_type<CK::Component::ViewKey, CK::Component::ViewReusePool>, void *> *> > >;

typedef struct _hash_table<std::__1::__hash_value_type<CK::Component::ViewKey, CK::Component::ViewReusePool>, std::__1::__unordered_map_hasher<CK::Component::ViewKey, std::__1::__hash_value_type<CK::Component::ViewKey, CK::Component::ViewReusePool>, std::__1::hash<CK::Component::ViewKey>, true>, std::__1::__unordered_map_equal<CK::Component::ViewKey, std::__1::__hash_value_type<CK::Component::ViewKey, CK::Component::ViewReusePool>, std::__1::equal_to<CK::Component::ViewKey>, true>, std::__1::allocator<std::__1::__hash_value_type<CK::Component::ViewKey, CK::Component::ViewReusePool> > > {
	unique_ptr<std::__1::__hash_node<std::__1::__hash_value_type<CK::Component::ViewKey, CK::Component::ViewReusePool>, void *> *[], std::__1::__bucket_list_deallocator<std::__1::allocator<std::__1::__hash_node<std::__1::__hash_value_type<CK::Component::ViewKey, CK::Component::ViewReusePool>, void *> *> > > __bucket_list_;
	compressed_pair<std::__1::__hash_node_base<std::__1::__hash_node<std::__1::__hash_value_type<CK::Component::ViewKey, CK::Component::ViewReusePool>, void *> *>, std::__1::allocator<std::__1::__hash_node<std::__1::__hash_value_type<CK::Component::ViewKey, CK::Component::ViewReusePool>, void *> > > __p1_;
	compressed_pair<unsigned long, std::__1::__unordered_map_hasher<CK::Component::ViewKey, std::__1::__hash_value_type<CK::Component::ViewKey, CK::Component::ViewReusePool>, std::__1::hash<CK::Component::ViewKey>, true> > __p2_;
	compressed_pair<float, std::__1::__unordered_map_equal<CK::Component::ViewKey, std::__1::__hash_value_type<CK::Component::ViewKey, CK::Component::ViewReusePool>, std::__1::equal_to<CK::Component::ViewKey>, true> > __p3_;
} hash_table<std::__1::__hash_value_type<CK::Component::ViewKey, CK::Component::ViewReusePool>, std::__1::__unordered_map_hasher<CK::Component::ViewKey, std::__1::__hash_value_type<CK::Component::ViewKey, CK::Component::ViewReusePool>, std::__1::hash<CK::Component::ViewKey>, true>, std::__1::__unordered_map_equal<CK::Component::ViewKey, std::__1::__hash_value_type<CK::Component::ViewKey, CK::Component::ViewReusePool>, std::__1::equal_to<CK::Component::ViewKey>, true>, std::__1::allocator<std::__1::__hash_value_type<CK::Component::ViewKey, CK::Component::ViewReusePool> > >;

typedef struct unordered_map<CK::Component::ViewKey, CK::Component::ViewReusePool, std::__1::hash<CK::Component::ViewKey>, std::__1::equal_to<CK::Component::ViewKey>, std::__1::allocator<std::__1::pair<const CK::Component::ViewKey, CK::Component::ViewReusePool> > > {
	hash_table<std::__1::__hash_value_type<CK::Component::ViewKey, CK::Component::ViewReusePool>, std::__1::__unordered_map_hasher<CK::Component::ViewKey, std::__1::__hash_value_type<CK::Component::ViewKey, CK::Component::ViewReusePool>, std::__1::hash<CK::Component::ViewKey>, true>, std::__1::__unordered_map_equal<CK::Component::ViewKey, std::__1::__hash_value_type<CK::Component::ViewKey, CK::Component::ViewReusePool>, std::__1::equal_to<CK::Component::ViewKey>, true>, std::__1::allocator<std::__1::__hash_value_type<CK::Component::ViewKey, CK::Component::ViewReusePool> > > __table_;
} unordered_map<CK::Component::ViewKey, CK::Component::ViewReusePool, std::__1::hash<CK::Component::ViewKey>, std::__1::equal_to<CK::Component::ViewKey>, std::__1::allocator<std::__1::pair<const CK::Component::ViewKey, CK::Component::ViewReusePool> > >;

typedef struct ViewReusePoolMap {
	unordered_map<CK::Component::ViewKey, CK::Component::ViewReusePool, std::__1::hash<CK::Component::ViewKey>, std::__1::equal_to<CK::Component::ViewKey>, std::__1::allocator<std::__1::pair<const CK::Component::ViewKey, CK::Component::ViewReusePool> > > map;
	vector<UIView *, std::__1::allocator<UIView *> > vendedViews;
} ViewReusePoolMap;

typedef struct _compressed_pair<unsigned long, std::__1::allocator<std::__1::__hash_node<std::__1::__hash_value_type<_CKStateScopeKey, CKComponentScopeFrame *>, void *> *> > {
	unsigned long long __first_;
} compressed_pair<unsigned long, std::__1::allocator<std::__1::__hash_node<std::__1::__hash_value_type<_CKStateScopeKey, CKComponentScopeFrame *>, void *> *> >;

typedef struct _compressed_pair<unsigned long, std::__1::__unordered_map_hasher<_CKStateScopeKey, std::__1::__hash_value_type<_CKStateScopeKey, CKComponentScopeFrame *>, std::__1::hash<_CKStateScopeKey>, true> > {
	unsigned long long __first_;
} compressed_pair<unsigned long, std::__1::__unordered_map_hasher<_CKStateScopeKey, std::__1::__hash_value_type<_CKStateScopeKey, CKComponentScopeFrame *>, std::__1::hash<_CKStateScopeKey>, true> >;

typedef struct _compressed_pair<float, std::__1::__unordered_map_equal<_CKStateScopeKey, std::__1::__hash_value_type<_CKStateScopeKey, CKComponentScopeFrame *>, std::__1::equal_to<_CKStateScopeKey>, true> > {
	float __first_;
} compressed_pair<float, std::__1::__unordered_map_equal<_CKStateScopeKey, std::__1::__hash_value_type<_CKStateScopeKey, CKComponentScopeFrame *>, std::__1::equal_to<_CKStateScopeKey>, true> >;

typedef struct _hash_node_base<std::__1::__hash_node<std::__1::__hash_value_type<_CKStateScopeKey, CKComponentScopeFrame *>, void *> *> {
	__hash_node<std::__1::__hash_value_type<_CKStateScopeKey, CKComponentScopeFrame *>, void *> __next_;
} hash_node_base<std::__1::__hash_node<std::__1::__hash_value_type<_CKStateScopeKey, CKComponentScopeFrame *>, void *> *>;

typedef struct _compressed_pair<std::__1::__hash_node_base<std::__1::__hash_node<std::__1::__hash_value_type<_CKStateScopeKey, CKComponentScopeFrame *>, void *> *>, std::__1::allocator<std::__1::__hash_node<std::__1::__hash_value_type<_CKStateScopeKey, CKComponentScopeFrame *>, void *> > > {
	hash_node_base<std::__1::__hash_node<std::__1::__hash_value_type<_CKStateScopeKey, CKComponentScopeFrame *>, void *> *> __first_;
} compressed_pair<std::__1::__hash_node_base<std::__1::__hash_node<std::__1::__hash_value_type<_CKStateScopeKey, CKComponentScopeFrame *>, void *> *>, std::__1::allocator<std::__1::__hash_node<std::__1::__hash_value_type<_CKStateScopeKey, CKComponentScopeFrame *>, void *> > >;

typedef struct _bucket_list_deallocator<std::__1::allocator<std::__1::__hash_node<std::__1::__hash_value_type<_CKStateScopeKey, CKComponentScopeFrame *>, void *> *> > {
	compressed_pair<unsigned long, std::__1::allocator<std::__1::__hash_node<std::__1::__hash_value_type<_CKStateScopeKey, CKComponentScopeFrame *>, void *> *> > __data_;
} bucket_list_deallocator<std::__1::allocator<std::__1::__hash_node<std::__1::__hash_value_type<_CKStateScopeKey, CKComponentScopeFrame *>, void *> *> >;

typedef struct _compressed_pair<std::__1::__hash_node<std::__1::__hash_value_type<_CKStateScopeKey, CKComponentScopeFrame *>, void *> **, std::__1::__bucket_list_deallocator<std::__1::allocator<std::__1::__hash_node<std::__1::__hash_value_type<_CKStateScopeKey, CKComponentScopeFrame *>, void *> *> > > {
	__hash_node<std::__1::__hash_value_type<_CKStateScopeKey, CKComponentScopeFrame *>, void *> __first_;
	bucket_list_deallocator<std::__1::allocator<std::__1::__hash_node<std::__1::__hash_value_type<_CKStateScopeKey, CKComponentScopeFrame *>, void *> *> > __second_;
} compressed_pair<std::__1::__hash_node<std::__1::__hash_value_type<_CKStateScopeKey, CKComponentScopeFrame *>, void *> **, std::__1::__bucket_list_deallocator<std::__1::allocator<std::__1::__hash_node<std::__1::__hash_value_type<_CKStateScopeKey, CKComponentScopeFrame *>, void *> *> > >;

typedef struct unique_ptr<std::__1::__hash_node<std::__1::__hash_value_type<_CKStateScopeKey, CKComponentScopeFrame *>, void *> *[], std::__1::__bucket_list_deallocator<std::__1::allocator<std::__1::__hash_node<std::__1::__hash_value_type<_CKStateScopeKey, CKComponentScopeFrame *>, void *> *> > > {
	compressed_pair<std::__1::__hash_node<std::__1::__hash_value_type<_CKStateScopeKey, CKComponentScopeFrame *>, void *> **, std::__1::__bucket_list_deallocator<std::__1::allocator<std::__1::__hash_node<std::__1::__hash_value_type<_CKStateScopeKey, CKComponentScopeFrame *>, void *> *> > > __ptr_;
} unique_ptr<std::__1::__hash_node<std::__1::__hash_value_type<_CKStateScopeKey, CKComponentScopeFrame *>, void *> *[], std::__1::__bucket_list_deallocator<std::__1::allocator<std::__1::__hash_node<std::__1::__hash_value_type<_CKStateScopeKey, CKComponentScopeFrame *>, void *> *> > >;

typedef struct _hash_table<std::__1::__hash_value_type<_CKStateScopeKey, CKComponentScopeFrame *>, std::__1::__unordered_map_hasher<_CKStateScopeKey, std::__1::__hash_value_type<_CKStateScopeKey, CKComponentScopeFrame *>, std::__1::hash<_CKStateScopeKey>, true>, std::__1::__unordered_map_equal<_CKStateScopeKey, std::__1::__hash_value_type<_CKStateScopeKey, CKComponentScopeFrame *>, std::__1::equal_to<_CKStateScopeKey>, true>, std::__1::allocator<std::__1::__hash_value_type<_CKStateScopeKey, CKComponentScopeFrame *> > > {
	unique_ptr<std::__1::__hash_node<std::__1::__hash_value_type<_CKStateScopeKey, CKComponentScopeFrame *>, void *> *[], std::__1::__bucket_list_deallocator<std::__1::allocator<std::__1::__hash_node<std::__1::__hash_value_type<_CKStateScopeKey, CKComponentScopeFrame *>, void *> *> > > __bucket_list_;
	compressed_pair<std::__1::__hash_node_base<std::__1::__hash_node<std::__1::__hash_value_type<_CKStateScopeKey, CKComponentScopeFrame *>, void *> *>, std::__1::allocator<std::__1::__hash_node<std::__1::__hash_value_type<_CKStateScopeKey, CKComponentScopeFrame *>, void *> > > __p1_;
	compressed_pair<unsigned long, std::__1::__unordered_map_hasher<_CKStateScopeKey, std::__1::__hash_value_type<_CKStateScopeKey, CKComponentScopeFrame *>, std::__1::hash<_CKStateScopeKey>, true> > __p2_;
	compressed_pair<float, std::__1::__unordered_map_equal<_CKStateScopeKey, std::__1::__hash_value_type<_CKStateScopeKey, CKComponentScopeFrame *>, std::__1::equal_to<_CKStateScopeKey>, true> > __p3_;
} hash_table<std::__1::__hash_value_type<_CKStateScopeKey, CKComponentScopeFrame *>, std::__1::__unordered_map_hasher<_CKStateScopeKey, std::__1::__hash_value_type<_CKStateScopeKey, CKComponentScopeFrame *>, std::__1::hash<_CKStateScopeKey>, true>, std::__1::__unordered_map_equal<_CKStateScopeKey, std::__1::__hash_value_type<_CKStateScopeKey, CKComponentScopeFrame *>, std::__1::equal_to<_CKStateScopeKey>, true>, std::__1::allocator<std::__1::__hash_value_type<_CKStateScopeKey, CKComponentScopeFrame *> > >;

typedef struct unordered_map<_CKStateScopeKey, CKComponentScopeFrame *, std::__1::hash<_CKStateScopeKey>, std::__1::equal_to<_CKStateScopeKey>, std::__1::allocator<std::__1::pair<const _CKStateScopeKey, CKComponentScopeFrame *> > > {
	hash_table<std::__1::__hash_value_type<_CKStateScopeKey, CKComponentScopeFrame *>, std::__1::__unordered_map_hasher<_CKStateScopeKey, std::__1::__hash_value_type<_CKStateScopeKey, CKComponentScopeFrame *>, std::__1::hash<_CKStateScopeKey>, true>, std::__1::__unordered_map_equal<_CKStateScopeKey, std::__1::__hash_value_type<_CKStateScopeKey, CKComponentScopeFrame *>, std::__1::equal_to<_CKStateScopeKey>, true>, std::__1::allocator<std::__1::__hash_value_type<_CKStateScopeKey, CKComponentScopeFrame *> > > __table_;
} unordered_map<_CKStateScopeKey, CKComponentScopeFrame *, std::__1::hash<_CKStateScopeKey>, std::__1::equal_to<_CKStateScopeKey>, std::__1::allocator<std::__1::pair<const _CKStateScopeKey, CKComponentScopeFrame *> > >;

typedef struct _compressed_pair<unsigned long, std::__1::allocator<std::__1::__hash_node<std::__1::__hash_value_type<CKComponentAnnouncedEvent, CKComponentController *>, void *> *> > {
	unsigned long long __first_;
} compressed_pair<unsigned long, std::__1::allocator<std::__1::__hash_node<std::__1::__hash_value_type<CKComponentAnnouncedEvent, CKComponentController *>, void *> *> >;

typedef struct _compressed_pair<unsigned long, std::__1::__unordered_map_hasher<CKComponentAnnouncedEvent, std::__1::__hash_value_type<CKComponentAnnouncedEvent, CKComponentController *>, std::__1::hash<unsigned long>, true> > {
	unsigned long long __first_;
} compressed_pair<unsigned long, std::__1::__unordered_map_hasher<CKComponentAnnouncedEvent, std::__1::__hash_value_type<CKComponentAnnouncedEvent, CKComponentController *>, std::__1::hash<unsigned long>, true> >;

typedef struct _compressed_pair<float, std::__1::__unordered_map_equal<CKComponentAnnouncedEvent, std::__1::__hash_value_type<CKComponentAnnouncedEvent, CKComponentController *>, std::__1::equal_to<unsigned long>, true> > {
	float __first_;
} compressed_pair<float, std::__1::__unordered_map_equal<CKComponentAnnouncedEvent, std::__1::__hash_value_type<CKComponentAnnouncedEvent, CKComponentController *>, std::__1::equal_to<unsigned long>, true> >;

typedef struct _hash_node_base<std::__1::__hash_node<std::__1::__hash_value_type<CKComponentAnnouncedEvent, CKComponentController *>, void *> *> {
	__hash_node<std::__1::__hash_value_type<CKComponentAnnouncedEvent, CKComponentController *>, void *> __next_;
} hash_node_base<std::__1::__hash_node<std::__1::__hash_value_type<CKComponentAnnouncedEvent, CKComponentController *>, void *> *>;

typedef struct _compressed_pair<std::__1::__hash_node_base<std::__1::__hash_node<std::__1::__hash_value_type<CKComponentAnnouncedEvent, CKComponentController *>, void *> *>, std::__1::allocator<std::__1::__hash_node<std::__1::__hash_value_type<CKComponentAnnouncedEvent, CKComponentController *>, void *> > > {
	hash_node_base<std::__1::__hash_node<std::__1::__hash_value_type<CKComponentAnnouncedEvent, CKComponentController *>, void *> *> __first_;
} compressed_pair<std::__1::__hash_node_base<std::__1::__hash_node<std::__1::__hash_value_type<CKComponentAnnouncedEvent, CKComponentController *>, void *> *>, std::__1::allocator<std::__1::__hash_node<std::__1::__hash_value_type<CKComponentAnnouncedEvent, CKComponentController *>, void *> > >;

typedef struct _bucket_list_deallocator<std::__1::allocator<std::__1::__hash_node<std::__1::__hash_value_type<CKComponentAnnouncedEvent, CKComponentController *>, void *> *> > {
	compressed_pair<unsigned long, std::__1::allocator<std::__1::__hash_node<std::__1::__hash_value_type<CKComponentAnnouncedEvent, CKComponentController *>, void *> *> > __data_;
} bucket_list_deallocator<std::__1::allocator<std::__1::__hash_node<std::__1::__hash_value_type<CKComponentAnnouncedEvent, CKComponentController *>, void *> *> >;

typedef struct _compressed_pair<std::__1::__hash_node<std::__1::__hash_value_type<CKComponentAnnouncedEvent, CKComponentController *>, void *> **, std::__1::__bucket_list_deallocator<std::__1::allocator<std::__1::__hash_node<std::__1::__hash_value_type<CKComponentAnnouncedEvent, CKComponentController *>, void *> *> > > {
	__hash_node<std::__1::__hash_value_type<CKComponentAnnouncedEvent, CKComponentController *>, void *> __first_;
	bucket_list_deallocator<std::__1::allocator<std::__1::__hash_node<std::__1::__hash_value_type<CKComponentAnnouncedEvent, CKComponentController *>, void *> *> > __second_;
} compressed_pair<std::__1::__hash_node<std::__1::__hash_value_type<CKComponentAnnouncedEvent, CKComponentController *>, void *> **, std::__1::__bucket_list_deallocator<std::__1::allocator<std::__1::__hash_node<std::__1::__hash_value_type<CKComponentAnnouncedEvent, CKComponentController *>, void *> *> > >;

typedef struct unique_ptr<std::__1::__hash_node<std::__1::__hash_value_type<CKComponentAnnouncedEvent, CKComponentController *>, void *> *[], std::__1::__bucket_list_deallocator<std::__1::allocator<std::__1::__hash_node<std::__1::__hash_value_type<CKComponentAnnouncedEvent, CKComponentController *>, void *> *> > > {
	compressed_pair<std::__1::__hash_node<std::__1::__hash_value_type<CKComponentAnnouncedEvent, CKComponentController *>, void *> **, std::__1::__bucket_list_deallocator<std::__1::allocator<std::__1::__hash_node<std::__1::__hash_value_type<CKComponentAnnouncedEvent, CKComponentController *>, void *> *> > > __ptr_;
} unique_ptr<std::__1::__hash_node<std::__1::__hash_value_type<CKComponentAnnouncedEvent, CKComponentController *>, void *> *[], std::__1::__bucket_list_deallocator<std::__1::allocator<std::__1::__hash_node<std::__1::__hash_value_type<CKComponentAnnouncedEvent, CKComponentController *>, void *> *> > >;

typedef struct _hash_table<std::__1::__hash_value_type<CKComponentAnnouncedEvent, CKComponentController *>, std::__1::__unordered_map_hasher<CKComponentAnnouncedEvent, std::__1::__hash_value_type<CKComponentAnnouncedEvent, CKComponentController *>, std::__1::hash<unsigned long>, true>, std::__1::__unordered_map_equal<CKComponentAnnouncedEvent, std::__1::__hash_value_type<CKComponentAnnouncedEvent, CKComponentController *>, std::__1::equal_to<unsigned long>, true>, std::__1::allocator<std::__1::__hash_value_type<CKComponentAnnouncedEvent, CKComponentController *> > > {
	unique_ptr<std::__1::__hash_node<std::__1::__hash_value_type<CKComponentAnnouncedEvent, CKComponentController *>, void *> *[], std::__1::__bucket_list_deallocator<std::__1::allocator<std::__1::__hash_node<std::__1::__hash_value_type<CKComponentAnnouncedEvent, CKComponentController *>, void *> *> > > __bucket_list_;
	compressed_pair<std::__1::__hash_node_base<std::__1::__hash_node<std::__1::__hash_value_type<CKComponentAnnouncedEvent, CKComponentController *>, void *> *>, std::__1::allocator<std::__1::__hash_node<std::__1::__hash_value_type<CKComponentAnnouncedEvent, CKComponentController *>, void *> > > __p1_;
	compressed_pair<unsigned long, std::__1::__unordered_map_hasher<CKComponentAnnouncedEvent, std::__1::__hash_value_type<CKComponentAnnouncedEvent, CKComponentController *>, std::__1::hash<unsigned long>, true> > __p2_;
	compressed_pair<float, std::__1::__unordered_map_equal<CKComponentAnnouncedEvent, std::__1::__hash_value_type<CKComponentAnnouncedEvent, CKComponentController *>, std::__1::equal_to<unsigned long>, true> > __p3_;
} hash_table<std::__1::__hash_value_type<CKComponentAnnouncedEvent, CKComponentController *>, std::__1::__unordered_map_hasher<CKComponentAnnouncedEvent, std::__1::__hash_value_type<CKComponentAnnouncedEvent, CKComponentController *>, std::__1::hash<unsigned long>, true>, std::__1::__unordered_map_equal<CKComponentAnnouncedEvent, std::__1::__hash_value_type<CKComponentAnnouncedEvent, CKComponentController *>, std::__1::equal_to<unsigned long>, true>, std::__1::allocator<std::__1::__hash_value_type<CKComponentAnnouncedEvent, CKComponentController *> > >;

typedef struct unordered_multimap<CKComponentAnnouncedEvent, CKComponentController *, std::__1::hash<unsigned long>, std::__1::equal_to<unsigned long>, std::__1::allocator<std::__1::pair<const CKComponentAnnouncedEvent, CKComponentController *> > > {
	hash_table<std::__1::__hash_value_type<CKComponentAnnouncedEvent, CKComponentController *>, std::__1::__unordered_map_hasher<CKComponentAnnouncedEvent, std::__1::__hash_value_type<CKComponentAnnouncedEvent, CKComponentController *>, std::__1::hash<unsigned long>, true>, std::__1::__unordered_map_equal<CKComponentAnnouncedEvent, std::__1::__hash_value_type<CKComponentAnnouncedEvent, CKComponentController *>, std::__1::equal_to<unsigned long>, true>, std::__1::allocator<std::__1::__hash_value_type<CKComponentAnnouncedEvent, CKComponentController *> > > __table_;
} unordered_multimap<CKComponentAnnouncedEvent, CKComponentController *, std::__1::hash<unsigned long>, std::__1::equal_to<unsigned long>, std::__1::allocator<std::__1::pair<const CKComponentAnnouncedEvent, CKComponentController *> > >;

typedef struct shared_ptr<const std::__1::vector<__weak id, std::__1::allocator<__weak id> > > {
	vector<__weak id, std::__1::allocator<__weak id> > __ptr_;
	__shared_weak_count __cntrl_;
} shared_ptr<const std::__1::vector<__weak id, std::__1::allocator<__weak id> > >;

typedef struct _compressed_pair<CKStaticLayoutComponentChild *, std::__1::allocator<CKStaticLayoutComponentChild> > {
	CKStaticLayoutComponentChild __first_;
} compressed_pair<CKStaticLayoutComponentChild *, std::__1::allocator<CKStaticLayoutComponentChild> >;

typedef struct vector<CKStaticLayoutComponentChild, std::__1::allocator<CKStaticLayoutComponentChild> > {
	CKStaticLayoutComponentChild __begin_;
	CKStaticLayoutComponentChild __end_;
	compressed_pair<CKStaticLayoutComponentChild *, std::__1::allocator<CKStaticLayoutComponentChild> > __end_cap_;
} vector<CKStaticLayoutComponentChild, std::__1::allocator<CKStaticLayoutComponentChild> >;

typedef struct _compressed_pair<unsigned long, std::__1::allocator<std::__1::__hash_node<std::__1::__hash_value_type<std::__1::pair<__unsafe_unretained Class, id>, FBStatefulReusePoolItem>, void *> *> > {
	unsigned long long __first_;
} compressed_pair<unsigned long, std::__1::allocator<std::__1::__hash_node<std::__1::__hash_value_type<std::__1::pair<__unsafe_unretained Class, id>, FBStatefulReusePoolItem>, void *> *> >;

typedef struct _compressed_pair<unsigned long, std::__1::__unordered_map_hasher<std::__1::pair<__unsafe_unretained Class, id>, std::__1::__hash_value_type<std::__1::pair<__unsafe_unretained Class, id>, FBStatefulReusePoolItem>, PoolKeyHasher, true> > {
	unsigned long long __first_;
} compressed_pair<unsigned long, std::__1::__unordered_map_hasher<std::__1::pair<__unsafe_unretained Class, id>, std::__1::__hash_value_type<std::__1::pair<__unsafe_unretained Class, id>, FBStatefulReusePoolItem>, PoolKeyHasher, true> >;

typedef struct _compressed_pair<float, std::__1::__unordered_map_equal<std::__1::pair<__unsafe_unretained Class, id>, std::__1::__hash_value_type<std::__1::pair<__unsafe_unretained Class, id>, FBStatefulReusePoolItem>, std::__1::equal_to<std::__1::pair<__unsafe_unretained Class, id> >, true> > {
	float __first_;
} compressed_pair<float, std::__1::__unordered_map_equal<std::__1::pair<__unsafe_unretained Class, id>, std::__1::__hash_value_type<std::__1::pair<__unsafe_unretained Class, id>, FBStatefulReusePoolItem>, std::__1::equal_to<std::__1::pair<__unsafe_unretained Class, id> >, true> >;

typedef struct _hash_node_base<std::__1::__hash_node<std::__1::__hash_value_type<std::__1::pair<__unsafe_unretained Class, id>, FBStatefulReusePoolItem>, void *> *> {
	__hash_node<std::__1::__hash_value_type<std::__1::pair<__unsafe_unretained Class, id>, FBStatefulReusePoolItem>, void *> __next_;
} hash_node_base<std::__1::__hash_node<std::__1::__hash_value_type<std::__1::pair<__unsafe_unretained Class, id>, FBStatefulReusePoolItem>, void *> *>;

typedef struct _compressed_pair<std::__1::__hash_node_base<std::__1::__hash_node<std::__1::__hash_value_type<std::__1::pair<__unsafe_unretained Class, id>, FBStatefulReusePoolItem>, void *> *>, std::__1::allocator<std::__1::__hash_node<std::__1::__hash_value_type<std::__1::pair<__unsafe_unretained Class, id>, FBStatefulReusePoolItem>, void *> > > {
	hash_node_base<std::__1::__hash_node<std::__1::__hash_value_type<std::__1::pair<__unsafe_unretained Class, id>, FBStatefulReusePoolItem>, void *> *> __first_;
} compressed_pair<std::__1::__hash_node_base<std::__1::__hash_node<std::__1::__hash_value_type<std::__1::pair<__unsafe_unretained Class, id>, FBStatefulReusePoolItem>, void *> *>, std::__1::allocator<std::__1::__hash_node<std::__1::__hash_value_type<std::__1::pair<__unsafe_unretained Class, id>, FBStatefulReusePoolItem>, void *> > >;

typedef struct _bucket_list_deallocator<std::__1::allocator<std::__1::__hash_node<std::__1::__hash_value_type<std::__1::pair<__unsafe_unretained Class, id>, FBStatefulReusePoolItem>, void *> *> > {
	compressed_pair<unsigned long, std::__1::allocator<std::__1::__hash_node<std::__1::__hash_value_type<std::__1::pair<__unsafe_unretained Class, id>, FBStatefulReusePoolItem>, void *> *> > __data_;
} bucket_list_deallocator<std::__1::allocator<std::__1::__hash_node<std::__1::__hash_value_type<std::__1::pair<__unsafe_unretained Class, id>, FBStatefulReusePoolItem>, void *> *> >;

typedef struct _compressed_pair<std::__1::__hash_node<std::__1::__hash_value_type<std::__1::pair<__unsafe_unretained Class, id>, FBStatefulReusePoolItem>, void *> **, std::__1::__bucket_list_deallocator<std::__1::allocator<std::__1::__hash_node<std::__1::__hash_value_type<std::__1::pair<__unsafe_unretained Class, id>, FBStatefulReusePoolItem>, void *> *> > > {
	__hash_node<std::__1::__hash_value_type<std::__1::pair<__unsafe_unretained Class, id>, FBStatefulReusePoolItem>, void *> __first_;
	bucket_list_deallocator<std::__1::allocator<std::__1::__hash_node<std::__1::__hash_value_type<std::__1::pair<__unsafe_unretained Class, id>, FBStatefulReusePoolItem>, void *> *> > __second_;
} compressed_pair<std::__1::__hash_node<std::__1::__hash_value_type<std::__1::pair<__unsafe_unretained Class, id>, FBStatefulReusePoolItem>, void *> **, std::__1::__bucket_list_deallocator<std::__1::allocator<std::__1::__hash_node<std::__1::__hash_value_type<std::__1::pair<__unsafe_unretained Class, id>, FBStatefulReusePoolItem>, void *> *> > >;

typedef struct unique_ptr<std::__1::__hash_node<std::__1::__hash_value_type<std::__1::pair<__unsafe_unretained Class, id>, FBStatefulReusePoolItem>, void *> *[], std::__1::__bucket_list_deallocator<std::__1::allocator<std::__1::__hash_node<std::__1::__hash_value_type<std::__1::pair<__unsafe_unretained Class, id>, FBStatefulReusePoolItem>, void *> *> > > {
	compressed_pair<std::__1::__hash_node<std::__1::__hash_value_type<std::__1::pair<__unsafe_unretained Class, id>, FBStatefulReusePoolItem>, void *> **, std::__1::__bucket_list_deallocator<std::__1::allocator<std::__1::__hash_node<std::__1::__hash_value_type<std::__1::pair<__unsafe_unretained Class, id>, FBStatefulReusePoolItem>, void *> *> > > __ptr_;
} unique_ptr<std::__1::__hash_node<std::__1::__hash_value_type<std::__1::pair<__unsafe_unretained Class, id>, FBStatefulReusePoolItem>, void *> *[], std::__1::__bucket_list_deallocator<std::__1::allocator<std::__1::__hash_node<std::__1::__hash_value_type<std::__1::pair<__unsafe_unretained Class, id>, FBStatefulReusePoolItem>, void *> *> > >;

typedef struct _hash_table<std::__1::__hash_value_type<std::__1::pair<__unsafe_unretained Class, id>, FBStatefulReusePoolItem>, std::__1::__unordered_map_hasher<std::__1::pair<__unsafe_unretained Class, id>, std::__1::__hash_value_type<std::__1::pair<__unsafe_unretained Class, id>, FBStatefulReusePoolItem>, PoolKeyHasher, true>, std::__1::__unordered_map_equal<std::__1::pair<__unsafe_unretained Class, id>, std::__1::__hash_value_type<std::__1::pair<__unsafe_unretained Class, id>, FBStatefulReusePoolItem>, std::__1::equal_to<std::__1::pair<__unsafe_unretained Class, id> >, true>, std::__1::allocator<std::__1::__hash_value_type<std::__1::pair<__unsafe_unretained Class, id>, FBStatefulReusePoolItem> > > {
	unique_ptr<std::__1::__hash_node<std::__1::__hash_value_type<std::__1::pair<__unsafe_unretained Class, id>, FBStatefulReusePoolItem>, void *> *[], std::__1::__bucket_list_deallocator<std::__1::allocator<std::__1::__hash_node<std::__1::__hash_value_type<std::__1::pair<__unsafe_unretained Class, id>, FBStatefulReusePoolItem>, void *> *> > > __bucket_list_;
	compressed_pair<std::__1::__hash_node_base<std::__1::__hash_node<std::__1::__hash_value_type<std::__1::pair<__unsafe_unretained Class, id>, FBStatefulReusePoolItem>, void *> *>, std::__1::allocator<std::__1::__hash_node<std::__1::__hash_value_type<std::__1::pair<__unsafe_unretained Class, id>, FBStatefulReusePoolItem>, void *> > > __p1_;
	compressed_pair<unsigned long, std::__1::__unordered_map_hasher<std::__1::pair<__unsafe_unretained Class, id>, std::__1::__hash_value_type<std::__1::pair<__unsafe_unretained Class, id>, FBStatefulReusePoolItem>, PoolKeyHasher, true> > __p2_;
	compressed_pair<float, std::__1::__unordered_map_equal<std::__1::pair<__unsafe_unretained Class, id>, std::__1::__hash_value_type<std::__1::pair<__unsafe_unretained Class, id>, FBStatefulReusePoolItem>, std::__1::equal_to<std::__1::pair<__unsafe_unretained Class, id> >, true> > __p3_;
} hash_table<std::__1::__hash_value_type<std::__1::pair<__unsafe_unretained Class, id>, FBStatefulReusePoolItem>, std::__1::__unordered_map_hasher<std::__1::pair<__unsafe_unretained Class, id>, std::__1::__hash_value_type<std::__1::pair<__unsafe_unretained Class, id>, FBStatefulReusePoolItem>, PoolKeyHasher, true>, std::__1::__unordered_map_equal<std::__1::pair<__unsafe_unretained Class, id>, std::__1::__hash_value_type<std::__1::pair<__unsafe_unretained Class, id>, FBStatefulReusePoolItem>, std::__1::equal_to<std::__1::pair<__unsafe_unretained Class, id> >, true>, std::__1::allocator<std::__1::__hash_value_type<std::__1::pair<__unsafe_unretained Class, id>, FBStatefulReusePoolItem> > >;

typedef struct unordered_map<std::__1::pair<__unsafe_unretained Class, id>, FBStatefulReusePoolItem, PoolKeyHasher, std::__1::equal_to<std::__1::pair<__unsafe_unretained Class, id> >, std::__1::allocator<std::__1::pair<const std::__1::pair<__unsafe_unretained Class, id>, FBStatefulReusePoolItem> > > {
	hash_table<std::__1::__hash_value_type<std::__1::pair<__unsafe_unretained Class, id>, FBStatefulReusePoolItem>, std::__1::__unordered_map_hasher<std::__1::pair<__unsafe_unretained Class, id>, std::__1::__hash_value_type<std::__1::pair<__unsafe_unretained Class, id>, FBStatefulReusePoolItem>, PoolKeyHasher, true>, std::__1::__unordered_map_equal<std::__1::pair<__unsafe_unretained Class, id>, std::__1::__hash_value_type<std::__1::pair<__unsafe_unretained Class, id>, FBStatefulReusePoolItem>, std::__1::equal_to<std::__1::pair<__unsafe_unretained Class, id> >, true>, std::__1::allocator<std::__1::__hash_value_type<std::__1::pair<__unsafe_unretained Class, id>, FBStatefulReusePoolItem> > > __table_;
} unordered_map<std::__1::pair<__unsafe_unretained Class, id>, FBStatefulReusePoolItem, PoolKeyHasher, std::__1::equal_to<std::__1::pair<__unsafe_unretained Class, id> >, std::__1::allocator<std::__1::pair<const std::__1::pair<__unsafe_unretained Class, id>, FBStatefulReusePoolItem> > >;

typedef struct _compressed_pair<unsigned long, std::__1::allocator<std::__1::__hash_node<std::__1::__hash_value_type<int, std::__1::unordered_multimap<int, id ()(id), std::__1::hash<int>, std::__1::equal_to<int>, std::__1::allocator<std::__1::pair<const int, id ()(id)> > > >, void *> *> > {
	unsigned long long __first_;
} compressed_pair<unsigned long, std::__1::allocator<std::__1::__hash_node<std::__1::__hash_value_type<int, std::__1::unordered_multimap<int, id ()(id), std::__1::hash<int>, std::__1::equal_to<int>, std::__1::allocator<std::__1::pair<const int, id ()(id)> > > >, void *> *> >;

typedef struct _compressed_pair<unsigned long, std::__1::__unordered_map_hasher<int, std::__1::__hash_value_type<int, std::__1::unordered_multimap<int, id ()(id), std::__1::hash<int>, std::__1::equal_to<int>, std::__1::allocator<std::__1::pair<const int, id ()(id)> > > >, std::__1::hash<int>, true> > {
	unsigned long long __first_;
} compressed_pair<unsigned long, std::__1::__unordered_map_hasher<int, std::__1::__hash_value_type<int, std::__1::unordered_multimap<int, id ()(id), std::__1::hash<int>, std::__1::equal_to<int>, std::__1::allocator<std::__1::pair<const int, id ()(id)> > > >, std::__1::hash<int>, true> >;

typedef struct _compressed_pair<float, std::__1::__unordered_map_equal<int, std::__1::__hash_value_type<int, std::__1::unordered_multimap<int, id ()(id), std::__1::hash<int>, std::__1::equal_to<int>, std::__1::allocator<std::__1::pair<const int, id ()(id)> > > >, std::__1::equal_to<int>, true> > {
	float __first_;
} compressed_pair<float, std::__1::__unordered_map_equal<int, std::__1::__hash_value_type<int, std::__1::unordered_multimap<int, id ()(id), std::__1::hash<int>, std::__1::equal_to<int>, std::__1::allocator<std::__1::pair<const int, id ()(id)> > > >, std::__1::equal_to<int>, true> >;

typedef struct _hash_node_base<std::__1::__hash_node<std::__1::__hash_value_type<int, std::__1::unordered_multimap<int, id ()(id), std::__1::hash<int>, std::__1::equal_to<int>, std::__1::allocator<std::__1::pair<const int, id ()(id)> > > >, void *> *> {
	__hash_node<std::__1::__hash_value_type<int, std::__1::unordered_multimap<int, id ()(id), std::__1::hash<int>, std::__1::equal_to<int>, std::__1::allocator<std::__1::pair<const int, id ()(id)> > > >, void *> __next_;
} hash_node_base<std::__1::__hash_node<std::__1::__hash_value_type<int, std::__1::unordered_multimap<int, id ()(id), std::__1::hash<int>, std::__1::equal_to<int>, std::__1::allocator<std::__1::pair<const int, id ()(id)> > > >, void *> *>;

typedef struct _compressed_pair<std::__1::__hash_node_base<std::__1::__hash_node<std::__1::__hash_value_type<int, std::__1::unordered_multimap<int, id ()(id), std::__1::hash<int>, std::__1::equal_to<int>, std::__1::allocator<std::__1::pair<const int, id ()(id)> > > >, void *> *>, std::__1::allocator<std::__1::__hash_node<std::__1::__hash_value_type<int, std::__1::unordered_multimap<int, id ()(id), std::__1::hash<int>, std::__1::equal_to<int>, std::__1::allocator<std::__1::pair<const int, id ()(id)> > > >, void *> > > {
	hash_node_base<std::__1::__hash_node<std::__1::__hash_value_type<int, std::__1::unordered_multimap<int, id ()(id), std::__1::hash<int>, std::__1::equal_to<int>, std::__1::allocator<std::__1::pair<const int, id ()(id)> > > >, void *> *> __first_;
} compressed_pair<std::__1::__hash_node_base<std::__1::__hash_node<std::__1::__hash_value_type<int, std::__1::unordered_multimap<int, id ()(id), std::__1::hash<int>, std::__1::equal_to<int>, std::__1::allocator<std::__1::pair<const int, id ()(id)> > > >, void *> *>, std::__1::allocator<std::__1::__hash_node<std::__1::__hash_value_type<int, std::__1::unordered_multimap<int, id ()(id), std::__1::hash<int>, std::__1::equal_to<int>, std::__1::allocator<std::__1::pair<const int, id ()(id)> > > >, void *> > >;

typedef struct _bucket_list_deallocator<std::__1::allocator<std::__1::__hash_node<std::__1::__hash_value_type<int, std::__1::unordered_multimap<int, id ()(id), std::__1::hash<int>, std::__1::equal_to<int>, std::__1::allocator<std::__1::pair<const int, id ()(id)> > > >, void *> *> > {
	compressed_pair<unsigned long, std::__1::allocator<std::__1::__hash_node<std::__1::__hash_value_type<int, std::__1::unordered_multimap<int, id ()(id), std::__1::hash<int>, std::__1::equal_to<int>, std::__1::allocator<std::__1::pair<const int, id ()(id)> > > >, void *> *> > __data_;
} bucket_list_deallocator<std::__1::allocator<std::__1::__hash_node<std::__1::__hash_value_type<int, std::__1::unordered_multimap<int, id ()(id), std::__1::hash<int>, std::__1::equal_to<int>, std::__1::allocator<std::__1::pair<const int, id ()(id)> > > >, void *> *> >;

typedef struct _compressed_pair<std::__1::__hash_node<std::__1::__hash_value_type<int, std::__1::unordered_multimap<int, id ()(id), std::__1::hash<int>, std::__1::equal_to<int>, std::__1::allocator<std::__1::pair<const int, id ()(id)> > > >, void *> **, std::__1::__bucket_list_deallocator<std::__1::allocator<std::__1::__hash_node<std::__1::__hash_value_type<int, std::__1::unordered_multimap<int, id ()(id), std::__1::hash<int>, std::__1::equal_to<int>, std::__1::allocator<std::__1::pair<const int, id ()(id)> > > >, void *> *> > > {
	__hash_node<std::__1::__hash_value_type<int, std::__1::unordered_multimap<int, id ()(id), std::__1::hash<int>, std::__1::equal_to<int>, std::__1::allocator<std::__1::pair<const int, id ()(id)> > > >, void *> __first_;
	bucket_list_deallocator<std::__1::allocator<std::__1::__hash_node<std::__1::__hash_value_type<int, std::__1::unordered_multimap<int, id ()(id), std::__1::hash<int>, std::__1::equal_to<int>, std::__1::allocator<std::__1::pair<const int, id ()(id)> > > >, void *> *> > __second_;
} compressed_pair<std::__1::__hash_node<std::__1::__hash_value_type<int, std::__1::unordered_multimap<int, id ()(id), std::__1::hash<int>, std::__1::equal_to<int>, std::__1::allocator<std::__1::pair<const int, id ()(id)> > > >, void *> **, std::__1::__bucket_list_deallocator<std::__1::allocator<std::__1::__hash_node<std::__1::__hash_value_type<int, std::__1::unordered_multimap<int, id ()(id), std::__1::hash<int>, std::__1::equal_to<int>, std::__1::allocator<std::__1::pair<const int, id ()(id)> > > >, void *> *> > >;

typedef struct unique_ptr<std::__1::__hash_node<std::__1::__hash_value_type<int, std::__1::unordered_multimap<int, id ()(id), std::__1::hash<int>, std::__1::equal_to<int>, std::__1::allocator<std::__1::pair<const int, id ()(id)> > > >, void *> *[], std::__1::__bucket_list_deallocator<std::__1::allocator<std::__1::__hash_node<std::__1::__hash_value_type<int, std::__1::unordered_multimap<int, id ()(id), std::__1::hash<int>, std::__1::equal_to<int>, std::__1::allocator<std::__1::pair<const int, id ()(id)> > > >, void *> *> > > {
	compressed_pair<std::__1::__hash_node<std::__1::__hash_value_type<int, std::__1::unordered_multimap<int, id ()(id), std::__1::hash<int>, std::__1::equal_to<int>, std::__1::allocator<std::__1::pair<const int, id ()(id)> > > >, void *> **, std::__1::__bucket_list_deallocator<std::__1::allocator<std::__1::__hash_node<std::__1::__hash_value_type<int, std::__1::unordered_multimap<int, id ()(id), std::__1::hash<int>, std::__1::equal_to<int>, std::__1::allocator<std::__1::pair<const int, id ()(id)> > > >, void *> *> > > __ptr_;
} unique_ptr<std::__1::__hash_node<std::__1::__hash_value_type<int, std::__1::unordered_multimap<int, id ()(id), std::__1::hash<int>, std::__1::equal_to<int>, std::__1::allocator<std::__1::pair<const int, id ()(id)> > > >, void *> *[], std::__1::__bucket_list_deallocator<std::__1::allocator<std::__1::__hash_node<std::__1::__hash_value_type<int, std::__1::unordered_multimap<int, id ()(id), std::__1::hash<int>, std::__1::equal_to<int>, std::__1::allocator<std::__1::pair<const int, id ()(id)> > > >, void *> *> > >;

typedef struct _hash_table<std::__1::__hash_value_type<int, std::__1::unordered_multimap<int, id ()(id), std::__1::hash<int>, std::__1::equal_to<int>, std::__1::allocator<std::__1::pair<const int, id ()(id)> > > >, std::__1::__unordered_map_hasher<int, std::__1::__hash_value_type<int, std::__1::unordered_multimap<int, id ()(id), std::__1::hash<int>, std::__1::equal_to<int>, std::__1::allocator<std::__1::pair<const int, id ()(id)> > > >, std::__1::hash<int>, true>, std::__1::__unordered_map_equal<int, std::__1::__hash_value_type<int, std::__1::unordered_multimap<int, id ()(id), std::__1::hash<int>, std::__1::equal_to<int>, std::__1::allocator<std::__1::pair<const int, id ()(id)> > > >, std::__1::equal_to<int>, true>, std::__1::allocator<std::__1::__hash_value_type<int, std::__1::unordered_multimap<int, id ()(id), std::__1::hash<int>, std::__1::equal_to<int>, std::__1::allocator<std::__1::pair<const int, id ()(id)> > > > > > {
	unique_ptr<std::__1::__hash_node<std::__1::__hash_value_type<int, std::__1::unordered_multimap<int, id ()(id), std::__1::hash<int>, std::__1::equal_to<int>, std::__1::allocator<std::__1::pair<const int, id ()(id)> > > >, void *> *[], std::__1::__bucket_list_deallocator<std::__1::allocator<std::__1::__hash_node<std::__1::__hash_value_type<int, std::__1::unordered_multimap<int, id ()(id), std::__1::hash<int>, std::__1::equal_to<int>, std::__1::allocator<std::__1::pair<const int, id ()(id)> > > >, void *> *> > > __bucket_list_;
	compressed_pair<std::__1::__hash_node_base<std::__1::__hash_node<std::__1::__hash_value_type<int, std::__1::unordered_multimap<int, id ()(id), std::__1::hash<int>, std::__1::equal_to<int>, std::__1::allocator<std::__1::pair<const int, id ()(id)> > > >, void *> *>, std::__1::allocator<std::__1::__hash_node<std::__1::__hash_value_type<int, std::__1::unordered_multimap<int, id ()(id), std::__1::hash<int>, std::__1::equal_to<int>, std::__1::allocator<std::__1::pair<const int, id ()(id)> > > >, void *> > > __p1_;
	compressed_pair<unsigned long, std::__1::__unordered_map_hasher<int, std::__1::__hash_value_type<int, std::__1::unordered_multimap<int, id ()(id), std::__1::hash<int>, std::__1::equal_to<int>, std::__1::allocator<std::__1::pair<const int, id ()(id)> > > >, std::__1::hash<int>, true> > __p2_;
	compressed_pair<float, std::__1::__unordered_map_equal<int, std::__1::__hash_value_type<int, std::__1::unordered_multimap<int, id ()(id), std::__1::hash<int>, std::__1::equal_to<int>, std::__1::allocator<std::__1::pair<const int, id ()(id)> > > >, std::__1::equal_to<int>, true> > __p3_;
} hash_table<std::__1::__hash_value_type<int, std::__1::unordered_multimap<int, id ()(id), std::__1::hash<int>, std::__1::equal_to<int>, std::__1::allocator<std::__1::pair<const int, id ()(id)> > > >, std::__1::__unordered_map_hasher<int, std::__1::__hash_value_type<int, std::__1::unordered_multimap<int, id ()(id), std::__1::hash<int>, std::__1::equal_to<int>, std::__1::allocator<std::__1::pair<const int, id ()(id)> > > >, std::__1::hash<int>, true>, std::__1::__unordered_map_equal<int, std::__1::__hash_value_type<int, std::__1::unordered_multimap<int, id ()(id), std::__1::hash<int>, std::__1::equal_to<int>, std::__1::allocator<std::__1::pair<const int, id ()(id)> > > >, std::__1::equal_to<int>, true>, std::__1::allocator<std::__1::__hash_value_type<int, std::__1::unordered_multimap<int, id ()(id), std::__1::hash<int>, std::__1::equal_to<int>, std::__1::allocator<std::__1::pair<const int, id ()(id)> > > > > >;

typedef struct unordered_map<int, std::__1::unordered_multimap<int, id ()(id), std::__1::hash<int>, std::__1::equal_to<int>, std::__1::allocator<std::__1::pair<const int, id ()(id)> > >, std::__1::hash<int>, std::__1::equal_to<int>, std::__1::allocator<std::__1::pair<const int, std::__1::unordered_multimap<int, id ()(id), std::__1::hash<int>, std::__1::equal_to<int>, std::__1::allocator<std::__1::pair<const int, id ()(id)> > > > > > {
	hash_table<std::__1::__hash_value_type<int, std::__1::unordered_multimap<int, id ()(id), std::__1::hash<int>, std::__1::equal_to<int>, std::__1::allocator<std::__1::pair<const int, id ()(id)> > > >, std::__1::__unordered_map_hasher<int, std::__1::__hash_value_type<int, std::__1::unordered_multimap<int, id ()(id), std::__1::hash<int>, std::__1::equal_to<int>, std::__1::allocator<std::__1::pair<const int, id ()(id)> > > >, std::__1::hash<int>, true>, std::__1::__unordered_map_equal<int, std::__1::__hash_value_type<int, std::__1::unordered_multimap<int, id ()(id), std::__1::hash<int>, std::__1::equal_to<int>, std::__1::allocator<std::__1::pair<const int, id ()(id)> > > >, std::__1::equal_to<int>, true>, std::__1::allocator<std::__1::__hash_value_type<int, std::__1::unordered_multimap<int, id ()(id), std::__1::hash<int>, std::__1::equal_to<int>, std::__1::allocator<std::__1::pair<const int, id ()(id)> > > > > > __table_;
} unordered_map<int, std::__1::unordered_multimap<int, id ()(id), std::__1::hash<int>, std::__1::equal_to<int>, std::__1::allocator<std::__1::pair<const int, id ()(id)> > >, std::__1::hash<int>, std::__1::equal_to<int>, std::__1::allocator<std::__1::pair<const int, std::__1::unordered_multimap<int, id ()(id), std::__1::hash<int>, std::__1::equal_to<int>, std::__1::allocator<std::__1::pair<const int, id ()(id)> > > > > >;

typedef struct CKTypedComponentAction<UIEvent *> {
	CKTypedComponentActionValue _internal;
} CKTypedComponentAction<UIEvent *>;

typedef struct _compressed_pair<SEL **, std::__1::allocator<SEL *> > {
	SEL __first_;
} compressed_pair<SEL **, std::__1::allocator<SEL *> >;

typedef struct vector<SEL *, std::__1::allocator<SEL *> > {
	SEL __begin_;
	SEL __end_;
	compressed_pair<SEL **, std::__1::allocator<SEL *> > __end_cap_;
} vector<SEL *, std::__1::allocator<SEL *> >;

typedef struct CKTypedComponentAction<UIGestureRecognizer *> {
	CKTypedComponentActionValue _internal;
} CKTypedComponentAction<UIGestureRecognizer *>;

typedef struct CKTextKitAttributes {
	NSAttributedString* attributedString;
	NSAttributedString* truncationAttributedString;
	NSCharacterSet* avoidTailTruncationSet;
	long long lineBreakMode;
	unsigned long long maximumNumberOfLines;
	CGSize shadowOffset;
	UIColor* shadowColor;
	double shadowOpacity;
	double shadowRadius;
	/*function pointer*/void* layoutManagerFactory;
} CKTextKitAttributes;

typedef struct CKTextComponentAccessibilityContext {
	NSNumber* isAccessibilityElement;
	NSNumber* providesAccessibleElements;
	CKComponentAccessibilityTextAttribute accessibilityLabel;
} CKTextComponentAccessibilityContext;

typedef struct _compressed_pair<unsigned long, std::__1::allocator<std::__1::__hash_node<std::__1::__hash_value_type<FBSampledWorkingRangeControllerItemViewStateKey, std::__1::vector<id<FBWorkingRangeItemTransition>, std::__1::allocator<id<FBWorkingRangeItemTransition> > > >, void *> *> > {
	unsigned long long __first_;
} compressed_pair<unsigned long, std::__1::allocator<std::__1::__hash_node<std::__1::__hash_value_type<FBSampledWorkingRangeControllerItemViewStateKey, std::__1::vector<id<FBWorkingRangeItemTransition>, std::__1::allocator<id<FBWorkingRangeItemTransition> > > >, void *> *> >;

typedef struct _compressed_pair<unsigned long, std::__1::__unordered_map_hasher<FBSampledWorkingRangeControllerItemViewStateKey, std::__1::__hash_value_type<FBSampledWorkingRangeControllerItemViewStateKey, std::__1::vector<id<FBWorkingRangeItemTransition>, std::__1::allocator<id<FBWorkingRangeItemTransition> > > >, FBSampledWorkingRangeControllerItemViewStateKeyHasher, true> > {
	unsigned long long __first_;
} compressed_pair<unsigned long, std::__1::__unordered_map_hasher<FBSampledWorkingRangeControllerItemViewStateKey, std::__1::__hash_value_type<FBSampledWorkingRangeControllerItemViewStateKey, std::__1::vector<id<FBWorkingRangeItemTransition>, std::__1::allocator<id<FBWorkingRangeItemTransition> > > >, FBSampledWorkingRangeControllerItemViewStateKeyHasher, true> >;

typedef struct _compressed_pair<float, std::__1::__unordered_map_equal<FBSampledWorkingRangeControllerItemViewStateKey, std::__1::__hash_value_type<FBSampledWorkingRangeControllerItemViewStateKey, std::__1::vector<id<FBWorkingRangeItemTransition>, std::__1::allocator<id<FBWorkingRangeItemTransition> > > >, std::__1::equal_to<FBSampledWorkingRangeControllerItemViewStateKey>, true> > {
	float __first_;
} compressed_pair<float, std::__1::__unordered_map_equal<FBSampledWorkingRangeControllerItemViewStateKey, std::__1::__hash_value_type<FBSampledWorkingRangeControllerItemViewStateKey, std::__1::vector<id<FBWorkingRangeItemTransition>, std::__1::allocator<id<FBWorkingRangeItemTransition> > > >, std::__1::equal_to<FBSampledWorkingRangeControllerItemViewStateKey>, true> >;

typedef struct _hash_node_base<std::__1::__hash_node<std::__1::__hash_value_type<FBSampledWorkingRangeControllerItemViewStateKey, std::__1::vector<id<FBWorkingRangeItemTransition>, std::__1::allocator<id<FBWorkingRangeItemTransition> > > >, void *> *> {
	__hash_node<std::__1::__hash_value_type<FBSampledWorkingRangeControllerItemViewStateKey, std::__1::vector<id<FBWorkingRangeItemTransition>, std::__1::allocator<id<FBWorkingRangeItemTransition> > > >, void *> __next_;
} hash_node_base<std::__1::__hash_node<std::__1::__hash_value_type<FBSampledWorkingRangeControllerItemViewStateKey, std::__1::vector<id<FBWorkingRangeItemTransition>, std::__1::allocator<id<FBWorkingRangeItemTransition> > > >, void *> *>;

typedef struct _compressed_pair<std::__1::__hash_node_base<std::__1::__hash_node<std::__1::__hash_value_type<FBSampledWorkingRangeControllerItemViewStateKey, std::__1::vector<id<FBWorkingRangeItemTransition>, std::__1::allocator<id<FBWorkingRangeItemTransition> > > >, void *> *>, std::__1::allocator<std::__1::__hash_node<std::__1::__hash_value_type<FBSampledWorkingRangeControllerItemViewStateKey, std::__1::vector<id<FBWorkingRangeItemTransition>, std::__1::allocator<id<FBWorkingRangeItemTransition> > > >, void *> > > {
	hash_node_base<std::__1::__hash_node<std::__1::__hash_value_type<FBSampledWorkingRangeControllerItemViewStateKey, std::__1::vector<id<FBWorkingRangeItemTransition>, std::__1::allocator<id<FBWorkingRangeItemTransition> > > >, void *> *> __first_;
} compressed_pair<std::__1::__hash_node_base<std::__1::__hash_node<std::__1::__hash_value_type<FBSampledWorkingRangeControllerItemViewStateKey, std::__1::vector<id<FBWorkingRangeItemTransition>, std::__1::allocator<id<FBWorkingRangeItemTransition> > > >, void *> *>, std::__1::allocator<std::__1::__hash_node<std::__1::__hash_value_type<FBSampledWorkingRangeControllerItemViewStateKey, std::__1::vector<id<FBWorkingRangeItemTransition>, std::__1::allocator<id<FBWorkingRangeItemTransition> > > >, void *> > >;

typedef struct _bucket_list_deallocator<std::__1::allocator<std::__1::__hash_node<std::__1::__hash_value_type<FBSampledWorkingRangeControllerItemViewStateKey, std::__1::vector<id<FBWorkingRangeItemTransition>, std::__1::allocator<id<FBWorkingRangeItemTransition> > > >, void *> *> > {
	compressed_pair<unsigned long, std::__1::allocator<std::__1::__hash_node<std::__1::__hash_value_type<FBSampledWorkingRangeControllerItemViewStateKey, std::__1::vector<id<FBWorkingRangeItemTransition>, std::__1::allocator<id<FBWorkingRangeItemTransition> > > >, void *> *> > __data_;
} bucket_list_deallocator<std::__1::allocator<std::__1::__hash_node<std::__1::__hash_value_type<FBSampledWorkingRangeControllerItemViewStateKey, std::__1::vector<id<FBWorkingRangeItemTransition>, std::__1::allocator<id<FBWorkingRangeItemTransition> > > >, void *> *> >;

typedef struct _compressed_pair<std::__1::__hash_node<std::__1::__hash_value_type<FBSampledWorkingRangeControllerItemViewStateKey, std::__1::vector<id<FBWorkingRangeItemTransition>, std::__1::allocator<id<FBWorkingRangeItemTransition> > > >, void *> **, std::__1::__bucket_list_deallocator<std::__1::allocator<std::__1::__hash_node<std::__1::__hash_value_type<FBSampledWorkingRangeControllerItemViewStateKey, std::__1::vector<id<FBWorkingRangeItemTransition>, std::__1::allocator<id<FBWorkingRangeItemTransition> > > >, void *> *> > > {
	__hash_node<std::__1::__hash_value_type<FBSampledWorkingRangeControllerItemViewStateKey, std::__1::vector<id<FBWorkingRangeItemTransition>, std::__1::allocator<id<FBWorkingRangeItemTransition> > > >, void *> __first_;
	bucket_list_deallocator<std::__1::allocator<std::__1::__hash_node<std::__1::__hash_value_type<FBSampledWorkingRangeControllerItemViewStateKey, std::__1::vector<id<FBWorkingRangeItemTransition>, std::__1::allocator<id<FBWorkingRangeItemTransition> > > >, void *> *> > __second_;
} compressed_pair<std::__1::__hash_node<std::__1::__hash_value_type<FBSampledWorkingRangeControllerItemViewStateKey, std::__1::vector<id<FBWorkingRangeItemTransition>, std::__1::allocator<id<FBWorkingRangeItemTransition> > > >, void *> **, std::__1::__bucket_list_deallocator<std::__1::allocator<std::__1::__hash_node<std::__1::__hash_value_type<FBSampledWorkingRangeControllerItemViewStateKey, std::__1::vector<id<FBWorkingRangeItemTransition>, std::__1::allocator<id<FBWorkingRangeItemTransition> > > >, void *> *> > >;

typedef struct unique_ptr<std::__1::__hash_node<std::__1::__hash_value_type<FBSampledWorkingRangeControllerItemViewStateKey, std::__1::vector<id<FBWorkingRangeItemTransition>, std::__1::allocator<id<FBWorkingRangeItemTransition> > > >, void *> *[], std::__1::__bucket_list_deallocator<std::__1::allocator<std::__1::__hash_node<std::__1::__hash_value_type<FBSampledWorkingRangeControllerItemViewStateKey, std::__1::vector<id<FBWorkingRangeItemTransition>, std::__1::allocator<id<FBWorkingRangeItemTransition> > > >, void *> *> > > {
	compressed_pair<std::__1::__hash_node<std::__1::__hash_value_type<FBSampledWorkingRangeControllerItemViewStateKey, std::__1::vector<id<FBWorkingRangeItemTransition>, std::__1::allocator<id<FBWorkingRangeItemTransition> > > >, void *> **, std::__1::__bucket_list_deallocator<std::__1::allocator<std::__1::__hash_node<std::__1::__hash_value_type<FBSampledWorkingRangeControllerItemViewStateKey, std::__1::vector<id<FBWorkingRangeItemTransition>, std::__1::allocator<id<FBWorkingRangeItemTransition> > > >, void *> *> > > __ptr_;
} unique_ptr<std::__1::__hash_node<std::__1::__hash_value_type<FBSampledWorkingRangeControllerItemViewStateKey, std::__1::vector<id<FBWorkingRangeItemTransition>, std::__1::allocator<id<FBWorkingRangeItemTransition> > > >, void *> *[], std::__1::__bucket_list_deallocator<std::__1::allocator<std::__1::__hash_node<std::__1::__hash_value_type<FBSampledWorkingRangeControllerItemViewStateKey, std::__1::vector<id<FBWorkingRangeItemTransition>, std::__1::allocator<id<FBWorkingRangeItemTransition> > > >, void *> *> > >;

typedef struct _hash_table<std::__1::__hash_value_type<FBSampledWorkingRangeControllerItemViewStateKey, std::__1::vector<id<FBWorkingRangeItemTransition>, std::__1::allocator<id<FBWorkingRangeItemTransition> > > >, std::__1::__unordered_map_hasher<FBSampledWorkingRangeControllerItemViewStateKey, std::__1::__hash_value_type<FBSampledWorkingRangeControllerItemViewStateKey, std::__1::vector<id<FBWorkingRangeItemTransition>, std::__1::allocator<id<FBWorkingRangeItemTransition> > > >, FBSampledWorkingRangeControllerItemViewStateKeyHasher, true>, std::__1::__unordered_map_equal<FBSampledWorkingRangeControllerItemViewStateKey, std::__1::__hash_value_type<FBSampledWorkingRangeControllerItemViewStateKey, std::__1::vector<id<FBWorkingRangeItemTransition>, std::__1::allocator<id<FBWorkingRangeItemTransition> > > >, std::__1::equal_to<FBSampledWorkingRangeControllerItemViewStateKey>, true>, std::__1::allocator<std::__1::__hash_value_type<FBSampledWorkingRangeControllerItemViewStateKey, std::__1::vector<id<FBWorkingRangeItemTransition>, std::__1::allocator<id<FBWorkingRangeItemTransition> > > > > > {
	unique_ptr<std::__1::__hash_node<std::__1::__hash_value_type<FBSampledWorkingRangeControllerItemViewStateKey, std::__1::vector<id<FBWorkingRangeItemTransition>, std::__1::allocator<id<FBWorkingRangeItemTransition> > > >, void *> *[], std::__1::__bucket_list_deallocator<std::__1::allocator<std::__1::__hash_node<std::__1::__hash_value_type<FBSampledWorkingRangeControllerItemViewStateKey, std::__1::vector<id<FBWorkingRangeItemTransition>, std::__1::allocator<id<FBWorkingRangeItemTransition> > > >, void *> *> > > __bucket_list_;
	compressed_pair<std::__1::__hash_node_base<std::__1::__hash_node<std::__1::__hash_value_type<FBSampledWorkingRangeControllerItemViewStateKey, std::__1::vector<id<FBWorkingRangeItemTransition>, std::__1::allocator<id<FBWorkingRangeItemTransition> > > >, void *> *>, std::__1::allocator<std::__1::__hash_node<std::__1::__hash_value_type<FBSampledWorkingRangeControllerItemViewStateKey, std::__1::vector<id<FBWorkingRangeItemTransition>, std::__1::allocator<id<FBWorkingRangeItemTransition> > > >, void *> > > __p1_;
	compressed_pair<unsigned long, std::__1::__unordered_map_hasher<FBSampledWorkingRangeControllerItemViewStateKey, std::__1::__hash_value_type<FBSampledWorkingRangeControllerItemViewStateKey, std::__1::vector<id<FBWorkingRangeItemTransition>, std::__1::allocator<id<FBWorkingRangeItemTransition> > > >, FBSampledWorkingRangeControllerItemViewStateKeyHasher, true> > __p2_;
	compressed_pair<float, std::__1::__unordered_map_equal<FBSampledWorkingRangeControllerItemViewStateKey, std::__1::__hash_value_type<FBSampledWorkingRangeControllerItemViewStateKey, std::__1::vector<id<FBWorkingRangeItemTransition>, std::__1::allocator<id<FBWorkingRangeItemTransition> > > >, std::__1::equal_to<FBSampledWorkingRangeControllerItemViewStateKey>, true> > __p3_;
} hash_table<std::__1::__hash_value_type<FBSampledWorkingRangeControllerItemViewStateKey, std::__1::vector<id<FBWorkingRangeItemTransition>, std::__1::allocator<id<FBWorkingRangeItemTransition> > > >, std::__1::__unordered_map_hasher<FBSampledWorkingRangeControllerItemViewStateKey, std::__1::__hash_value_type<FBSampledWorkingRangeControllerItemViewStateKey, std::__1::vector<id<FBWorkingRangeItemTransition>, std::__1::allocator<id<FBWorkingRangeItemTransition> > > >, FBSampledWorkingRangeControllerItemViewStateKeyHasher, true>, std::__1::__unordered_map_equal<FBSampledWorkingRangeControllerItemViewStateKey, std::__1::__hash_value_type<FBSampledWorkingRangeControllerItemViewStateKey, std::__1::vector<id<FBWorkingRangeItemTransition>, std::__1::allocator<id<FBWorkingRangeItemTransition> > > >, std::__1::equal_to<FBSampledWorkingRangeControllerItemViewStateKey>, true>, std::__1::allocator<std::__1::__hash_value_type<FBSampledWorkingRangeControllerItemViewStateKey, std::__1::vector<id<FBWorkingRangeItemTransition>, std::__1::allocator<id<FBWorkingRangeItemTransition> > > > > >;

typedef struct unordered_map<FBSampledWorkingRangeControllerItemViewStateKey, std::__1::vector<id<FBWorkingRangeItemTransition>, std::__1::allocator<id<FBWorkingRangeItemTransition> > >, FBSampledWorkingRangeControllerItemViewStateKeyHasher, std::__1::equal_to<FBSampledWorkingRangeControllerItemViewStateKey>, std::__1::allocator<std::__1::pair<const FBSampledWorkingRangeControllerItemViewStateKey, std::__1::vector<id<FBWorkingRangeItemTransition>, std::__1::allocator<id<FBWorkingRangeItemTransition> > > > > > {
	hash_table<std::__1::__hash_value_type<FBSampledWorkingRangeControllerItemViewStateKey, std::__1::vector<id<FBWorkingRangeItemTransition>, std::__1::allocator<id<FBWorkingRangeItemTransition> > > >, std::__1::__unordered_map_hasher<FBSampledWorkingRangeControllerItemViewStateKey, std::__1::__hash_value_type<FBSampledWorkingRangeControllerItemViewStateKey, std::__1::vector<id<FBWorkingRangeItemTransition>, std::__1::allocator<id<FBWorkingRangeItemTransition> > > >, FBSampledWorkingRangeControllerItemViewStateKeyHasher, true>, std::__1::__unordered_map_equal<FBSampledWorkingRangeControllerItemViewStateKey, std::__1::__hash_value_type<FBSampledWorkingRangeControllerItemViewStateKey, std::__1::vector<id<FBWorkingRangeItemTransition>, std::__1::allocator<id<FBWorkingRangeItemTransition> > > >, std::__1::equal_to<FBSampledWorkingRangeControllerItemViewStateKey>, true>, std::__1::allocator<std::__1::__hash_value_type<FBSampledWorkingRangeControllerItemViewStateKey, std::__1::vector<id<FBWorkingRangeItemTransition>, std::__1::allocator<id<FBWorkingRangeItemTransition> > > > > > __table_;
} unordered_map<FBSampledWorkingRangeControllerItemViewStateKey, std::__1::vector<id<FBWorkingRangeItemTransition>, std::__1::allocator<id<FBWorkingRangeItemTransition> > >, FBSampledWorkingRangeControllerItemViewStateKeyHasher, std::__1::equal_to<FBSampledWorkingRangeControllerItemViewStateKey>, std::__1::allocator<std::__1::pair<const FBSampledWorkingRangeControllerItemViewStateKey, std::__1::vector<id<FBWorkingRangeItemTransition>, std::__1::allocator<id<FBWorkingRangeItemTransition> > > > > >;

typedef struct _compressed_pair<FB::Input<bool> *, std::__1::default_delete<FB::Input<bool> > > {
	Input<bool> __first_;
} compressed_pair<FB::Input<bool> *, std::__1::default_delete<FB::Input<bool> > >;

typedef struct unique_ptr<FB::Input<bool>, std::__1::default_delete<FB::Input<bool> > > {
	compressed_pair<FB::Input<bool> *, std::__1::default_delete<FB::Input<bool> > > __ptr_;
} unique_ptr<FB::Input<bool>, std::__1::default_delete<FB::Input<bool> > >;

typedef struct shared_ptr<FB::Private::LiveSignal<bool> > {
	LiveSignal<bool> __ptr_;
	__shared_weak_count __cntrl_;
} shared_ptr<FB::Private::LiveSignal<bool> >;

typedef struct Signal<bool> {
	shared_ptr<FB::Private::LiveSignal<bool> > _liveSignal;
} Signal<bool>;

typedef struct shared_ptr<FB::Input<double> > {
	Input<double> __ptr_;
	__shared_weak_count __cntrl_;
} shared_ptr<FB::Input<double> >;

typedef struct _compressed_pair<unsigned long, std::__1::allocator<std::__1::__hash_node<Class, void *> *> > {
	unsigned long long __first_;
} compressed_pair<unsigned long, std::__1::allocator<std::__1::__hash_node<Class, void *> *> >;

typedef struct _compressed_pair<unsigned long, std::__1::hash<Class> > {
	unsigned long long __first_;
} compressed_pair<unsigned long, std::__1::hash<Class> >;

typedef struct _compressed_pair<float, std::__1::equal_to<Class> > {
	float __first_;
} compressed_pair<float, std::__1::equal_to<Class> >;

typedef struct _hash_node_base<std::__1::__hash_node<Class, void *> *> {
	__hash_node<Class, void *> __next_;
} hash_node_base<std::__1::__hash_node<Class, void *> *>;

typedef struct _compressed_pair<std::__1::__hash_node_base<std::__1::__hash_node<Class, void *> *>, std::__1::allocator<std::__1::__hash_node<Class, void *> > > {
	hash_node_base<std::__1::__hash_node<Class, void *> *> __first_;
} compressed_pair<std::__1::__hash_node_base<std::__1::__hash_node<Class, void *> *>, std::__1::allocator<std::__1::__hash_node<Class, void *> > >;

typedef struct _bucket_list_deallocator<std::__1::allocator<std::__1::__hash_node<Class, void *> *> > {
	compressed_pair<unsigned long, std::__1::allocator<std::__1::__hash_node<Class, void *> *> > __data_;
} bucket_list_deallocator<std::__1::allocator<std::__1::__hash_node<Class, void *> *> >;

typedef struct _compressed_pair<std::__1::__hash_node<Class, void *> **, std::__1::__bucket_list_deallocator<std::__1::allocator<std::__1::__hash_node<Class, void *> *> > > {
	__hash_node<Class, void *> __first_;
	bucket_list_deallocator<std::__1::allocator<std::__1::__hash_node<Class, void *> *> > __second_;
} compressed_pair<std::__1::__hash_node<Class, void *> **, std::__1::__bucket_list_deallocator<std::__1::allocator<std::__1::__hash_node<Class, void *> *> > >;

typedef struct unique_ptr<std::__1::__hash_node<Class, void *> *[], std::__1::__bucket_list_deallocator<std::__1::allocator<std::__1::__hash_node<Class, void *> *> > > {
	compressed_pair<std::__1::__hash_node<Class, void *> **, std::__1::__bucket_list_deallocator<std::__1::allocator<std::__1::__hash_node<Class, void *> *> > > __ptr_;
} unique_ptr<std::__1::__hash_node<Class, void *> *[], std::__1::__bucket_list_deallocator<std::__1::allocator<std::__1::__hash_node<Class, void *> *> > >;

typedef struct _hash_table<Class, std::__1::hash<Class>, std::__1::equal_to<Class>, std::__1::allocator<Class> > {
	unique_ptr<std::__1::__hash_node<Class, void *> *[], std::__1::__bucket_list_deallocator<std::__1::allocator<std::__1::__hash_node<Class, void *> *> > > __bucket_list_;
	compressed_pair<std::__1::__hash_node_base<std::__1::__hash_node<Class, void *> *>, std::__1::allocator<std::__1::__hash_node<Class, void *> > > __p1_;
	compressed_pair<unsigned long, std::__1::hash<Class> > __p2_;
	compressed_pair<float, std::__1::equal_to<Class> > __p3_;
} hash_table<Class, std::__1::hash<Class>, std::__1::equal_to<Class>, std::__1::allocator<Class> >;

typedef struct unordered_set<Class, std::__1::hash<Class>, std::__1::equal_to<Class>, std::__1::allocator<Class> > {
	hash_table<Class, std::__1::hash<Class>, std::__1::equal_to<Class>, std::__1::allocator<Class> > __table_;
} unordered_set<Class, std::__1::hash<Class>, std::__1::equal_to<Class>, std::__1::allocator<Class> >;

typedef struct _compressed_pair<unsigned long, std::__1::allocator<std::__1::__hash_node<std::__1::__hash_value_type<Class, bool>, void *> *> > {
	unsigned long long __first_;
} compressed_pair<unsigned long, std::__1::allocator<std::__1::__hash_node<std::__1::__hash_value_type<Class, bool>, void *> *> >;

typedef struct _compressed_pair<unsigned long, std::__1::__unordered_map_hasher<Class, std::__1::__hash_value_type<Class, bool>, std::__1::hash<Class>, true> > {
	unsigned long long __first_;
} compressed_pair<unsigned long, std::__1::__unordered_map_hasher<Class, std::__1::__hash_value_type<Class, bool>, std::__1::hash<Class>, true> >;

typedef struct _compressed_pair<float, std::__1::__unordered_map_equal<Class, std::__1::__hash_value_type<Class, bool>, std::__1::equal_to<Class>, true> > {
	float __first_;
} compressed_pair<float, std::__1::__unordered_map_equal<Class, std::__1::__hash_value_type<Class, bool>, std::__1::equal_to<Class>, true> >;

typedef struct _hash_node_base<std::__1::__hash_node<std::__1::__hash_value_type<Class, bool>, void *> *> {
	__hash_node<std::__1::__hash_value_type<Class, bool>, void *> __next_;
} hash_node_base<std::__1::__hash_node<std::__1::__hash_value_type<Class, bool>, void *> *>;

typedef struct _compressed_pair<std::__1::__hash_node_base<std::__1::__hash_node<std::__1::__hash_value_type<Class, bool>, void *> *>, std::__1::allocator<std::__1::__hash_node<std::__1::__hash_value_type<Class, bool>, void *> > > {
	hash_node_base<std::__1::__hash_node<std::__1::__hash_value_type<Class, bool>, void *> *> __first_;
} compressed_pair<std::__1::__hash_node_base<std::__1::__hash_node<std::__1::__hash_value_type<Class, bool>, void *> *>, std::__1::allocator<std::__1::__hash_node<std::__1::__hash_value_type<Class, bool>, void *> > >;

typedef struct _bucket_list_deallocator<std::__1::allocator<std::__1::__hash_node<std::__1::__hash_value_type<Class, bool>, void *> *> > {
	compressed_pair<unsigned long, std::__1::allocator<std::__1::__hash_node<std::__1::__hash_value_type<Class, bool>, void *> *> > __data_;
} bucket_list_deallocator<std::__1::allocator<std::__1::__hash_node<std::__1::__hash_value_type<Class, bool>, void *> *> >;

typedef struct _compressed_pair<std::__1::__hash_node<std::__1::__hash_value_type<Class, bool>, void *> **, std::__1::__bucket_list_deallocator<std::__1::allocator<std::__1::__hash_node<std::__1::__hash_value_type<Class, bool>, void *> *> > > {
	__hash_node<std::__1::__hash_value_type<Class, bool>, void *> __first_;
	bucket_list_deallocator<std::__1::allocator<std::__1::__hash_node<std::__1::__hash_value_type<Class, bool>, void *> *> > __second_;
} compressed_pair<std::__1::__hash_node<std::__1::__hash_value_type<Class, bool>, void *> **, std::__1::__bucket_list_deallocator<std::__1::allocator<std::__1::__hash_node<std::__1::__hash_value_type<Class, bool>, void *> *> > >;

typedef struct unique_ptr<std::__1::__hash_node<std::__1::__hash_value_type<Class, bool>, void *> *[], std::__1::__bucket_list_deallocator<std::__1::allocator<std::__1::__hash_node<std::__1::__hash_value_type<Class, bool>, void *> *> > > {
	compressed_pair<std::__1::__hash_node<std::__1::__hash_value_type<Class, bool>, void *> **, std::__1::__bucket_list_deallocator<std::__1::allocator<std::__1::__hash_node<std::__1::__hash_value_type<Class, bool>, void *> *> > > __ptr_;
} unique_ptr<std::__1::__hash_node<std::__1::__hash_value_type<Class, bool>, void *> *[], std::__1::__bucket_list_deallocator<std::__1::allocator<std::__1::__hash_node<std::__1::__hash_value_type<Class, bool>, void *> *> > >;

typedef struct _hash_table<std::__1::__hash_value_type<Class, bool>, std::__1::__unordered_map_hasher<Class, std::__1::__hash_value_type<Class, bool>, std::__1::hash<Class>, true>, std::__1::__unordered_map_equal<Class, std::__1::__hash_value_type<Class, bool>, std::__1::equal_to<Class>, true>, std::__1::allocator<std::__1::__hash_value_type<Class, bool> > > {
	unique_ptr<std::__1::__hash_node<std::__1::__hash_value_type<Class, bool>, void *> *[], std::__1::__bucket_list_deallocator<std::__1::allocator<std::__1::__hash_node<std::__1::__hash_value_type<Class, bool>, void *> *> > > __bucket_list_;
	compressed_pair<std::__1::__hash_node_base<std::__1::__hash_node<std::__1::__hash_value_type<Class, bool>, void *> *>, std::__1::allocator<std::__1::__hash_node<std::__1::__hash_value_type<Class, bool>, void *> > > __p1_;
	compressed_pair<unsigned long, std::__1::__unordered_map_hasher<Class, std::__1::__hash_value_type<Class, bool>, std::__1::hash<Class>, true> > __p2_;
	compressed_pair<float, std::__1::__unordered_map_equal<Class, std::__1::__hash_value_type<Class, bool>, std::__1::equal_to<Class>, true> > __p3_;
} hash_table<std::__1::__hash_value_type<Class, bool>, std::__1::__unordered_map_hasher<Class, std::__1::__hash_value_type<Class, bool>, std::__1::hash<Class>, true>, std::__1::__unordered_map_equal<Class, std::__1::__hash_value_type<Class, bool>, std::__1::equal_to<Class>, true>, std::__1::allocator<std::__1::__hash_value_type<Class, bool> > >;

typedef struct unordered_map<Class, bool, std::__1::hash<Class>, std::__1::equal_to<Class>, std::__1::allocator<std::__1::pair<const Class, bool> > > {
	hash_table<std::__1::__hash_value_type<Class, bool>, std::__1::__unordered_map_hasher<Class, std::__1::__hash_value_type<Class, bool>, std::__1::hash<Class>, true>, std::__1::__unordered_map_equal<Class, std::__1::__hash_value_type<Class, bool>, std::__1::equal_to<Class>, true>, std::__1::allocator<std::__1::__hash_value_type<Class, bool> > > __table_;
} unordered_map<Class, bool, std::__1::hash<Class>, std::__1::equal_to<Class>, std::__1::allocator<std::__1::pair<const Class, bool> > >;

typedef struct _compressed_pair<unsigned long, std::__1::allocator<std::__1::__hash_node<std::__1::__hash_value_type<FBNotificationsEventBusFactoryKey, FBNotificationsEventBus *>, void *> *> > {
	unsigned long long __first_;
} compressed_pair<unsigned long, std::__1::allocator<std::__1::__hash_node<std::__1::__hash_value_type<FBNotificationsEventBusFactoryKey, FBNotificationsEventBus *>, void *> *> >;

typedef struct _compressed_pair<unsigned long, std::__1::__unordered_map_hasher<FBNotificationsEventBusFactoryKey, std::__1::__hash_value_type<FBNotificationsEventBusFactoryKey, FBNotificationsEventBus *>, std::__1::hash<FBNotificationsEventBusFactoryKey>, true> > {
	unsigned long long __first_;
} compressed_pair<unsigned long, std::__1::__unordered_map_hasher<FBNotificationsEventBusFactoryKey, std::__1::__hash_value_type<FBNotificationsEventBusFactoryKey, FBNotificationsEventBus *>, std::__1::hash<FBNotificationsEventBusFactoryKey>, true> >;

typedef struct _compressed_pair<float, std::__1::__unordered_map_equal<FBNotificationsEventBusFactoryKey, std::__1::__hash_value_type<FBNotificationsEventBusFactoryKey, FBNotificationsEventBus *>, std::__1::equal_to<FBNotificationsEventBusFactoryKey>, true> > {
	float __first_;
} compressed_pair<float, std::__1::__unordered_map_equal<FBNotificationsEventBusFactoryKey, std::__1::__hash_value_type<FBNotificationsEventBusFactoryKey, FBNotificationsEventBus *>, std::__1::equal_to<FBNotificationsEventBusFactoryKey>, true> >;

typedef struct _hash_node_base<std::__1::__hash_node<std::__1::__hash_value_type<FBNotificationsEventBusFactoryKey, FBNotificationsEventBus *>, void *> *> {
	__hash_node<std::__1::__hash_value_type<FBNotificationsEventBusFactoryKey, FBNotificationsEventBus *>, void *> __next_;
} hash_node_base<std::__1::__hash_node<std::__1::__hash_value_type<FBNotificationsEventBusFactoryKey, FBNotificationsEventBus *>, void *> *>;

typedef struct _compressed_pair<std::__1::__hash_node_base<std::__1::__hash_node<std::__1::__hash_value_type<FBNotificationsEventBusFactoryKey, FBNotificationsEventBus *>, void *> *>, std::__1::allocator<std::__1::__hash_node<std::__1::__hash_value_type<FBNotificationsEventBusFactoryKey, FBNotificationsEventBus *>, void *> > > {
	hash_node_base<std::__1::__hash_node<std::__1::__hash_value_type<FBNotificationsEventBusFactoryKey, FBNotificationsEventBus *>, void *> *> __first_;
} compressed_pair<std::__1::__hash_node_base<std::__1::__hash_node<std::__1::__hash_value_type<FBNotificationsEventBusFactoryKey, FBNotificationsEventBus *>, void *> *>, std::__1::allocator<std::__1::__hash_node<std::__1::__hash_value_type<FBNotificationsEventBusFactoryKey, FBNotificationsEventBus *>, void *> > >;

typedef struct _bucket_list_deallocator<std::__1::allocator<std::__1::__hash_node<std::__1::__hash_value_type<FBNotificationsEventBusFactoryKey, FBNotificationsEventBus *>, void *> *> > {
	compressed_pair<unsigned long, std::__1::allocator<std::__1::__hash_node<std::__1::__hash_value_type<FBNotificationsEventBusFactoryKey, FBNotificationsEventBus *>, void *> *> > __data_;
} bucket_list_deallocator<std::__1::allocator<std::__1::__hash_node<std::__1::__hash_value_type<FBNotificationsEventBusFactoryKey, FBNotificationsEventBus *>, void *> *> >;

typedef struct _compressed_pair<std::__1::__hash_node<std::__1::__hash_value_type<FBNotificationsEventBusFactoryKey, FBNotificationsEventBus *>, void *> **, std::__1::__bucket_list_deallocator<std::__1::allocator<std::__1::__hash_node<std::__1::__hash_value_type<FBNotificationsEventBusFactoryKey, FBNotificationsEventBus *>, void *> *> > > {
	__hash_node<std::__1::__hash_value_type<FBNotificationsEventBusFactoryKey, FBNotificationsEventBus *>, void *> __first_;
	bucket_list_deallocator<std::__1::allocator<std::__1::__hash_node<std::__1::__hash_value_type<FBNotificationsEventBusFactoryKey, FBNotificationsEventBus *>, void *> *> > __second_;
} compressed_pair<std::__1::__hash_node<std::__1::__hash_value_type<FBNotificationsEventBusFactoryKey, FBNotificationsEventBus *>, void *> **, std::__1::__bucket_list_deallocator<std::__1::allocator<std::__1::__hash_node<std::__1::__hash_value_type<FBNotificationsEventBusFactoryKey, FBNotificationsEventBus *>, void *> *> > >;

typedef struct unique_ptr<std::__1::__hash_node<std::__1::__hash_value_type<FBNotificationsEventBusFactoryKey, FBNotificationsEventBus *>, void *> *[], std::__1::__bucket_list_deallocator<std::__1::allocator<std::__1::__hash_node<std::__1::__hash_value_type<FBNotificationsEventBusFactoryKey, FBNotificationsEventBus *>, void *> *> > > {
	compressed_pair<std::__1::__hash_node<std::__1::__hash_value_type<FBNotificationsEventBusFactoryKey, FBNotificationsEventBus *>, void *> **, std::__1::__bucket_list_deallocator<std::__1::allocator<std::__1::__hash_node<std::__1::__hash_value_type<FBNotificationsEventBusFactoryKey, FBNotificationsEventBus *>, void *> *> > > __ptr_;
} unique_ptr<std::__1::__hash_node<std::__1::__hash_value_type<FBNotificationsEventBusFactoryKey, FBNotificationsEventBus *>, void *> *[], std::__1::__bucket_list_deallocator<std::__1::allocator<std::__1::__hash_node<std::__1::__hash_value_type<FBNotificationsEventBusFactoryKey, FBNotificationsEventBus *>, void *> *> > >;

typedef struct _hash_table<std::__1::__hash_value_type<FBNotificationsEventBusFactoryKey, FBNotificationsEventBus *>, std::__1::__unordered_map_hasher<FBNotificationsEventBusFactoryKey, std::__1::__hash_value_type<FBNotificationsEventBusFactoryKey, FBNotificationsEventBus *>, std::__1::hash<FBNotificationsEventBusFactoryKey>, true>, std::__1::__unordered_map_equal<FBNotificationsEventBusFactoryKey, std::__1::__hash_value_type<FBNotificationsEventBusFactoryKey, FBNotificationsEventBus *>, std::__1::equal_to<FBNotificationsEventBusFactoryKey>, true>, std::__1::allocator<std::__1::__hash_value_type<FBNotificationsEventBusFactoryKey, FBNotificationsEventBus *> > > {
	unique_ptr<std::__1::__hash_node<std::__1::__hash_value_type<FBNotificationsEventBusFactoryKey, FBNotificationsEventBus *>, void *> *[], std::__1::__bucket_list_deallocator<std::__1::allocator<std::__1::__hash_node<std::__1::__hash_value_type<FBNotificationsEventBusFactoryKey, FBNotificationsEventBus *>, void *> *> > > __bucket_list_;
	compressed_pair<std::__1::__hash_node_base<std::__1::__hash_node<std::__1::__hash_value_type<FBNotificationsEventBusFactoryKey, FBNotificationsEventBus *>, void *> *>, std::__1::allocator<std::__1::__hash_node<std::__1::__hash_value_type<FBNotificationsEventBusFactoryKey, FBNotificationsEventBus *>, void *> > > __p1_;
	compressed_pair<unsigned long, std::__1::__unordered_map_hasher<FBNotificationsEventBusFactoryKey, std::__1::__hash_value_type<FBNotificationsEventBusFactoryKey, FBNotificationsEventBus *>, std::__1::hash<FBNotificationsEventBusFactoryKey>, true> > __p2_;
	compressed_pair<float, std::__1::__unordered_map_equal<FBNotificationsEventBusFactoryKey, std::__1::__hash_value_type<FBNotificationsEventBusFactoryKey, FBNotificationsEventBus *>, std::__1::equal_to<FBNotificationsEventBusFactoryKey>, true> > __p3_;
} hash_table<std::__1::__hash_value_type<FBNotificationsEventBusFactoryKey, FBNotificationsEventBus *>, std::__1::__unordered_map_hasher<FBNotificationsEventBusFactoryKey, std::__1::__hash_value_type<FBNotificationsEventBusFactoryKey, FBNotificationsEventBus *>, std::__1::hash<FBNotificationsEventBusFactoryKey>, true>, std::__1::__unordered_map_equal<FBNotificationsEventBusFactoryKey, std::__1::__hash_value_type<FBNotificationsEventBusFactoryKey, FBNotificationsEventBus *>, std::__1::equal_to<FBNotificationsEventBusFactoryKey>, true>, std::__1::allocator<std::__1::__hash_value_type<FBNotificationsEventBusFactoryKey, FBNotificationsEventBus *> > >;

typedef struct unordered_map<FBNotificationsEventBusFactoryKey, FBNotificationsEventBus *, std::__1::hash<FBNotificationsEventBusFactoryKey>, std::__1::equal_to<FBNotificationsEventBusFactoryKey>, std::__1::allocator<std::__1::pair<const FBNotificationsEventBusFactoryKey, FBNotificationsEventBus *> > > {
	hash_table<std::__1::__hash_value_type<FBNotificationsEventBusFactoryKey, FBNotificationsEventBus *>, std::__1::__unordered_map_hasher<FBNotificationsEventBusFactoryKey, std::__1::__hash_value_type<FBNotificationsEventBusFactoryKey, FBNotificationsEventBus *>, std::__1::hash<FBNotificationsEventBusFactoryKey>, true>, std::__1::__unordered_map_equal<FBNotificationsEventBusFactoryKey, std::__1::__hash_value_type<FBNotificationsEventBusFactoryKey, FBNotificationsEventBus *>, std::__1::equal_to<FBNotificationsEventBusFactoryKey>, true>, std::__1::allocator<std::__1::__hash_value_type<FBNotificationsEventBusFactoryKey, FBNotificationsEventBus *> > > __table_;
} unordered_map<FBNotificationsEventBusFactoryKey, FBNotificationsEventBus *, std::__1::hash<FBNotificationsEventBusFactoryKey>, std::__1::equal_to<FBNotificationsEventBusFactoryKey>, std::__1::allocator<std::__1::pair<const FBNotificationsEventBusFactoryKey, FBNotificationsEventBus *> > >;

typedef struct shared_ptr<facebook::audiofiltercore::AudioInput<short> > {
	AudioInput<short> __ptr_;
	__shared_weak_count __cntrl_;
} shared_ptr<facebook::audiofiltercore::AudioInput<short> >;

typedef struct shared_ptr<facebook::audiofiltercore::AudioInputMixer<short> > {
	AudioInputMixer<short> __ptr_;
	__shared_weak_count __cntrl_;
} shared_ptr<facebook::audiofiltercore::AudioInputMixer<short> >;

typedef struct _compressed_pair<unsigned long, std::__1::allocator<std::__1::__list_node<(anonymous namespace)::FBGLogLogSink *, void *> > > {
	unsigned long long __first_;
} compressed_pair<unsigned long, std::__1::allocator<std::__1::__list_node<(anonymous namespace)::FBGLogLogSink *, void *> > >;

typedef struct _list_node_base<(anonymous namespace)::FBGLogLogSink *, void *> {
	__list_node_base<(anonymous namespace)::FBGLogLogSink *, void *> __prev_;
	__list_node_base<(anonymous namespace)::FBGLogLogSink *, void *> __next_;
} list_node_base<(anonymous namespace)::FBGLogLogSink *, void *>;

typedef struct list<(anonymous namespace)::FBGLogLogSink *, std::__1::allocator<(anonymous namespace)::FBGLogLogSink *> > {
	list_node_base<(anonymous namespace)::FBGLogLogSink *, void *> __end_;
	compressed_pair<unsigned long, std::__1::allocator<std::__1::__list_node<(anonymous namespace)::FBGLogLogSink *, void *> > > __size_alloc_;
} list<(anonymous namespace)::FBGLogLogSink *, std::__1::allocator<(anonymous namespace)::FBGLogLogSink *> >;

typedef struct FBFramePerformanceTrackerConfig {
	long long smallDropEventFrameNumber;
	long long largeDropEventFrameNumber;
	long long maxFrameDropAccount;
	long long initialTrackedFrame;
} FBFramePerformanceTrackerConfig;

typedef struct FrameDrops {
	double smallDrops;
	double largeDrops;
} FrameDrops;

typedef struct CGImageSource* CGImageSourceRef;

typedef struct WebPDemuxer* WebPDemuxerRef;

typedef struct TexCoordExtent {
	float left;
	float right;
	float bottom;
	float top;
} TexCoordExtent;

typedef struct Snapshot {
	unsigned gl_target;
	unsigned gl_texture;
	TexCoordExtent texCoordExtent;
	unsigned long long bitmapWidth;
	unsigned long long bitmapHeight;
	__CVOpenGLESTextureCache cv_textureCache;
	__CVBuffer cv_pixelBuffer;
	__CVBuffer cv_texture;
} Snapshot;

typedef struct PingPongFilter {
	int pingPong;
	int width;
	int height;
	unsigned bitmapInfo;
	CGColorSpace colorSpace;
	CVBuffer cv_pixelBuffers[2__];
	__CVOpenGLESTextureCache cv_textureCache;
	CVBuffer cv_textures[2__];
	unsigned gl_framebuffers[2];
	unsigned gl_fallback_textures[2];
} PingPongFilter;

typedef struct {
	unsigned texture;
	unsigned saturation;
	unsigned blendWithColor;
} SCD_Struct_FB1833;

typedef struct SaturationShader {
	unsigned program;
	SCD_Struct_FB1833 uniform;
} SaturationShader;

typedef struct BoxBlur1DShader {
	unsigned program;
	CameraTimeStat uniform;
} BoxBlur1DShader;

typedef struct PositionTexCoordQuad {
	unsigned buffers[2];
} PositionTexCoordQuad;

typedef struct FBFXGeometryEffectShader {
	unsigned program;
	CameraTimeStat uniform;
} FBFXGeometryEffectShader;

typedef struct TextureShader {
	unsigned program;
	CameraTimeStat uniform;
} TextureShader;

typedef struct {
	unsigned transform;
	unsigned texture;
	unsigned invBlockSize;
	unsigned alpha;
} SCD_Struct_FB1839;

typedef struct FBFXPixellateEffectShader {
	unsigned program;
	SCD_Struct_FB1839 uniform;
} FBFXPixellateEffectShader;

typedef struct _CCCryptor* CCCryptorRef;

typedef struct CGDataProvider* CGDataProviderRef;

typedef struct z_stream_s {
	char* next_in;
	unsigned avail_in;
	unsigned long long total_in;
	char* next_out;
	unsigned avail_out;
	unsigned long long total_out;
	char* msg;
	internal_state state;
	/*function pointer*/void* zalloc;
	/*function pointer*/void* zfree;
	void opaque;
	int data_type;
	unsigned long long adler;
	unsigned long long reserved;
} z_stream_s;

typedef struct ZZStandardCryptoEngine {
	int keys[3];
} ZZStandardCryptoEngine;

typedef struct {
	tm_zip_s field1;
	unsigned long long field2;
	unsigned long long field3;
	unsigned long long field4;
} SCD_Struct_SS1845;

typedef struct {
	id field1;
	id field2;
	/*function pointer*/void* field3;
	id field4;
	/*function pointer*/void* field5;
	double field6;
} SCD_Struct_PO1846;

typedef struct SpringSolver<POP::Vector4<double> >* SpringSolver<POP::Vector4<double> >Ref;

typedef struct _compressed_pair<unsigned long, std::__1::allocator<std::__1::__list_node<std::__1::shared_ptr<POPAnimatorItem>, void *> > > {
	unsigned long long __first_;
} compressed_pair<unsigned long, std::__1::allocator<std::__1::__list_node<std::__1::shared_ptr<POPAnimatorItem>, void *> > >;

typedef struct _list_node_base<std::__1::shared_ptr<POPAnimatorItem>, void *> {
	__list_node_base<std::__1::shared_ptr<POPAnimatorItem>, void *> __prev_;
	__list_node_base<std::__1::shared_ptr<POPAnimatorItem>, void *> __next_;
} list_node_base<std::__1::shared_ptr<POPAnimatorItem>, void *>;

typedef struct list<std::__1::shared_ptr<POPAnimatorItem>, std::__1::allocator<std::__1::shared_ptr<POPAnimatorItem> > > {
	list_node_base<std::__1::shared_ptr<POPAnimatorItem>, void *> __end_;
	compressed_pair<unsigned long, std::__1::allocator<std::__1::__list_node<std::__1::shared_ptr<POPAnimatorItem>, void *> > > __size_alloc_;
} list<std::__1::shared_ptr<POPAnimatorItem>, std::__1::allocator<std::__1::shared_ptr<POPAnimatorItem> > >;

typedef struct {
	long long field1;
	void field2;
	/*function pointer*/void* field3;
	/*function pointer*/void* field4;
	/*function pointer*/void* field5;
} SCD_Struct_NX1851;

typedef struct {
	AudioStreamBasicDescription field1;
	OpaqueAudioQueue field2;
	AudioQueueBuffer field3[3];
	long long field4;
} SCD_Struct_FB1852;

typedef struct objc_ivar* objc_ivarRef;

typedef struct __asl_object_s* asl_object_sRef;

typedef struct {
	long long version;
	void info;
	/*function pointer*/void* retain;
	/*function pointer*/void* release;
	/*function pointer*/void* copyDescription;
} SCD_Struct_GC1855;

typedef struct SSLContext* SSLContextRef;

