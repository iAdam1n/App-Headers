/*
* This header is generated by classdump-dyld 1.0
* on Saturday, December 24, 2016 at 12:21:15 AM Greenwich Mean Time
* Operating System: Version 10.1.1 (Build 14B150)
* Image Source: /var/containers/Bundle/Application/FE7A361D-639E-4E8F-9E98-6A4739748428/Facebook.app/Facebook
* classdump-dyld is licensed under GPLv3, Copyright Â© 2013-2016 by Elias Limneos.
*/

#import <Facebook/Facebook-Structs.h>
#import <Facebook/FBSearchSuggestionGeneratorProtocol.h>

@protocol OS_dispatch_queue;
@class FBUserSession, NSString, FBSearchBootstrapFileManager, NSObject;

@interface FBSimpleSearchSuggestionGenerator : NSObject <FBSearchSuggestionGeneratorProtocol> {

	FBUserSession* _session;
	NSString* _fileName;
	FBSearchBootstrapFileManager* _bootstrapFileManager;
	unique_ptr<facebook::simplesearch::OrderedList<unsigned long long>, std::__1::default_delete<facebook::simplesearch::OrderedList<unsigned long long> > >* _resultListPtr;
	NSObject*<OS_dispatch_queue> _queue;
	ReadWriteLock _contextLock;
	unsigned long long _state;
	unique_ptr<facebook::simplesearch::SimpleIndex, std::__1::default_delete<facebook::simplesearch::SimpleIndex> >* _indexPtr;
	shared_ptr<std::__1::unordered_map<unsigned long long, SimpleSearchEntityMetadata, std::__1::hash<unsigned long long>, std::__1::equal_to<unsigned long long>, std::__1::allocator<std::__1::pair<const unsigned long long, SimpleSearchEntityMetadata> > > >* _metadataCachePtr;

}
-(BOOL)_isLoaded;
-(void)modifyBootstrapIndexAsync:(id)arg1 options:(unsigned long long)arg2 ;
-(id)initWithBootstrapFileManager:(id)arg1 fileName:(id)arg2 session:(id)arg3 ;
-(BOOL)_loadIndexIntoMemory:(SimpleIndex*)arg1 withMetadataCache:(unordered_map<unsigned long long, SimpleSearchEntityMetadata, std::__1::hash<unsigned long long>, std::__1::equal_to<unsigned long long>, std::__1::allocator<std::__1::pair<const unsigned long long, SimpleSearchEntityMetadata> > >*)arg2 ;
-(id)suggestionsForQuery:(id)arg1 numRequested:(unsigned long long)arg2 ;
-(id)suggestionsForQuery:(id)arg1 numRequested:(unsigned long long)arg2 whitelistTypes:(id)arg3 homogeneous:(BOOL)arg4 ;
-(void)_offerHomogeneousSuggestionsForQuery:(id)arg1 fromEntitiesWithIds:(const shared_ptr<std::__1::vector<unsigned long long, std::__1::allocator<unsigned long long> > >*)arg2 ;
-(void)_offerSuggestionsForQuery:(id)arg1 fromEntitiesWithIds:(const shared_ptr<std::__1::vector<unsigned long long, std::__1::allocator<unsigned long long> > >*)arg2 ;
-(BOOL)_query:(id)arg1 matchesEntityPrefixIfRequired:(const SimpleSearchEntityMetadata*)arg2 ;
-(BOOL)_isCompleteSubstringMatch:(id)arg1 query:(id)arg2 ;
-(void)modifyBootstrapIndexAsync:(id)arg1 options:(unsigned long long)arg2 completionBlock:(/*^block*/id)arg3 ;
-(void)load;
-(void)loadWithCompletionBlock:(/*^block*/id)arg1 ;
-(void)unload;
@end

