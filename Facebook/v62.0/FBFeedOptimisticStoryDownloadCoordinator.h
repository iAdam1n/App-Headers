/*
* This header is generated by classdump-dyld 1.0
* on Friday, August 26, 2016 at 5:39:34 PM British Summer Time
* Operating System: Version 9.3.3 (Build 13G34)
* Image Source: /var/containers/Bundle/Application/C3C2BD9F-C9D4-4E48-9EC0-40E7F1350599/Facebook.app/Facebook
* classdump-dyld is licensed under GPLv3, Copyright Â© 2013-2016 by Elias Limneos.
*/

#import <Facebook/Facebook-Structs.h>
#import <Facebook/FBComposerPublisherStatusListener.h>
#import <Facebook/FBPublishingDataServerProcessingListener.h>
#import <Facebook/FBFacecastListener.h>

@class FBUserSession, FBFeedOptimisticStoryDownloadCoordinatorListenerAnnouncer, NSString;

@interface FBFeedOptimisticStoryDownloadCoordinator : NSObject <FBComposerPublisherStatusListener, FBPublishingDataServerProcessingListener, FBFacecastListener> {

	FBUserSession* _session;
	FBFeedOptimisticStoryDownloadCoordinatorListenerAnnouncer* _announcer;
	vector<bool (*)(NSString *, FBOptimisticStoryData *, FBUserSession *), std::__1::allocator<bool (*)(NSString *, FBOptimisticStoryData *, FBUserSession *)> >* _feedTypeOptimisticPostCheckers;

}

@property (readonly) unsigned long long hash; 
@property (readonly) Class superclass; 
@property (copy,readonly) NSString * description; 
@property (copy,readonly) NSString * debugDescription; 
-(void)startedPublishingPublisherData:(id)arg1 ;
-(void)attemptedPublicationOfPublisherData:(id)arg1 ;
-(void)failedPublishingPublisherData:(id)arg1 withError:(id)arg2 ;
-(void)failedPublishingAndWaitingForRetryPublisherData:(id)arg1 withError:(id)arg2 ;
-(void)terminallyFailedPublishingPublisherData:(id)arg1 withError:(id)arg2 ;
-(void)startedServerProcessingForUploadedPublication:(id)arg1 ;
-(void)successfullyPublishedPublisherData:(id)arg1 withResponse:(id)arg2 ;
-(void)cancelledPublishingPublisherData:(id)arg1 ;
-(void)pausedPublishingPublisherData:(id)arg1 ;
-(void)retriedPublishingPublisherData:(id)arg1 ;
-(void)startedWaitingForConnectivityForPublicationOfPublisherData:(id)arg1 ;
-(void)scheduledPublicationOfPublisherData:(id)arg1 atDate:(id)arg2 ;
-(void)publicationProgressedWithProgress:(double)arg1 forPublisherData:(id)arg2 ;
-(void)startedUploadingItemOfType:(int)arg1 withThumbnailImage:(id)arg2 forPublisherData:(id)arg3 ;
-(void)canCancelPublishingOfPublisherData:(id)arg1 ;
-(void)cannotCancelPublishingOfPublisherData:(id)arg1 ;
-(void)serverDidUpdateProcessingProgress:(float)arg1 forPublisherData:(id)arg2 response:(id)arg3 ;
-(void)serverDidFinishProcessingForPublisherData:(id)arg1 response:(id)arg2 ;
-(void)serverProcessingDidFailForPublisherData:(id)arg1 response:(id)arg2 ;
-(void)clientDidLoseTrackOfServerProcessingStatusForPublisherData:(id)arg1 response:(id)arg2 ;
-(void)registerOptimisticPostChecker:(/*function pointer*/void*)arg1 forFeedType:(long long)arg2 ;
-(BOOL)doesConnection:(id)arg1 supportOptimisticPostForPublisherData:(id)arg2 andResponse:(id)arg3 ;
-(void)facecastDidFinishBroadcastingWithPublisherData:(id)arg1 ;
-(void)facecastDidExitWithPublisherData:(id)arg1 ;
-(void)facecastDidCancelWithPublisherData:(id)arg1 ;
-(void)_enumerateConnectionSupportsOptimisticPostForData:(id)arg1 handlerForSupportedConnection:(/*^block*/id)arg2 ;
-(void)_loadOptimisticStoryAndInsertToConnectionsForPublisherData:(id)arg1 response:(id)arg2 ;
-(void)_loadStoryForPublisherData:(id)arg1 response:(id)arg2 completion:(/*^block*/id)arg3 ;
-(void)_loadOptimisticStoryAndInsertToConnectionsForStoryData:(id)arg1 mutationID:(id)arg2 storyLoader:(/*^block*/id)arg3 ;
-(BOOL)_isStoryExisting:(id)arg1 inEdges:(id)arg2 ;
-(void)_insertOptimisticStory:(id)arg1 intoConnection:(id)arg2 forFeedType:(long long)arg3 ;
-(void)_loadOptimisticStoryAndInsertToConnectionsForFacecastPublisherData:(id)arg1 ;
-(id)initWithSession:(id)arg1 ;
-(void)removeListener:(id)arg1 ;
-(void)addListener:(id)arg1 ;
@end

