/*
* This header is generated by classdump-dyld 1.0
* on Friday, August 26, 2016 at 5:39:35 PM British Summer Time
* Operating System: Version 9.3.3 (Build 13G34)
* Image Source: /var/containers/Bundle/Application/C3C2BD9F-C9D4-4E48-9EC0-40E7F1350599/Facebook.app/Facebook
* classdump-dyld is licensed under GPLv3, Copyright Â© 2013-2016 by Elias Limneos.
*/

#import <Facebook/Facebook-Structs.h>
#import <UIKit/UIViewController.h>
#import <Facebook/FBFacecastFeedbackInputViewControllerDelegate.h>
#import <Facebook/FBFacecastSocialMenuControllerDelegate.h>
#import <Facebook/FBFacecastViewerDonateDetailsViewControllerDelegate.h>
#import <Facebook/FBFacecastViewerDonateViewControllerDelegate.h>
#import <Facebook/FBFacecastViewerEndViewControllerDelegate.h>
#import <Facebook/FBFacecastViewerViewDelegate.h>
#import <Facebook/FBFacecastWithGuestViewControllerDelegate.h>
#import <Facebook/FBLiveViewerTipJarViewControllerDelegate.h>
#import <Facebook/FBScenePathHolding.h>
#import <Facebook/FBTVCastingButtonControllerDelegate.h>
#import <Facebook/FBTVCastingPlaybackEventListener.h>
#import <Facebook/FBVideoPlaybackEventListener.h>
#import <Facebook/FBVideoPlayerBroadcastIssuePluginDelegate.h>
#import <Facebook/FBVideoPlayerBroadcastViewPluginDelegate.h>
#import <Facebook/FBInAppNotificationEligibilityProtocol.h>
#import <Facebook/FBFullScreenVideoViewControlling.h>
#import <Facebook/FBInstreamAdControllerStoryDelegate.h>

@protocol FBVideoPluginView, FBVideoPlayerBroadcastIssuePluginDelegate, FBMediaUFIBarControllerDelegate, FBVideoPresentingDelegate;
@class FBVideoViewManager, FBVideoViewManagerContext, FBMemFeedStory, FBMemVideo, FBFeedToolbox, NSArray, FBUserSession, NSString, FBDisplayableMediaTransitionManager, NSDate, FBCrowdNoiseViewController, FBFacecastViewerVideoControlViewController, FBFacecastInteractionViewController, FBFacecastFeedbackInputViewController, FBFacecastViewerEndViewController, FBFacecastSocialMenuController, FBLiveViewerTipJarViewController, FBLiveViewerTipJarBannerViewController, FBFacecastViewerDonateViewController, FBFacecastViewerDonateDetailsViewController, FBTVCastingButtonController, FBInstreamAdPlayPauseButtonViewController, FBFacecastWithGuestViewController, FBVideoPlayerBroadcastIssuePlugin, UIView, FBInstreamAdCommercialBreakFeedbackOverlayView, FBConsistentLookasideCacheObservationHandle, FBVideoPlaybackController, FBFacecastViewerView, FBMediaUFIBarController;

@interface FBFacecastViewerViewController : UIViewController <FBFacecastFeedbackInputViewControllerDelegate, FBFacecastSocialMenuControllerDelegate, FBFacecastViewerDonateDetailsViewControllerDelegate, FBFacecastViewerDonateViewControllerDelegate, FBFacecastViewerEndViewControllerDelegate, FBFacecastViewerViewDelegate, FBFacecastWithGuestViewControllerDelegate, FBLiveViewerTipJarViewControllerDelegate, FBScenePathHolding, FBTVCastingButtonControllerDelegate, FBTVCastingPlaybackEventListener, FBVideoPlaybackEventListener, FBVideoPlayerBroadcastIssuePluginDelegate, FBVideoPlayerBroadcastViewPluginDelegate, FBInAppNotificationEligibilityProtocol, FBFullScreenVideoViewControlling, FBInstreamAdControllerStoryDelegate> {

	FBVideoViewManager* _viewManager;
	FBVideoViewManagerContext* _originalViewManagerContext;
	FBMemFeedStory* _originalStory;
	FBMemVideo* _videoObject;
	FBFeedToolbox* _toolbox;
	NSArray* _trackingCodes;
	FBUserSession* _session;
	NSString* _analyticsModule;
	FBDisplayableMediaTransitionManager* _castingTransitionManager;
	NSDate* _dateOfViewWillAppear;
	/*^block*/id _onDismissCompletionBlock;
	FBCrowdNoiseViewController* _crowdNoiseViewController;
	FBFacecastViewerVideoControlViewController* _videoControlViewController;
	FBFacecastInteractionViewController* _interactionViewController;
	FBFacecastFeedbackInputViewController* _feedbackViewController;
	FBFacecastViewerEndViewController* _endViewController;
	FBFacecastSocialMenuController* _socialMenuController;
	FBLiveViewerTipJarViewController* _tipJarViewController;
	FBLiveViewerTipJarBannerViewController* _tipJarBannerViewController;
	FBFacecastViewerDonateViewController* _donateViewController;
	FBFacecastViewerDonateDetailsViewController* _donateDetailsViewController;
	FBTVCastingButtonController* _castingButtonController;
	FBInstreamAdPlayPauseButtonViewController* _commercialBreakPlayPauseButtonViewController;
	FBFacecastWithGuestViewController* _facecastWithGuestViewController;
	FBVideoPlayerBroadcastIssuePlugin* _issuePlugin;
	UIView*<FBVideoPluginView> _originalFeedOverlayPlugin;
	FBInstreamAdCommercialBreakFeedbackOverlayView* _commercialBreakFeedbackOverlayView;
	id<FBVideoPlayerBroadcastIssuePluginDelegate> _originalIssuePluginDelegate;
	id<FBMediaUFIBarControllerDelegate> _ufiDelegate;
	FBConsistentLookasideCacheObservationHandle* _clcHandle;
	FBConsistentLookasideCacheObservationHandle* _commercialBreakClcHandle;
	BOOL _hasRecordedViewerWatch;
	BOOL _isDismissing;
	BOOL _viewDidAppearAndIsNotDisappearing;
	long long _originalLiveIndicatorAlignment;
	unsigned long long _originalIssueViewLayoutIdiom;
	FBFullScreenVideoViewControllerConfig _viewControllerConfig;
	BOOL _preventAutoPlayIfManuallyPaused;
	BOOL _liveStreamEnded;
	id<FBVideoPresentingDelegate> _delegate;
	long long _commercialBreakControllerState;
	FBMemFeedStory* _commercialBreakStory;
	FBVideoPlaybackController* _commercialBreakVideoAdPlaybackController;

}

@property (nonatomic,retain) FBFacecastViewerView * view; 
@property (nonatomic,__weak,readonly) FBDisplayableMediaTransitionManager * transitionManager; 
@property (assign,nonatomic) long long commercialBreakControllerState;                                          //@synthesize commercialBreakControllerState=_commercialBreakControllerState - In the implementation block
@property (nonatomic,retain) FBMemFeedStory * commercialBreakStory;                                             //@synthesize commercialBreakStory=_commercialBreakStory - In the implementation block
@property (nonatomic,retain) FBVideoPlaybackController * commercialBreakVideoAdPlaybackController;              //@synthesize commercialBreakVideoAdPlaybackController=_commercialBreakVideoAdPlaybackController - In the implementation block
@property (assign,getter=isLiveStreamEnded,nonatomic) BOOL liveStreamEnded;                                     //@synthesize liveStreamEnded=_liveStreamEnded - In the implementation block
@property (readonly) unsigned long long hash; 
@property (readonly) Class superclass; 
@property (copy,readonly) NSString * description; 
@property (copy,readonly) NSString * debugDescription; 
@property (nonatomic,readonly) FBVideoViewManager * viewManager;                                                //@synthesize viewManager=_viewManager - In the implementation block
@property (assign,nonatomic) BOOL autoDismissWhenVideoFinishes; 
@property (nonatomic,readonly) BOOL canAutoAdvance; 
@property (nonatomic,readonly) FBMediaUFIBarController * ufiBarController; 
@property (assign,nonatomic,__weak) id<FBVideoPresentingDelegate> fullscreenVideoDelegate;                      //@synthesize delegate=_delegate - In the implementation block
@property (assign,nonatomic) BOOL preventAutoPlayIfManuallyPaused;                                              //@synthesize preventAutoPlayIfManuallyPaused=_preventAutoPlayIfManuallyPaused - In the implementation block
-(BOOL)inAppNotificationBeeperManager:(id)arg1 shouldShowNotification:(id)arg2 ;
-(id)analyticsModule;
-(FBVideoViewManager *)viewManager;
-(void)videoPlaybackControllerDidRequestPlayback:(id)arg1 ;
-(void)videoPlaybackControllerDidStartPlayback:(id)arg1 ;
-(void)videoPlaybackControllerDidPausePlayback:(id)arg1 ;
-(void)videoPlaybackControllerDidFinishPlayback:(id)arg1 ;
-(void)videoPlaybackController:(id)arg1 didUpdatePlaybackTime:(double)arg2 ;
-(CGRect)_videoFrame;
-(void)transitionManagerNeedsDismissal:(id)arg1 ;
-(id)transitionManagerNeedsMediaInfoForAnimation:(id)arg1 ;
-(unsigned long long)transitionManager:(id)arg1 preferredDismissalTransitionTypeForMedia:(id)arg2 ;
-(void)transitionManager:(id)arg1 willPresentWithMediaViewProviderInfo:(id)arg2 ;
-(BOOL)displayableMediaTransitionManager:(id)arg1 shouldBeginDismissalWithGesture:(id)arg2 inDirection:(long long)arg3 ;
-(FBDisplayableMediaTransitionManager *)transitionManager;
-(void)setAutoDismissWhenVideoFinishes:(BOOL)arg1 ;
-(void)setPreventAutoPlayIfManuallyPaused:(BOOL)arg1 ;
-(void)resetViewManager;
-(void)didFinishAnimatingViewAfterCancelingDismissal:(BOOL)arg1 ;
-(void)configureViewManager;
-(FBMediaUFIBarController *)ufiBarController;
-(CGRect)animationFrameForView;
-(BOOL)canAutoAdvance;
-(BOOL)autoDismissWhenVideoFinishes;
-(id<FBVideoPresentingDelegate>)fullscreenVideoDelegate;
-(void)setFullscreenVideoDelegate:(id<FBVideoPresentingDelegate>)arg1 ;
-(BOOL)preventAutoPlayIfManuallyPaused;
-(void)tvCastingButtonControllerDevicesAvailable:(id)arg1 ;
-(void)tvCastingButtonControllerDevicesNoLongerAvailable:(id)arg1 ;
-(void)tvCastingButtonControllerWasTapped:(id)arg1 ;
-(void)tvCastingButtonControllerDidDisplayNUX:(id)arg1 ;
-(void)tvCastingButtonControllerDidDismissNUX:(id)arg1 ;
-(void)setUFIDelegate:(id)arg1 ;
-(void)setCommercialBreakStory:(FBMemFeedStory *)arg1 ;
-(void)setCommercialBreakControllerState:(long long)arg1 ;
-(void)setCommercialBreakVideoAdPlaybackController:(FBVideoPlaybackController *)arg1 ;
-(id)initWithViewManager:(id)arg1 originalStory:(id)arg2 video:(id)arg3 viewControllerConfig:(FBFullScreenVideoViewControllerConfig)arg4 trackingCodes:(id)arg5 session:(id)arg6 navigationCoordinator:(id)arg7 intentHandler:(id)arg8 layoutIdiom:(unsigned long long)arg9 analyticsModule:(id)arg10 scenePath:(id)arg11 fontFoundry:(id)arg12 onDismissCompletionBlock:(/*^block*/id)arg13 ;
-(void)setLiveStreamEnded:(BOOL)arg1 ;
-(void)facecastViewerEndViewControllerDoneButtonTapped:(id)arg1 ;
-(void)facecastViewerEndViewController:(id)arg1 tappedChannel:(id)arg2 ;
-(void)_applicationWillResignActiveDuringLiveBroadcast;
-(void)_didUpdateStory:(id)arg1 ;
-(id)broadcastPlugin;
-(id)_broadcasterID;
-(BOOL)_isWatchingVOD;
-(id)_broadcasterName;
-(void)_didStartCommercialBreak;
-(void)_dismissTipJarPanel;
-(BOOL)_isCasting;
-(void)_setupCastingController;
-(BOOL)_canLetOthersKnowThatIAmWatching;
-(BOOL)_hasWatchingNuxEverBeenViewed;
-(void)_letOthersKNowThatIAmWatching;
-(id)_videoGravity;
-(BOOL)_isPlayingCommercial;
-(BOOL)_canRotate;
-(void)_didTapSelf;
-(void)_setWatchingNuxViewed;
-(BOOL)_shouldShowCastingButton;
-(BOOL)_interactionShouldBeHidden;
-(BOOL)_canShowCrowdNoise;
-(void)_configureVideoPlayerBroadcastIssuePluginSettings;
-(void)_restoreOriginalVideoPlayerBroadcastIssuePluginSettings;
-(void)_clearCastingState;
-(void)_appearAnimationFinished;
-(double)_currentLiveAudioTime;
-(double)_currentVodTime;
-(void)_didUpdatePlaybackTime:(double)arg1 ;
-(void)_showEndBroadcastFlow;
-(void)_onGuestReturnToBroadcast;
-(void)_setCommercialBreakContextCardAndSecondaryAction;
-(void)_didUpdateCommercialBreakStory:(id)arg1 ;
-(void)_conditionallySetCrowdNoiseViewHidden:(BOOL)arg1 ;
-(BOOL)_isLandscapeFullscreen;
-(void)_castingViewControllerDidDismiss;
-(CGRect)_interactionAreaFrame;
-(void)_resetCommercialBreakContextCardAndSecondaryAction;
-(void)_didEndCommercialBreak;
-(void)_prepareForInterstitial;
-(void)facecastFeedbackInputViewControllerUpdatedContentSize:(id)arg1 ;
-(void)facecastFeedbackInputViewController:(id)arg1 committedReactionKey:(long long)arg2 withActorID:(id)arg3 ;
-(void)facecastFeedbackInputViewController:(id)arg1 committedComment:(id)arg2 ;
-(void)facecastFeedbackInputViewController:(id)arg1 selectedInvite:(id)arg2 ;
-(double)facecastFeedbackInputViewControllerPlaybackTime:(id)arg1 ;
-(double)facecastFeedbackInputViewControllerLiveAudioTimestamp:(id)arg1 ;
-(void)facecastSocialMenuControllerDismissed:(id)arg1 ;
-(void)facecastViewerDonateDetailsViewControllerCloseButtonTapped:(id)arg1 ;
-(void)facecastViewerDonateDetailsButtonTapped;
-(void)facecastViewerViewSelectedDismiss:(id)arg1 ;
-(void)facecastViewerViewSelectedPlay:(id)arg1 ;
-(void)facecastViewerViewSelectedFocus:(id)arg1 ;
-(void)facecastViewerViewHidWatchingNux:(id)arg1 ;
-(BOOL)facecastViewerViewCanShowCastingButton:(id)arg1 ;
-(BOOL)facecastViewerViewShouldHideInteraction:(id)arg1 ;
-(BOOL)facecastViewerViewCanShowCrowdNoise:(id)arg1 ;
-(void)facecastWithGuestViewControllerDidReceiveInvitation:(id)arg1 ;
-(void)facecastWithGuestViewControllerDidDismissInvitation:(id)arg1 ;
-(void)facecastWithGuestViewControllerDidAcceptInvitation:(id)arg1 ;
-(void)facecastWithGuestViewControllerDidEndGuestBroadcast:(id)arg1 ;
-(void)facecastWithGuestViewControllerDidReturnToBroadcast:(id)arg1 ;
-(void)facecastWithGuestViewControllerDidTapShare:(id)arg1 ;
-(void)liveViewerTipJarButtonTapped:(id)arg1 ;
-(void)liveViewerTipJarDismissButtonTapped:(id)arg1 ;
-(double)liveViewerTipJarLiveAudioTimestamp:(id)arg1 ;
-(void)liveViewerTipJarFeedbackController:(id)arg1 committedComment:(id)arg2 ;
-(void)tvVideoPlaybackControllerDidFinishPlayback:(id)arg1 ;
-(void)tvVideoPlaybackController:(id)arg1 didFailWithError:(unsigned long long)arg2 ;
-(void)tvVideoPlaybackController:(id)arg1 didUpdatePlaybackTime:(double)arg2 ;
-(void)instreamAdController:(id)arg1 didUpdateState:(long long)arg2 ;
-(void)instreamAdController:(id)arg1 didUpdateVideoAd:(id)arg2 ;
-(id)_commercialBreakPostPreviewView;
-(long long)commercialBreakControllerState;
-(FBMemFeedStory *)commercialBreakStory;
-(FBVideoPlaybackController *)commercialBreakVideoAdPlaybackController;
-(BOOL)isLiveStreamEnded;
-(void)broadcastIssuePluginDidShow:(id)arg1 ;
-(void)broadcastIssuePluginDidHide:(id)arg1 ;
-(void)fbVideoPlayerBroadcastViewPluginDidTapViewerCount:(id)arg1 ;
-(BOOL)_isInCommercialBreak;
-(void)dealloc;
-(BOOL)prefersStatusBarHidden;
-(unsigned long long)supportedInterfaceOrientations;
-(BOOL)shouldAutorotate;
-(void)loadView;
-(void)viewWillLayoutSubviews;
-(void)didMoveToParentViewController:(id)arg1 ;
-(long long)preferredInterfaceOrientationForPresentation;
-(void)viewWillAppear:(BOOL)arg1 ;
-(void)viewDidLoad;
-(void)willMoveToParentViewController:(id)arg1 ;
-(BOOL)shouldAutomaticallyForwardRotationMethods;
-(void)viewDidAppear:(BOOL)arg1 ;
-(void)viewWillDisappear:(BOOL)arg1 ;
-(void)viewDidDisappear:(BOOL)arg1 ;
-(void)_dismiss;
-(void)dismissWithCompletion:(/*^block*/id)arg1 ;
@end

