/*
* This header is generated by classdump-dyld 1.0
* on Friday, August 26, 2016 at 5:39:45 PM British Summer Time
* Operating System: Version 9.3.3 (Build 13G34)
* Image Source: /var/containers/Bundle/Application/C3C2BD9F-C9D4-4E48-9EC0-40E7F1350599/Facebook.app/Facebook
* classdump-dyld is licensed under GPLv3, Copyright Â© 2013-2016 by Elias Limneos.
*/

#import <Facebook/FBGraphQLConnectionStoreSimpleListener.h>
#import <Facebook/FBGraphQLConnectionSyncStoreProtocol.h>

@protocol FBGraphQLConnectionSyncStoreRequestProvider;
@class FBGraphQLConnectionStoreSimple, FBGraphQLConnectionSyncStoreListenerAnnouncer, FBGraphQLMemResponseController, FBScenePath, NSString;

@interface FBGraphQLConnectionSyncStore : NSObject <FBGraphQLConnectionStoreSimpleListener, FBGraphQLConnectionSyncStoreProtocol> {

	FBGraphQLConnectionStoreSimple* _edgeStore;
	id<FBGraphQLConnectionSyncStoreRequestProvider> _requestProvider;
	int _networkRequestThresholdInSeconds;
	FBGraphQLConnectionSyncStoreListenerAnnouncer* _announcer;
	FBGraphQLMemResponseController* _memResponseController;
	BOOL _shouldDoFindRequest;
	BOOL _hasReachedEnd;
	BOOL _hasReachedBegin;
	BOOL _alwaysUseFirstCachedResponse;
	FBScenePath* _scenePath;
	id _requestID;

}

@property (nonatomic,retain) id requestID;                                   //@synthesize requestID=_requestID - In the implementation block
@property (assign,nonatomic) BOOL alwaysUseFirstCachedResponse;              //@synthesize alwaysUseFirstCachedResponse=_alwaysUseFirstCachedResponse - In the implementation block
@property (readonly) unsigned long long hash; 
@property (readonly) Class superclass; 
@property (copy,readonly) NSString * description; 
@property (copy,readonly) NSString * debugDescription; 
@property (nonatomic,retain) FBScenePath * scenePath;                        //@synthesize scenePath=_scenePath - In the implementation block
+(id)fbidForEdge:(id)arg1 ;
-(FBScenePath *)scenePath;
-(void)setScenePath:(FBScenePath *)arg1 ;
-(id)allNodes;
-(void)syncNext:(/*^block*/id)arg1 ;
-(void)forceRefresh:(/*^block*/id)arg1 ;
-(BOOL)canSyncMoreNext;
-(unsigned long long)countOfNodes;
-(unsigned long long)indexOfNode:(id)arg1 ;
-(void)applyFilter:(id)arg1 ;
-(id)initWithEdgeStore:(id)arg1 graphQLMemResponseController:(id)arg2 requestProvider:(id)arg3 networkRequestThresholdInSeconds:(int)arg4 alwaysUseFirstCachedResponse:(BOOL)arg5 ;
-(BOOL)nodeIsSynced:(id)arg1 ;
-(BOOL)canSyncMorePrevious;
-(void)syncPrevious:(/*^block*/id)arg1 ;
-(void)updateNodes:(id)arg1 ;
-(void)simpleConnectionStore:(id)arg1 didRemoveNodesAtIndexes:(id)arg2 ;
-(void)simpleConnectionStore:(id)arg1 didUpdateNodesAtIndexes:(id)arg2 ;
-(void)simpleConnectionStore:(id)arg1 didAddNodesAtIndexes:(id)arg2 ;
-(void)simpleConnectionStoreDidUpdatePageInfo:(id)arg1 ;
-(void)_find:(id)arg1 completionBlock:(/*^block*/id)arg2 ;
-(void)_performRequest:(id)arg1 insertLocation:(id)arg2 forceRefresh:(BOOL)arg3 requestType:(unsigned long long)arg4 completionBlock:(/*^block*/id)arg5 ;
-(void)_announceDidReachEndOrStartIfNecessary;
-(void)_updateHasReachedEndOrBeginningWithConnectionPage:(id)arg1 requestType:(unsigned long long)arg2 ;
-(void)_deleteRemainingInitialNodesIfNecessary;
-(BOOL)alwaysUseFirstCachedResponse;
-(void)_handleResponse:(id)arg1 error:(id)arg2 requestFinished:(BOOL)arg3 location:(id)arg4 replaceEdgeStore:(BOOL)arg5 requestType:(unsigned long long)arg6 fromCache:(BOOL)arg7 completionBlock:(/*^block*/id)arg8 ;
-(void)setAlwaysUseFirstCachedResponse:(BOOL)arg1 ;
-(void)_handleCachedResponse:(id)arg1 willDownloadFreshResponse:(BOOL)arg2 location:(id)arg3 requestType:(unsigned long long)arg4 completionBlock:(/*^block*/id)arg5 ;
-(void)setRequestID:(id)arg1 ;
-(void)cancelSync;
-(BOOL)isSyncing;
-(id)requestID;
-(void)removeListener:(id)arg1 ;
-(void)addListener:(id)arg1 ;
-(id)nodeAtIndex:(unsigned long long)arg1 ;
@end

