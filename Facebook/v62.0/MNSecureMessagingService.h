/*
* This header is generated by classdump-dyld 1.0
* on Friday, August 26, 2016 at 5:39:37 PM British Summer Time
* Operating System: Version 9.3.3 (Build 13G34)
* Image Source: /var/containers/Bundle/Application/C3C2BD9F-C9D4-4E48-9EC0-40E7F1350599/Facebook.app/Facebook
* classdump-dyld is licensed under GPLv3, Copyright Â© 2013-2016 by Elias Limneos.
*/

#import <Facebook/FBBackgroundingListener.h>
#import <Facebook/MNSecureMessagingStartupStateMachineListener.h>
#import <Facebook/MNSecureMessagingRegistrationStateUpdateListening.h>
#import <Facebook/MNSecureMessagingCapabilityManualOverrideExecutorDelegate.h>
#import <Facebook/MNSecureThreadServiceControlling.h>
#import <Facebook/MNSecureMessageSending.h>
#import <Facebook/MNSecureImageRequesting.h>
#import <Facebook/MNSecureMessagingBadgeCounting.h>
#import <Facebook/MNSecureMessagingDeviceInformation.h>
#import <Facebook/MNSecureMessagingRegisteredDeviceStatusUpdateRunning.h>
#import <Facebook/MNSecureMessagingServiceManipulating.h>
#import <Facebook/MNSecureMessagingCapabilityManualOverriding.h>

@protocol MNAuthenticationManager, MNSecureMessagingPreKeySyncCoordinating, MNSecureMessagingMasterKeyProviding, MNSecureMessagingSendHandling, MNEphemeralMessageExpirationTimerStoreListening, MNEphemeralMessagingTombstonedMessageDeleting, MNSecureMessagingRegisteredDeviceStatusChangeListening, MNSecureMessagingServiceAPIRequestFulfilling, MNGlobalMuteStatusReading, FBClock, OS_dispatch_queue;
@class NSSet, FBOmnistore, MNSecureMessagingStoredProcedureRunner, FBUserSession, FBAnalytics, FBBackgroundingAnnouncer, MNEphemeralMessagingSystemController, MNSecureMessagingStore, MNSecureMessagingOutgoingMessageCoordinator, MNSecureMessagingIncomingMessageProcessor, MNSecureMessagingRegistrationRunner, MNUnprotectedCustomBlobStore, MNBouncedMessageTracker, MNSecureMessagingCryptoKeychainStore, MNSecureMessagingRegistrationStateCache, MNSecureMessagingCryptoStateLoader, MNSecureMessagingRegistrationCryptoStateUpdater, FBLoggedInUserCryptoEngine, MNSecureMessagingCryptoKeychainStorageAnalyticsLogger, MNSecureMessagingPacketFactory, MNSecureMessagingReceiptSender, MNSecureThreadCacheInvalidatingAnnouncementInterceptor, MNSecureThreadMessageReceivedListeningAnnouncer, MNSecureMessagingStoreListenerAnnouncer, MNSecureMessageSendListeningAnnouncer, MNSecureThreadExistenceInfoCacheObservingAnnouncer, MNSecureMessagingRegisteredDeviceStatusChangeListeningAnnouncer, MNSecureMessagingCryptoStateUpdateListeningAnnouncer, MNSecureMessagingServiceListeningAnnouncer, MNSecureThreadUpdater, MNSecureMessagingPacketReceiver, MNSecureMessagingImageRequester, MNSecureThreadExistenceInfoCache, MNSecureThreadExistenceInfoCacheUpdater, MNSecureEphemeralMessagingDiskStateDeleter, MNSecureMessagingRegisteredDeviceStatusUpdateHandler, MNBadgeCountUpdateService, MNSecureMessagingStartupStateMachine, MNSecureMessagingBadgeCounter, MNSecureMessagingStoreOpenedDelayer, MNSecureMessagingCryptoStateLoaderListeningAnnouncer, MNSecureMessagingCapabilityManualOverrideExecutor, MNSecureMessagingCapabilityStore, MNLocalNotificationController, NSObject, NSString, NSData, MNSecureMessagingRegistrationState;

@interface MNSecureMessagingService : NSObject <FBBackgroundingListener, MNSecureMessagingStartupStateMachineListener, MNSecureMessagingRegistrationStateUpdateListening, MNSecureMessagingCapabilityManualOverrideExecutorDelegate, MNSecureThreadServiceControlling, MNSecureMessageSending, MNSecureImageRequesting, MNSecureMessagingBadgeCounting, MNSecureMessagingDeviceInformation, MNSecureMessagingRegisteredDeviceStatusUpdateRunning, MNSecureMessagingServiceManipulating, MNSecureMessagingCapabilityManualOverriding> {

	FBOmnistore* _omnistore;
	MNSecureMessagingStoredProcedureRunner* _storedProcedureRunner;
	FBUserSession* _session;
	FBAnalytics* _analytics;
	id<MNAuthenticationManager> _authManager;
	FBBackgroundingAnnouncer* _backgroundingAnnouncer;
	MNEphemeralMessagingSystemController* _ephemeralMessageSystemController;
	MNSecureMessagingStore* _messagingStore;
	MNSecureMessagingOutgoingMessageCoordinator* _sendMessageCoordinator;
	MNSecureMessagingIncomingMessageProcessor* _receiveMessageCoordinator;
	MNSecureMessagingRegistrationRunner* _registrationRunner;
	MNUnprotectedCustomBlobStore* _unprotectedBlobStore;
	MNBouncedMessageTracker* _bouncedMessageTracker;
	id<MNSecureMessagingPreKeySyncCoordinating> _preKeySyncCoordinator;
	MNSecureMessagingCryptoKeychainStore* _cryptoKeychainStore;
	MNSecureMessagingRegistrationStateCache* _registrationStateCache;
	MNSecureMessagingCryptoStateLoader* _cryptoStateLoader;
	MNSecureMessagingRegistrationCryptoStateUpdater* _cryptoStateUpdater;
	FBLoggedInUserCryptoEngine* _loggedInUserCryptoEngine;
	id<MNSecureMessagingMasterKeyProviding> _masterKeyProvider;
	MNSecureMessagingCryptoKeychainStorageAnalyticsLogger* _cryptoStateCoordinatorLogger;
	id<MNSecureMessagingSendHandling> _sendHandler;
	MNSecureMessagingPacketFactory* _factory;
	MNSecureMessagingReceiptSender* _receiptSender;
	MNSecureThreadCacheInvalidatingAnnouncementInterceptor* _cacheInvalidatingAnnouncementInterceptor;
	MNSecureThreadMessageReceivedListeningAnnouncer* _receivedMessageAnnouncer;
	MNSecureMessagingStoreListenerAnnouncer* _storeListenerAnnouncer;
	MNSecureMessageSendListeningAnnouncer* _sendListenerAnnouncer;
	MNSecureThreadExistenceInfoCacheObservingAnnouncer* _threadExistenceInfoCacheObserverAnnouncer;
	MNSecureMessagingRegisteredDeviceStatusChangeListeningAnnouncer* _deviceStatusChangeListeningAnnouncer;
	MNSecureMessagingCryptoStateUpdateListeningAnnouncer* _cryptoStateUpdateListenerAnnouncer;
	MNSecureMessagingServiceListeningAnnouncer* _serviceListenerAnnouncer;
	MNSecureThreadUpdater* _threadUpdater;
	MNSecureMessagingPacketReceiver* _packetReceiver;
	MNSecureMessagingImageRequester* _imageRequester;
	MNSecureThreadExistenceInfoCache* _threadExistenceInfoCache;
	MNSecureThreadExistenceInfoCacheUpdater* _threadExistenceInfoCacheUpdater;
	MNSecureEphemeralMessagingDiskStateDeleter* _ephemeralMessagingDiskStateDeleter;
	id<MNEphemeralMessageExpirationTimerStoreListening> _dispatchedEphemeralMessageExpirationTimerStoreListener;
	id<MNEphemeralMessagingTombstonedMessageDeleting> _dispatchedEphemeralTombstonedMessageDeleter;
	MNSecureMessagingRegisteredDeviceStatusUpdateHandler* _deviceStatusUpdateRunner;
	id<MNSecureMessagingRegisteredDeviceStatusChangeListening> _notificationPosterDeviceStatusChangeListenerDispatched;
	MNBadgeCountUpdateService* _badgeCountService;
	MNSecureMessagingStartupStateMachine* _startupStateMachine;
	MNSecureMessagingBadgeCounter* _secureMessagingBadgeCounter;
	MNSecureMessagingStoreOpenedDelayer* _storeOpenedDelayer;
	MNSecureMessagingCryptoStateLoaderListeningAnnouncer* _stateLoaderAnnouncer;
	MNSecureMessagingCapabilityManualOverrideExecutor* _manualOverrideExecutor;
	/*^block*/id _serviceEnabledCompletionBlock;
	MNSecureMessagingCapabilityStore* _capabilityStore;
	id<MNSecureMessagingServiceAPIRequestFulfilling> _apiRequestFulfiller;
	MNLocalNotificationController* _localNotificationController;
	id<MNGlobalMuteStatusReading> _globalMuteStatusReader;
	id<FBClock> _clock;
	NSObject*<OS_dispatch_queue> _queue;
	long long _serviceState;

}

@property (assign,nonatomic) long long serviceState;                                           //@synthesize serviceState=_serviceState - In the implementation block
@property (readonly) unsigned long long hash; 
@property (readonly) Class superclass; 
@property (copy,readonly) NSString * description; 
@property (copy,readonly) NSString * debugDescription; 
@property (copy,readonly) NSSet * unreadThreadKeys; 
@property (copy,readonly) NSData * ourIdentityKey; 
@property (readonly) BOOL isPrimaryDevice; 
@property (copy,readonly) MNSecureMessagingRegistrationState * registrationState; 
@property (assign,nonatomic) BOOL useFakeOmnistore; 
-(void)didEnterForeground;
-(void)addServiceListener:(id)arg1 ;
-(void)removeServiceListener:(id)arg1 ;
-(id)readThreadWithKey:(id)arg1 messageRange:(id)arg2 callbackQueue:(id)arg3 completeBlock:(/*^block*/id)arg4 ;
-(id)readThreadsInRange:(id)arg1 numberOfMessagesPerThread:(long long)arg2 callbackQueue:(id)arg3 completeBlock:(/*^block*/id)arg4 ;
-(id)readThreadSummariesWithOtherUserFbIds:(id)arg1 callbackQueue:(id)arg2 completeBlock:(/*^block*/id)arg3 ;
-(id)bouncedMessageIdsForThreadWithKey:(id)arg1 ;
-(void)addSendListener:(id)arg1 ;
-(void)removeSendListener:(id)arg1 ;
-(void)addThreadExistenceInfoCacheObserver:(id)arg1 ;
-(void)removeThreadExistenceInfoCacheObserver:(id)arg1 ;
-(void)addIncomingMessageListener:(id)arg1 ;
-(void)removeIncomingMessageListener:(id)arg1 ;
-(void)addRegisteredDeviceStatusChangeListener:(id)arg1 ;
-(void)removeRegisteredDeviceStatusChangeListener:(id)arg1 ;
-(void)setExternalSecureThreadCacheInvalidator:(id)arg1 ;
-(id)readThreadAndMessagesForReportingFlowForKey:(id)arg1 messageRange:(id)arg2 callbackQueue:(id)arg3 completeBlock:(/*^block*/id)arg4 ;
-(void)runSecureThreadSummaryUpdate:(id)arg1 callbackQueue:(id)arg2 completeBlock:(/*^block*/id)arg3 ;
-(id)executeBlockAfterStoreOpened:(/*^block*/id)arg1 failureBlock:(/*^block*/id)arg2 queue:(id)arg3 ;
-(id)readRemoteFingerprintForUserId:(id)arg1 callbackQueue:(id)arg2 completeBlock:(/*^block*/id)arg3 ;
-(id)secureThreadExistenceInfoForOtherUserId:(id)arg1 ;
-(void)updateSecureThreadExistenceInfoForOtherUserIdIfUnknown:(id)arg1 ;
-(id)fetchPhotoImageFromSecurePhotoSource:(id)arg1 queue:(id)arg2 success:(/*^block*/id)arg3 failure:(/*^block*/id)arg4 ;
-(void)deleteAllMessagingContentWithCompletion:(/*^block*/id)arg1 callbackQueue:(id)arg2 ;
-(long long)capabilityForCurrentUser;
-(void)didBeginRegistration;
-(void)didFailRegistrationRequest;
-(void)didCompleteRegistration;
-(BOOL)useFakeOmnistore;
-(void)_startDependingOnCapability;
-(void)_performFullStartDueToAllowedCapability;
-(void)setServiceState:(long long)arg1 ;
-(NSSet *)unreadThreadKeys;
-(long long)serviceState;
-(BOOL)secureServiceIsInStateThatAllowsOverriding;
-(void)_performManualOverrideWithServiceEnabled:(BOOL)arg1 dispatchedCompletionBlock:(/*^block*/id)arg2 ;
-(void)setupSecureMessagingServiceWithServiceEnabledBlock:(/*^block*/id)arg1 ;
-(NSData *)ourIdentityKey;
-(BOOL)isPrimaryDevice;
-(void)runUpdateToMakeThisDevicePrimary;
-(void)forceReregistration;
-(void)topUpPrekeys;
-(void)setUseFakeOmnistore:(BOOL)arg1 ;
-(void)performManualOverrideWithServiceEnabled:(BOOL)arg1 callbackQueue:(id)arg2 completionBlock:(/*^block*/id)arg3 ;
-(id)initWithOmnistore:(id)arg1 userSession:(id)arg2 authManager:(id)arg3 badgeCountService:(id)arg4 localNotificationController:(id)arg5 backgroundAnnouncer:(id)arg6 analytics:(id)arg7 ephemeralMessageSystemController:(id)arg8 capabilityStore:(id)arg9 globalMuteStatusReader:(id)arg10 clock:(id)arg11 queue:(id)arg12 ;
-(void)didDeleteMessagingStoreWithReason:(long long)arg1 ;
-(void)didStartOmnistoreSyncingWithSendMessageCoordinator:(id)arg1 threadUpdater:(id)arg2 imageRequester:(id)arg3 secureMessagingBadgeCounter:(id)arg4 deviceStatusUpdateRunner:(id)arg5 notificationPoster:(id)arg6 cryptoEngine:(id)arg7 bouncedMessageTracker:(id)arg8 packetReceiver:(id)arg9 preKeySyncCoordinator:(id)arg10 ;
-(void)didStartCryptoServices;
-(void)removeSubscriber:(id)arg1 ;
-(void)stop;
-(void)_stop;
-(void)start:(id)arg1 ;
-(MNSecureMessagingRegistrationState *)registrationState;
-(void)sendMessage:(id)arg1 ;
-(void)addSubscriber:(id)arg1 ;
-(void)handleIdle;
-(void)didEnterBackground;
@end

