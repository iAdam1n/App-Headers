/*
* This header is generated by classdump-dyld 1.0
* on Friday, August 26, 2016 at 5:39:43 PM British Summer Time
* Operating System: Version 9.3.3 (Build 13G34)
* Image Source: /var/containers/Bundle/Application/C3C2BD9F-C9D4-4E48-9EC0-40E7F1350599/Facebook.app/Facebook
* classdump-dyld is licensed under GPLv3, Copyright Â© 2013-2016 by Elias Limneos.
*/


@protocol FBVideoDownloaderThrottlerDelegate, FBVideoNetworkerThrottlingDelegate;
#import <Facebook/Facebook-Structs.h>
@class NSURL, FBVideoNetworkerLogger, NSString;

@interface FBVideoDownloaderThrottler : NSObject {

	NSURL* _URL;
	FBVideoNetworkerLogger* _logger;
	NSString* _videoID;
	NSString* _dataKey;
	id<FBVideoDownloaderThrottlerDelegate> _downloaderDelegate;
	int _throttlerType;
	unsigned long long _resumeBufferTimeThreshold;
	unsigned long long _pauseBufferTimeThreshold;
	unsigned long long _minResumeOffset;
	double _videoThrottlingMinAtomPrSize;
	unsigned long long _videoThrottlingMinAtomByteSize;
	double _vbrTimeCompensationAdjustment;
	double _maxVbrTimeCompensationBuffer;
	double _singleFetchMultiplier;
	double _requestStartTime;
	double _requestStopTime;
	double _videoTimeAfterStop;
	double _lastVideoTimeLeft;
	double _stallPredictionThreshold;
	double _secondsFetchedBeforePlaying;
	unsigned long long _videoThrottlingMinThrottlingSize;
	BOOL _stallOnlyWhenLoaded;
	BOOL _stallOnlyWhenPlayerLikelyToStallToo;
	BOOL _alignLengthToBlockBoundaryOnThrottling;
	long long _aggressiveCancellationMaxState;
	unsigned long long _operationMode;
	id<FBVideoNetworkerThrottlingDelegate> _videoNetworkerThrottlingDelegate;

}

@property (assign,nonatomic,__weak) id<FBVideoNetworkerThrottlingDelegate> videoNetworkerThrottlingDelegate;              //@synthesize videoNetworkerThrottlingDelegate=_videoNetworkerThrottlingDelegate - In the implementation block
@property (getter=isRangeRequestType,nonatomic,readonly) BOOL rangeRequestType; 
@property (getter=isPauseResumeType,nonatomic,readonly) BOOL pauseResumeType; 
-(unsigned long long)_calculateAtomSize:(unsigned long long)arg1 ;
-(unsigned long long)_calculateMinInitialFetchSizeWithAtomSize:(unsigned long long)arg1 byteRate:(double)arg2 ;
-(BOOL)_stallRecoveryAndAvoidanceWithPlayerOffset:(unsigned long long)arg1 currentNetworkOffset:(unsigned long long)arg2 minInitialFetchSize:(unsigned long long)arg3 playerData:(SCD_Struct_FB506)arg4 stallRecoveryOrPrevention:(/*^block*/id)arg5 ;
-(void)_markDownloadStoppedOrNoResumedWithVideoTimeLeft:(double)arg1 stallPredictionActive:(BOOL)arg2 ;
-(unsigned long long)_alignLengthToBlockBoundary:(unsigned long long)arg1 ;
-(void)_markDownloadStarted;
-(BOOL)_stallPredictionActiveWithNetworkOffset:(unsigned long long)arg1 currentPlayerOffset:(unsigned long long)arg2 byteRate:(double)arg3 ;
-(BOOL)_calculateIfWeAreLikelyToStallWithOffset:(unsigned long long)arg1 videoTimeLeft:(double)arg2 ;
-(id)initWithURL:(id)arg1 logger:(id)arg2 videoID:(id)arg3 downloaderDelegate:(id)arg4 experimentManager:(id)arg5 dataKey:(id)arg6 ;
-(BOOL)isRangeRequestType;
-(BOOL)isPauseResumeType;
-(void)setVideoNetworkerThrottlingDelegate:(id<FBVideoNetworkerThrottlingDelegate>)arg1 ;
-(void)playingCancelled;
-(void)throttleUsingPauseResumeWithOffset:(unsigned long long)arg1 ;
-(unsigned long long)calculateThrottlingRangeRequestWithOffset:(unsigned long long)arg1 ;
-(id<FBVideoNetworkerThrottlingDelegate>)videoNetworkerThrottlingDelegate;
-(void)playing;
@end

