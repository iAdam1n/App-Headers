/*
* This header is generated by classdump-dyld 0.7
* on Friday, August 21, 2015 at 11:30:50 AM British Summer Time
* Operating System: Version 8.4 (Build 12H143)
* Image Source: /private/var/mobile/Containers/Bundle/Application/16C752D5-8F70-4E83-B0AB-94FF56CA8C26/Twitter.app/Twitter
* classdump-dyld is licensed under GPLv3, Copyright Â© 2013-2014 by Elias Limneos.
*/

#import <Twitter/NSURLSessionDataDelegate.h>
#import <Twitter/NSURLSessionDownloadDelegate.h>
#import <Twitter/SPDYURLSessionDelegate.h>

@protocol TNLNetworkObserver, OS_dispatch_queue;
@class NSMutableDictionary, NSMutableArray, NSMutableSet, NSString, NSOperationQueue, NSObject;

@interface TNLRequestOperationQueue : NSObject <NSURLSessionDataDelegate, NSURLSessionDownloadDelegate, SPDYURLSessionDelegate> {

	id<TNLNetworkObserver> _networkObserver;
	unsigned long long _suspendCount;
	NSMutableDictionary* _contexts;
	NSMutableArray* _stagedRequestOperations;
	NSMutableSet* _activeConnectionOperations;
	NSMutableDictionary* _backgroundSessions;
	NSString* _identifier;
	NSOperationQueue* _connectionOperationQueue;
	NSOperationQueue* _silentConnectionOperationQueue;
	NSObject*<OS_dispatch_queue> _sessionStateQueue;
	NSObject*<OS_dispatch_queue> _associationQueue;

}

@property (readonly) unsigned long long hash; 
@property (readonly) Class superclass; 
@property (copy,readonly) NSString * description; 
@property (copy,readonly) NSString * debugDescription; 
@property (nonatomic,readonly) NSString * identifier;                                          //@synthesize identifier=_identifier - In the implementation block
@property (retain) id<TNLNetworkObserver> networkObserver; 
@property (nonatomic,readonly) NSOperationQueue * connectionOperationQueue;                    //@synthesize connectionOperationQueue=_connectionOperationQueue - In the implementation block
@property (nonatomic,readonly) NSOperationQueue * silentConnectionOperationQueue;              //@synthesize silentConnectionOperationQueue=_silentConnectionOperationQueue - In the implementation block
@property (nonatomic,readonly) NSObject*<OS_dispatch_queue> sessionStateQueue;                 //@synthesize sessionStateQueue=_sessionStateQueue - In the implementation block
@property (nonatomic,readonly) NSObject*<OS_dispatch_queue> associationQueue;                  //@synthesize associationQueue=_associationQueue - In the implementation block
+(void)addGlobalNetworkObserver:(id)arg1 ;
+(void)removeGlobalNetworkObserver:(id)arg1 ;
+(void)URLSessionDidCompleteBackgroundTask:(unsigned long long)arg1 sessionConfigIdentifier:(id)arg2 sharedContainerIdentifier:(id)arg3 request:(id)arg4 response:(id)arg5 ;
+(BOOL)handleBackgroundURLSessionEvents:(id)arg1 completionHandler:(/*^block*/id)arg2 ;
+(void)URLSessionDidCompleteBackgroundEvents:(id)arg1 ;
+(void)initialize;
+(id)defaultOperationQueue;
-(void)URLSession:(id)arg1 task:(id)arg2 didStartLoadingRequest:(id)arg3 withContext:(id)arg4 ;
-(void)private_handleAuthChallenge:(id)arg1 session:(id)arg2 currentDisposition:(id)arg3 remainingConnectionOperations:(id)arg4 remainingAuthorizers:(id)arg5 completion:(/*^block*/id)arg6 ;
-(void)URLSession:(id)arg1 downloadTask:(id)arg2 didFinishDownloadingToURL:(id)arg3 ;
-(void)URLSession:(id)arg1 downloadTask:(id)arg2 didWriteData:(long long)arg3 totalBytesWritten:(long long)arg4 totalBytesExpectedToWrite:(long long)arg5 ;
-(void)URLSession:(id)arg1 downloadTask:(id)arg2 didResumeAtOffset:(long long)arg3 expectedTotalBytes:(long long)arg4 ;
-(void)URLSession:(id)arg1 task:(id)arg2 willPerformHTTPRedirection:(id)arg3 newRequest:(id)arg4 completionHandler:(/*^block*/id)arg5 ;
-(void)URLSession:(id)arg1 task:(id)arg2 didReceiveChallenge:(id)arg3 completionHandler:(/*^block*/id)arg4 ;
-(void)URLSession:(id)arg1 task:(id)arg2 needNewBodyStream:(/*^block*/id)arg3 ;
-(void)URLSession:(id)arg1 task:(id)arg2 didSendBodyData:(long long)arg3 totalBytesSent:(long long)arg4 totalBytesExpectedToSend:(long long)arg5 ;
-(void)URLSession:(id)arg1 task:(id)arg2 didCompleteWithError:(id)arg3 ;
-(void)URLSession:(id)arg1 didBecomeInvalidWithError:(id)arg2 ;
-(void)URLSession:(id)arg1 didReceiveChallenge:(id)arg2 completionHandler:(/*^block*/id)arg3 ;
-(void)URLSessionDidFinishEventsForBackgroundURLSession:(id)arg1 ;
-(void)URLSession:(id)arg1 dataTask:(id)arg2 didReceiveData:(id)arg3 ;
-(void)URLSession:(id)arg1 dataTask:(id)arg2 willCacheResponse:(id)arg3 completionHandler:(/*^block*/id)arg4 ;
-(id)association_contextForURLSessionConfigurationIdentifier:(id)arg1 ;
-(void)association_findConnectionOperationForRequestOperation:(id)arg1 complete:(/*^block*/id)arg2 ;
-(id)association_associateConnectionOperation:(id)arg1 ;
-(void)association_dissassociateConnectionOperation:(id)arg1 ;
-(id)association_contextForRequestConfiguration:(id)arg1 executionMode:(long long)arg2 createIfNeeded:(BOOL)arg3 ;
-(void)association_checkContextConnectionOperationsCount:(id)arg1 ;
-(id)association_contextForURLSession:(id)arg1 ;
-(void)requestOperationDidStart:(id)arg1 ;
-(void)requestOperation:(id)arg1 didCompleteWithResponse:(id)arg2 ;
-(void)enqueueRequestOperation:(id)arg1 ;
-(void)syncAddRequestOperation:(id)arg1 ;
-(void)requestOperation:(id)arg1 didCompleteAttempt:(id)arg2 ;
-(void)requestOperation:(id)arg1 didStartAttemptWithMetrics:(id)arg2 ;
-(void)findConnectionOperationForRequestOperation:(id)arg1 complete:(/*^block*/id)arg2 ;
-(void)clearQueuedRequestOperation:(id)arg1 ;
-(void)syncAddConnectionOperation:(id)arg1 ;
-(void)connectionOperation:(id)arg1 didCompleteAttempt:(id)arg2 ;
-(NSObject*<OS_dispatch_queue>)associationQueue;
-(void)cancelAllWithSource:(id)arg1 underlyingError:(id)arg2 ;
-(void)private_executeOnObserversRespondingToSelector:(SEL)arg1 matchingBlock:(/*^block*/id)arg2 ;
-(void)setNetworkObserver:(id<TNLNetworkObserver>)arg1 ;
-(id<TNLNetworkObserver>)networkObserver;
-(id)enqueueRequest:(id)arg1 completion:(/*^block*/id)arg2 ;
-(void)cancelAllWithSource:(id)arg1 ;
-(id)reuseIdentifierForURLSessionConfigurationIdentificationString:(id)arg1 executionMode:(long long)arg2 ;
-(NSOperationQueue *)connectionOperationQueue;
-(NSOperationQueue *)silentConnectionOperationQueue;
-(NSObject*<OS_dispatch_queue>)sessionStateQueue;
-(void)dealloc;
-(id)init;
-(NSString *)identifier;
-(void)suspend;
-(void)resume;
-(id)initWithIdentifier:(id)arg1 ;
@end

