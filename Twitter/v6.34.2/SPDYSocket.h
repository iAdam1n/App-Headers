/*
* This header is generated by classdump-dyld 0.7
* on Friday, August 21, 2015 at 11:30:50 AM British Summer Time
* Operating System: Version 8.4 (Build 12H143)
* Image Source: /private/var/mobile/Containers/Bundle/Application/16C752D5-8F70-4E83-B0AB-94FF56CA8C26/Twitter.app/Twitter
* classdump-dyld is licensed under GPLv3, Copyright Â© 2013-2014 by Elias Limneos.
*/


@protocol SPDYSocketDelegate;
#import <Twitter/Twitter-Structs.h>
@class NSString, NSArray, NSTimer, NSMutableArray, SPDYSocketReadOp, NSMutableData, SPDYSocketWriteOp, SPDYOriginEndpointManager, SPDYOriginEndpoint;

@interface SPDYSocket : NSObject {

	unsigned short _connectedPort;
	NSString* _connectedHost;
	int _socket4FD;
	int _socket6FD;
	CFSocketRef _socket4;
	CFSocketRef _socket6;
	CFReadStreamRef _readStream;
	CFWriteStreamRef _writeStream;
	CFRunLoopSourceRef _source4;
	CFRunLoopSourceRef _source6;
	CFRunLoopRef _runLoop;
	SCD_Struct_SP58* _context;
	NSArray* _runLoopModes;
	NSTimer* _connectTimer;
	NSMutableArray* _readQueue;
	SPDYSocketReadOp* _currentReadOp;
	NSTimer* _readTimer;
	NSMutableData* _unreadData;
	NSMutableArray* _writeQueue;
	SPDYSocketWriteOp* _currentWriteOp;
	NSTimer* _writeTimer;
	id<SPDYSocketDelegate> _delegate;
	unsigned short _flags;
	SPDYOriginEndpointManager* _endpointManager;
	SPDYOriginEndpoint* _endpoint;
	BOOL _isCellular;

}

@property (nonatomic,retain) id<SPDYSocketDelegate> delegate; 
@property (nonatomic,readonly) BOOL isCellular;                            //@synthesize isCellular=_isCellular - In the implementation block
-(void)_unscheduleReadStream;
-(void)_unscheduleWriteStream;
-(void)_removeSource:(CFRunLoopSourceRef)arg1 ;
-(void)_removeTimer:(id)arg1 ;
-(void)_addTimer:(id)arg1 ;
-(void)_addSource:(CFRunLoopSourceRef)arg1 ;
-(BOOL)_scheduleStreamsOnRunLoop:(id)arg1 error:(id*)arg2 ;
-(void)_dequeueRead;
-(void)_dequeueWrite;
-(void)_scheduleDisconnect;
-(void)_addTimer:(id)arg1 mode:(id)arg2 ;
-(void)_addSource:(CFRunLoopSourceRef)arg1 mode:(id)arg2 ;
-(void)_removeTimer:(id)arg1 mode:(id)arg2 ;
-(void)_removeSource:(CFRunLoopSourceRef)arg1 mode:(id)arg2 ;
-(BOOL)_fullyDisconnected;
-(void)_emptyQueues;
-(void)_startConnectTimeout:(double)arg1 ;
-(BOOL)_connectToNextEndpointWithError:(id*)arg1 ;
-(void)_closeWithError:(id)arg1 ;
-(void)_endRead;
-(void)_endWrite;
-(void)_resetStreamsAndSockets;
-(BOOL)_createStreamsToHost:(id)arg1 onPort:(unsigned short)arg2 error:(id*)arg3 ;
-(BOOL)_configureStreams:(id*)arg1 ;
-(BOOL)_openStreams:(id*)arg1 ;
-(void)_scheduleRead;
-(void)_timeoutConnect:(id)arg1 ;
-(void)_endConnectTimeout;
-(id)connectTimeoutError;
-(id)abortError;
-(BOOL)_setSocketViaStreams:(id*)arg1 ;
-(void)_setConnectionProperties;
-(void)_captureUnreadData;
-(void)readDataWithTimeout:(double)arg1 buffer:(id)arg2 bufferOffset:(unsigned long long)arg3 maxLength:(unsigned long long)arg4 tag:(long long)arg5 ;
-(void)readDataToLength:(unsigned long long)arg1 withTimeout:(double)arg2 buffer:(id)arg3 bufferOffset:(unsigned long long)arg4 tag:(long long)arg5 ;
-(void)_tryTLSHandshake;
-(void)_timeoutRead:(id)arg1 ;
-(void)_read;
-(BOOL)_readStreamReady;
-(void)_onProxyResponse;
-(void)_finishRead;
-(id)readTimeoutError;
-(void)_timeoutWrite:(id)arg1 ;
-(void)_write;
-(BOOL)_writeStreamReady;
-(void)_finishWrite;
-(id)writeTimeoutError;
-(void)_onStreamOpened;
-(void)_onTLSHandshakeSuccess;
-(CFSocketRef)cfSocket;
-(CFReadStreamRef)cfReadStream;
-(CFWriteStreamRef)cfWriteStream;
-(BOOL)addRunLoopMode:(id)arg1 ;
-(BOOL)removeRunLoopMode:(id)arg1 ;
-(BOOL)connectToOrigin:(id)arg1 withTimeout:(double)arg2 error:(id*)arg3 ;
-(void)disconnectAfterReads;
-(void)disconnectAfterWrites;
-(void)disconnectAfterReadsAndWrites;
-(id)unreadData;
-(BOOL)connectedToProxy;
-(unsigned short)connectedPort;
-(id)connectedHost;
-(BOOL)isIPv4;
-(void)readDataWithTimeout:(double)arg1 tag:(long long)arg2 ;
-(void)readDataWithTimeout:(double)arg1 buffer:(id)arg2 bufferOffset:(unsigned long long)arg3 tag:(long long)arg4 ;
-(void)readDataToLength:(unsigned long long)arg1 withTimeout:(double)arg2 tag:(long long)arg3 ;
-(void)writeData:(id)arg1 withTimeout:(double)arg2 tag:(long long)arg3 ;
-(void)secureWithTLS:(id)arg1 ;
-(void)handleCFReadStreamEvent:(unsigned long long)arg1 forStream:(CFReadStreamRef)arg2 ;
-(void)handleCFWriteStreamEvent:(unsigned long long)arg1 forStream:(CFWriteStreamRef)arg2 ;
-(id)runLoopModes;
-(BOOL)setRunLoopModes:(id)arg1 ;
-(void)dealloc;
-(void)setDelegate:(id<SPDYSocketDelegate>)arg1 ;
-(id)init;
-(id<SPDYSocketDelegate>)delegate;
-(void)disconnect;
-(void)_close;
-(BOOL)closed;
-(id)streamError;
-(BOOL)setRunLoop:(id)arg1 ;
-(void)_handleError:(id)arg1 ;
-(BOOL)isIPv6;
-(id)initWithDelegate:(id)arg1 ;
-(BOOL)isCellular;
-(void)_scheduleWrite;
-(id)socketError;
-(BOOL)connected;
@end

