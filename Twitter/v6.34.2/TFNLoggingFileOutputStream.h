/*
* This header is generated by classdump-dyld 0.7
* on Friday, August 21, 2015 at 11:30:50 AM British Summer Time
* Operating System: Version 8.4 (Build 12H143)
* Image Source: /private/var/mobile/Containers/Bundle/Application/16C752D5-8F70-4E83-B0AB-94FF56CA8C26/Twitter.app/Twitter
* classdump-dyld is licensed under GPLv3, Copyright Â© 2013-2014 by Elias Limneos.
*/

#import <Twitter/Twitter-Structs.h>
#import <Twitter/TFNLoggingOutputStream.h>

@class NSString;

@interface TFNLoggingFileOutputStream : NSObject <TFNLoggingOutputStream> {

	_sFILE* _logFile;
	unsigned long long _bytesWritten;
	NSString* _logFilePath;
	BOOL _flushAfterEveryWrite;
	NSString* _logFileDirectoryPath;

}

@property (nonatomic,readonly) _sFILE* logFile;                                    //@synthesize logFile=_logFile - In the implementation block
@property (nonatomic,readonly) unsigned long long bytesWritten;                    //@synthesize bytesWritten=_bytesWritten - In the implementation block
@property (nonatomic,copy,readonly) NSString * logFilePath;                        //@synthesize logFilePath=_logFilePath - In the implementation block
@property (nonatomic,copy,readonly) NSString * logFileDirectoryPath;               //@synthesize logFileDirectoryPath=_logFileDirectoryPath - In the implementation block
@property (assign,nonatomic) BOOL flushAfterEveryWrite;                            //@synthesize flushAfterEveryWrite=_flushAfterEveryWrite - In the implementation block
@property (nonatomic,readonly) unsigned long long loggedDataEncoding; 
@property (readonly) unsigned long long hash; 
@property (readonly) Class superclass; 
@property (copy,readonly) NSString * description; 
@property (copy,readonly) NSString * debugDescription; 
+(id)defaultLogFileDirectoryPath;
-(void)writeByte:(char)arg1 ;
-(void)outputLogData:(id)arg1 ;
-(BOOL)createLogFileDirectoryAtPath:(id)arg1 error:(out id*)arg2 ;
-(BOOL)openLogFilePath:(id)arg1 error:(id*)arg2 ;
-(void)writeNewline;
-(BOOL)createDefaultLogFileDirectoryOrError:(out id*)arg1 ;
-(void)writeBytes:(const char*)arg1 length:(unsigned long long)arg2 ;
-(void)writeString:(id)arg1 ;
-(void)writeData:(id)arg1 ;
-(void)outputLogInfo:(id)arg1 ;
-(unsigned long long)loggedDataEncoding;
-(id)initWithLogFileName:(id)arg1 error:(out id*)arg2 ;
-(id)initWithLogFileDirectoryPath:(id)arg1 logFileName:(id)arg2 error:(out id*)arg3 ;
-(_sFILE*)logFile;
-(BOOL)flushAfterEveryWrite;
-(void)setFlushAfterEveryWrite:(BOOL)arg1 ;
-(NSString *)logFileDirectoryPath;
-(void)dealloc;
-(id)init;
-(void)flush;
-(NSString *)logFilePath;
-(unsigned long long)bytesWritten;
@end

