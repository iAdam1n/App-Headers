/*
* This header is generated by classdump-dyld 0.7
* on Friday, August 21, 2015 at 11:30:49 AM British Summer Time
* Operating System: Version 8.4 (Build 12H143)
* Image Source: /private/var/mobile/Containers/Bundle/Application/16C752D5-8F70-4E83-B0AB-94FF56CA8C26/Twitter.app/Twitter
* classdump-dyld is licensed under GPLv3, Copyright Â© 2013-2014 by Elias Limneos.
*/


#import <Twitter/Twitter-Structs.h>
@class NSString, NSMutableDictionary;

@interface FMDatabase : NSObject {

	sqlite3Ref db;
	NSString* databasePath;
	BOOL logsErrors;
	BOOL crashOnErrors;
	BOOL inUse;
	BOOL inTransaction;
	BOOL traceExecution;
	BOOL checkedOut;
	int busyRetryTimeout;
	BOOL shouldCacheStatements;
	NSMutableDictionary* cachedStatements;

}

@property (nonatomic,readonly) sqlite3Ref dbHandle; 
+(id)databaseWithPath:(id)arg1 ;
+(id)sqliteLibVersion;
-(id)getTableSchema:(id)arg1 ;
-(int)intForQuery:(id)arg1 ;
-(long long)longForQuery:(id)arg1 ;
-(BOOL)boolForQuery:(id)arg1 ;
-(double)doubleForQuery:(id)arg1 ;
-(id)dataForQuery:(id)arg1 ;
-(id)dateForQuery:(id)arg1 ;
-(id)getSchema;
-(BOOL)columnExists:(id)arg1 columnName:(id)arg2 ;
-(id)stringForQuery:(id)arg1 ;
-(BOOL)tableExists:(id)arg1 ;
-(sqlite3Ref)dbHandle;
-(void)compainAboutInUse;
-(id)cachedStatementForQuery:(id)arg1 ;
-(void)bindObject:(id)arg1 toColumn:(int)arg2 inStatement:(sqlite3_stmtRef)arg3 ;
-(void)setCachedStatement:(id)arg1 forQuery:(id)arg2 ;
-(id)executeQuery:(id)arg1 withArgumentsInArray:(id)arg2 orVAList:(char*)arg3 ;
-(BOOL)executeUpdate:(id)arg1 withArgumentsInArray:(id)arg2 orVAList:(char*)arg3 ;
-(void)setCachedStatements:(id)arg1 ;
-(sqlite3Ref)sqliteHandle;
-(BOOL)openWithFlags:(int)arg1 ;
-(BOOL)rekey:(id)arg1 ;
-(BOOL)goodConnection;
-(long long)lastInsertRowId;
-(id)executeQuery:(id)arg1 withArgumentsInArray:(id)arg2 ;
-(BOOL)executeUpdate:(id)arg1 withArgumentsInArray:(id)arg2 ;
-(BOOL)beginDeferredTransaction;
-(BOOL)logsErrors;
-(void)setLogsErrors:(BOOL)arg1 ;
-(BOOL)crashOnErrors;
-(void)setCrashOnErrors:(BOOL)arg1 ;
-(void)setInTransaction:(BOOL)arg1 ;
-(BOOL)traceExecution;
-(void)setTraceExecution:(BOOL)arg1 ;
-(BOOL)checkedOut;
-(void)setCheckedOut:(BOOL)arg1 ;
-(int)busyRetryTimeout;
-(void)setBusyRetryTimeout:(int)arg1 ;
-(void)setShouldCacheStatements:(BOOL)arg1 ;
-(id)cachedStatements;
-(BOOL)inTransaction;
-(void)clearCachedStatements;
-(void)dealloc;
-(BOOL)commit;
-(BOOL)close;
-(BOOL)setKey:(id)arg1 ;
-(id)initWithPath:(id)arg1 ;
-(int)changes;
-(BOOL)open;
-(BOOL)beginTransaction;
-(BOOL)executeUpdate:(id)arg1 ;
-(id)executeQuery:(id)arg1 ;
-(BOOL)shouldCacheStatements;
-(void)setInUse:(BOOL)arg1 ;
-(BOOL)inUse;
-(BOOL)rollback;
-(id)databasePath;
-(BOOL)hadError;
-(id)lastErrorMessage;
-(int)lastErrorCode;
@end

