/*
* This header is generated by classdump-dyld 1.0
* on Friday, August 26, 2016 at 12:03:43 AM British Summer Time
* Operating System: Version 9.3.3 (Build 13G34)
* Image Source: /var/containers/Bundle/Application/FE008365-307B-4CDF-8948-1B974F28A799/SolitaireFree.app/SolitaireFree
* classdump-dyld is licensed under GPLv3, Copyright Â© 2013-2016 by Elias Limneos.
*/

#import <SolitaireFree/FlurryTumblrWebviewControllerDelegate.h>

@protocol OS_dispatch_queue;
@class SFSafariViewController, FlurryTumblrWebviewController, NSObject, FlurryKeychainWrapper, NSString;

@interface FlurryTumblrAuthenticator : NSObject <FlurryTumblrWebviewControllerDelegate> {

	SFSafariViewController* _safariViewController;
	FlurryTumblrWebviewController* _webViewController;
	/*^block*/id _requestTokenHandler;
	/*^block*/id _accessTokenhandler;
	/*^block*/id _authCallback;
	NSObject*<OS_dispatch_queue> _queue;
	FlurryKeychainWrapper* _keychainWrapper;

}

@property (nonatomic,retain) NSString * OAuthTokenSecret; 
@property (nonatomic,retain) NSString * OAuthToken; 
@property (nonatomic,retain) NSString * OAuthRequestToken; 
@property (nonatomic,retain) SFSafariViewController * safariViewController;                  //@synthesize safariViewController=_safariViewController - In the implementation block
@property (nonatomic,retain) FlurryTumblrWebviewController * webViewController;              //@synthesize webViewController=_webViewController - In the implementation block
@property (nonatomic,copy) id requestTokenHandler;                                           //@synthesize requestTokenHandler=_requestTokenHandler - In the implementation block
@property (nonatomic,copy) id accessTokenhandler;                                            //@synthesize accessTokenhandler=_accessTokenhandler - In the implementation block
@property (nonatomic,copy) id authCallback;                                                  //@synthesize authCallback=_authCallback - In the implementation block
@property (nonatomic,retain) NSObject*<OS_dispatch_queue> queue;                             //@synthesize queue=_queue - In the implementation block
@property (nonatomic,retain) FlurryKeychainWrapper * keychainWrapper;                        //@synthesize keychainWrapper=_keychainWrapper - In the implementation block
@property (readonly) unsigned long long hash; 
@property (readonly) Class superclass; 
@property (copy,readonly) NSString * description; 
@property (copy,readonly) NSString * debugDescription; 
+(id)getResponseParametersFromResponseData:(id)arg1 ;
+(id)sharedInstance;
-(void)initRequestTokenAuthenticateHandler;
-(void)initAccessTokenAuthenticateHandler;
-(void)setKeychainWrapper:(FlurryKeychainWrapper *)arg1 ;
-(void)setAuthCallback:(id)arg1 ;
-(void)sendRequestTokenRequest;
-(void)notifyAuthenticationError:(id)arg1 statusCode:(long long)arg2 callbackCode:(int)arg3 ;
-(void)setOAuthTokenSecret:(NSString *)arg1 ;
-(void)setOAuthToken:(NSString *)arg1 ;
-(void)notifyAuthenticationSuccess;
-(void)setAccessTokenhandler:(id)arg1 ;
-(void)setOAuthRequestToken:(NSString *)arg1 ;
-(void)presentLoginScreenWithRequestToken:(id)arg1 ;
-(void)setRequestTokenHandler:(id)arg1 ;
-(void)tumblrSafariLogin:(id)arg1 ;
-(void)setSafariViewController:(SFSafariViewController *)arg1 ;
-(SFSafariViewController *)safariViewController;
-(void)sendAccessTokenRequestWithOAuthVerifier:(id)arg1 ;
-(id)accessTokenhandler;
-(id)requestTokenHandler;
-(id)authCallback;
-(void)dismissLoadingScreen;
-(BOOL)isPermissionDeniedByUser:(id)arg1 ;
-(void)handlePermissionDenied;
-(void)handleAuthorizeCallbackURL:(id)arg1 ;
-(NSString *)OAuthTokenSecret;
-(NSString *)OAuthToken;
-(NSString *)OAuthRequestToken;
-(void)flurryTumblrWebViewControllerCloseClicked;
-(BOOL)flurryTumblrWebViewControllerShouldLoadRequest:(id)arg1 ;
-(void)authenticateWithCallback:(/*^block*/id)arg1 ;
-(void)deleteAllTumblrCookies;
-(FlurryKeychainWrapper *)keychainWrapper;
-(id)init;
-(NSObject*<OS_dispatch_queue>)queue;
-(FlurryTumblrWebviewController *)webViewController;
-(void)setWebViewController:(FlurryTumblrWebviewController *)arg1 ;
-(void)handleURL:(id)arg1 ;
-(void)setQueue:(NSObject*<OS_dispatch_queue>)arg1 ;
-(void)safariViewControllerDidFinish:(id)arg1 ;
-(void)clearState;
@end

