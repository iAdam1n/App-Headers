/*
* This header is generated by classdump-dyld 1.0
* on Friday, August 26, 2016 at 12:03:42 AM British Summer Time
* Operating System: Version 9.3.3 (Build 13G34)
* Image Source: /var/containers/Bundle/Application/FE008365-307B-4CDF-8948-1B974F28A799/SolitaireFree.app/SolitaireFree
* classdump-dyld is licensed under GPLv3, Copyright Â© 2013-2016 by Elias Limneos.
*/

#import <SolitaireFree/SolitaireFree-Structs.h>
#import <UIKit/UIViewController.h>
#import <SolitaireFree/MWSTrackProviderInitializationDelegate.h>
#import <SolitaireFree/SolitaireTrackConfigurationDelegate.h>
#import <SolitaireFree/MWSTrackDelegate.h>
#import <SolitaireFree/AdControlEventLoggingDelegate.h>
#import <SolitaireFree/SolitaireEventHandlerDelegate.h>
#import <UIKit/UIGestureRecognizerDelegate.h>
#import <SolitaireFree/SFLApplicationShortcutItemManagerDataSource.h>
#import <UIKit/UITextViewDelegate.h>
#import <UIKit/UIActionSheetDelegate.h>
#import <UIKit/UIWebViewDelegate.h>
#import <SolitaireFree/GameCenterController.h>
#import <UIKit/UIAlertViewDelegate.h>
#import <SolitaireFree/DailyDelegate.h>
#import <SolitaireFree/ProgressPanelDelegate.h>
#import <SolitaireFree/ToastDelegate.h>
#import <SolitaireFree/GameCenterViewDelegate.h>
#import <SolitaireFree/AdParams2Delegate.h>
#import <SolitaireFree/MWAdControlDelegate.h>
#import <SolitaireFree/MWInternalAdDelegate.h>
#import <SolitaireFree/LanguageDelegate.h>
#import <UIKit/UIPopoverPresentationControllerDelegate.h>
#import <SolitaireFree/SFLMessageBoxDelegate.h>
#import <UIKit/UIPopoverPresentationControllerDelegate.h>

@class Deck, AudioFX, AudioFXPool, MyView, UIView, UILabel, NSTimer, TableauStack, FoundationStack, WasteStack, StockStack, CardStack, UIWebView, MWFlatButton, gameState, WinningAnimation, MWToolbar, UIImageViewAligned, Statistics, Rules, AboutWatch, WinPercent, MainConfigViewController, NSString, NSMutableArray, UIPopoverController, UIActionSheet, UIAlertController, NSMutableDictionary, MPVolumeView, GameCenter, AchievementControl, AdParams2, UISegmentedControl, UIActivityIndicatorView, MultiPlayer, UIAlertView, ProgressBar, UIWindow, MWSplashScreen, WinGame, WhatsNew, EULA, Congratulations, SolitaireFreeAppDelegate, ToolButton, UIImageView, FacebookSplash, FacebookViewController, AchievementDisplay, MWToolbarButton, SelectionViewController, UINavigationController, DailyView, CalendarDayArchive, SolvedDailyResult, ProgressPanel, GameCenterView, UIViewController, SFLPromotionButtonPicker, Toast, NSDate, SelectionViewDelegateHandler, SolitaireEventHandler, SFLEventPeriod, UIPanGestureRecognizer, SFLApplicationShortcutItemManager, SFLMessageBox;

@interface MyViewController : UIViewController <MWSTrackProviderInitializationDelegate, SolitaireTrackConfigurationDelegate, MWSTrackDelegate, AdControlEventLoggingDelegate, SolitaireEventHandlerDelegate, UIGestureRecognizerDelegate, SFLApplicationShortcutItemManagerDataSource, UITextViewDelegate, UIActionSheetDelegate, UIWebViewDelegate, GameCenterController, UIAlertViewDelegate, DailyDelegate, ProgressPanelDelegate, ToastDelegate, GameCenterViewDelegate, AdParams2Delegate, MWAdControlDelegate, MWInternalAdDelegate, LanguageDelegate, UIPopoverPresentationControllerDelegate, SFLMessageBoxDelegate, UIPopoverPresentationControllerDelegate> {

	Deck* theDeck;
	AudioFX* shuffleSound;
	AudioFXPool* dealSound;
	AudioFXPool* flourishSound;
	AudioFXPool* flingCardSound;
	AudioFXPool* dropCardSound;
	AudioFXPool* classicCardMoveSound;
	AudioFXPool* undoSound;
	AudioFXPool* errorSound;
	AudioFX* victorySound;
	AudioFX* crownAppearSound;
	AudioFXPool* scoreSounds[10];
	AudioFXPool* flipStockSounds[2];
	unsigned char openingAnimation;
	unsigned char openingAnimationTimer;
	unsigned char busy;
	MyView* mview;
	int count;
	UIView* wview;
	UILabel* yourHand;
	BOOL newDeal;
	BOOL doReplay;
	NSTimer* timer;
	TableauStack* tableaus[7];
	FoundationStack* foundations[4];
	WasteStack* ws;
	StockStack* ss;
	CardStack* allStacks[13];
	BOOL flashWinning;
	BOOL showControls;
	BOOL doingCleanup;
	int cleanupScoreSoundCounter;
	UILabel* lblTurns;
	UILabel* lblTime;
	UILabel* lblScore;
	long long gameTime;
	unsigned char gameStarted;
	unsigned char gameOver;
	unsigned char winRunning;
	saveStruct saveInfo;
	gameStruct gameStateX;
	SaveStruct2 saveInfo2;
	SaveStruct3 saveInfo3;
	undoStruct undoInfo;
	UIWebView* webView;
	MWFlatButton* retButton;
	gameState* gs;
	unsigned char dealing;
	WinningAnimation* winAnim;
	unsigned char undoing;
	MWToolbar* toolbar;
	unsigned char undoShowing;
	unsigned char customBackground;
	unsigned char bShowHint;
	unsigned char bHintMode;
	unsigned char bAutoShowHint;
	int lockOrientationOption;
	unsigned char lockOrientationWasSet;
	UILabel* rotateDeviceMessage;
	UIImageViewAligned* surfaceView;
	Statistics* stats;
	Rules* rules;
	AboutWatch* aboutWatch;
	WinPercent* winPercent;
	MainConfigViewController* configCtlr;
	UILabel* orientationMsg;
	NSString* movesString;
	NSString* timeString;
	NSString* scoreString;
	int language;
	float statusBarHeight;
	unsigned char bToolbarVisible;
	NSMutableArray* ValidMoves;
	UIView* hintSrc;
	UIView* hintDest;
	UILabel* hintNone;
	UILabel* hintCount;
	NSTimer* autoHintTimer;
	double lastHintPressTime;
	UIPopoverController* pop;
	UIActionSheet* actionSheetSave;
	UIAlertController* actionAlertControllerSave;
	NSMutableDictionary* screenConfigOptions;
	int tapSelectOption;
	unsigned char showingCopyright;
	unsigned char adWillShow;
	MPVolumeView* volumeView;
	unsigned char loaded;
	float screenScale;
	UIView* mvcView;
	GameCenter* gameCenter;
	AchievementControl* achievementControl;
	AdParams2* adParams;
	unsigned char needAWinner;
	unsigned char allowReplay;
	unsigned char noAd;
	unsigned char doingAutoTest;
	unsigned char testing3;
	UISegmentedControl* autoPlayBtn;
	float autoPlayWaitTime;
	unsigned char autoPlaySingle;
	UIActivityIndicatorView* progress;
	MultiPlayer* multiPlayer;
	unsigned char noDisconnectMsg;
	UILabel* multiStatsLabel1;
	UILabel* multiStatsLabel2;
	UIView* multiStatsView;
	int multiWinningTime;
	unsigned char saveSoundValue;
	unsigned char chatQuestionAsked;
	unsigned char multiOver;
	unsigned char multiConnecting;
	unsigned char tieAsked;
	unsigned char animateRotation;
	UIAlertView* chatAlert;
	UIAlertView* endAlert;
	UIAlertView* winDoneAlert;
	int multiPlayerMatches;
	int multiPlayerGames;
	ProgressBar* multiProgressBar;
	double multiStartTime;
	UIAlertView* forfeitAlert;
	int prevMultiScore;
	NSTimer* adTimer;
	UIWindow* window;
	BOOL noCleanup;
	unsigned char inBackground;
	TableauStack* delayedFlipTableau;
	int gameTicks;
	double previousTickTime;
	unsigned char tickStarted;
	NSTimer* tickTimer;
	int alerts;
	unsigned char needAd;
	unsigned char requestFAQs;
	unsigned char requestPrivacy;
	MWSplashScreen* splashScreen;
	int winningPercent;
	WinGame* winGame;
	NSString* alias;
	int TOOLWIDTH;
	int TOOLHEIGHT;
	int TOOLOFFSETX;
	int TOOLOFFSETY;
	int TOOLICON;
	unsigned char undoError;
	unsigned char iPad;
	unsigned char toolbarText;
	WhatsNew* whatsNewView;
	EULA* eulaView;
	int randomPlayed;
	int winningPlayed;
	int randomGames;
	unsigned char justWon;
	unsigned char abortWinAnim;
	int internalBannerAdIndex;
	unsigned char GameCenterQuestionAsked;
	Congratulations* congratulations;
	long long prevOrientation;
	unsigned char dontShowCongrats;
	int savedMoves;
	SolitaireFreeAppDelegate* appDelegate;
	unsigned char showing;
	unsigned char cancelGameAsked;
	int nakCount;
	ToolButton* undoView;
	unsigned char initialized;
	unsigned char willPlayAgainOK;
	UIActionSheet* autoSheet;
	UIImageView* foundationSpots[4];
	UIImageView* tableauSpots[7];
	UIImageView* stockSpot;
	unsigned char iOS6;
	unsigned char iOS7;
	FacebookSplash* connectFbView;
	UIAlertView* launchAlert;
	FacebookViewController* fbView;
	unsigned char dontShowFacebook;
	unsigned char facebookApproved;
	AchievementDisplay* achievementDisplay;
	unsigned char showCongratulationsAfterAchievement;
	unsigned char needCongratulations;
	MWToolbarButton* infoButton;
	MWToolbarButton* hintButton;
	MWToolbarButton* newButton;
	MWToolbarButton* winningButton;
	MWToolbarButton* undoButton;
	MWToolbarButton* completeButton;
	MWToolbarButton* gameCenterButton;
	int SoundProgressionIndex;
	BOOL isRotating;
	BOOL isNewUser;
	int stockSoundIndex;
	BOOL redisplayPlaySheet;
	SelectionViewController* selectionViewController;
	UINavigationController* selectionNavController;
	BOOL displayingConfig;
	DailyView* dailyView;
	CalendarDayArchive* dailyArchive;
	SolvedDailyResult* dailyResult;
	BOOL showDailyDealsFromNotification;
	ProgressPanel* progressPanel;
	BOOL stockWasTouched;
	BOOL showWhatsNewFromConfig;
	BOOL newCount;
	BOOL newTime;
	BOOL newScore;
	UIView* crownDimView;
	UIImageView* crownView;
	UIView* dimView;
	NSMutableArray* viewsInFrontOfDim;
	BOOL progressPanelWasShown;
	GameCenterView* gameCenterView;
	BOOL showedDailyRemindMessage;
	BOOL firstNotificationMessageShown;
	double lastCardSoundPlayed;
	BOOL finishSoundProgression;
	UIImageView* playButtonGlow;
	NSTimer* playButtonGlowTimer;
	UIImageView* whiteGradient;
	double progressPanelStartedShowingTime;
	NSString* warningRolloverDate;
	BOOL originalDrawThree;
	BOOL preparingToDeal;
	BOOL winningAnimationActive;
	BOOL redXMessageSeenOnce;
	int timeAtRedXReveal;
	UIViewController* tempVC;
	BOOL congratsPromotionEnabled;
	BOOL trayEnabled;
	BOOL _gameResumed;
	BOOL _drawChangedForPeviousGame;
	BOOL _attemptingToPlaySolution;
	BOOL _trophyLinkPressed;
	BOOL _showingProgressPanel;
	BOOL _returnToDailyChallenges;
	BOOL _hasUsedWatchApp;
	BOOL _wasSessionCausedByWatchApp;
	BOOL _wasSessionCausedByGlance;
	BOOL _wasInstallCausedByWatchApp;
	BOOL _adParamsCrossPromoEnabled;
	BOOL _showingSpecificSettingToUser;
	BOOL _startingGameMode;
	BOOL _temporarilyDontCountLoss;
	BOOL _dragAndDropEnabled;
	BOOL _swipeToLockEnabled;
	BOOL _emphasizedAutoHint;
	BOOL _adParamsCrossPromoInitialized;
	BOOL _launchActionHandled;
	BOOL _forceStartMultiplayerShortcutOnAuthenticate;
	BOOL _gameCenterShowSettings;
	BOOL _isUpsideDownPortrait;
	int _messageBoxQueueCanShowCount;
	int _stuckHintFrustrationCounter;
	SFLPromotionButtonPicker* congratsPromotionButtonPicker;
	Toast* _toast;
	NSDate* _firstNotificationMessageDate;
	NSString* _whichSettingToShowUser;
	NSString* _whichGameModeIsStarting;
	NSMutableArray* _messageBoxQueue;
	NSTimer* _messageBoxQueueTimer;
	SelectionViewDelegateHandler* _selectionViewDelegateHandler;
	SolitaireEventHandler* _eventHandler;
	SFLEventPeriod* _currentEventPeriod;
	UIPanGestureRecognizer* _panGestureRecognizer;
	SFLApplicationShortcutItemManager* _shortcutItemManager;
	SFLMessageBox* _shortcutGameInProgressMessageBox;
	NSMutableArray* _stuckLastNoTimes;
	double _stuck30DayLockoutTime;
	double _stuck24HourLockoutTime;
	NSTimer* _stuckPromptTimer;

}

@property (readonly) unsigned long long hash; 
@property (readonly) Class superclass; 
@property (copy,readonly) NSString * description; 
@property (copy,readonly) NSString * debugDescription; 
@property (readonly) unsigned char initialized; 
@property (readonly) int savedMoves; 
@property (readonly) int gameTicks; 
@property (readonly) unsigned char bToolbarVisible; 
@property (readonly) unsigned char undoShowing; 
@property (retain) NSString * alias; 
@property (readonly) WinGame * winGame; 
@property (assign) int winningPercent; 
@property (assign) unsigned char requestFAQs; 
@property (assign) unsigned char requestPrivacy; 
@property (readonly) unsigned char tickStarted; 
@property (nonatomic,retain) Toast * toast;                                                                //@synthesize toast=_toast - In the implementation block
@property (nonatomic,retain) GameCenter * gameCenter; 
@property (nonatomic,retain) Deck * theDeck; 
@property (assign) unsigned char openingAnimation; 
@property (readonly) unsigned char openingAnimationTimer; 
@property (nonatomic,retain) NSTimer * timer; 
@property (readonly) unsigned char gameOver; 
@property (assign) unsigned char gameStarted; 
@property (assign,nonatomic) BOOL gameResumed;                                                             //@synthesize gameResumed=_gameResumed - In the implementation block
@property (nonatomic,retain) StockStack * ss; 
@property (nonatomic,retain) WasteStack * ws; 
@property (assign) undoStruct undoInfo; 
@property (readonly) BOOL doingCleanup; 
@property (nonatomic,retain) gameState * gs; 
@property (readonly) unsigned char dealing; 
@property (readonly) unsigned char undoing; 
@property (readonly) UIImageView * surfaceView; 
@property (assign) unsigned char customBackground; 
@property (readonly) int lockOrientationOption; 
@property (assign) unsigned char lockOrientationWasSet; 
@property (readonly) Statistics * stats; 
@property (assign) float statusBarHeight; 
@property (readonly) float wasteXOffset; 
@property (readonly) MyView * mview; 
@property (readonly) float stdScreenHeight; 
@property (readonly) float stdScreenWidth; 
@property (readonly) float cardWidth; 
@property (readonly) float cardHeight; 
@property (nonatomic,readonly) float toolbarHeight; 
@property (readonly) UIPopoverController * pop; 
@property (readonly) unsigned char bOniPad; 
@property (readonly) int language; 
@property (readonly) AudioFX * shuffleSound; 
@property (nonatomic,retain) NSMutableDictionary * screenConfigOptions; 
@property (readonly) float hintOffset; 
@property (readonly) float hintWidth; 
@property (readonly) float hintHeight; 
@property (readonly) unsigned char bShowHint; 
@property (readonly) unsigned char bAutoShowHint; 
@property (assign) unsigned char bHintMode; 
@property (readonly) int tapSelectOption; 
@property (readonly) float screenScale; 
@property (readonly) BOOL noCleanup; 
@property (readonly) unsigned char winRunning; 
@property (assign) unsigned char inBackground; 
@property (readonly) int multiPlayerMatches; 
@property (readonly) int multiPlayerGames; 
@property (readonly) MultiPlayer * multiPlayer; 
@property (readonly) int randomPlayed; 
@property (readonly) int winningPlayed; 
@property (assign) unsigned char noAd; 
@property (readonly) unsigned char dontShowCongrats; 
@property (readonly) UILabel * yourHand; 
@property (assign) unsigned char animateRotation; 
@property (assign) BOOL drawChangedForPeviousGame;                                                         //@synthesize drawChangedForPeviousGame=_drawChangedForPeviousGame - In the implementation block
@property (nonatomic,retain) MainConfigViewController * configCtlr; 
@property (nonatomic,retain) Congratulations * congratulations; 
@property (nonatomic,retain) FacebookSplash * connectFbView; 
@property (nonatomic,retain) UIAlertView * launchAlert; 
@property (readonly) unsigned char dontShowFacebook; 
@property (nonatomic,readonly) FacebookViewController * fbView; 
@property (assign) unsigned char facebookApproved; 
@property (readonly) int SoundProgressionIndex; 
@property (readonly) UIImageView * crownView; 
@property (assign) BOOL attemptingToPlaySolution;                                                          //@synthesize attemptingToPlaySolution=_attemptingToPlaySolution - In the implementation block
@property (assign) BOOL trophyLinkPressed;                                                                 //@synthesize trophyLinkPressed=_trophyLinkPressed - In the implementation block
@property (assign) BOOL showingProgressPanel;                                                              //@synthesize showingProgressPanel=_showingProgressPanel - In the implementation block
@property (assign) BOOL returnToDailyChallenges;                                                           //@synthesize returnToDailyChallenges=_returnToDailyChallenges - In the implementation block
@property (readonly) BOOL originalDrawThree; 
@property (assign) BOOL isRotating; 
@property (readonly) BOOL isNewUser; 
@property (retain) NSString * warningRolloverDate; 
@property (retain) NSDate * firstNotificationMessageDate;                                                  //@synthesize firstNotificationMessageDate=_firstNotificationMessageDate - In the implementation block
@property (assign) BOOL hasUsedWatchApp;                                                                   //@synthesize hasUsedWatchApp=_hasUsedWatchApp - In the implementation block
@property (assign) BOOL wasSessionCausedByWatchApp;                                                        //@synthesize wasSessionCausedByWatchApp=_wasSessionCausedByWatchApp - In the implementation block
@property (assign) BOOL wasSessionCausedByGlance;                                                          //@synthesize wasSessionCausedByGlance=_wasSessionCausedByGlance - In the implementation block
@property (assign) BOOL wasInstallCausedByWatchApp;                                                        //@synthesize wasInstallCausedByWatchApp=_wasInstallCausedByWatchApp - In the implementation block
@property (nonatomic,retain) SFLPromotionButtonPicker * congratsPromotionButtonPicker; 
@property (assign,getter=isCongratsPromotionEnabled,nonatomic) BOOL congratsPromotionEnabled; 
@property (assign) BOOL trayEnabled; 
@property (assign,nonatomic) BOOL adParamsCrossPromoEnabled;                                               //@synthesize adParamsCrossPromoEnabled=_adParamsCrossPromoEnabled - In the implementation block
@property (assign) BOOL showingSpecificSettingToUser;                                                      //@synthesize showingSpecificSettingToUser=_showingSpecificSettingToUser - In the implementation block
@property (nonatomic,retain) NSString * whichSettingToShowUser;                                            //@synthesize whichSettingToShowUser=_whichSettingToShowUser - In the implementation block
@property (assign) BOOL startingGameMode;                                                                  //@synthesize startingGameMode=_startingGameMode - In the implementation block
@property (nonatomic,retain) NSString * whichGameModeIsStarting;                                           //@synthesize whichGameModeIsStarting=_whichGameModeIsStarting - In the implementation block
@property (assign) BOOL temporarilyDontCountLoss;                                                          //@synthesize temporarilyDontCountLoss=_temporarilyDontCountLoss - In the implementation block
@property (nonatomic,retain) NSMutableArray * messageBoxQueue;                                             //@synthesize messageBoxQueue=_messageBoxQueue - In the implementation block
@property (assign,nonatomic) int messageBoxQueueCanShowCount;                                              //@synthesize messageBoxQueueCanShowCount=_messageBoxQueueCanShowCount - In the implementation block
@property (nonatomic,retain) NSTimer * messageBoxQueueTimer;                                               //@synthesize messageBoxQueueTimer=_messageBoxQueueTimer - In the implementation block
@property (readonly) MWToolbar * toolbar; 
@property (nonatomic,retain) SelectionViewDelegateHandler * selectionViewDelegateHandler;                  //@synthesize selectionViewDelegateHandler=_selectionViewDelegateHandler - In the implementation block
@property (assign,nonatomic) BOOL showWhatsNewFromConfig; 
@property (nonatomic,retain) SolitaireEventHandler * eventHandler;                                         //@synthesize eventHandler=_eventHandler - In the implementation block
@property (assign,nonatomic) BOOL dragAndDropEnabled;                                                      //@synthesize dragAndDropEnabled=_dragAndDropEnabled - In the implementation block
@property (assign,nonatomic) BOOL swipeToLockEnabled;                                                      //@synthesize swipeToLockEnabled=_swipeToLockEnabled - In the implementation block
@property (assign,nonatomic) BOOL emphasizedAutoHint;                                                      //@synthesize emphasizedAutoHint=_emphasizedAutoHint - In the implementation block
@property (assign) BOOL adParamsCrossPromoInitialized;                                                     //@synthesize adParamsCrossPromoInitialized=_adParamsCrossPromoInitialized - In the implementation block
@property (nonatomic,retain) SFLEventPeriod * currentEventPeriod;                                          //@synthesize currentEventPeriod=_currentEventPeriod - In the implementation block
@property (nonatomic,retain) UIPanGestureRecognizer * panGestureRecognizer;                                //@synthesize panGestureRecognizer=_panGestureRecognizer - In the implementation block
@property (nonatomic,retain) SFLApplicationShortcutItemManager * shortcutItemManager;                      //@synthesize shortcutItemManager=_shortcutItemManager - In the implementation block
@property (assign,nonatomic) BOOL launchActionHandled;                                                     //@synthesize launchActionHandled=_launchActionHandled - In the implementation block
@property (assign,nonatomic) BOOL forceStartMultiplayerShortcutOnAuthenticate;                             //@synthesize forceStartMultiplayerShortcutOnAuthenticate=_forceStartMultiplayerShortcutOnAuthenticate - In the implementation block
@property (assign,nonatomic,__weak) SFLMessageBox * shortcutGameInProgressMessageBox;                      //@synthesize shortcutGameInProgressMessageBox=_shortcutGameInProgressMessageBox - In the implementation block
@property (nonatomic,readonly) float scoreHeight; 
@property (nonatomic,readonly) float scoreFontSize; 
@property (nonatomic,readonly) float toolbarFontSize; 
@property (nonatomic,readonly) float hintFontSize; 
@property (nonatomic,readonly) float hintOffsetY; 
@property (nonatomic,readonly) float hintTextHeight; 
@property (assign,nonatomic) BOOL gameCenterShowSettings;                                                  //@synthesize gameCenterShowSettings=_gameCenterShowSettings - In the implementation block
@property (assign,nonatomic) BOOL isUpsideDownPortrait;                                                    //@synthesize isUpsideDownPortrait=_isUpsideDownPortrait - In the implementation block
@property (nonatomic,retain) NSMutableArray * stuckLastNoTimes;                                            //@synthesize stuckLastNoTimes=_stuckLastNoTimes - In the implementation block
@property (assign,nonatomic) double stuck30DayLockoutTime;                                                 //@synthesize stuck30DayLockoutTime=_stuck30DayLockoutTime - In the implementation block
@property (assign,nonatomic) double stuck24HourLockoutTime;                                                //@synthesize stuck24HourLockoutTime=_stuck24HourLockoutTime - In the implementation block
@property (assign,nonatomic) int stuckHintFrustrationCounter;                                              //@synthesize stuckHintFrustrationCounter=_stuckHintFrustrationCounter - In the implementation block
@property (nonatomic,retain) NSTimer * stuckPromptTimer;                                                   //@synthesize stuckPromptTimer=_stuckPromptTimer - In the implementation block
+(id)dictionaryOfScreensToShow;
+(id)dictionaryOfGameModesToStart;
+(BOOL)timerStoppedFromResign;
+(id)getDateFormatter;
-(void)logEvent:(id)arg1 withParameters:(id)arg2 ;
-(void)setupAdParamsCrossPromo;
-(void)enqueueMessageBoxDisplay:(id)arg1 ;
-(id)showGameInProgressConfirmation:(/*^block*/id)arg1 ;
-(void)removeMessageBoxFromQueue:(id)arg1 ;
-(void)startGameMode:(BOOL)arg1 ;
-(void)autoDealNewGame;
-(void)trackInitialized;
-(void)providerInitializationComplete:(id)arg1 ;
-(void)setupLeanplumCrossPromo;
-(void)startGameMode;
-(void)messageBoxQueueTimerTick;
-(BOOL)canWeShowMessageBoxNow;
-(void)showSpecificSettingToUser:(id)arg1 ;
-(void)startGameModeFromTrackAction:(id)arg1 ;
-(void)showScreenToUser:(id)arg1 ;
-(void)createPromoModule:(id)arg1 ;
-(BOOL)handleTrackAction:(unsigned long long)arg1 parameters:(id)arg2 ;
-(BOOL)handleTrackMessage:(unsigned long long)arg1 parameters:(id)arg2 ;
-(BOOL)isNewUser;
-(id)init:(id)arg1 window:(id)arg2 app:(id)arg3 ;
-(void)initView;
-(void)adParamsReady:(id)arg1 ;
-(int)multiPlayerMatches;
-(int)multiPlayerGames;
-(int)randomPlayed;
-(int)winningPlayed;
-(void)myVCTerminate;
-(BOOL)doingCleanup;
-(void)setGameStarted:(unsigned char)arg1 ;
-(unsigned char)winRunning;
-(BOOL)noCleanup;
-(void)saveGameState;
-(MultiPlayer *)multiPlayer;
-(void)clearAutoHintsAndCancelTimer;
-(unsigned char)openingAnimation;
-(unsigned char)openingAnimationTimer;
-(void)restartOpeningAnimation;
-(void)setOpeningAnimation:(unsigned char)arg1 ;
-(void)playAgain:(id)arg1 ;
-(void)clearAutoHintsAndSceduleARefresh;
-(void)statusBarMayHaveChanged;
-(unsigned char)iOS5;
-(id)getCardFromFoundation:(int)arg1 card:(int)arg2 ;
-(void)winningStop;
-(void)setShadowsOfFoundations;
-(StockStack *)ss;
-(void)setSs:(StockStack *)arg1 ;
-(void)setAdParamsCrossPromoEnabled:(BOOL)arg1 ;
-(unsigned char)bOniPad;
-(void)moveControls:(long long)arg1 ;
-(void)clearCards;
-(void)redXRevealed;
-(gameState *)gs;
-(WasteStack *)ws;
-(void)setWs:(WasteStack *)arg1 ;
-(void)setAchievement:(int)arg1 percent:(double)arg2 count:(int)arg3 ;
-(void)setGameCenter:(GameCenter *)arg1 ;
-(id)getAchievement:(int)arg1 ;
-(void)setAchievementDisplay:(id)arg1 ;
-(void)achievementToDisplay:(int)arg1 ;
-(void)beginHidingDimView;
-(void)finishHidingDimView;
-(BOOL)trophyLinkPressed;
-(void)setTrophyLinkPressed:(BOOL)arg1 ;
-(void)linkToTrophyRoom;
-(NSMutableDictionary *)screenConfigOptions;
-(void)setNoAd:(unsigned char)arg1 ;
-(BOOL)gameCenterButtonPressed:(id)arg1 ;
-(void)showDimBelowView:(id)arg1 ;
-(MainConfigViewController *)configCtlr;
-(Congratulations *)congratulations;
-(Deck *)theDeck;
-(void)resetDailyChallenges;
-(void)trophyLinkViewPressed;
-(void)resolveAchievement:(int)arg1 percent:(double)arg2 ;
-(void)convertAchievements:(id)arg1 achievementControl:(id)arg2 ;
-(void)scoreSubmitted:(id)arg1 ;
-(GameCenter *)gameCenter;
-(float)stdScreenWidth;
-(float)cardWidth;
-(float)hintOffset;
-(float)cardHeight;
-(float)scoreFontSize;
-(void)saveGameProperties;
-(void)saveScreenConfigOptions;
-(id)todayDate;
-(void)toggleToolBar;
-(void)moveControls;
-(void)hideWhatsNew:(BOOL)arg1 ;
-(void)flipToBack:(id)arg1 ;
-(BOOL)handleLaunchAction;
-(BOOL)dailyChallengesReminderMessage;
-(void)previewStyleWithBackground:(int)arg1 cardBack:(int)arg2 setBlock:(/*^block*/id)arg3 cancelBlock:(/*^block*/id)arg4 ;
-(void)setGs:(gameState *)arg1 ;
-(void)setSelectionViewDelegateHandler:(SelectionViewDelegateHandler *)arg1 ;
-(SelectionViewDelegateHandler *)selectionViewDelegateHandler;
-(void)resetPopWithNewViewController:(id)arg1 ;
-(void)displayInfoPopover;
-(void)EULAAgreeed;
-(void)delayedAdParams;
-(void)dispAd;
-(void)clearEndAlert;
-(BOOL)drawThree;
-(void)soundsOff;
-(void)timerOff;
-(void)initSounds;
-(void)showUndo:(unsigned char)arg1 ;
-(void)fixToolbarItems;
-(void)dispAdNew;
-(void)clearAdWillShow;
-(void)dialogOKCancelAction:(id)arg1 ;
-(void)replayGame;
-(void)multiDisconnect;
-(void)releaseDailyArchive;
-(void)logGameDealtWithShuffle:(int)arg1 ;
-(void)sendControl:(int)arg1 ;
-(void)multiGameOver;
-(void)sendForfeit;
-(void)sendMultiStatsNoTimer;
-(void)fadeYourHandText;
-(void)stopWinAnim;
-(void)multiplayerPrep;
-(void)sendMultiStats;
-(float)toolbarHeight;
-(id)getAlias;
-(void)nakConfirmWin;
-(void)sendConfirmWin;
-(void)handleMultiWin:(multiWin)arg1 data:(char*)arg2 ;
-(void)displayMultiStats:(multiStats)arg1 ;
-(void)sendMultiWin:(int)arg1 time:(int)arg2 ;
-(void)bannerAdAction:(id)arg1 ;
-(id)getBannerAdView;
-(BOOL)hasFrontViews;
-(float)hintTextHeight;
-(float)stdScreenHeight;
-(float)hintFontSize;
-(void)animationDidStop7:(id)arg1 finished:(BOOL)arg2 context:(void*)arg3 ;
-(BOOL)isDailyChallenge;
-(BOOL)isStuckMessageLockedOut;
-(void)showStuckMessage;
-(void)setStuckPromptTimer:(NSTimer *)arg1 ;
-(int)stuckHintFrustrationCounter;
-(void)setStuckHintFrustrationCounter:(int)arg1 ;
-(float)hintWidth;
-(float)hintHeight;
-(float)hintOffsetY;
-(float)wasteXOffset;
-(void)showSrcHint:(id)arg1 ;
-(void)animationDidStop4:(id)arg1 finished:(BOOL)arg2 context:(void*)arg3 ;
-(void)hideHintSrc;
-(void)hideHintDest;
-(double)stuck30DayLockoutTime;
-(double)stuck24HourLockoutTime;
-(NSMutableArray *)stuckLastNoTimes;
-(void)setStuck30DayLockoutTime:(double)arg1 ;
-(void)setStuck24HourLockoutTime:(double)arg1 ;
-(void)hideToolBar;
-(void)stuckRespondNo;
-(void)showToolBar;
-(void)animationDidStop6:(id)arg1 finished:(BOOL)arg2 context:(void*)arg3 ;
-(void)showWinAction:(id)arg1 ;
-(void)attemptToPlaySolution;
-(void)winGameFinishedBeingHidden:(BOOL)arg1 ;
-(void)adjustToolBar:(BOOL)arg1 ;
-(void)cancelLaunchAction;
-(void)timerOff:(BOOL)arg1 ;
-(unsigned char)popoverUp;
-(void)winningAnimationFinished;
-(id)getHandText:(BOOL)arg1 ;
-(BOOL)drawChanged;
-(id)getBestWinningRanking:(BOOL)arg1 ;
-(BOOL)drawChangedForPeviousGame;
-(int)getRankFromRecords:(id)arg1 ascending:(BOOL)arg2 index:(int)arg3 value:(int)arg4 ;
-(int)getRankFromRecords:(id)arg1 ascending:(BOOL)arg2 index:(int)arg3 ;
-(id)getPersonalCongratsText;
-(id)getPersonalBestHandText;
-(id)getBestCurrentWinningRanks;
-(id)getBestWinningRanks;
-(void)hideHint;
-(void)showHint:(id)arg1 ;
-(void)animationDidStop5:(id)arg1 finished:(BOOL)arg2 context:(void*)arg3 ;
-(void)animationDidStop3:(id)arg1 finished:(BOOL)arg2 context:(void*)arg3 ;
-(void)showDestHint:(id)arg1 ;
-(BOOL)autoCompleteMoveNextCardToTableau;
-(BOOL)autoCompleteMoveNextCardToFoundation;
-(BOOL)checkGameOver:(unsigned char)arg1 ;
-(BOOL)useLessAnimations;
-(void)setupUndo:(id)arg1 origStack:(id)arg2 destStack:(id)arg3 flipCard:(id)arg4 flipStack:(unsigned char)arg5 valid:(unsigned char)arg6 ;
-(void)incTurn;
-(void)animateCard:(id)arg1 fromStack:(id)arg2 toStack:(id)arg3 ;
-(void)animationDidStop2:(id)arg1 finished:(BOOL)arg2 context:(void*)arg3 ;
-(unsigned char)newSoundsAreEnabled;
-(void)advanceSoundProgressionIndex;
-(void)playScoreSound:(id)arg1 ;
-(void)playClassicCardMoveSound;
-(void)incTime:(id)arg1 ;
-(void)doCleanupAnimation:(id)arg1 ;
-(MyView *)mview;
-(BOOL)isUpsideDownPortrait;
-(id)getBackgroundImage;
-(void)setIsUpsideDownPortrait:(BOOL)arg1 ;
-(float)scoreHeight;
-(void)setWebviewGradient;
-(void)setWebviewReturnButton;
-(void)correctToolbarSize;
-(void)updateAutoHintPositions;
-(CGRect)getFrontViewFrame;
-(void)adjustFrame;
-(void)setProgressPanelFrame;
-(void)adjustToastFrame;
-(void)bringDimViewToFront;
-(NSTimer *)stuckPromptTimer;
-(void)dismissTray;
-(void)startTimerIfOff;
-(id)findStackFromIndex:(int)arg1 ;
-(void)incTurnForStock;
-(void)playUndoSound;
-(void)refreshThingsThatThatCareABoutMovedCards;
-(void)bringToolBarToFront;
-(void)getValidMoves:(BOOL)arg1 ;
-(void)showNoHint;
-(void)cancelPlayButtonGlowTimer;
-(void)playButtonGlow;
-(void)setReturnToDailyChallenges:(BOOL)arg1 ;
-(CGRect)rectOfButton:(id)arg1 forPopover:(BOOL)arg2 ;
-(void)showActionSheet:(id)arg1 ;
-(void)doAutoPlay:(id)arg1 ;
-(void)clearVCRSelection;
-(void)setAutoPlayBtn:(unsigned char)arg1 ;
-(void)setSolutionPlay:(unsigned char)arg1 ;
-(void)autoPlayFinished;
-(void)playFlingCardSound;
-(void)animationDidStopDelayedFlip:(id)arg1 finished:(BOOL)arg2 context:(void*)arg3 ;
-(id)addToFoundation:(id)arg1 ;
-(void)showDailyView;
-(void)showWinAlert;
-(id)getAchievementDisplay;
-(void)showCongratulations;
-(void)appirater;
-(void)showWinningBadge;
-(void)tact3:(id)arg1 ;
-(void)finishDealing;
-(void)getNewGame;
-(void)initializeDailyDeals;
-(void)finishDrawAction;
-(void)confirmAutoComplete:(BOOL)arg1 ;
-(void)dealARandomGame;
-(void)setDrawChangedForPeviousGame:(BOOL)arg1 ;
-(id)getDailyGameID;
-(void)showToast:(id)arg1 withIcon:(id)arg2 ;
-(void)playDealSound;
-(void)removeWinningBadge;
-(void)addVolumeControl;
-(void)removeVolumeControl;
-(void)setGameResumed:(BOOL)arg1 ;
-(void)prepSave;
-(void)updateShortcutItemManager;
-(void)missedCongrats;
-(void)setWasSessionCausedByWatchApp:(BOOL)arg1 ;
-(void)setWasSessionCausedByGlance:(BOOL)arg1 ;
-(void)setHasUsedWatchApp:(BOOL)arg1 ;
-(void)setWasInstallCausedByWatchApp:(BOOL)arg1 ;
-(BOOL)wasInstallCausedByWatchApp;
-(BOOL)wasSessionCausedByWatchApp;
-(NSDate *)firstNotificationMessageDate;
-(NSString *)warningRolloverDate;
-(void)releaseDailyResult;
-(void)setWinningDealsIcon;
-(BOOL)hasUsedWatchApp;
-(void)setFirstNotificationMessageDate:(NSDate *)arg1 ;
-(void)setWarningRolloverDate:(NSString *)arg1 ;
-(void)setStuckLastNoTimes:(NSMutableArray *)arg1 ;
-(void)setScreenConfigOptions:(NSMutableDictionary *)arg1 ;
-(void)setDragAndDropEnabled:(BOOL)arg1 ;
-(void)setSwipeToLockEnabled:(BOOL)arg1 ;
-(void)setEmphasizedAutoHint:(BOOL)arg1 ;
-(BOOL)dragAndDropEnabled;
-(BOOL)swipeToLockEnabled;
-(BOOL)emphasizedAutoHint;
-(unsigned char)useToolbarText;
-(void)loadScreenConfigOptions;
-(void)loadGameProperties;
-(void)loadAdvancedOptions;
-(void)loadOptions;
-(void)introVoiceoverCommand;
-(int)lockOrientationOption;
-(BOOL)gameCenterShowSettings;
-(void)forceHideDimViewIfNecessary;
-(void)setGameCenterShowSettings:(BOOL)arg1 ;
-(void)moveCard:(id)arg1 toPoint:(CGPoint)arg2 ;
-(void)flipCard:(id)arg1 ;
-(void)stopPlayButtonGlow;
-(void)dispGameType;
-(void)startOpeningAnimation:(id)arg1 ;
-(void)removeActionSheet;
-(void)vcrAction:(id)arg1 ;
-(void)setAttemptingToPlaySolution:(BOOL)arg1 ;
-(void)hideCrownView;
-(BOOL)isDailyViewVisible;
-(void)gameLost:(unsigned char)arg1 replay:(unsigned char)arg2 time:(int)arg3 ;
-(void)fetchSolution;
-(BOOL)temporarilyDontCountLoss;
-(void)logGameWonOrLostEvent:(unsigned long long)arg1 ;
-(void)dismissCongratulations;
-(void)showWinGame;
-(void)showWinGameWithIndex:(int)arg1 fromCongrats:(BOOL)arg2 ;
-(BOOL)attemptingToPlaySolution;
-(void)congratsFinished:(BOOL)arg1 ;
-(BOOL)winGameIsVisible;
-(void)showProgress;
-(void)showingDailyDealsFailed;
-(void)resetTrophyLink;
-(void)showDailyDealAfterServerVerification:(id)arg1 ;
-(void)stopProgress;
-(void)finishShowingDailyView;
-(Toast *)toast;
-(CGRect)getToastFrame;
-(CGRect)getToastBackgroundFrame;
-(void)setToast:(Toast *)arg1 ;
-(void)removeCrownView;
-(void)removeCrownDimView:(/*^block*/id)arg1 ;
-(void)fakeActionSheetButtonPress:(id)arg1 ;
-(BOOL)startRequestingDailyDeal:(id)arg1 ;
-(void)finishedRequestingDailyDeal:(BOOL)arg1 ;
-(void)makeAWinningDeal:(id)arg1 ;
-(void)setShowingProgressPanel:(BOOL)arg1 ;
-(void)finishShowingProgress;
-(BOOL)showingProgressPanel;
-(void)startCleanupAnimation:(id)arg1 ;
-(SFLApplicationShortcutItemManager *)shortcutItemManager;
-(BOOL)gameCenterButtonPressed:(id)arg1 animated:(BOOL)arg2 fromSettings:(BOOL)arg3 ;
-(BOOL)forceStartMultiplayerShortcutOnAuthenticate;
-(void)setForceStartMultiplayerShortcutOnAuthenticate:(BOOL)arg1 ;
-(void)forceStartMultiplayer;
-(float)toolbarFontSize;
-(id)makeToolbarButtonText:(id)arg1 font:(id)arg2 downImageName:(id)arg3 upImageName:(id)arg4 ;
-(void)hintAction;
-(void)starCalendarAction;
-(void)undoAction:(id)arg1 ;
-(void)completeAction;
-(void)crossPromotionTrayButtonPressed:(id)arg1 ;
-(int)getScoreType;
-(void)setDontShowCongratulations:(unsigned char)arg1 ;
-(void)hideConfig;
-(void)whatsNew;
-(void)webDoneAction:(id)arg1 ;
-(void)setSpotImages:(int)arg1 ;
-(id)getFoundationSpot:(int)arg1 ;
-(id)getTableauSpot:(int)arg1 ;
-(id)getStockSpot;
-(void)setupGestureRecognizers;
-(void)initSpots;
-(id)fieldLabelWithFrame:(CGRect)arg1 title:(id)arg2 color:(id)arg3 size:(float)arg4 ;
-(void)dismissRotateDeviceMessage;
-(void)loadGameState;
-(void)checkConsistency;
-(void)checkForEvents;
-(void)initGameCenter;
-(void)showAutoCompleteSheet;
-(void)showEULA;
-(void)setShortcutItemManager:(SFLApplicationShortcutItemManager *)arg1 ;
-(void)displayReleaseMenu;
-(BOOL)dimViewVisible;
-(void)hideDimView;
-(void)setFirstDailyMessageShown;
-(id)makeRolloverDateKey:(id)arg1 ;
-(BOOL)shouldShowFirstNotificationMessage;
-(void)saveAdvancedOptions;
-(void)checkForAllFaceUp;
-(void)newBestScoreValues;
-(void)logGamesWon100Event;
-(void)logGamesWon1Event;
-(void)flashWon:(id)arg1 ;
-(unsigned char)newSoundsAreDisabled;
-(void)playStockFlipSoundInOrder;
-(int)getAnimationSetting;
-(void)playScoreSoundFromTimer:(id)arg1 ;
-(BOOL)areSoundsEnabled;
-(void)refreshAutoHintsNow;
-(unsigned char)touchesOK;
-(void)clearAutoHintsAndSceduleARefresh:(BOOL)arg1 ;
-(void)autoHintsTimerFired:(id)arg1 ;
-(void)multiTimesUp;
-(int)findIndexFromStack:(id)arg1 ;
-(void)logEventWithShuffle:(int)arg1 eventName:(unsigned long long)arg2 ;
-(BOOL)wasSessionCausedByGlance;
-(void)removeActionSheetDismiss:(BOOL)arg1 ;
-(void)setCurrentEventPeriod:(SFLEventPeriod *)arg1 ;
-(void)showEventMessageBox:(id)arg1 date:(id)arg2 ;
-(SFLEventPeriod *)currentEventPeriod;
-(void)panGestureRecognized:(id)arg1 ;
-(void)dealSpecificGameType:(long long)arg1 forceDeal:(BOOL)arg2 ;
-(void)setShortcutGameInProgressMessageBox:(SFLMessageBox *)arg1 ;
-(void)forceStartRandomDeal;
-(void)forceStartDailyChallenge;
-(void)forceStartWinningDeal;
-(void)setLaunchActionHandled:(BOOL)arg1 ;
-(SFLMessageBox *)shortcutGameInProgressMessageBox;
-(BOOL)launchActionHandled;
-(BOOL)showingSpecificSettingToUser;
-(BOOL)startingGameMode;
-(void)eventHandlerShowPreviewScreen:(id)arg1 eventPeriod:(id)arg2 ;
-(id)requiredShortcutsForApplicationShortcutItemManager:(id)arg1 ;
-(void)optInDismissed;
-(void)gameCenterAuthenticated;
-(void)gameCenterUnAuthenticated;
-(void)scoreError:(id)arg1 ;
-(id)getiAdView;
-(void)multiPlayerHostGame:(id)arg1 ;
-(void)multiPlayerData:(id)arg1 multiPlayer:(id)arg2 fromPlayer:(id)arg3 ;
-(void)multiPlayerDisconnect:(unsigned char)arg1 ;
-(void)multiPlayerIdent:(id)arg1 voiceCapable:(unsigned char)arg2 multiPlayer:(id)arg3 ;
-(void)multiPlayerMatched:(id)arg1 ;
-(int)multiPlayerGroup;
-(void)multiVoiceChatStarted;
-(void)multiPlayerGetReady:(id)arg1 ;
-(void)multiPlayerWillPlayAgain;
-(void)multiPlayerWontPlayAgain;
-(unsigned char)isMultiGameOver;
-(void)multiChatDeclined;
-(void)multiPlayerAlertInc;
-(void)multiPlayerAlertDec;
-(unsigned char)isMultiPlayerAvailable;
-(void)multiPlayerClearAskPlayAgain;
-(void)multiPlayerClearChatAlert;
-(id)getBannerAd;
-(id)bannerAdViewForDailyView:(id)arg1 ;
-(void)dismissAds;
-(void)startedDealWithArchive:(id)arg1 ;
-(void)leaderBoardButtonPressedFromDailyDeals;
-(void)dailyViewDidHide:(BOOL)arg1 ;
-(void)finishedDailyDealProgress;
-(BOOL)startDailyDealProgress;
-(unsigned char)gameOver;
-(UIImageView *)crownView;
-(BOOL)returnToDailyChallenges;
-(BOOL)isDailyChallengeEqualTo:(id)arg1 ;
-(BOOL)isWinGameAnimating;
-(void)progressCancelButtonPressed;
-(void)didReceiveSingleTapOnToast:(id)arg1 ;
-(void)didReceiveSwipeDownOnToast:(id)arg1 ;
-(void)didReceiveSwipeUpOnToast:(id)arg1 ;
-(void)didFinishDismissingToast:(id)arg1 ;
-(void)gameCenterViewDidHide:(id)arg1 ;
-(BOOL)gameCenterViewWillAnimateHide:(id)arg1 ;
-(void)adDismissed;
-(id)internalAds:(int)arg1 ;
-(unsigned long long)supportedInterfaceOrientationsForMessageBox:(id)arg1 ;
-(void)whatsNewDone:(int)arg1 ;
-(void)previewStyleWithBackground:(int)arg1 cardBack:(int)arg2 ;
-(void)EULADone;
-(void)multiPlayerWasCanceled;
-(id)findValidMove:(id)arg1 ;
-(void)displayVegasErrorMessage;
-(void)clearSolution;
-(void)checkForCongrats;
-(void)processWatchEventData;
-(void)showRotateDeviceMessageIfNeeded;
-(void)fixTable:(id)arg1 ;
-(void)cardAddedToFoundation;
-(void)winGameFinishedBeingDisplayed;
-(void)animationDidStopCongratulations:(id)arg1 finished:(BOOL)arg2 context:(void*)arg3 ;
-(void)finishDismissingCongrats;
-(BOOL)isDailyViewAnimating;
-(void)finishedRequestingServerTime:(id)arg1 ;
-(BOOL)showCrownViewWithFrame:(CGRect)arg1 ;
-(BOOL)allowsReplay;
-(void)forceStartNewGame;
-(BOOL)beatArchiveOnDayOf;
-(void)removeToolbar;
-(void)fixActionSheetFlag;
-(void)toggleToolBarFromTouch;
-(void)setupToolbarCrossPromotionTrayButton;
-(void)setupToolbarGameCenterButton;
-(void)scoreAction:(id)arg1 ;
-(void)stataction:(id)arg1 ;
-(void)congratulationsAction:(id)arg1 ;
-(void)whatsNewAction;
-(void)rulesaction:(id)arg1 ;
-(void)aboutWatchAction:(id)arg1 ;
-(void)winpercentaction:(id)arg1 ;
-(void)configReloadData;
-(void)selectViewAction:(int)arg1 ;
-(void)copyrightaction:(id)arg1 ;
-(void)ChangeHintAction:(id)arg1 ;
-(void)tapSelectAction;
-(CGAffineTransform)getBackgroundImageTransform:(BOOL)arg1 ;
-(void)changeCards;
-(void)gameCenterAction:(id)arg1 ;
-(void)cardDrawAction:(id)arg1 ;
-(void)ChangeHandAction:(id)arg1 ;
-(void)ChangeTimeMoveAction:(id)arg1 ;
-(void)ChangeLockAction:(id)arg1 ;
-(void)vegasAction:(id)arg1 ;
-(void)DragAndDropCtlAction:(id)arg1 ;
-(void)SwipeToLockToolbarCtlAction:(id)arg1 ;
-(void)AutoHintModeCtlAction:(id)arg1 ;
-(void)switchCardsAction:(id)arg1 ;
-(void)switchAnimationAction:(id)arg1 ;
-(id)findStack:(CGPoint)arg1 ;
-(id)findStackFromRect:(CGRect)arg1 card:(id)arg2 ;
-(id)getFoundation:(int)arg1 ;
-(void)playRestackCardsSound;
-(void)playFlipStockPileCardSound;
-(void)playDropCardSound;
-(void)playDelayedScoreSound:(float)arg1 ;
-(void)playErrorSound;
-(void)playCrownAppearSound;
-(BOOL)isPlayMenuShowing;
-(BOOL)isCard:(id)arg1 ;
-(id)getRankingBadgeImage;
-(id)getCongratsCrossPromotionItem;
-(unsigned char)bToolbarVisible;
-(unsigned char)undoShowing;
-(WinGame *)winGame;
-(int)winningPercent;
-(void)setWinningPercent:(int)arg1 ;
-(unsigned char)tickStarted;
-(void)setTheDeck:(Deck *)arg1 ;
-(unsigned char)gameStarted;
-(undoStruct)undoInfo;
-(void)setUndoInfo:(undoStruct)arg1 ;
-(unsigned char)dealing;
-(unsigned char)undoing;
-(unsigned char)customBackground;
-(void)setCustomBackground:(unsigned char)arg1 ;
-(unsigned char)lockOrientationWasSet;
-(void)setLockOrientationWasSet:(unsigned char)arg1 ;
-(UIImageView *)surfaceView;
-(AudioFX *)shuffleSound;
-(unsigned char)bShowHint;
-(unsigned char)bAutoShowHint;
-(int)tapSelectOption;
-(unsigned char)inBackground;
-(void)setInBackground:(unsigned char)arg1 ;
-(unsigned char)animateRotation;
-(void)setAnimateRotation:(unsigned char)arg1 ;
-(int)SoundProgressionIndex;
-(unsigned char)requestFAQs;
-(void)setRequestFAQs:(unsigned char)arg1 ;
-(unsigned char)requestPrivacy;
-(void)setRequestPrivacy:(unsigned char)arg1 ;
-(unsigned char)noAd;
-(unsigned char)dontShowCongrats;
-(int)gameTicks;
-(UILabel *)yourHand;
-(int)savedMoves;
-(unsigned char)bHintMode;
-(void)setBHintMode:(unsigned char)arg1 ;
-(void)setConfigCtlr:(MainConfigViewController *)arg1 ;
-(void)setCongratulations:(Congratulations *)arg1 ;
-(unsigned char)dontShowFacebook;
-(FacebookSplash *)connectFbView;
-(void)setConnectFbView:(FacebookSplash *)arg1 ;
-(FacebookViewController *)fbView;
-(unsigned char)facebookApproved;
-(void)setFacebookApproved:(unsigned char)arg1 ;
-(UIAlertView *)launchAlert;
-(void)setLaunchAlert:(UIAlertView *)arg1 ;
-(BOOL)originalDrawThree;
-(SFLPromotionButtonPicker *)congratsPromotionButtonPicker;
-(void)setCongratsPromotionButtonPicker:(SFLPromotionButtonPicker *)arg1 ;
-(BOOL)isCongratsPromotionEnabled;
-(void)setCongratsPromotionEnabled:(BOOL)arg1 ;
-(BOOL)trayEnabled;
-(void)setTrayEnabled:(BOOL)arg1 ;
-(BOOL)showWhatsNewFromConfig;
-(void)setShowWhatsNewFromConfig:(BOOL)arg1 ;
-(BOOL)gameResumed;
-(BOOL)adParamsCrossPromoEnabled;
-(void)setShowingSpecificSettingToUser:(BOOL)arg1 ;
-(NSString *)whichSettingToShowUser;
-(void)setWhichSettingToShowUser:(NSString *)arg1 ;
-(void)setStartingGameMode:(BOOL)arg1 ;
-(NSString *)whichGameModeIsStarting;
-(void)setWhichGameModeIsStarting:(NSString *)arg1 ;
-(void)setTemporarilyDontCountLoss:(BOOL)arg1 ;
-(NSMutableArray *)messageBoxQueue;
-(void)setMessageBoxQueue:(NSMutableArray *)arg1 ;
-(int)messageBoxQueueCanShowCount;
-(void)setMessageBoxQueueCanShowCount:(int)arg1 ;
-(NSTimer *)messageBoxQueueTimer;
-(void)setMessageBoxQueueTimer:(NSTimer *)arg1 ;
-(BOOL)adParamsCrossPromoInitialized;
-(void)setAdParamsCrossPromoInitialized:(BOOL)arg1 ;
-(void)stopTimer;
-(BOOL)gestureRecognizer:(id)arg1 shouldReceiveTouch:(id)arg2 ;
-(UIPanGestureRecognizer *)panGestureRecognizer;
-(float)statusBarHeight;
-(unsigned long long)supportedInterfaceOrientations;
-(void)didReceiveMemoryWarning;
-(BOOL)shouldAutorotate;
-(void)alertView:(id)arg1 clickedButtonAtIndex:(long long)arg2 ;
-(void)alertView:(id)arg1 didDismissWithButtonIndex:(long long)arg2 ;
-(void)setPanGestureRecognizer:(UIPanGestureRecognizer *)arg1 ;
-(void)loadView;
-(BOOL)isRotating;
-(UIPopoverController *)pop;
-(void)animationDidStop:(id)arg1 finished:(BOOL)arg2 context:(void*)arg3 ;
-(long long)adaptivePresentationStyleForPresentationController:(id)arg1 ;
-(void)viewWillAppear:(BOOL)arg1 ;
-(void)viewDidLoad;
-(void)viewDidAppear:(BOOL)arg1 ;
-(void)viewWillDisappear:(BOOL)arg1 ;
-(void)viewDidDisappear:(BOOL)arg1 ;
-(void)willRotateToInterfaceOrientation:(long long)arg1 duration:(double)arg2 ;
-(void)didRotateFromInterfaceOrientation:(long long)arg1 ;
-(MWToolbar *)toolbar;
-(void)webView:(id)arg1 didFailLoadWithError:(id)arg2 ;
-(BOOL)webView:(id)arg1 shouldStartLoadWithRequest:(id)arg2 navigationType:(long long)arg3 ;
-(void)webViewDidFinishLoad:(id)arg1 ;
-(BOOL)popoverPresentationControllerShouldDismissPopover:(id)arg1 ;
-(void)startTimer;
-(float)screenScale;
-(void)actionSheetCancel:(id)arg1 ;
-(void)willPresentActionSheet:(id)arg1 ;
-(void)actionSheet:(id)arg1 didDismissWithButtonIndex:(long long)arg2 ;
-(void)setTimer:(NSTimer *)arg1 ;
-(NSTimer *)timer;
-(void)setupToolbar;
-(int)language;
-(void)setAlias:(NSString *)arg1 ;
-(NSString *)alias;
-(unsigned char)blocked;
-(unsigned char)initialized;
-(void)setEventHandler:(SolitaireEventHandler *)arg1 ;
-(Statistics *)stats;
-(void)showStatusBar;
-(void)enterForeground;
-(void)saveOptions;
-(void)dismissPopovers;
-(SolitaireEventHandler *)eventHandler;
-(void)switchAction:(id)arg1 ;
-(void)setStatusBarHeight:(float)arg1 ;
-(void)setIsRotating:(BOOL)arg1 ;
@end

