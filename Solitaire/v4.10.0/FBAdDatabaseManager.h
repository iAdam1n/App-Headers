/*
* This header is generated by classdump-dyld 1.0
* on Saturday, December 24, 2016 at 12:42:15 AM Greenwich Mean Time
* Operating System: Version 10.1.1 (Build 14B150)
* Image Source: /var/containers/Bundle/Application/2E0DF6B4-8C57-4F66-9862-2B2C129D4027/SolitaireFree.app/SolitaireFree
* classdump-dyld is licensed under GPLv3, Copyright Â© 2013-2016 by Elias Limneos.
*/


@protocol OS_dispatch_queue;
#import <SolitaireFree/SolitaireFree-Structs.h>
@class NSURL, NSObject, NSOperationQueue;

@interface FBAdDatabaseManager : NSObject {

	BOOL _initialized;
	NSURL* _storagePath;
	NSObject*<OS_dispatch_queue> _databaseQueue;
	NSOperationQueue* _operationQueue;
	sqlite3Ref _database;

}

@property (nonatomic,retain) NSOperationQueue * operationQueue;                       //@synthesize operationQueue=_operationQueue - In the implementation block
@property (nonatomic,retain) NSObject*<OS_dispatch_queue> databaseQueue;              //@synthesize databaseQueue=_databaseQueue - In the implementation block
@property (assign,nonatomic) sqlite3Ref database;                                     //@synthesize database=_database - In the implementation block
@property (assign,getter=isInitialized,nonatomic) BOOL initialized;                   //@synthesize initialized=_initialized - In the implementation block
@property (nonatomic,copy) NSURL * storagePath;                                       //@synthesize storagePath=_storagePath - In the implementation block
+(id)sharedManager;
-(void)dropTableSyncWithDatabase:(sqlite3Ref)arg1 withTableName:(id)arg2 withCallback:(/*^block*/id)arg3 ;
-(void)createTableSyncWithDatabase:(sqlite3Ref)arg1 withStatement:(const char*)arg2 withCallback:(/*^block*/id)arg3 ;
-(void)initializeDatabaseWithCompletionCallback:(/*^block*/id)arg1 withDowngradeCallback:(/*^block*/id)arg2 withUpgradeCallback:(/*^block*/id)arg3 ;
-(void)insertWithStatementSync:(const char*)arg1 withDatabase:(sqlite3Ref)arg2 withStatementCallback:(/*^block*/id)arg3 withCompletionCallback:(/*^block*/id)arg4 ;
-(void)getDatabase:(/*^block*/id)arg1 ;
-(void)deleteWithStatementSync:(const char*)arg1 withDatabase:(sqlite3Ref)arg2 withCallback:(/*^block*/id)arg3 ;
-(void)insertWithStatement:(const char*)arg1 withDatabase:(sqlite3Ref)arg2 withStatementCallback:(/*^block*/id)arg3 withCompletionCallback:(/*^block*/id)arg4 ;
-(void)queryWithStatementSync:(const char*)arg1 withDatabase:(sqlite3Ref)arg2 withCallback:(/*^block*/id)arg3 ;
-(void)deserializeWithStatement:(const char*)arg1 withDatabase:(sqlite3Ref)arg2 withDeserializeCallback:(/*^block*/id)arg3 withCallback:(/*^block*/id)arg4 ;
-(void)deserializeWithStatementSync:(const char*)arg1 withDatabase:(sqlite3Ref)arg2 withDeserializeCallback:(/*^block*/id)arg3 withCallback:(/*^block*/id)arg4 ;
-(void)openDatabaseWithCallback:(/*^block*/id)arg1 withRetry:(BOOL)arg2 ;
-(void)setUserVersionSync:(int)arg1 withDatabase:(sqlite3Ref)arg2 withCallback:(/*^block*/id)arg3 ;
-(void)setForeignKeyEnforcementSyncWithDatabase:(sqlite3Ref)arg1 withCallback:(/*^block*/id)arg2 ;
-(void)queryUserVersionSyncWithDatabase:(sqlite3Ref)arg1 withCallback:(/*^block*/id)arg2 ;
-(void)openDatabaseWithCallback:(/*^block*/id)arg1 ;
-(void)createTableWithDatabase:(sqlite3Ref)arg1 withStatement:(const char*)arg2 withCallback:(/*^block*/id)arg3 ;
-(void)dropTableWithDatabase:(sqlite3Ref)arg1 withTableName:(id)arg2 withCallback:(/*^block*/id)arg3 ;
-(void)queryWithStatement:(const char*)arg1 withDatabase:(sqlite3Ref)arg2 withCallback:(/*^block*/id)arg3 ;
-(void)deleteWithStatement:(const char*)arg1 withDatabase:(sqlite3Ref)arg2 withCallback:(/*^block*/id)arg3 ;
-(BOOL)isInitialized;
-(id)init;
-(void)dealloc;
-(void)setOperationQueue:(NSOperationQueue *)arg1 ;
-(NSOperationQueue *)operationQueue;
-(void)setStoragePath:(NSURL *)arg1 ;
-(NSURL *)storagePath;
-(sqlite3Ref)database;
-(void)setDatabaseQueue:(NSObject*<OS_dispatch_queue>)arg1 ;
-(NSObject*<OS_dispatch_queue>)databaseQueue;
-(void)setInitialized:(BOOL)arg1 ;
-(void)setDatabase:(sqlite3Ref)arg1 ;
@end

