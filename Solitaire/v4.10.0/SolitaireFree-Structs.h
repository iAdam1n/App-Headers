/*
* This header is generated by classdump-dyld 1.0
* on Saturday, December 24, 2016 at 12:42:15 AM Greenwich Mean Time
* Operating System: Version 10.1.1 (Build 14B150)
* Image Source: /var/containers/Bundle/Application/2E0DF6B4-8C57-4F66-9862-2B2C129D4027/SolitaireFree.app/SolitaireFree
* classdump-dyld is licensed under GPLv3, Copyright Â© 2013-2016 by Elias Limneos.
*/


@class Card, NSURLRequest;

typedef struct CGContext* CGContextRef;

typedef struct CGSize {
	double width;
	double height;
} CGSize;

typedef struct CGPoint {
	double x;
	double y;
} CGPoint;

typedef struct CGRect {
	CGPoint origin;
	CGSize size;
} CGRect;

typedef struct CGLayer* CGLayerRef;

typedef struct UIEdgeInsets {
	double top;
	double left;
	double bottom;
	double right;
} UIEdgeInsets;

typedef struct _NSZone* NSZoneRef;

typedef struct saveStruct {
	unsigned bestTime;
	unsigned bestCount;
	unsigned char sound;
	unsigned char threeCard;
} saveStruct;

typedef struct cardPosStruct {
	unsigned cardRank;
	unsigned cardSuit;
	unsigned cardStack;
	unsigned cardIndex;
	unsigned deckIndex;
	unsigned char showBack;
	unsigned char moveable;
} cardPosStruct;

typedef struct gameStruct {
	cardPosStruct cards[52];
} gameStruct;

typedef struct SaveStruct2 {
	unsigned bestTime;
	unsigned bestCount;
	unsigned cardStyle;
	unsigned char sound;
	unsigned char threeCard;
} SaveStruct2;

typedef struct SaveStruct3 {
	unsigned bestTime;
	unsigned bestCount;
	unsigned cardStyle;
	unsigned char sound;
	unsigned char threeCard;
	unsigned char rightHand;
	unsigned char rsvd1;
	unsigned char timeMovesDisplay;
	unsigned char rsvd2;
} SaveStruct3;

typedef struct undoStruct {
	int cardCount;
	BOOL flipCard;
	int fromStack;
	int toStack;
	unsigned char flipStack;
	unsigned char valid;
} undoStruct;

typedef struct sqlite3* sqlite3Ref;

typedef struct mStruct {
	int fromStack;
	int cardInx;
	int toStack;
	int moveType;
	unsigned char valid;
} mStruct;

typedef struct {
	int field1;
	double field2;
	CGPoint field3;
} SCD_Struct_Cr15;

typedef struct CGAffineTransform {
	double a;
	double b;
	double c;
	double d;
	double tx;
	double ty;
} CGAffineTransform;

typedef struct {
	int rotationAngleDegrees;
	double zoomScale;
	CGPoint coordinates;
} SCD_Struct_Im17;

typedef struct CATransform3D {
	double m11;
	double m12;
	double m13;
	double m14;
	double m21;
	double m22;
	double m23;
	double m24;
	double m31;
	double m32;
	double m33;
	double m34;
	double m41;
	double m42;
	double m43;
	double m44;
} CATransform3D;

typedef struct {
	CGPoint dest;
	CGPoint velocity;
	Card* card;
	float angle;
	float scale;
	BOOL useTransform2D;
	CGAffineTransform transform2D;
	CGAffineTransform initialTransform2D;
	BOOL use3D;
	CATransform3D dataTransform;
	CATransform3D transform;
	CATransform3D initialTransform;
} SCD_Struct_Wi19;

typedef struct {
	CGPoint field1;
	CGPoint field2;
	id field3;
	float field4;
	float field5;
	BOOL field6;
	CGAffineTransform field7;
	CGAffineTransform field8;
	BOOL field9;
	CATransform3D field10;
	CATransform3D field11;
	CATransform3D field12;
} SCD_Struct_Wi20;

typedef struct {
	unsigned long long field1;
	id field2;
	unsigned long long field3;
	unsigned long long field4[5];
} SCD_Struct_M121;

typedef struct {
	long long value;
	int timescale;
	unsigned flags;
	long long epoch;
} SCD_Struct_AS22;

typedef struct GADAdSize {
	CGSize size;
	unsigned long long flags;
} GADAdSize;

typedef struct __CVOpenGLESTextureCache* CVOpenGLESTextureCacheRef;

typedef struct __CVBuffer* CVBufferRef;

typedef struct {
	float m00;
	float m01;
	float m02;
	float m03;
	float m10;
	float m11;
	float m12;
	float m13;
	float m20;
	float m21;
	float m22;
	float m23;
	float m30;
	float m31;
	float m32;
	float m33;
} SCD_Struct_GA26;

typedef union GLKMatrix4 {
	SCD_Struct_GA26 field1;
	float m[16];
} GLKMatrix4;

typedef struct __SCNetworkReachability* SCNetworkReachabilityRef;

typedef struct __CFBinaryHeap* CFBinaryHeapRef;

typedef struct CGVector {
	double dx;
	double dy;
} CGVector;

typedef struct {
	long long majorVersion;
	long long minorVersion;
	long long patchVersion;
} SCD_Struct_GA31;

typedef struct __SecTrust* SecTrustRef;

typedef struct {
	long long field1;
	void field2;
	/*function pointer*/void* field3;
	/*function pointer*/void* field4;
	/*function pointer*/void* field5;
} SCD_Struct_Ch33;

typedef struct __CFRunLoop* CFRunLoopRef;

typedef struct __CFString* CFStringRef;

typedef struct __SecCertificate* SecCertificateRef;

typedef struct {
	unsigned major;
	unsigned minor;
	unsigned bugfix;
} SCD_Struct_FA37;

typedef struct CLSMachOFile {
	int fd;
	unsigned long long mappedSize;
	void mappedFile;
} CLSMachOFile;

typedef struct CLSMachOSlice {
	void startAddress;
	int cputype;
	int cpusubtype;
} CLSMachOSlice;

typedef struct dispatch_queue_s* dispatch_queue_sRef;

typedef struct keen_io_sqlite3* keen_io_sqlite3Ref;

typedef struct keen_io_sqlite3_stmt* keen_io_sqlite3_stmtRef;

typedef struct __CFSocket* CFSocketRef;

typedef struct __CFReadStream* CFReadStreamRef;

typedef struct __CFWriteStream* CFWriteStreamRef;

typedef struct __CFRunLoopSource* CFRunLoopSourceRef;

typedef struct {
	long long version;
	void info;
	/*function pointer*/void* retain;
	/*function pointer*/void* release;
	/*function pointer*/void* copyDescription;
} SCD_Struct_Le47;

typedef struct {
	long long field1;
	int field2;
} SCD_Struct_Le48;

typedef struct __CFData* CFDataRef;

typedef struct {
	vng_tm_zip_s field1;
	unsigned long long field2;
	unsigned long long field3;
	unsigned long long field4;
} SCD_Struct_Vu50;

typedef struct {
	void field1;
	unsigned long long field2;
	void field3;
	void field4;
	void field5;
} SCD_Struct_CL51;

typedef struct {
	char field1[33];
	BOOL field2;
	SCD_Struct_FA37 field3;
	SCD_Struct_FA37 field4;
	CLSMachOSlice field5;
	SCD_Struct_CL51 field6;
	long long field7;
} SCD_Struct_CL52;

typedef struct {
	char* field1;
	void field2;
	BOOL field3;
	void field4;
	char* field5;
	char* field6;
	char* field7;
	char* field8;
	char* field9;
	unsigned field10;
	BOOL field11;
	BOOL field12;
	unsigned field13;
	unsigned field14;
	unsigned field15;
	unsigned field16;
} SCD_Struct_CL53;

typedef struct {
	char* field1;
	char* field2;
	unsigned field3;
	unsigned field4;
} SCD_Struct_CL54;

typedef struct __CFArray* CFArrayRef;

typedef struct _darwin_sigaltstack {
	void ss_sp;
	unsigned long long ss_size;
	int ss_flags;
} darwin_sigaltstack;

typedef struct __CFUUID* CFUUIDRef;

typedef struct timeval {
	long long tv_sec;
	int tv_usec;
} timeval;

typedef struct PLCrashHostInfoVersion {
	unsigned long long major;
	unsigned long long minor;
	unsigned long long revision;
} PLCrashHostInfoVersion;

typedef struct plcrash_mach_exception_port_set {
	unsigned count;
	unsigned masks[14];
	unsigned ports[14];
	int behaviors[14];
	int flavors[14];
} plcrash_mach_exception_port_set;

typedef struct opaqueCMSampleBuffer* opaqueCMSampleBufferRef;

typedef struct sqlite3_stmt* sqlite3_stmtRef;

typedef struct opaqueCMFormatDescription* opaqueCMFormatDescriptionRef;

typedef struct FBAdSize {
	CGSize size;
} FBAdSize;

typedef struct OpaqueCMClock* OpaqueCMClockRef;

typedef struct OpaqueCMTimebase* OpaqueCMTimebaseRef;

typedef struct FBAdStarRating {
	double value;
	long long scale;
} FBAdStarRating;

typedef struct opaque_pthread_mutex_t {
	long long __sig;
	char __opaque[56];
} opaque_pthread_mutex_t;

typedef struct recursive_mutex {
	opaque_pthread_mutex_t __m_;
} recursive_mutex;

typedef struct FNFMP4MvhdAtom {
	unsigned timescale;
	unsigned duration;
} FNFMP4MvhdAtom;

typedef struct _compressed_pair<FNFMP4TrakAtomForSeek *, std::__1::allocator<FNFMP4TrakAtomForSeek> > {
	FNFMP4TrakAtomForSeek __first_;
} compressed_pair<FNFMP4TrakAtomForSeek *, std::__1::allocator<FNFMP4TrakAtomForSeek> >;

typedef struct vector<FNFMP4TrakAtomForSeek, std::__1::allocator<FNFMP4TrakAtomForSeek> > {
	FNFMP4TrakAtomForSeek __begin_;
	FNFMP4TrakAtomForSeek __end_;
	compressed_pair<FNFMP4TrakAtomForSeek *, std::__1::allocator<FNFMP4TrakAtomForSeek> > __end_cap_;
} vector<FNFMP4TrakAtomForSeek, std::__1::allocator<FNFMP4TrakAtomForSeek> >;

typedef struct FNFMP4MoovAtomCompressed {
	vector<FNFMP4TrakAtomForSeek, std::__1::allocator<FNFMP4TrakAtomForSeek> > trakAtoms;
	FNFMP4MvhdAtom mvhdAtom;
} FNFMP4MoovAtomCompressed;

typedef struct FNFMP4FrameMetadata {
	unsigned long long offset;
	unsigned size;
	unsigned duration;
	unsigned long long dts;
	unsigned long long pts;
	unsigned long long absoluteDts;
} FNFMP4FrameMetadata;

typedef struct _compressed_pair<FNFMP4FrameDelta *, std::__1::allocator<FNFMP4FrameDelta> > {
	FNFMP4FrameDelta __first_;
} compressed_pair<FNFMP4FrameDelta *, std::__1::allocator<FNFMP4FrameDelta> >;

typedef struct vector<FNFMP4FrameDelta, std::__1::allocator<FNFMP4FrameDelta> > {
	FNFMP4FrameDelta __begin_;
	FNFMP4FrameDelta __end_;
	compressed_pair<FNFMP4FrameDelta *, std::__1::allocator<FNFMP4FrameDelta> > __end_cap_;
} vector<FNFMP4FrameDelta, std::__1::allocator<FNFMP4FrameDelta> >;

typedef struct _compressed_pair<FNFMP4Keyframe *, std::__1::allocator<FNFMP4Keyframe> > {
	FNFMP4Keyframe __first_;
} compressed_pair<FNFMP4Keyframe *, std::__1::allocator<FNFMP4Keyframe> >;

typedef struct vector<FNFMP4Keyframe, std::__1::allocator<FNFMP4Keyframe> > {
	FNFMP4Keyframe __begin_;
	FNFMP4Keyframe __end_;
	compressed_pair<FNFMP4Keyframe *, std::__1::allocator<FNFMP4Keyframe> > __end_cap_;
} vector<FNFMP4Keyframe, std::__1::allocator<FNFMP4Keyframe> >;

typedef struct FNFMp4FrameMetadataCompressor {
	FNFMP4FrameMetadata _frame;
	unsigned _keyframeIndex;
	unsigned _frameIndex;
	FNFMP4FrameMetadata _firstFrame;
	FNFMP4FrameMetadata _lastFrame;
	FNFMP4FrameMetadata _tempFrame;
	unsigned _size;
	unsigned long long _largestOffset;
	unsigned _seqNum;
	vector<FNFMP4Keyframe, std::__1::allocator<FNFMP4Keyframe> > _keyframes;
	vector<FNFMP4FrameDelta, std::__1::allocator<FNFMP4FrameDelta> > _deltas;
} FNFMp4FrameMetadataCompressor;

typedef struct AudioStreamBasicDescription {
	double mSampleRate;
	unsigned mFormatID;
	unsigned mFormatFlags;
	unsigned mBytesPerPacket;
	unsigned mFramesPerPacket;
	unsigned mBytesPerFrame;
	unsigned mChannelsPerFrame;
	unsigned mBitsPerChannel;
	unsigned mReserved;
} AudioStreamBasicDescription;

typedef struct _compressed_pair<unsigned long, std::__1::allocator<opaqueCMSampleBuffer *> > {
	unsigned long long __first_;
} compressed_pair<unsigned long, std::__1::allocator<opaqueCMSampleBuffer *> >;

typedef struct _compressed_pair<opaqueCMSampleBuffer ***, std::__1::allocator<opaqueCMSampleBuffer **> > {
	opaqueCMSampleBuffer __first_;
} compressed_pair<opaqueCMSampleBuffer ***, std::__1::allocator<opaqueCMSampleBuffer **> >;

typedef struct _split_buffer<opaqueCMSampleBuffer **, std::__1::allocator<opaqueCMSampleBuffer **> > {
	opaqueCMSampleBuffer __first_;
	opaqueCMSampleBuffer __begin_;
	opaqueCMSampleBuffer __end_;
	compressed_pair<opaqueCMSampleBuffer ***, std::__1::allocator<opaqueCMSampleBuffer **> > __end_cap_;
} split_buffer<opaqueCMSampleBuffer **, std::__1::allocator<opaqueCMSampleBuffer **> >;

typedef struct deque<opaqueCMSampleBuffer *, std::__1::allocator<opaqueCMSampleBuffer *> > {
	split_buffer<opaqueCMSampleBuffer **, std::__1::allocator<opaqueCMSampleBuffer **> > __map_;
	unsigned long long __start_;
	compressed_pair<unsigned long, std::__1::allocator<opaqueCMSampleBuffer *> > __size_;
} deque<opaqueCMSampleBuffer *, std::__1::allocator<opaqueCMSampleBuffer *> >;

typedef struct objc_method* objc_methodRef;

typedef struct mutex {
	opaque_pthread_mutex_t __m_;
} mutex;

typedef struct _compressed_pair<unsigned long, std::__1::__map_value_compare<FBDataSegment, std::__1::__value_type<FBDataSegment, NSData *>, cmpOfDataSegment, true> > {
	unsigned long long __first_;
} compressed_pair<unsigned long, std::__1::__map_value_compare<FBDataSegment, std::__1::__value_type<FBDataSegment, NSData *>, cmpOfDataSegment, true> >;

typedef struct _tree_end_node<std::__1::__tree_node_base<void *> *> {
	__tree_node_base<void *> __left_;
} tree_end_node<std::__1::__tree_node_base<void *> *>;

typedef struct _compressed_pair<std::__1::__tree_end_node<std::__1::__tree_node_base<void *> *>, std::__1::allocator<std::__1::__tree_node<std::__1::__value_type<FBDataSegment, NSData *>, void *> > > {
	tree_end_node<std::__1::__tree_node_base<void *> *> __first_;
} compressed_pair<std::__1::__tree_end_node<std::__1::__tree_node_base<void *> *>, std::__1::allocator<std::__1::__tree_node<std::__1::__value_type<FBDataSegment, NSData *>, void *> > >;

typedef struct _tree<std::__1::__value_type<FBDataSegment, NSData *>, std::__1::__map_value_compare<FBDataSegment, std::__1::__value_type<FBDataSegment, NSData *>, cmpOfDataSegment, true>, std::__1::allocator<std::__1::__value_type<FBDataSegment, NSData *> > > {
	__tree_node<std::__1::__value_type<FBDataSegment, NSData *>, void *> __begin_node_;
	compressed_pair<std::__1::__tree_end_node<std::__1::__tree_node_base<void *> *>, std::__1::allocator<std::__1::__tree_node<std::__1::__value_type<FBDataSegment, NSData *>, void *> > > __pair1_;
	compressed_pair<unsigned long, std::__1::__map_value_compare<FBDataSegment, std::__1::__value_type<FBDataSegment, NSData *>, cmpOfDataSegment, true> > __pair3_;
} tree<std::__1::__value_type<FBDataSegment, NSData *>, std::__1::__map_value_compare<FBDataSegment, std::__1::__value_type<FBDataSegment, NSData *>, cmpOfDataSegment, true>, std::__1::allocator<std::__1::__value_type<FBDataSegment, NSData *> > >;

typedef struct map<FBDataSegment, NSData *, cmpOfDataSegment, std::__1::allocator<std::__1::pair<const FBDataSegment, NSData *> > > {
	tree<std::__1::__value_type<FBDataSegment, NSData *>, std::__1::__map_value_compare<FBDataSegment, std::__1::__value_type<FBDataSegment, NSData *>, cmpOfDataSegment, true>, std::__1::allocator<std::__1::__value_type<FBDataSegment, NSData *> > > __tree_;
} map<FBDataSegment, NSData *, cmpOfDataSegment, std::__1::allocator<std::__1::pair<const FBDataSegment, NSData *> > >;

typedef struct OpaqueAudioQueue* OpaqueAudioQueueRef;

typedef struct AQBufferParameters {
	unsigned bufferSize;
	unsigned packetCount;
} AQBufferParameters;

typedef struct SMPTETime {
	short mSubframes;
	short mSubframeDivisor;
	unsigned mCounter;
	unsigned mType;
	unsigned mFlags;
	short mHours;
	short mMinutes;
	short mSeconds;
	short mFrames;
} SMPTETime;

typedef struct AudioTimeStamp {
	double mSampleTime;
	unsigned long long mHostTime;
	double mRateScalar;
	unsigned long long mWordClockTime;
	SMPTETime mSMPTETime;
	unsigned mFlags;
	unsigned mReserved;
} AudioTimeStamp;

typedef struct OpaqueAudioQueueTimeline* OpaqueAudioQueueTimelineRef;

typedef struct AQBufferState {
	AudioQueueBuffer bufferRef;
	AudioTimeStamp timestamp;
	BOOL enqueued;
} AQBufferState;

typedef struct NSRange {
	unsigned long long location;
	unsigned long long length;
} NSRange;

typedef struct OpaqueCMBlockBuffer* OpaqueCMBlockBufferRef;

typedef struct AudioBuffer {
	unsigned mNumberChannels;
	unsigned mDataByteSize;
	void mData;
} AudioBuffer;

typedef struct FNFMP4MehdAtom {
	int duration;
} FNFMP4MehdAtom;

typedef struct _compressed_pair<FNFMP4MoofAtom *, std::__1::allocator<FNFMP4MoofAtom> > {
	FNFMP4MoofAtom __first_;
} compressed_pair<FNFMP4MoofAtom *, std::__1::allocator<FNFMP4MoofAtom> >;

typedef struct vector<FNFMP4MoofAtom, std::__1::allocator<FNFMP4MoofAtom> > {
	FNFMP4MoofAtom __begin_;
	FNFMP4MoofAtom __end_;
	compressed_pair<FNFMP4MoofAtom *, std::__1::allocator<FNFMP4MoofAtom> > __end_cap_;
} vector<FNFMP4MoofAtom, std::__1::allocator<FNFMP4MoofAtom> >;

typedef struct _compressed_pair<FNFMP4SidxSegment *, std::__1::allocator<FNFMP4SidxSegment> > {
	FNFMP4SidxSegment __first_;
} compressed_pair<FNFMP4SidxSegment *, std::__1::allocator<FNFMP4SidxSegment> >;

typedef struct vector<FNFMP4SidxSegment, std::__1::allocator<FNFMP4SidxSegment> > {
	FNFMP4SidxSegment __begin_;
	FNFMP4SidxSegment __end_;
	compressed_pair<FNFMP4SidxSegment *, std::__1::allocator<FNFMP4SidxSegment> > __end_cap_;
} vector<FNFMP4SidxSegment, std::__1::allocator<FNFMP4SidxSegment> >;

typedef struct FNFMP4SidxAtom {
	unsigned timescale;
	vector<FNFMP4SidxSegment, std::__1::allocator<FNFMP4SidxSegment> > segments;
} FNFMP4SidxAtom;

typedef struct _compressed_pair<FNFMP4TrexAtom *, std::__1::allocator<FNFMP4TrexAtom> > {
	FNFMP4TrexAtom __first_;
} compressed_pair<FNFMP4TrexAtom *, std::__1::allocator<FNFMP4TrexAtom> >;

typedef struct vector<FNFMP4TrexAtom, std::__1::allocator<FNFMP4TrexAtom> > {
	FNFMP4TrexAtom __begin_;
	FNFMP4TrexAtom __end_;
	compressed_pair<FNFMP4TrexAtom *, std::__1::allocator<FNFMP4TrexAtom> > __end_cap_;
} vector<FNFMP4TrexAtom, std::__1::allocator<FNFMP4TrexAtom> >;

typedef struct FNFMP4MvexAtom {
	FNFMP4MehdAtom mehdAtom;
	vector<FNFMP4TrexAtom, std::__1::allocator<FNFMP4TrexAtom> > trexAtoms;
} FNFMP4MvexAtom;

typedef struct _compressed_pair<FNFMP4TrakAtom *, std::__1::allocator<FNFMP4TrakAtom> > {
	FNFMP4TrakAtom __first_;
} compressed_pair<FNFMP4TrakAtom *, std::__1::allocator<FNFMP4TrakAtom> >;

typedef struct vector<FNFMP4TrakAtom, std::__1::allocator<FNFMP4TrakAtom> > {
	FNFMP4TrakAtom __begin_;
	FNFMP4TrakAtom __end_;
	compressed_pair<FNFMP4TrakAtom *, std::__1::allocator<FNFMP4TrakAtom> > __end_cap_;
} vector<FNFMP4TrakAtom, std::__1::allocator<FNFMP4TrakAtom> >;

typedef struct FNFMP4MoovAtom {
	FNFMP4MvhdAtom mvhdAtom;
	vector<FNFMP4TrakAtom, std::__1::allocator<FNFMP4TrakAtom> > trakAtoms;
	FNFMP4MvexAtom mvexAtom;
} FNFMP4MoovAtom;

typedef struct FNFMP4MoovAtomProvider {
	FNFMP4MoovAtom _moovAtom;
	unsigned long long _moovAtomSize;
	FNFMP4SidxAtom _sidxAtom;
	vector<FNFMP4MoofAtom, std::__1::allocator<FNFMP4MoofAtom> > _moofAtoms;
} FNFMP4MoovAtomProvider;

typedef struct _compressed_pair<unsigned int *, std::__1::allocator<unsigned int> > {
	unsigned __first_;
} compressed_pair<unsigned int *, std::__1::allocator<unsigned int> >;

typedef struct vector<unsigned int, std::__1::allocator<unsigned int> > {
	unsigned __begin_;
	unsigned __end_;
	compressed_pair<unsigned int *, std::__1::allocator<unsigned int> > __end_cap_;
} vector<unsigned int, std::__1::allocator<unsigned int> >;

typedef struct FNFPlayerState {
	BOOL playingRequested;
	BOOL isPlaying;
	BOOL isStalled;
	BOOL endTimeReached;
	BOOL firstAudioFrameEnqueued;
	BOOL stoppedEnqueuingVideo;
	BOOL stoppedEnqueuingAudio;
	BOOL isFirstVideoFrame;
	BOOL recreatedLayerOnError;
	BOOL audioEngineInitialized;
	SCD_Struct_AS22 lastStartingTime;
	SCD_Struct_AS22 latestEnqueuedVideoPts;
	SCD_Struct_AS22 latestEnqueuedAudioPts;
	SCD_Struct_AS22 latestEnqueuedAudioDts;
	id playbackTimeObserverForAsset;
	id durationTimerForAsset;
	id stallTimerObserver;
	id sampleBufferFlushTimerObserver;
	SCD_Struct_AS22 backgroundPauseTime;
	unsigned sampleAudioFrameSize;
} FNFPlayerState;

typedef struct OpaqueVTDecompressionSession* OpaqueVTDecompressionSessionRef;

typedef struct {
	BOOL field1;
	BOOL field2;
} SCD_Struct_FN118;

typedef struct FNFTrackDownloaderState {
	NSURLRequest* urlRequest;
	unsigned long long priorOffset;
	unsigned long long bytesRequested;
	unsigned long long bytesReceived;
} FNFTrackDownloaderState;

