/*
* This header is generated by classdump-dyld 1.0
* on Thursday, August 25, 2016 at 11:54:34 PM British Summer Time
* Operating System: Version 9.3.3 (Build 13G34)
* Image Source: /var/containers/Bundle/Application/EDDCC4DC-B551-47FD-8F2D-ADD28D2EEB77/eBay.app/eBay
* classdump-dyld is licensed under GPLv3, Copyright Â© 2013-2016 by Elias Limneos.
*/

typedef struct UIEdgeInsets {
	double top;
	double left;
	double bottom;
	double right;
} UIEdgeInsets;

typedef struct CGSize {
	double width;
	double height;
} CGSize;

typedef struct opaqueCMSampleBuffer* opaqueCMSampleBufferRef;

typedef struct CGPoint {
	double x;
	double y;
} CGPoint;

typedef struct CGRect {
	CGPoint origin;
	CGSize size;
} CGRect;

typedef struct {
	long long field1;
	long long field2;
} SCD_Struct_Pr5;

typedef struct __CTFramesetter* CTFramesetterRef;

typedef struct AdViewMetric {
	double leftMargin;
	double topMargin;
	double extraWidthSpacing;
	double heightSpacing;
	double bottomHeightSpacing;
	double widthSpacing;
	double extraHeightSpacing;
} AdViewMetric;

typedef struct NSRange {
	unsigned long long location;
	unsigned long long length;
} NSRange;

typedef struct PackageInfo {
	BOOL isMetric;
	BOOL areDimensionsRequired;
	BOOL isWeightRequired;
	double length;
	double width;
	double height;
	double weightMajor;
	double weightMinor;
} PackageInfo;

typedef struct CGPath* CGPathRef;

typedef struct UIOffset {
	double horizontal;
	double vertical;
} UIOffset;

typedef struct CGContext* CGContextRef;

typedef struct _NSZone* NSZoneRef;

typedef struct SPUserResizableViewAnchorPoint {
	double adjustsX;
	double adjustsY;
	double adjustsH;
	double adjustsW;
} SPUserResizableViewAnchorPoint;

typedef struct CGGradient* CGGradientRef;

typedef struct {
	CGSize center;
	CGSize span;
} SCD_Struct_Lo16;

typedef struct __SecCertificate* SecCertificateRef;

typedef struct __SecTrust* SecTrustRef;

typedef struct {
	unsigned major;
	unsigned minor;
	unsigned bugfix;
} SCD_Struct_FA19;

typedef struct {
	void field1;
	unsigned long long field2;
	void field3;
	void field4;
	void field5;
} SCD_Struct_CL20;

typedef struct {
	char field1[33];
	BOOL field2;
	SCD_Struct_FA19 field3;
	SCD_Struct_FA19 field4;
	SCD_Struct_CL20 field5;
	unsigned char field6;
	unsigned long field7;
	unsigned short field8;
	M field9;
	a field10;
	char field11;
	h field12;
	O field13;
	unsigned short field14;
	long field15;
	int field16;
	char field17;
	e field18;
	long long field19;
} SCD_Struct_CL21;

typedef struct {
	char* field1;
	void field2;
	BOOL field3;
	void field4;
	char* field5;
	char* field6;
	char* field7;
	char* field8;
	char* field9;
	unsigned field10;
	BOOL field11;
	BOOL field12;
	unsigned field13;
	unsigned field14;
	unsigned field15;
	unsigned field16;
} SCD_Struct_CL22;

typedef struct {
	char* field1;
	char* field2;
	unsigned field3;
	unsigned field4;
} SCD_Struct_CL23;

typedef struct GADAdSize {
	CGSize size;
	unsigned long long flags;
} GADAdSize;

typedef struct __CVOpenGLESTextureCache* CVOpenGLESTextureCacheRef;

typedef struct __CVBuffer* CVBufferRef;

typedef struct {
	float m00;
	float m01;
	float m02;
	float m03;
	float m10;
	float m11;
	float m12;
	float m13;
	float m20;
	float m21;
	float m22;
	float m23;
	float m30;
	float m31;
	float m32;
	float m33;
} SCD_Struct_GA27;

typedef union GLKMatrix4 {
	SCD_Struct_GA27 field1;
	float m[16];
} GLKMatrix4;

typedef struct __SCNetworkReachability* SCNetworkReachabilityRef;

typedef struct __CFBinaryHeap* CFBinaryHeapRef;

typedef struct {
	long long field1;
	int field2;
	unsigned field3;
	long long field4;
} SCD_Struct_GA31;

typedef struct CGVector {
	double dx;
	double dy;
} CGVector;

typedef struct {
	long long majorVersion;
	long long minorVersion;
	long long patchVersion;
} SCD_Struct_GA33;

typedef struct CGImage* CGImageRef;

typedef struct CGAffineTransform {
	double a;
	double b;
	double c;
	double d;
	double tx;
	double ty;
} CGAffineTransform;

typedef struct {
	id field1;
	id field2;
	/*function pointer*/void* field3;
	id field4;
	/*function pointer*/void* field5;
	double field6;
} SCD_Struct_PO36;

typedef struct _compressed_pair<unsigned long, std::__1::allocator<std::__1::__list_node<std::__1::shared_ptr<POPAnimatorItem>, void *> > > {
	unsigned long long __first_;
} compressed_pair<unsigned long, std::__1::allocator<std::__1::__list_node<std::__1::shared_ptr<POPAnimatorItem>, void *> > >;

typedef struct _list_node_base<std::__1::shared_ptr<POPAnimatorItem>, void *> {
	__list_node<std::__1::shared_ptr<POPAnimatorItem>, void *> __prev_;
	__list_node<std::__1::shared_ptr<POPAnimatorItem>, void *> __next_;
} list_node_base<std::__1::shared_ptr<POPAnimatorItem>, void *>;

typedef struct list<std::__1::shared_ptr<POPAnimatorItem>, std::__1::allocator<std::__1::shared_ptr<POPAnimatorItem> > > {
	list_node_base<std::__1::shared_ptr<POPAnimatorItem>, void *> __end_;
	compressed_pair<unsigned long, std::__1::allocator<std::__1::__list_node<std::__1::shared_ptr<POPAnimatorItem>, void *> > > __size_alloc_;
} list<std::__1::shared_ptr<POPAnimatorItem>, std::__1::allocator<std::__1::shared_ptr<POPAnimatorItem> > >;

typedef struct __CFDictionary* CFDictionaryRef;

typedef struct __CFRunLoopObserver* CFRunLoopObserverRef;

typedef struct SpringSolver<POP::Vector4<double> >* SpringSolver<POP::Vector4<double> >Ref;

