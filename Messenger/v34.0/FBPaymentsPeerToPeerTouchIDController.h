/*
* This header is generated by classdump-dyld 0.7
* on Friday, August 21, 2015 at 11:40:48 AM British Summer Time
* Operating System: Version 8.4 (Build 12H143)
* Image Source: /private/var/mobile/Containers/Bundle/Application/E282ADAB-AF96-4184-9890-B5E58B4BDDD0/Messenger.app/Messenger
* classdump-dyld is licensed under GPLv3, Copyright Â© 2013-2014 by Elias Limneos.
*/

#import <Messenger/FBPaymentsPeerToPeerDataControllerListener.h>
#import <Messenger/FBPaymentsPeerToPeerPasscodeWorkflowListener.h>

@protocol FBNetworkDispatch, MNUserSettingsPluginService;
@class FBPaymentsPeerToPeerPasscodeWorkflowController, FBPaymentsPeerToPeerPaymentPinController, FBKeychainItemController, LAContext, NSString, FBPaymentsPeerToPeerTouchIDEventListenerAnnouncer;

@interface FBPaymentsPeerToPeerTouchIDController : NSObject <FBPaymentsPeerToPeerDataControllerListener, FBPaymentsPeerToPeerPasscodeWorkflowListener> {

	FBPaymentsPeerToPeerPasscodeWorkflowController* _passcodeWorkflowController;
	FBPaymentsPeerToPeerPaymentPinController* _paymentPinController;
	FBKeychainItemController* _keychainItemController;
	LAContext* _localAuthContextForChecking;
	NSString* _viewerId;
	id<FBNetworkDispatch> _networkDispatcher;
	id<MNUserSettingsPluginService> _userSettingsService;
	FBPaymentsPeerToPeerTouchIDEventListenerAnnouncer* _eventAnnouncer;
	long long _keychainStatus;
	long long _touchIDStatus;
	BOOL _isFetchingKeychainForUnknownStatus;

}

@property (nonatomic,readonly) long long touchIDStatus; 
@property (readonly) unsigned long long hash; 
@property (readonly) Class superclass; 
@property (copy,readonly) NSString * description; 
@property (copy,readonly) NSString * debugDescription; 
+(BOOL)isTouchIDEnabledSystem;
-(void)dataController:(id)arg1 didUpdateDataWithTypes:(unsigned long long)arg2 isOptimistic:(BOOL)arg3 change:(long long)arg4 ;
-(void)_fetchInitialKeychainStatusIfNeeded;
-(void)_updateTouchIDStatus;
-(BOOL)isSystemTouchIDEnabled;
-(void)_presentSetupSystemTouchIDAlertView;
-(void)_verifyPinAndActivate;
-(void)_createPinAndActivate;
-(void)_setKeychainStatus:(long long)arg1 ;
-(void)_verifyPinAndDeactivate;
-(void)_evaluateLocalAuthenticationWithSuccessBlock:(/*^block*/id)arg1 failureBlock:(/*^block*/id)arg2 ;
-(void)_handleLocalAuthenticationReplyWithSuccess:(BOOL)arg1 error:(id)arg2 successBlock:(/*^block*/id)arg3 failureBlock:(/*^block*/id)arg4 ;
-(void)_fallbackPasscodeAuthenticationWithSuccessBlock:(/*^block*/id)arg1 failureBlock:(/*^block*/id)arg2 ;
-(void)_handleLocalAuthenticationSuccessWithSuccessBlock:(/*^block*/id)arg1 failureBlock:(/*^block*/id)arg2 ;
-(void)_updateKeychainInitialStatus:(long long)arg1 ;
-(void)_fetchAuthTokenWithSuccessBlock:(/*^block*/id)arg1 failureBlock:(/*^block*/id)arg2 ;
-(id)localAuthenticationContext;
-(void)_removeAuthTokenFromKeychainWithCompletion:(/*^block*/id)arg1 ;
-(long long)_getNewTouchIDStatus;
-(void)_markHasPromptedUserToActivateTouchIDForNewDevice;
-(void)_handlePinVerificationSuccessForActivationWithPasscode:(id)arg1 ;
-(void)_handlePinVerificationFailureForActivation;
-(void)_handlePinVerificationSuccessForDeactivation;
-(void)_handlePinVerificationFailureForDeactivation;
-(void)_presentPasscodeReauthenticationFlowWithSuccessBlock:(/*^block*/id)arg1 failureBlock:(/*^block*/id)arg2 ;
-(void)_performGraphRequestWithType:(long long)arg1 pin:(id)arg2 touchIDNonce:(id)arg3 completion:(/*^block*/id)arg4 ;
-(void)_presentReactivateTouchIDAlertViewWithAuthToken:(id)arg1 ;
-(void)_saveAuthTokenIntoKeychain:(id)arg1 ;
-(void)_verifyTouchIDNonce:(id)arg1 successBlock:(/*^block*/id)arg2 failureBlock:(/*^block*/id)arg3 ;
-(void)_presentTouchIDConfirmationAlertViewWithOnOff:(BOOL)arg1 ;
-(BOOL)_hasPromptedUserToActivateTouchIDForNewDevice;
-(long long)touchIDStatus;
-(BOOL)_shouldPromptUserToActivateTouchIDForNewDevice;
-(void)_promptUserToActivateTouchIDForNewDeviceWithPasscode:(id)arg1 ;
-(void)_handleRequestWithType:(long long)arg1 error:(id)arg2 response:(id)arg3 localNonce:(id)arg4 completion:(/*^block*/id)arg5 ;
-(id)initWithViewerId:(id)arg1 paymentPinController:(id)arg2 passcodeWorkflowController:(id)arg3 networkDispatcher:(id)arg4 userSettingsService:(id)arg5 ;
-(void)fetchCredentialWithSuccessBlock:(/*^block*/id)arg1 failureBlock:(/*^block*/id)arg2 ;
-(void)passcodeWorkflow:(long long)arg1 didFinishWithPasscode:(id)arg2 ;
-(void)passcodeWorkflow:(long long)arg1 didFailWithError:(id)arg2 ;
-(void)passcodeWorkflowDidCancel:(long long)arg1 ;
-(void)deactivate;
-(void)activate;
-(void)removeListener:(id)arg1 ;
-(void)addListener:(id)arg1 ;
@end

