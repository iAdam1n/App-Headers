/*
* This header is generated by classdump-dyld 0.7
* on Friday, August 21, 2015 at 11:40:46 AM British Summer Time
* Operating System: Version 8.4 (Build 12H143)
* Image Source: /private/var/mobile/Containers/Bundle/Application/E282ADAB-AF96-4184-9890-B5E58B4BDDD0/Messenger.app/Messenger
* classdump-dyld is licensed under GPLv3, Copyright Â© 2013-2014 by Elias Limneos.
*/

#import <Messenger/FBMMessageSenderListener.h>
#import <Messenger/FBMThreadCreationListener.h>
#import <Messenger/FBMSPThreadListFqlRefreshListener.h>
#import <Messenger/FBMThreadModelControllerDelegate.h>
#import <Messenger/FBMThreadActionHandlerListener.h>
#import <Messenger/MNThreadSummaryUpdateListening.h>
#import <Messenger/FBMMQTTReadStateHandlerListener.h>
#import <Messenger/FBMMQTTThreadDeleteEventHandlerListener.h>
#import <Messenger/FBMMessageReceivedListening.h>

@class MNThreadListUpdateMonitorListenerAnnouncer, MNThreadSummaryUpdateListeningAnnouncer, FBMMessageSenderListenerAnnouncer, FBMPendingThreadQueueSender, FBMSPErrorRetryManager, FBMThreadModelController, FBMThreadActionHandler, FBAnalytics, NSString;

@interface MNThreadListUpdateMonitor : NSObject <FBMMessageSenderListener, FBMThreadCreationListener, FBMSPThreadListFqlRefreshListener, FBMThreadModelControllerDelegate, FBMThreadActionHandlerListener, MNThreadSummaryUpdateListening, FBMMQTTReadStateHandlerListener, FBMMQTTThreadDeleteEventHandlerListener, FBMMessageReceivedListening> {

	MNThreadListUpdateMonitorListenerAnnouncer* _announcer;
	MNThreadSummaryUpdateListeningAnnouncer* _threadSummaryUpdateAnnouncer;
	FBMMessageSenderListenerAnnouncer* _messageSenderAnnouncer;
	FBMPendingThreadQueueSender* _pendingThreadQueueSender;
	FBMSPErrorRetryManager* _spErrorRetryManager;
	FBMThreadModelController* _threadModelController;
	FBMThreadActionHandler* _threadActionHandler;
	FBAnalytics* _analytics;

}

@property (readonly) unsigned long long hash; 
@property (readonly) Class superclass; 
@property (copy,readonly) NSString * description; 
@property (copy,readonly) NSString * debugDescription; 
-(id)analyticsModule;
-(void)syncProtocolWillPerformThreadListFqlRefresh;
-(void)syncProtocolThreadListFqlRefreshSucceeded;
-(void)syncProtocolThreadListFqlRefreshFailedWithError:(id)arg1 ;
-(void)syncProtocolThreadListAdditionalInformationRefreshSucceeded;
-(void)didApplyUpdates:(id)arg1 toThreadSummary:(id)arg2 ;
-(void)_startObservers;
-(void)_stopObservers;
-(id)_existingThreadKeysForThreads:(id)arg1 ;
-(id)_localThreadKeyForThread:(id)arg1 ;
-(void)_threadListDidChangeThreadWithLocalThreadKey:(id)arg1 ;
-(id)_localThreadKeyForThreadSummary:(id)arg1 ;
-(void)thread:(id)arg1 didEnqueueMessage:(id)arg2 ;
-(void)thread:(id)arg1 didSendMessage:(id)arg2 ;
-(void)thread:(id)arg1 didCancelSendingMessage:(id)arg2 ;
-(void)thread:(id)arg1 couldNotSendMessage:(id)arg2 error:(id)arg3 ;
-(void)thread:(id)arg1 willRetrySendingMessage:(id)arg2 error:(id)arg3 ;
-(void)threadModelController:(id)arg1 willFetchWithOptions:(unsigned long long)arg2 ;
-(void)threadModelControllerDidFinishFetch:(id)arg1 ;
-(void)threadModelControllerDidFinishDeltaRequest:(id)arg1 ;
-(void)threadModelControllerDidFailFetch:(id)arg1 error:(id)arg2 ;
-(void)threadModelControllerDidFinishProcessingSyncProtocolDeltas:(id)arg1 ;
-(void)threadModelControllerWillFetchMoreThreads:(id)arg1 ;
-(void)threadModelControllerDidFinishFetchMoreThreads:(id)arg1 ;
-(void)threadModelControllerDidFailFetchMoreThreads:(id)arg1 error:(id)arg2 ;
-(void)threadModelControllerDidFinishFetchAdditionalInformation:(id)arg1 ;
-(void)threadModelControllerDidFailToFetchAdditionalInformation:(id)arg1 ;
-(void)threadModelController:(id)arg1 willDeleteThread:(id)arg2 ;
-(void)threadModelController:(id)arg1 didFinishDeleteThreads:(id)arg2 ;
-(void)threadModelController:(id)arg1 didFinishDeleteThreadSummary:(id)arg2 ;
-(void)threadModelController:(id)arg1 didFailDeleteThreadSummary:(id)arg2 error:(id)arg3 ;
-(void)threadModelController:(id)arg1 willDeleteBatchThreadsWithThreadKeys:(id)arg2 ;
-(void)threadModelController:(id)arg1 didFinishDeleteBatchWithSuccessfulKeys:(id)arg2 failedKeys:(id)arg3 ;
-(void)threadModelController:(id)arg1 didFailToDeleteBatchThreadsWithThreadKeys:(id)arg2 error:(id)arg3 ;
-(void)threadModelController:(id)arg1 willDeleteThreadsInThreadList:(unsigned long long)arg2 ;
-(void)threadModelController:(id)arg1 didFinishDeleteThreadsInThreadList:(unsigned long long)arg2 ;
-(void)threadModelController:(id)arg1 didFailToDeleteThreadsInThreadList:(unsigned long long)arg2 error:(id)arg3 ;
-(void)threadModelController:(id)arg1 didDeleteMessagesFromThread:(id)arg2 ;
-(void)threadModelController:(id)arg1 willMuteThread:(id)arg2 withOption:(long long)arg3 ;
-(void)threadModelController:(id)arg1 didMuteThread:(id)arg2 ;
-(void)threadModelController:(id)arg1 didFailMuteThread:(id)arg2 error:(id)arg3 ;
-(void)threadModelController:(id)arg1 willLeaveGroupThread:(id)arg2 ;
-(void)threadModelController:(id)arg1 didLeaveGroupThread:(id)arg2 ;
-(void)threadModelController:(id)arg1 didFailLeaveGroupThreadWithFbId:(id)arg2 error:(id)arg3 ;
-(void)threadModelController:(id)arg1 willMarkThread:(id)arg2 action:(id)arg3 ;
-(void)threadModelController:(id)arg1 didMarkThread:(id)arg2 action:(id)arg3 ;
-(void)threadModelController:(id)arg1 didFailToMarkThread:(id)arg2 action:(id)arg3 error:(id)arg4 ;
-(void)threadActionHandler:(id)arg1 willDeleteThreadSummary:(id)arg2 ;
-(void)threadActionHandler:(id)arg1 didFinishDeleteThreadSummary:(id)arg2 ;
-(void)threadActionHandler:(id)arg1 didFailToDeleteThreadSummary:(id)arg2 error:(id)arg3 ;
-(void)didReceiveMessage:(id)arg1 ;
-(id)initWithMessageSenderAnnouncer:(id)arg1 threadSummaryUpdateListeningAnnouncer:(id)arg2 pendingThreadQueueSender:(id)arg3 notificationCenter:(id)arg4 spErrorRetryManager:(id)arg5 threadActionHandler:(id)arg6 analytics:(id)arg7 ;
-(void)configureWithThreadModelController:(id)arg1 ;
-(void)mqttReadStateDidChangeToUnreadThreads:(id)arg1 ;
-(void)mqttReadStateDidChangeToReadThreads:(id)arg1 ;
-(void)mqttDidReceiveThreadDeleteEvent:(id)arg1 ;
-(void)didAddMessage:(id)arg1 toQueueForPendingThreadWithOfflineID:(id)arg2 ;
-(void)didCancelCreatingThreadWithOfflineID:(id)arg1 ;
-(void)willCreateThreadWithOfflineID:(id)arg1 withMessage:(id)arg2 ;
-(void)didCreateThread:(id)arg1 withMessage:(id)arg2 forPendingThreadWithOfflineID:(id)arg3 ;
-(void)didFailToCreateThreadWithOfflineID:(id)arg1 withMessage:(id)arg2 error:(id)arg3 ;
-(void)dealloc;
-(void)removeListener:(id)arg1 ;
-(void)addListener:(id)arg1 ;
@end

