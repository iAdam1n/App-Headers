/*
* This header is generated by classdump-dyld 0.7
* on Friday, August 21, 2015 at 11:40:33 AM British Summer Time
* Operating System: Version 8.4 (Build 12H143)
* Image Source: /private/var/mobile/Containers/Bundle/Application/E282ADAB-AF96-4184-9890-B5E58B4BDDD0/Messenger.app/Messenger
* classdump-dyld is licensed under GPLv3, Copyright Â© 2013-2014 by Elias Limneos.
*/

#import <Messenger/Messenger-Structs.h>
#import <Messenger/GCDAsyncSocketDelegate.h>
#import <Messenger/FBVideoDownloaderDelegate.h>
#import <Messenger/FBPlaylistDownloaderDelegate.h>
#import <Messenger/FBInvalidating.h>
#import <Messenger/AVAssetResourceLoaderDelegate.h>

@protocol OS_dispatch_queue, FBBlockDataCache, FBNetworkDispatch;
@class GCDAsyncSocket, NSObject, NSMutableDictionary, NSMutableSet, FBLayeredCache, FBClientProxyURLGenerator, FBCache, FBExperimentManager, FBVideoInitializationTrackerContainer, FBClientProxyDataAnalytics, FBVideoPrefetchManager, FBClientProxyLogger, NSString;

@interface FBClientProxy : NSObject <GCDAsyncSocketDelegate, FBVideoDownloaderDelegate, FBPlaylistDownloaderDelegate, FBInvalidating, AVAssetResourceLoaderDelegate> {

	BOOL _enableCDNCacheStatusQuery;
	GCDAsyncSocket* _listenSocket;
	unsigned long long _listenPort;
	NSObject*<OS_dispatch_queue> _delegateQueue;
	NSMutableDictionary* _downloaderForDataKey;
	NSMutableDictionary* _downloaderForRequest;
	NSMutableDictionary* _listeners;
	NSMutableDictionary* _listenersForResourceLoaderConnections;
	NSMutableSet* _sockets;
	NSMutableDictionary* _playlistForURL;
	NSMutableDictionary* _playlistForSocket;
	id<FBBlockDataCache> _blockDataCache;
	FBLayeredCache* _playlistCache;
	long long _listenOnce;
	FBClientProxyURLGenerator* _proxyURLGenerator;
	BOOL _invalidated;
	FBCache* _requestPriorityMemorization;
	BOOL _useResourceLoader;
	BOOL _shouldCancelDownloadsDirectly;
	BOOL _shouldCancelLoadingOfAssets;
	BOOL _hlsThrottling;
	FBExperimentManager* _experimentManager;
	FBVideoInitializationTrackerContainer* _videoInitializationTrackerContainer;
	unsigned long long _maximumProxiedHLSSegments;
	FBClientProxyDataAnalytics* _dataAnalytics;
	FBVideoPrefetchManager* _prefetchManager;
	id<FBNetworkDispatch> _networkDispatcher;
	FBClientProxyLogger* _logger;

}

@property (nonatomic,readonly) FBClientProxyDataAnalytics * dataAnalytics;              //@synthesize dataAnalytics=_dataAnalytics - In the implementation block
@property (nonatomic,readonly) FBVideoPrefetchManager * prefetchManager;                //@synthesize prefetchManager=_prefetchManager - In the implementation block
@property (nonatomic,readonly) id<FBNetworkDispatch> networkDispatcher;                 //@synthesize networkDispatcher=_networkDispatcher - In the implementation block
@property (nonatomic,readonly) FBClientProxyLogger * logger;                            //@synthesize logger=_logger - In the implementation block
@property (readonly) unsigned long long hash; 
@property (readonly) Class superclass; 
@property (copy,readonly) NSString * description; 
@property (copy,readonly) NSString * debugDescription; 
@property (getter=isValid,nonatomic,readonly) BOOL valid; 
-(id<FBNetworkDispatch>)networkDispatcher;
-(void)_applicationDidFinishEnteringForegroundAndIsNowIdle:(id)arg1 ;
-(void)socket:(id)arg1 didAcceptNewSocket:(id)arg2 ;
-(void)socketDidDisconnect:(id)arg1 withError:(id)arg2 ;
-(void)socket:(id)arg1 didReadData:(id)arg2 withTag:(long long)arg3 ;
-(FBClientProxyDataAnalytics *)dataAnalytics;
-(id)initWithSession:(id)arg1 blockDataCache:(id)arg2 playlistCache:(id)arg3 logger:(id)arg4 ;
-(void)_listen;
-(void)_prepareForVideoDownloadWithUrl:(id)arg1 proxyURL:(id)arg2 throttlingDelegate:(id)arg3 definition:(long long)arg4 playRequested:(BOOL)arg5 ;
-(id)_extractDownloaderFromUrl:(id)arg1 ;
-(id)_CRLFCRLFData;
-(void)_handleAVPlayerRequest:(id)arg1 ;
-(void)_handleCloseRequest:(id)arg1 shouldLog:(BOOL)arg2 error:(id)arg3 ;
-(void)_cachePlaylistData:(id)arg1 forURL:(id)arg2 ;
-(unsigned long long)_randomPortNumber;
-(id)_buildDownloaderWithDataKey:(id)arg1 url:(id)arg2 prefetchURL:(id)arg3 videoID:(id)arg4 scenePath:(id)arg5 priority:(long long)arg6 definition:(long long)arg7 ;
-(void)videoDownloaderDidRedirect:(id)arg1 ;
-(void)videoDownloader:(id)arg1 didReceiveData:(id)arg2 isPrefetching:(BOOL)arg3 isFetchingFirstChunk:(BOOL)arg4 ;
-(void)videoDownloaderDidFinish:(id)arg1 error:(id)arg2 ;
-(void)playlistDownloader:(id)arg1 didReceiveData:(id)arg2 ;
-(void)playlistDownloader:(id)arg1 didFinishWithPlaylist:(id)arg2 cacheAllowed:(BOOL)arg3 ;
-(void)playlistDownloader:(id)arg1 didFailWithError:(id)arg2 respondFallback:(BOOL)arg3 ;
-(void)setScenePath:(id)arg1 andPriority:(long long)arg2 forVideoID:(id)arg3 ;
-(void)clearScenePathAndPriorityforVideoID:(id)arg1 ;
-(BOOL)hasDownloaderForDataKey:(id)arg1 ;
-(BOOL)hasNonPrefetchDataForDataKey:(id)arg1 url:(id)arg2 videoID:(id)arg3 definition:(long long)arg4 length:(unsigned long long)arg5 ;
-(BOOL)hasInitialDataForVideoID:(id)arg1 videoURL:(id)arg2 definition:(long long)arg3 ;
-(id)requestPriorityAttributesForVideoId:(id)arg1 ;
-(id)proxyURLforURL:(id)arg1 videoID:(id)arg2 trackerID:(id)arg3 definition:(long long)arg4 videoType:(long long)arg5 ;
-(id)prepareDownloaderAndGetProxyURLforURL:(id)arg1 videoID:(id)arg2 trackerID:(id)arg3 definition:(long long)arg4 videoType:(long long)arg5 throttlingDelegate:(id)arg6 playRequested:(BOOL)arg7 ;
-(void)prepareDownloaderWithProxyURL:(id)arg1 throttlingDelegate:(id)arg2 ;
-(void)clearAllVideosCache:(/*^block*/id)arg1 ;
-(id)getDispatchQueue;
-(unsigned long long)currentDownloadCount;
-(void)throttleTrafficIfDownloading:(id)arg1 throttler:(id)arg2 ;
-(void)cancelNetworkIfDownloading:(id)arg1 ;
-(BOOL)supportsAssetCanceling;
-(id)videoInitializationTrackerWithVideoID:(id)arg1 ;
-(void)removeVideoInitializationTracker:(id)arg1 ;
-(void)cachePlaylist:(id)arg1 forURL:(id)arg2 ;
-(FBVideoPrefetchManager *)prefetchManager;
-(void)dealloc;
-(id)init;
-(void)invalidate;
-(BOOL)isValid;
-(void)listen;
-(FBClientProxyLogger *)logger;
-(BOOL)resourceLoader:(id)arg1 shouldWaitForLoadingOfRequestedResource:(id)arg2 ;
-(void)resourceLoader:(id)arg1 didCancelLoadingRequest:(id)arg2 ;
-(BOOL)resourceLoader:(id)arg1 shouldWaitForResponseToAuthenticationChallenge:(id)arg2 ;
-(void)resourceLoader:(id)arg1 didCancelAuthenticationChallenge:(id)arg2 ;
@end

