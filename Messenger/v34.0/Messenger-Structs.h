/*
* This header is generated by classdump-dyld 0.7
* on Friday, August 21, 2015 at 11:41:03 AM British Summer Time
* Operating System: Version 8.4 (Build 12H143)
* Image Source: /private/var/mobile/Containers/Bundle/Application/E282ADAB-AF96-4184-9890-B5E58B4BDDD0/Messenger.app/Messenger
* classdump-dyld is licensed under GPLv3, Copyright Â© 2013-2014 by Elias Limneos.
*/


@class NSString, UIColor, UIImage, CKComponent, NSDictionary, CKComponentScopeRoot, <NSObject>, UIFont, FBImageDownloader, NSAttributedString, NSArray, FBHScrollOffsetStore, FBDisplayableMediaViewProviderContext, FBVideoExportConfig, AVAssetReader, AVAssetTrack, AVAssetReaderOutput, AVAssetWriterInput, AVAssetWriter, NSURL, FBWebViewResponse, NSError, <MNServiceControllable>;

typedef struct _NSZone* NSZoneRef;

typedef struct {
	unsigned long long field1;
	id field2;
	unsigned long long field3;
	unsigned long long field4[5];
} SCD_Struct_JK1;

typedef struct __asl_object_s* asl_object_sRef;

typedef struct shared_ptr<const std::__1::vector<__weak id, std::__1::allocator<__weak id> > > {
	vector<__weak id, std::__1::allocator<__weak id> > __ptr_;
	__shared_weak_count __cntrl_;
} shared_ptr<const std::__1::vector<__weak id, std::__1::allocator<__weak id> > >;

typedef struct opaque_pthread_mutex_t {
	long long __sig;
	char __opaque[56];
} opaque_pthread_mutex_t;

typedef struct Mutex {
	opaque_pthread_mutex_t _m;
} Mutex;

typedef struct atomic<bool> {
	AB __a_;
} atomic<bool>;

typedef struct objc_method* objc_methodRef;

typedef struct FBDoubleLinkedList {
	FBDoubleLinkedList flink;
	FBDoubleLinkedList blink;
} FBDoubleLinkedList;

typedef struct FBTraceEvent* FBTraceEventRef;

typedef struct __CFRunLoopObserver* CFRunLoopObserverRef;

typedef struct {
	double field1;
	double field2;
} SCD_Struct_FB11;

typedef struct {
	unsigned long long field1;
	unsigned long long field2;
} SCD_Struct_FB12;

typedef struct __CFRunLoopSource* CFRunLoopSourceRef;

typedef struct FBErrorMetadataConfig {
	char* preamble;
	unsigned long long preambleLen;
	char* errorParams;
	unsigned long long errorParamsLen;
	char* userAgent;
	unsigned long long userAgentLen;
} FBErrorMetadataConfig;

typedef struct __SCNetworkReachability* SCNetworkReachabilityRef;

typedef struct __CFRunLoop* CFRunLoopRef;

typedef struct mutex {
	opaque_pthread_mutex_t __m_;
} mutex;

typedef struct shared_ptr<bool> {
	BOOL __ptr_;
	__shared_weak_count __cntrl_;
} shared_ptr<bool>;

typedef struct atomic<double> {
	Ad __a_;
} atomic<double>;

typedef struct _compressed_pair<FBAnalyticsModuleStackItem *, std::__1::allocator<FBAnalyticsModuleStackItem> > {
	FBAnalyticsModuleStackItem __first_;
} compressed_pair<FBAnalyticsModuleStackItem *, std::__1::allocator<FBAnalyticsModuleStackItem> >;

typedef struct vector<FBAnalyticsModuleStackItem, std::__1::allocator<FBAnalyticsModuleStackItem> > {
	FBAnalyticsModuleStackItem __begin_;
	FBAnalyticsModuleStackItem __end_;
	compressed_pair<FBAnalyticsModuleStackItem *, std::__1::allocator<FBAnalyticsModuleStackItem> > __end_cap_;
} vector<FBAnalyticsModuleStackItem, std::__1::allocator<FBAnalyticsModuleStackItem> >;

typedef struct FBAnalyticsModuleStack {
	vector<FBAnalyticsModuleStackItem, std::__1::allocator<FBAnalyticsModuleStackItem> > items;
} FBAnalyticsModuleStack;

typedef struct _compressed_pair<unsigned long, std::__1::allocator<std::__1::__hash_node<std::__1::__hash_value_type<FBMobileTraceSite, unsigned long long>, void *> *> > {
	unsigned long long __first_;
} compressed_pair<unsigned long, std::__1::allocator<std::__1::__hash_node<std::__1::__hash_value_type<FBMobileTraceSite, unsigned long long>, void *> *> >;

typedef struct _compressed_pair<unsigned long, std::__1::__unordered_map_hasher<FBMobileTraceSite, std::__1::__hash_value_type<FBMobileTraceSite, unsigned long long>, FB::HashFunctor<FBMobileTraceSite>, true> > {
	unsigned long long __first_;
} compressed_pair<unsigned long, std::__1::__unordered_map_hasher<FBMobileTraceSite, std::__1::__hash_value_type<FBMobileTraceSite, unsigned long long>, FB::HashFunctor<FBMobileTraceSite>, true> >;

typedef struct _compressed_pair<float, std::__1::__unordered_map_equal<FBMobileTraceSite, std::__1::__hash_value_type<FBMobileTraceSite, unsigned long long>, FB::EqualFunctor<FBMobileTraceSite>, true> > {
	float __first_;
} compressed_pair<float, std::__1::__unordered_map_equal<FBMobileTraceSite, std::__1::__hash_value_type<FBMobileTraceSite, unsigned long long>, FB::EqualFunctor<FBMobileTraceSite>, true> >;

typedef struct _hash_node_base<std::__1::__hash_node<std::__1::__hash_value_type<FBMobileTraceSite, unsigned long long>, void *> *> {
	__hash_node<std::__1::__hash_value_type<FBMobileTraceSite, unsigned long long>, void *> __next_;
} hash_node_base<std::__1::__hash_node<std::__1::__hash_value_type<FBMobileTraceSite, unsigned long long>, void *> *>;

typedef struct _compressed_pair<std::__1::__hash_node_base<std::__1::__hash_node<std::__1::__hash_value_type<FBMobileTraceSite, unsigned long long>, void *> *>, std::__1::allocator<std::__1::__hash_node<std::__1::__hash_value_type<FBMobileTraceSite, unsigned long long>, void *> > > {
	hash_node_base<std::__1::__hash_node<std::__1::__hash_value_type<FBMobileTraceSite, unsigned long long>, void *> *> __first_;
} compressed_pair<std::__1::__hash_node_base<std::__1::__hash_node<std::__1::__hash_value_type<FBMobileTraceSite, unsigned long long>, void *> *>, std::__1::allocator<std::__1::__hash_node<std::__1::__hash_value_type<FBMobileTraceSite, unsigned long long>, void *> > >;

typedef struct _bucket_list_deallocator<std::__1::allocator<std::__1::__hash_node<std::__1::__hash_value_type<FBMobileTraceSite, unsigned long long>, void *> *> > {
	compressed_pair<unsigned long, std::__1::allocator<std::__1::__hash_node<std::__1::__hash_value_type<FBMobileTraceSite, unsigned long long>, void *> *> > __data_;
} bucket_list_deallocator<std::__1::allocator<std::__1::__hash_node<std::__1::__hash_value_type<FBMobileTraceSite, unsigned long long>, void *> *> >;

typedef struct _compressed_pair<std::__1::__hash_node<std::__1::__hash_value_type<FBMobileTraceSite, unsigned long long>, void *> **, std::__1::__bucket_list_deallocator<std::__1::allocator<std::__1::__hash_node<std::__1::__hash_value_type<FBMobileTraceSite, unsigned long long>, void *> *> > > {
	__hash_node<std::__1::__hash_value_type<FBMobileTraceSite, unsigned long long>, void *> __first_;
	bucket_list_deallocator<std::__1::allocator<std::__1::__hash_node<std::__1::__hash_value_type<FBMobileTraceSite, unsigned long long>, void *> *> > __second_;
} compressed_pair<std::__1::__hash_node<std::__1::__hash_value_type<FBMobileTraceSite, unsigned long long>, void *> **, std::__1::__bucket_list_deallocator<std::__1::allocator<std::__1::__hash_node<std::__1::__hash_value_type<FBMobileTraceSite, unsigned long long>, void *> *> > >;

typedef struct unique_ptr<std::__1::__hash_node<std::__1::__hash_value_type<FBMobileTraceSite, unsigned long long>, void *> *[], std::__1::__bucket_list_deallocator<std::__1::allocator<std::__1::__hash_node<std::__1::__hash_value_type<FBMobileTraceSite, unsigned long long>, void *> *> > > {
	compressed_pair<std::__1::__hash_node<std::__1::__hash_value_type<FBMobileTraceSite, unsigned long long>, void *> **, std::__1::__bucket_list_deallocator<std::__1::allocator<std::__1::__hash_node<std::__1::__hash_value_type<FBMobileTraceSite, unsigned long long>, void *> *> > > __ptr_;
} unique_ptr<std::__1::__hash_node<std::__1::__hash_value_type<FBMobileTraceSite, unsigned long long>, void *> *[], std::__1::__bucket_list_deallocator<std::__1::allocator<std::__1::__hash_node<std::__1::__hash_value_type<FBMobileTraceSite, unsigned long long>, void *> *> > >;

typedef struct _hash_table<std::__1::__hash_value_type<FBMobileTraceSite, unsigned long long>, std::__1::__unordered_map_hasher<FBMobileTraceSite, std::__1::__hash_value_type<FBMobileTraceSite, unsigned long long>, FB::HashFunctor<FBMobileTraceSite>, true>, std::__1::__unordered_map_equal<FBMobileTraceSite, std::__1::__hash_value_type<FBMobileTraceSite, unsigned long long>, FB::EqualFunctor<FBMobileTraceSite>, true>, std::__1::allocator<std::__1::__hash_value_type<FBMobileTraceSite, unsigned long long> > > {
	unique_ptr<std::__1::__hash_node<std::__1::__hash_value_type<FBMobileTraceSite, unsigned long long>, void *> *[], std::__1::__bucket_list_deallocator<std::__1::allocator<std::__1::__hash_node<std::__1::__hash_value_type<FBMobileTraceSite, unsigned long long>, void *> *> > > __bucket_list_;
	compressed_pair<std::__1::__hash_node_base<std::__1::__hash_node<std::__1::__hash_value_type<FBMobileTraceSite, unsigned long long>, void *> *>, std::__1::allocator<std::__1::__hash_node<std::__1::__hash_value_type<FBMobileTraceSite, unsigned long long>, void *> > > __p1_;
	compressed_pair<unsigned long, std::__1::__unordered_map_hasher<FBMobileTraceSite, std::__1::__hash_value_type<FBMobileTraceSite, unsigned long long>, FB::HashFunctor<FBMobileTraceSite>, true> > __p2_;
	compressed_pair<float, std::__1::__unordered_map_equal<FBMobileTraceSite, std::__1::__hash_value_type<FBMobileTraceSite, unsigned long long>, FB::EqualFunctor<FBMobileTraceSite>, true> > __p3_;
} hash_table<std::__1::__hash_value_type<FBMobileTraceSite, unsigned long long>, std::__1::__unordered_map_hasher<FBMobileTraceSite, std::__1::__hash_value_type<FBMobileTraceSite, unsigned long long>, FB::HashFunctor<FBMobileTraceSite>, true>, std::__1::__unordered_map_equal<FBMobileTraceSite, std::__1::__hash_value_type<FBMobileTraceSite, unsigned long long>, FB::EqualFunctor<FBMobileTraceSite>, true>, std::__1::allocator<std::__1::__hash_value_type<FBMobileTraceSite, unsigned long long> > >;

typedef struct unordered_map<FBMobileTraceSite, unsigned long long, FB::HashFunctor<FBMobileTraceSite>, FB::EqualFunctor<FBMobileTraceSite>, std::__1::allocator<std::__1::pair<const FBMobileTraceSite, unsigned long long> > > {
	hash_table<std::__1::__hash_value_type<FBMobileTraceSite, unsigned long long>, std::__1::__unordered_map_hasher<FBMobileTraceSite, std::__1::__hash_value_type<FBMobileTraceSite, unsigned long long>, FB::HashFunctor<FBMobileTraceSite>, true>, std::__1::__unordered_map_equal<FBMobileTraceSite, std::__1::__hash_value_type<FBMobileTraceSite, unsigned long long>, FB::EqualFunctor<FBMobileTraceSite>, true>, std::__1::allocator<std::__1::__hash_value_type<FBMobileTraceSite, unsigned long long> > > __table_;
} unordered_map<FBMobileTraceSite, unsigned long long, FB::HashFunctor<FBMobileTraceSite>, FB::EqualFunctor<FBMobileTraceSite>, std::__1::allocator<std::__1::pair<const FBMobileTraceSite, unsigned long long> > >;

typedef struct _compressed_pair<unsigned long, std::__1::allocator<std::__1::__hash_node<std::__1::__hash_value_type<FBMobileTraceSite, unsigned int>, void *> *> > {
	unsigned long long __first_;
} compressed_pair<unsigned long, std::__1::allocator<std::__1::__hash_node<std::__1::__hash_value_type<FBMobileTraceSite, unsigned int>, void *> *> >;

typedef struct _compressed_pair<unsigned long, std::__1::__unordered_map_hasher<FBMobileTraceSite, std::__1::__hash_value_type<FBMobileTraceSite, unsigned int>, FB::HashFunctor<FBMobileTraceSite>, true> > {
	unsigned long long __first_;
} compressed_pair<unsigned long, std::__1::__unordered_map_hasher<FBMobileTraceSite, std::__1::__hash_value_type<FBMobileTraceSite, unsigned int>, FB::HashFunctor<FBMobileTraceSite>, true> >;

typedef struct _compressed_pair<float, std::__1::__unordered_map_equal<FBMobileTraceSite, std::__1::__hash_value_type<FBMobileTraceSite, unsigned int>, FB::EqualFunctor<FBMobileTraceSite>, true> > {
	float __first_;
} compressed_pair<float, std::__1::__unordered_map_equal<FBMobileTraceSite, std::__1::__hash_value_type<FBMobileTraceSite, unsigned int>, FB::EqualFunctor<FBMobileTraceSite>, true> >;

typedef struct _hash_node_base<std::__1::__hash_node<std::__1::__hash_value_type<FBMobileTraceSite, unsigned int>, void *> *> {
	__hash_node<std::__1::__hash_value_type<FBMobileTraceSite, unsigned int>, void *> __next_;
} hash_node_base<std::__1::__hash_node<std::__1::__hash_value_type<FBMobileTraceSite, unsigned int>, void *> *>;

typedef struct _compressed_pair<std::__1::__hash_node_base<std::__1::__hash_node<std::__1::__hash_value_type<FBMobileTraceSite, unsigned int>, void *> *>, std::__1::allocator<std::__1::__hash_node<std::__1::__hash_value_type<FBMobileTraceSite, unsigned int>, void *> > > {
	hash_node_base<std::__1::__hash_node<std::__1::__hash_value_type<FBMobileTraceSite, unsigned int>, void *> *> __first_;
} compressed_pair<std::__1::__hash_node_base<std::__1::__hash_node<std::__1::__hash_value_type<FBMobileTraceSite, unsigned int>, void *> *>, std::__1::allocator<std::__1::__hash_node<std::__1::__hash_value_type<FBMobileTraceSite, unsigned int>, void *> > >;

typedef struct _bucket_list_deallocator<std::__1::allocator<std::__1::__hash_node<std::__1::__hash_value_type<FBMobileTraceSite, unsigned int>, void *> *> > {
	compressed_pair<unsigned long, std::__1::allocator<std::__1::__hash_node<std::__1::__hash_value_type<FBMobileTraceSite, unsigned int>, void *> *> > __data_;
} bucket_list_deallocator<std::__1::allocator<std::__1::__hash_node<std::__1::__hash_value_type<FBMobileTraceSite, unsigned int>, void *> *> >;

typedef struct _compressed_pair<std::__1::__hash_node<std::__1::__hash_value_type<FBMobileTraceSite, unsigned int>, void *> **, std::__1::__bucket_list_deallocator<std::__1::allocator<std::__1::__hash_node<std::__1::__hash_value_type<FBMobileTraceSite, unsigned int>, void *> *> > > {
	__hash_node<std::__1::__hash_value_type<FBMobileTraceSite, unsigned int>, void *> __first_;
	bucket_list_deallocator<std::__1::allocator<std::__1::__hash_node<std::__1::__hash_value_type<FBMobileTraceSite, unsigned int>, void *> *> > __second_;
} compressed_pair<std::__1::__hash_node<std::__1::__hash_value_type<FBMobileTraceSite, unsigned int>, void *> **, std::__1::__bucket_list_deallocator<std::__1::allocator<std::__1::__hash_node<std::__1::__hash_value_type<FBMobileTraceSite, unsigned int>, void *> *> > >;

typedef struct unique_ptr<std::__1::__hash_node<std::__1::__hash_value_type<FBMobileTraceSite, unsigned int>, void *> *[], std::__1::__bucket_list_deallocator<std::__1::allocator<std::__1::__hash_node<std::__1::__hash_value_type<FBMobileTraceSite, unsigned int>, void *> *> > > {
	compressed_pair<std::__1::__hash_node<std::__1::__hash_value_type<FBMobileTraceSite, unsigned int>, void *> **, std::__1::__bucket_list_deallocator<std::__1::allocator<std::__1::__hash_node<std::__1::__hash_value_type<FBMobileTraceSite, unsigned int>, void *> *> > > __ptr_;
} unique_ptr<std::__1::__hash_node<std::__1::__hash_value_type<FBMobileTraceSite, unsigned int>, void *> *[], std::__1::__bucket_list_deallocator<std::__1::allocator<std::__1::__hash_node<std::__1::__hash_value_type<FBMobileTraceSite, unsigned int>, void *> *> > >;

typedef struct _hash_table<std::__1::__hash_value_type<FBMobileTraceSite, unsigned int>, std::__1::__unordered_map_hasher<FBMobileTraceSite, std::__1::__hash_value_type<FBMobileTraceSite, unsigned int>, FB::HashFunctor<FBMobileTraceSite>, true>, std::__1::__unordered_map_equal<FBMobileTraceSite, std::__1::__hash_value_type<FBMobileTraceSite, unsigned int>, FB::EqualFunctor<FBMobileTraceSite>, true>, std::__1::allocator<std::__1::__hash_value_type<FBMobileTraceSite, unsigned int> > > {
	unique_ptr<std::__1::__hash_node<std::__1::__hash_value_type<FBMobileTraceSite, unsigned int>, void *> *[], std::__1::__bucket_list_deallocator<std::__1::allocator<std::__1::__hash_node<std::__1::__hash_value_type<FBMobileTraceSite, unsigned int>, void *> *> > > __bucket_list_;
	compressed_pair<std::__1::__hash_node_base<std::__1::__hash_node<std::__1::__hash_value_type<FBMobileTraceSite, unsigned int>, void *> *>, std::__1::allocator<std::__1::__hash_node<std::__1::__hash_value_type<FBMobileTraceSite, unsigned int>, void *> > > __p1_;
	compressed_pair<unsigned long, std::__1::__unordered_map_hasher<FBMobileTraceSite, std::__1::__hash_value_type<FBMobileTraceSite, unsigned int>, FB::HashFunctor<FBMobileTraceSite>, true> > __p2_;
	compressed_pair<float, std::__1::__unordered_map_equal<FBMobileTraceSite, std::__1::__hash_value_type<FBMobileTraceSite, unsigned int>, FB::EqualFunctor<FBMobileTraceSite>, true> > __p3_;
} hash_table<std::__1::__hash_value_type<FBMobileTraceSite, unsigned int>, std::__1::__unordered_map_hasher<FBMobileTraceSite, std::__1::__hash_value_type<FBMobileTraceSite, unsigned int>, FB::HashFunctor<FBMobileTraceSite>, true>, std::__1::__unordered_map_equal<FBMobileTraceSite, std::__1::__hash_value_type<FBMobileTraceSite, unsigned int>, FB::EqualFunctor<FBMobileTraceSite>, true>, std::__1::allocator<std::__1::__hash_value_type<FBMobileTraceSite, unsigned int> > >;

typedef struct unordered_map<FBMobileTraceSite, unsigned int, FB::HashFunctor<FBMobileTraceSite>, FB::EqualFunctor<FBMobileTraceSite>, std::__1::allocator<std::__1::pair<const FBMobileTraceSite, unsigned int> > > {
	hash_table<std::__1::__hash_value_type<FBMobileTraceSite, unsigned int>, std::__1::__unordered_map_hasher<FBMobileTraceSite, std::__1::__hash_value_type<FBMobileTraceSite, unsigned int>, FB::HashFunctor<FBMobileTraceSite>, true>, std::__1::__unordered_map_equal<FBMobileTraceSite, std::__1::__hash_value_type<FBMobileTraceSite, unsigned int>, FB::EqualFunctor<FBMobileTraceSite>, true>, std::__1::allocator<std::__1::__hash_value_type<FBMobileTraceSite, unsigned int> > > __table_;
} unordered_map<FBMobileTraceSite, unsigned int, FB::HashFunctor<FBMobileTraceSite>, FB::EqualFunctor<FBMobileTraceSite>, std::__1::allocator<std::__1::pair<const FBMobileTraceSite, unsigned int> > >;

typedef struct shared_ptr<facebook::mobile::xplat::session::Invalidatable> {
	Invalidatable __ptr_;
	__shared_weak_count __cntrl_;
} shared_ptr<facebook::mobile::xplat::session::Invalidatable>;

typedef struct RecursiveMutex {
	opaque_pthread_mutex_t _m;
} RecursiveMutex;

typedef struct _compressed_pair<unsigned long, std::__1::allocator<std::__1::__hash_node<std::__1::__hash_value_type<NSString *, std::__1::shared_future<Value> >, void *> *> > {
	unsigned long long __first_;
} compressed_pair<unsigned long, std::__1::allocator<std::__1::__hash_node<std::__1::__hash_value_type<NSString *, std::__1::shared_future<Value> >, void *> *> >;

typedef struct _compressed_pair<unsigned long, std::__1::__unordered_map_hasher<NSString *, std::__1::__hash_value_type<NSString *, std::__1::shared_future<Value> >, FB::HashFunctor<NSObject *>, true> > {
	unsigned long long __first_;
} compressed_pair<unsigned long, std::__1::__unordered_map_hasher<NSString *, std::__1::__hash_value_type<NSString *, std::__1::shared_future<Value> >, FB::HashFunctor<NSObject *>, true> >;

typedef struct _compressed_pair<float, std::__1::__unordered_map_equal<NSString *, std::__1::__hash_value_type<NSString *, std::__1::shared_future<Value> >, FB::EqualFunctor<NSObject *>, true> > {
	float __first_;
} compressed_pair<float, std::__1::__unordered_map_equal<NSString *, std::__1::__hash_value_type<NSString *, std::__1::shared_future<Value> >, FB::EqualFunctor<NSObject *>, true> >;

typedef struct _hash_node_base<std::__1::__hash_node<std::__1::__hash_value_type<NSString *, std::__1::shared_future<Value> >, void *> *> {
	__hash_node<std::__1::__hash_value_type<NSString *, std::__1::shared_future<Value> >, void *> __next_;
} hash_node_base<std::__1::__hash_node<std::__1::__hash_value_type<NSString *, std::__1::shared_future<Value> >, void *> *>;

typedef struct _compressed_pair<std::__1::__hash_node_base<std::__1::__hash_node<std::__1::__hash_value_type<NSString *, std::__1::shared_future<Value> >, void *> *>, std::__1::allocator<std::__1::__hash_node<std::__1::__hash_value_type<NSString *, std::__1::shared_future<Value> >, void *> > > {
	hash_node_base<std::__1::__hash_node<std::__1::__hash_value_type<NSString *, std::__1::shared_future<Value> >, void *> *> __first_;
} compressed_pair<std::__1::__hash_node_base<std::__1::__hash_node<std::__1::__hash_value_type<NSString *, std::__1::shared_future<Value> >, void *> *>, std::__1::allocator<std::__1::__hash_node<std::__1::__hash_value_type<NSString *, std::__1::shared_future<Value> >, void *> > >;

typedef struct _bucket_list_deallocator<std::__1::allocator<std::__1::__hash_node<std::__1::__hash_value_type<NSString *, std::__1::shared_future<Value> >, void *> *> > {
	compressed_pair<unsigned long, std::__1::allocator<std::__1::__hash_node<std::__1::__hash_value_type<NSString *, std::__1::shared_future<Value> >, void *> *> > __data_;
} bucket_list_deallocator<std::__1::allocator<std::__1::__hash_node<std::__1::__hash_value_type<NSString *, std::__1::shared_future<Value> >, void *> *> >;

typedef struct _compressed_pair<std::__1::__hash_node<std::__1::__hash_value_type<NSString *, std::__1::shared_future<Value> >, void *> **, std::__1::__bucket_list_deallocator<std::__1::allocator<std::__1::__hash_node<std::__1::__hash_value_type<NSString *, std::__1::shared_future<Value> >, void *> *> > > {
	__hash_node<std::__1::__hash_value_type<NSString *, std::__1::shared_future<Value> >, void *> __first_;
	bucket_list_deallocator<std::__1::allocator<std::__1::__hash_node<std::__1::__hash_value_type<NSString *, std::__1::shared_future<Value> >, void *> *> > __second_;
} compressed_pair<std::__1::__hash_node<std::__1::__hash_value_type<NSString *, std::__1::shared_future<Value> >, void *> **, std::__1::__bucket_list_deallocator<std::__1::allocator<std::__1::__hash_node<std::__1::__hash_value_type<NSString *, std::__1::shared_future<Value> >, void *> *> > >;

typedef struct unique_ptr<std::__1::__hash_node<std::__1::__hash_value_type<NSString *, std::__1::shared_future<Value> >, void *> *[], std::__1::__bucket_list_deallocator<std::__1::allocator<std::__1::__hash_node<std::__1::__hash_value_type<NSString *, std::__1::shared_future<Value> >, void *> *> > > {
	compressed_pair<std::__1::__hash_node<std::__1::__hash_value_type<NSString *, std::__1::shared_future<Value> >, void *> **, std::__1::__bucket_list_deallocator<std::__1::allocator<std::__1::__hash_node<std::__1::__hash_value_type<NSString *, std::__1::shared_future<Value> >, void *> *> > > __ptr_;
} unique_ptr<std::__1::__hash_node<std::__1::__hash_value_type<NSString *, std::__1::shared_future<Value> >, void *> *[], std::__1::__bucket_list_deallocator<std::__1::allocator<std::__1::__hash_node<std::__1::__hash_value_type<NSString *, std::__1::shared_future<Value> >, void *> *> > >;

typedef struct _hash_table<std::__1::__hash_value_type<NSString *, std::__1::shared_future<Value> >, std::__1::__unordered_map_hasher<NSString *, std::__1::__hash_value_type<NSString *, std::__1::shared_future<Value> >, FB::HashFunctor<NSObject *>, true>, std::__1::__unordered_map_equal<NSString *, std::__1::__hash_value_type<NSString *, std::__1::shared_future<Value> >, FB::EqualFunctor<NSObject *>, true>, std::__1::allocator<std::__1::__hash_value_type<NSString *, std::__1::shared_future<Value> > > > {
	unique_ptr<std::__1::__hash_node<std::__1::__hash_value_type<NSString *, std::__1::shared_future<Value> >, void *> *[], std::__1::__bucket_list_deallocator<std::__1::allocator<std::__1::__hash_node<std::__1::__hash_value_type<NSString *, std::__1::shared_future<Value> >, void *> *> > > __bucket_list_;
	compressed_pair<std::__1::__hash_node_base<std::__1::__hash_node<std::__1::__hash_value_type<NSString *, std::__1::shared_future<Value> >, void *> *>, std::__1::allocator<std::__1::__hash_node<std::__1::__hash_value_type<NSString *, std::__1::shared_future<Value> >, void *> > > __p1_;
	compressed_pair<unsigned long, std::__1::__unordered_map_hasher<NSString *, std::__1::__hash_value_type<NSString *, std::__1::shared_future<Value> >, FB::HashFunctor<NSObject *>, true> > __p2_;
	compressed_pair<float, std::__1::__unordered_map_equal<NSString *, std::__1::__hash_value_type<NSString *, std::__1::shared_future<Value> >, FB::EqualFunctor<NSObject *>, true> > __p3_;
} hash_table<std::__1::__hash_value_type<NSString *, std::__1::shared_future<Value> >, std::__1::__unordered_map_hasher<NSString *, std::__1::__hash_value_type<NSString *, std::__1::shared_future<Value> >, FB::HashFunctor<NSObject *>, true>, std::__1::__unordered_map_equal<NSString *, std::__1::__hash_value_type<NSString *, std::__1::shared_future<Value> >, FB::EqualFunctor<NSObject *>, true>, std::__1::allocator<std::__1::__hash_value_type<NSString *, std::__1::shared_future<Value> > > >;

typedef struct unordered_map<NSString *, std::__1::shared_future<Value>, FB::HashFunctor<NSObject *>, FB::EqualFunctor<NSObject *>, std::__1::allocator<std::__1::pair<NSString *const, std::__1::shared_future<Value> > > > {
	hash_table<std::__1::__hash_value_type<NSString *, std::__1::shared_future<Value> >, std::__1::__unordered_map_hasher<NSString *, std::__1::__hash_value_type<NSString *, std::__1::shared_future<Value> >, FB::HashFunctor<NSObject *>, true>, std::__1::__unordered_map_equal<NSString *, std::__1::__hash_value_type<NSString *, std::__1::shared_future<Value> >, FB::EqualFunctor<NSObject *>, true>, std::__1::allocator<std::__1::__hash_value_type<NSString *, std::__1::shared_future<Value> > > > __table_;
} unordered_map<NSString *, std::__1::shared_future<Value>, FB::HashFunctor<NSObject *>, FB::EqualFunctor<NSObject *>, std::__1::allocator<std::__1::pair<NSString *const, std::__1::shared_future<Value> > > >;

typedef struct sqlite3* sqlite3Ref;

typedef struct sqlite3_stmt* sqlite3_stmtRef;

typedef struct shared_ptr<facebook::mobile::xplat::compactdisk::DiskCache> {
	DiskCache __ptr_;
	__shared_weak_count __cntrl_;
} shared_ptr<facebook::mobile::xplat::compactdisk::DiskCache>;

typedef struct shared_ptr<facebook::mobile::xplat::compactdisk::DiskSizeCalculator> {
	DiskSizeCalculator __ptr_;
	__shared_weak_count __cntrl_;
} shared_ptr<facebook::mobile::xplat::compactdisk::DiskSizeCalculator>;

typedef struct shared_ptr<facebook::mobile::xplat::compactdisk::Store> {
	Store __ptr_;
	__shared_weak_count __cntrl_;
} shared_ptr<facebook::mobile::xplat::compactdisk::Store>;

typedef struct shared_ptr<facebook::mobile::xplat::compactdisk::StoreManager> {
	StoreManager __ptr_;
	__shared_weak_count __cntrl_;
} shared_ptr<facebook::mobile::xplat::compactdisk::StoreManager>;

typedef struct _compressed_pair<unsigned long, std::__1::allocator<std::__1::__hash_node<std::__1::__hash_value_type<FBDiskStoreIdentifier, std::__1::shared_future<FBDiskStoreWrapper> >, void *> *> > {
	unsigned long long __first_;
} compressed_pair<unsigned long, std::__1::allocator<std::__1::__hash_node<std::__1::__hash_value_type<FBDiskStoreIdentifier, std::__1::shared_future<FBDiskStoreWrapper> >, void *> *> >;

typedef struct _compressed_pair<unsigned long, std::__1::__unordered_map_hasher<FBDiskStoreIdentifier, std::__1::__hash_value_type<FBDiskStoreIdentifier, std::__1::shared_future<FBDiskStoreWrapper> >, std::__1::hash<FBDiskStoreIdentifier>, true> > {
	unsigned long long __first_;
} compressed_pair<unsigned long, std::__1::__unordered_map_hasher<FBDiskStoreIdentifier, std::__1::__hash_value_type<FBDiskStoreIdentifier, std::__1::shared_future<FBDiskStoreWrapper> >, std::__1::hash<FBDiskStoreIdentifier>, true> >;

typedef struct _compressed_pair<float, std::__1::__unordered_map_equal<FBDiskStoreIdentifier, std::__1::__hash_value_type<FBDiskStoreIdentifier, std::__1::shared_future<FBDiskStoreWrapper> >, std::__1::equal_to<FBDiskStoreIdentifier>, true> > {
	float __first_;
} compressed_pair<float, std::__1::__unordered_map_equal<FBDiskStoreIdentifier, std::__1::__hash_value_type<FBDiskStoreIdentifier, std::__1::shared_future<FBDiskStoreWrapper> >, std::__1::equal_to<FBDiskStoreIdentifier>, true> >;

typedef struct _hash_node_base<std::__1::__hash_node<std::__1::__hash_value_type<FBDiskStoreIdentifier, std::__1::shared_future<FBDiskStoreWrapper> >, void *> *> {
	__hash_node<std::__1::__hash_value_type<FBDiskStoreIdentifier, std::__1::shared_future<FBDiskStoreWrapper> >, void *> __next_;
} hash_node_base<std::__1::__hash_node<std::__1::__hash_value_type<FBDiskStoreIdentifier, std::__1::shared_future<FBDiskStoreWrapper> >, void *> *>;

typedef struct _compressed_pair<std::__1::__hash_node_base<std::__1::__hash_node<std::__1::__hash_value_type<FBDiskStoreIdentifier, std::__1::shared_future<FBDiskStoreWrapper> >, void *> *>, std::__1::allocator<std::__1::__hash_node<std::__1::__hash_value_type<FBDiskStoreIdentifier, std::__1::shared_future<FBDiskStoreWrapper> >, void *> > > {
	hash_node_base<std::__1::__hash_node<std::__1::__hash_value_type<FBDiskStoreIdentifier, std::__1::shared_future<FBDiskStoreWrapper> >, void *> *> __first_;
} compressed_pair<std::__1::__hash_node_base<std::__1::__hash_node<std::__1::__hash_value_type<FBDiskStoreIdentifier, std::__1::shared_future<FBDiskStoreWrapper> >, void *> *>, std::__1::allocator<std::__1::__hash_node<std::__1::__hash_value_type<FBDiskStoreIdentifier, std::__1::shared_future<FBDiskStoreWrapper> >, void *> > >;

typedef struct _bucket_list_deallocator<std::__1::allocator<std::__1::__hash_node<std::__1::__hash_value_type<FBDiskStoreIdentifier, std::__1::shared_future<FBDiskStoreWrapper> >, void *> *> > {
	compressed_pair<unsigned long, std::__1::allocator<std::__1::__hash_node<std::__1::__hash_value_type<FBDiskStoreIdentifier, std::__1::shared_future<FBDiskStoreWrapper> >, void *> *> > __data_;
} bucket_list_deallocator<std::__1::allocator<std::__1::__hash_node<std::__1::__hash_value_type<FBDiskStoreIdentifier, std::__1::shared_future<FBDiskStoreWrapper> >, void *> *> >;

typedef struct _compressed_pair<std::__1::__hash_node<std::__1::__hash_value_type<FBDiskStoreIdentifier, std::__1::shared_future<FBDiskStoreWrapper> >, void *> **, std::__1::__bucket_list_deallocator<std::__1::allocator<std::__1::__hash_node<std::__1::__hash_value_type<FBDiskStoreIdentifier, std::__1::shared_future<FBDiskStoreWrapper> >, void *> *> > > {
	__hash_node<std::__1::__hash_value_type<FBDiskStoreIdentifier, std::__1::shared_future<FBDiskStoreWrapper> >, void *> __first_;
	bucket_list_deallocator<std::__1::allocator<std::__1::__hash_node<std::__1::__hash_value_type<FBDiskStoreIdentifier, std::__1::shared_future<FBDiskStoreWrapper> >, void *> *> > __second_;
} compressed_pair<std::__1::__hash_node<std::__1::__hash_value_type<FBDiskStoreIdentifier, std::__1::shared_future<FBDiskStoreWrapper> >, void *> **, std::__1::__bucket_list_deallocator<std::__1::allocator<std::__1::__hash_node<std::__1::__hash_value_type<FBDiskStoreIdentifier, std::__1::shared_future<FBDiskStoreWrapper> >, void *> *> > >;

typedef struct unique_ptr<std::__1::__hash_node<std::__1::__hash_value_type<FBDiskStoreIdentifier, std::__1::shared_future<FBDiskStoreWrapper> >, void *> *[], std::__1::__bucket_list_deallocator<std::__1::allocator<std::__1::__hash_node<std::__1::__hash_value_type<FBDiskStoreIdentifier, std::__1::shared_future<FBDiskStoreWrapper> >, void *> *> > > {
	compressed_pair<std::__1::__hash_node<std::__1::__hash_value_type<FBDiskStoreIdentifier, std::__1::shared_future<FBDiskStoreWrapper> >, void *> **, std::__1::__bucket_list_deallocator<std::__1::allocator<std::__1::__hash_node<std::__1::__hash_value_type<FBDiskStoreIdentifier, std::__1::shared_future<FBDiskStoreWrapper> >, void *> *> > > __ptr_;
} unique_ptr<std::__1::__hash_node<std::__1::__hash_value_type<FBDiskStoreIdentifier, std::__1::shared_future<FBDiskStoreWrapper> >, void *> *[], std::__1::__bucket_list_deallocator<std::__1::allocator<std::__1::__hash_node<std::__1::__hash_value_type<FBDiskStoreIdentifier, std::__1::shared_future<FBDiskStoreWrapper> >, void *> *> > >;

typedef struct _hash_table<std::__1::__hash_value_type<FBDiskStoreIdentifier, std::__1::shared_future<FBDiskStoreWrapper> >, std::__1::__unordered_map_hasher<FBDiskStoreIdentifier, std::__1::__hash_value_type<FBDiskStoreIdentifier, std::__1::shared_future<FBDiskStoreWrapper> >, std::__1::hash<FBDiskStoreIdentifier>, true>, std::__1::__unordered_map_equal<FBDiskStoreIdentifier, std::__1::__hash_value_type<FBDiskStoreIdentifier, std::__1::shared_future<FBDiskStoreWrapper> >, std::__1::equal_to<FBDiskStoreIdentifier>, true>, std::__1::allocator<std::__1::__hash_value_type<FBDiskStoreIdentifier, std::__1::shared_future<FBDiskStoreWrapper> > > > {
	unique_ptr<std::__1::__hash_node<std::__1::__hash_value_type<FBDiskStoreIdentifier, std::__1::shared_future<FBDiskStoreWrapper> >, void *> *[], std::__1::__bucket_list_deallocator<std::__1::allocator<std::__1::__hash_node<std::__1::__hash_value_type<FBDiskStoreIdentifier, std::__1::shared_future<FBDiskStoreWrapper> >, void *> *> > > __bucket_list_;
	compressed_pair<std::__1::__hash_node_base<std::__1::__hash_node<std::__1::__hash_value_type<FBDiskStoreIdentifier, std::__1::shared_future<FBDiskStoreWrapper> >, void *> *>, std::__1::allocator<std::__1::__hash_node<std::__1::__hash_value_type<FBDiskStoreIdentifier, std::__1::shared_future<FBDiskStoreWrapper> >, void *> > > __p1_;
	compressed_pair<unsigned long, std::__1::__unordered_map_hasher<FBDiskStoreIdentifier, std::__1::__hash_value_type<FBDiskStoreIdentifier, std::__1::shared_future<FBDiskStoreWrapper> >, std::__1::hash<FBDiskStoreIdentifier>, true> > __p2_;
	compressed_pair<float, std::__1::__unordered_map_equal<FBDiskStoreIdentifier, std::__1::__hash_value_type<FBDiskStoreIdentifier, std::__1::shared_future<FBDiskStoreWrapper> >, std::__1::equal_to<FBDiskStoreIdentifier>, true> > __p3_;
} hash_table<std::__1::__hash_value_type<FBDiskStoreIdentifier, std::__1::shared_future<FBDiskStoreWrapper> >, std::__1::__unordered_map_hasher<FBDiskStoreIdentifier, std::__1::__hash_value_type<FBDiskStoreIdentifier, std::__1::shared_future<FBDiskStoreWrapper> >, std::__1::hash<FBDiskStoreIdentifier>, true>, std::__1::__unordered_map_equal<FBDiskStoreIdentifier, std::__1::__hash_value_type<FBDiskStoreIdentifier, std::__1::shared_future<FBDiskStoreWrapper> >, std::__1::equal_to<FBDiskStoreIdentifier>, true>, std::__1::allocator<std::__1::__hash_value_type<FBDiskStoreIdentifier, std::__1::shared_future<FBDiskStoreWrapper> > > >;

typedef struct unordered_map<FBDiskStoreIdentifier, std::__1::shared_future<FBDiskStoreWrapper>, std::__1::hash<FBDiskStoreIdentifier>, std::__1::equal_to<FBDiskStoreIdentifier>, std::__1::allocator<std::__1::pair<const FBDiskStoreIdentifier, std::__1::shared_future<FBDiskStoreWrapper> > > > {
	hash_table<std::__1::__hash_value_type<FBDiskStoreIdentifier, std::__1::shared_future<FBDiskStoreWrapper> >, std::__1::__unordered_map_hasher<FBDiskStoreIdentifier, std::__1::__hash_value_type<FBDiskStoreIdentifier, std::__1::shared_future<FBDiskStoreWrapper> >, std::__1::hash<FBDiskStoreIdentifier>, true>, std::__1::__unordered_map_equal<FBDiskStoreIdentifier, std::__1::__hash_value_type<FBDiskStoreIdentifier, std::__1::shared_future<FBDiskStoreWrapper> >, std::__1::equal_to<FBDiskStoreIdentifier>, true>, std::__1::allocator<std::__1::__hash_value_type<FBDiskStoreIdentifier, std::__1::shared_future<FBDiskStoreWrapper> > > > __table_;
} unordered_map<FBDiskStoreIdentifier, std::__1::shared_future<FBDiskStoreWrapper>, std::__1::hash<FBDiskStoreIdentifier>, std::__1::equal_to<FBDiskStoreIdentifier>, std::__1::allocator<std::__1::pair<const FBDiskStoreIdentifier, std::__1::shared_future<FBDiskStoreWrapper> > > >;

typedef struct _compressed_pair<unsigned long, std::__1::allocator<std::__1::__hash_node<std::__1::__hash_value_type<FBDiskStoreIdentifier, std::__1::shared_future<FBPersistentKeyValueStoreWrapper> >, void *> *> > {
	unsigned long long __first_;
} compressed_pair<unsigned long, std::__1::allocator<std::__1::__hash_node<std::__1::__hash_value_type<FBDiskStoreIdentifier, std::__1::shared_future<FBPersistentKeyValueStoreWrapper> >, void *> *> >;

typedef struct _compressed_pair<unsigned long, std::__1::__unordered_map_hasher<FBDiskStoreIdentifier, std::__1::__hash_value_type<FBDiskStoreIdentifier, std::__1::shared_future<FBPersistentKeyValueStoreWrapper> >, std::__1::hash<FBDiskStoreIdentifier>, true> > {
	unsigned long long __first_;
} compressed_pair<unsigned long, std::__1::__unordered_map_hasher<FBDiskStoreIdentifier, std::__1::__hash_value_type<FBDiskStoreIdentifier, std::__1::shared_future<FBPersistentKeyValueStoreWrapper> >, std::__1::hash<FBDiskStoreIdentifier>, true> >;

typedef struct _compressed_pair<float, std::__1::__unordered_map_equal<FBDiskStoreIdentifier, std::__1::__hash_value_type<FBDiskStoreIdentifier, std::__1::shared_future<FBPersistentKeyValueStoreWrapper> >, std::__1::equal_to<FBDiskStoreIdentifier>, true> > {
	float __first_;
} compressed_pair<float, std::__1::__unordered_map_equal<FBDiskStoreIdentifier, std::__1::__hash_value_type<FBDiskStoreIdentifier, std::__1::shared_future<FBPersistentKeyValueStoreWrapper> >, std::__1::equal_to<FBDiskStoreIdentifier>, true> >;

typedef struct _hash_node_base<std::__1::__hash_node<std::__1::__hash_value_type<FBDiskStoreIdentifier, std::__1::shared_future<FBPersistentKeyValueStoreWrapper> >, void *> *> {
	__hash_node<std::__1::__hash_value_type<FBDiskStoreIdentifier, std::__1::shared_future<FBPersistentKeyValueStoreWrapper> >, void *> __next_;
} hash_node_base<std::__1::__hash_node<std::__1::__hash_value_type<FBDiskStoreIdentifier, std::__1::shared_future<FBPersistentKeyValueStoreWrapper> >, void *> *>;

typedef struct _compressed_pair<std::__1::__hash_node_base<std::__1::__hash_node<std::__1::__hash_value_type<FBDiskStoreIdentifier, std::__1::shared_future<FBPersistentKeyValueStoreWrapper> >, void *> *>, std::__1::allocator<std::__1::__hash_node<std::__1::__hash_value_type<FBDiskStoreIdentifier, std::__1::shared_future<FBPersistentKeyValueStoreWrapper> >, void *> > > {
	hash_node_base<std::__1::__hash_node<std::__1::__hash_value_type<FBDiskStoreIdentifier, std::__1::shared_future<FBPersistentKeyValueStoreWrapper> >, void *> *> __first_;
} compressed_pair<std::__1::__hash_node_base<std::__1::__hash_node<std::__1::__hash_value_type<FBDiskStoreIdentifier, std::__1::shared_future<FBPersistentKeyValueStoreWrapper> >, void *> *>, std::__1::allocator<std::__1::__hash_node<std::__1::__hash_value_type<FBDiskStoreIdentifier, std::__1::shared_future<FBPersistentKeyValueStoreWrapper> >, void *> > >;

typedef struct _bucket_list_deallocator<std::__1::allocator<std::__1::__hash_node<std::__1::__hash_value_type<FBDiskStoreIdentifier, std::__1::shared_future<FBPersistentKeyValueStoreWrapper> >, void *> *> > {
	compressed_pair<unsigned long, std::__1::allocator<std::__1::__hash_node<std::__1::__hash_value_type<FBDiskStoreIdentifier, std::__1::shared_future<FBPersistentKeyValueStoreWrapper> >, void *> *> > __data_;
} bucket_list_deallocator<std::__1::allocator<std::__1::__hash_node<std::__1::__hash_value_type<FBDiskStoreIdentifier, std::__1::shared_future<FBPersistentKeyValueStoreWrapper> >, void *> *> >;

typedef struct _compressed_pair<std::__1::__hash_node<std::__1::__hash_value_type<FBDiskStoreIdentifier, std::__1::shared_future<FBPersistentKeyValueStoreWrapper> >, void *> **, std::__1::__bucket_list_deallocator<std::__1::allocator<std::__1::__hash_node<std::__1::__hash_value_type<FBDiskStoreIdentifier, std::__1::shared_future<FBPersistentKeyValueStoreWrapper> >, void *> *> > > {
	__hash_node<std::__1::__hash_value_type<FBDiskStoreIdentifier, std::__1::shared_future<FBPersistentKeyValueStoreWrapper> >, void *> __first_;
	bucket_list_deallocator<std::__1::allocator<std::__1::__hash_node<std::__1::__hash_value_type<FBDiskStoreIdentifier, std::__1::shared_future<FBPersistentKeyValueStoreWrapper> >, void *> *> > __second_;
} compressed_pair<std::__1::__hash_node<std::__1::__hash_value_type<FBDiskStoreIdentifier, std::__1::shared_future<FBPersistentKeyValueStoreWrapper> >, void *> **, std::__1::__bucket_list_deallocator<std::__1::allocator<std::__1::__hash_node<std::__1::__hash_value_type<FBDiskStoreIdentifier, std::__1::shared_future<FBPersistentKeyValueStoreWrapper> >, void *> *> > >;

typedef struct unique_ptr<std::__1::__hash_node<std::__1::__hash_value_type<FBDiskStoreIdentifier, std::__1::shared_future<FBPersistentKeyValueStoreWrapper> >, void *> *[], std::__1::__bucket_list_deallocator<std::__1::allocator<std::__1::__hash_node<std::__1::__hash_value_type<FBDiskStoreIdentifier, std::__1::shared_future<FBPersistentKeyValueStoreWrapper> >, void *> *> > > {
	compressed_pair<std::__1::__hash_node<std::__1::__hash_value_type<FBDiskStoreIdentifier, std::__1::shared_future<FBPersistentKeyValueStoreWrapper> >, void *> **, std::__1::__bucket_list_deallocator<std::__1::allocator<std::__1::__hash_node<std::__1::__hash_value_type<FBDiskStoreIdentifier, std::__1::shared_future<FBPersistentKeyValueStoreWrapper> >, void *> *> > > __ptr_;
} unique_ptr<std::__1::__hash_node<std::__1::__hash_value_type<FBDiskStoreIdentifier, std::__1::shared_future<FBPersistentKeyValueStoreWrapper> >, void *> *[], std::__1::__bucket_list_deallocator<std::__1::allocator<std::__1::__hash_node<std::__1::__hash_value_type<FBDiskStoreIdentifier, std::__1::shared_future<FBPersistentKeyValueStoreWrapper> >, void *> *> > >;

typedef struct _hash_table<std::__1::__hash_value_type<FBDiskStoreIdentifier, std::__1::shared_future<FBPersistentKeyValueStoreWrapper> >, std::__1::__unordered_map_hasher<FBDiskStoreIdentifier, std::__1::__hash_value_type<FBDiskStoreIdentifier, std::__1::shared_future<FBPersistentKeyValueStoreWrapper> >, std::__1::hash<FBDiskStoreIdentifier>, true>, std::__1::__unordered_map_equal<FBDiskStoreIdentifier, std::__1::__hash_value_type<FBDiskStoreIdentifier, std::__1::shared_future<FBPersistentKeyValueStoreWrapper> >, std::__1::equal_to<FBDiskStoreIdentifier>, true>, std::__1::allocator<std::__1::__hash_value_type<FBDiskStoreIdentifier, std::__1::shared_future<FBPersistentKeyValueStoreWrapper> > > > {
	unique_ptr<std::__1::__hash_node<std::__1::__hash_value_type<FBDiskStoreIdentifier, std::__1::shared_future<FBPersistentKeyValueStoreWrapper> >, void *> *[], std::__1::__bucket_list_deallocator<std::__1::allocator<std::__1::__hash_node<std::__1::__hash_value_type<FBDiskStoreIdentifier, std::__1::shared_future<FBPersistentKeyValueStoreWrapper> >, void *> *> > > __bucket_list_;
	compressed_pair<std::__1::__hash_node_base<std::__1::__hash_node<std::__1::__hash_value_type<FBDiskStoreIdentifier, std::__1::shared_future<FBPersistentKeyValueStoreWrapper> >, void *> *>, std::__1::allocator<std::__1::__hash_node<std::__1::__hash_value_type<FBDiskStoreIdentifier, std::__1::shared_future<FBPersistentKeyValueStoreWrapper> >, void *> > > __p1_;
	compressed_pair<unsigned long, std::__1::__unordered_map_hasher<FBDiskStoreIdentifier, std::__1::__hash_value_type<FBDiskStoreIdentifier, std::__1::shared_future<FBPersistentKeyValueStoreWrapper> >, std::__1::hash<FBDiskStoreIdentifier>, true> > __p2_;
	compressed_pair<float, std::__1::__unordered_map_equal<FBDiskStoreIdentifier, std::__1::__hash_value_type<FBDiskStoreIdentifier, std::__1::shared_future<FBPersistentKeyValueStoreWrapper> >, std::__1::equal_to<FBDiskStoreIdentifier>, true> > __p3_;
} hash_table<std::__1::__hash_value_type<FBDiskStoreIdentifier, std::__1::shared_future<FBPersistentKeyValueStoreWrapper> >, std::__1::__unordered_map_hasher<FBDiskStoreIdentifier, std::__1::__hash_value_type<FBDiskStoreIdentifier, std::__1::shared_future<FBPersistentKeyValueStoreWrapper> >, std::__1::hash<FBDiskStoreIdentifier>, true>, std::__1::__unordered_map_equal<FBDiskStoreIdentifier, std::__1::__hash_value_type<FBDiskStoreIdentifier, std::__1::shared_future<FBPersistentKeyValueStoreWrapper> >, std::__1::equal_to<FBDiskStoreIdentifier>, true>, std::__1::allocator<std::__1::__hash_value_type<FBDiskStoreIdentifier, std::__1::shared_future<FBPersistentKeyValueStoreWrapper> > > >;

typedef struct unordered_map<FBDiskStoreIdentifier, std::__1::shared_future<FBPersistentKeyValueStoreWrapper>, std::__1::hash<FBDiskStoreIdentifier>, std::__1::equal_to<FBDiskStoreIdentifier>, std::__1::allocator<std::__1::pair<const FBDiskStoreIdentifier, std::__1::shared_future<FBPersistentKeyValueStoreWrapper> > > > {
	hash_table<std::__1::__hash_value_type<FBDiskStoreIdentifier, std::__1::shared_future<FBPersistentKeyValueStoreWrapper> >, std::__1::__unordered_map_hasher<FBDiskStoreIdentifier, std::__1::__hash_value_type<FBDiskStoreIdentifier, std::__1::shared_future<FBPersistentKeyValueStoreWrapper> >, std::__1::hash<FBDiskStoreIdentifier>, true>, std::__1::__unordered_map_equal<FBDiskStoreIdentifier, std::__1::__hash_value_type<FBDiskStoreIdentifier, std::__1::shared_future<FBPersistentKeyValueStoreWrapper> >, std::__1::equal_to<FBDiskStoreIdentifier>, true>, std::__1::allocator<std::__1::__hash_value_type<FBDiskStoreIdentifier, std::__1::shared_future<FBPersistentKeyValueStoreWrapper> > > > __table_;
} unordered_map<FBDiskStoreIdentifier, std::__1::shared_future<FBPersistentKeyValueStoreWrapper>, std::__1::hash<FBDiskStoreIdentifier>, std::__1::equal_to<FBDiskStoreIdentifier>, std::__1::allocator<std::__1::pair<const FBDiskStoreIdentifier, std::__1::shared_future<FBPersistentKeyValueStoreWrapper> > > >;

typedef struct _compressed_pair<unsigned long, std::__1::allocator<std::__1::__hash_node<std::__1::__hash_value_type<FBDiskStoreIdentifier, std::__1::shared_future<FBDiskCacheWrapper> >, void *> *> > {
	unsigned long long __first_;
} compressed_pair<unsigned long, std::__1::allocator<std::__1::__hash_node<std::__1::__hash_value_type<FBDiskStoreIdentifier, std::__1::shared_future<FBDiskCacheWrapper> >, void *> *> >;

typedef struct _compressed_pair<unsigned long, std::__1::__unordered_map_hasher<FBDiskStoreIdentifier, std::__1::__hash_value_type<FBDiskStoreIdentifier, std::__1::shared_future<FBDiskCacheWrapper> >, std::__1::hash<FBDiskStoreIdentifier>, true> > {
	unsigned long long __first_;
} compressed_pair<unsigned long, std::__1::__unordered_map_hasher<FBDiskStoreIdentifier, std::__1::__hash_value_type<FBDiskStoreIdentifier, std::__1::shared_future<FBDiskCacheWrapper> >, std::__1::hash<FBDiskStoreIdentifier>, true> >;

typedef struct _compressed_pair<float, std::__1::__unordered_map_equal<FBDiskStoreIdentifier, std::__1::__hash_value_type<FBDiskStoreIdentifier, std::__1::shared_future<FBDiskCacheWrapper> >, std::__1::equal_to<FBDiskStoreIdentifier>, true> > {
	float __first_;
} compressed_pair<float, std::__1::__unordered_map_equal<FBDiskStoreIdentifier, std::__1::__hash_value_type<FBDiskStoreIdentifier, std::__1::shared_future<FBDiskCacheWrapper> >, std::__1::equal_to<FBDiskStoreIdentifier>, true> >;

typedef struct _hash_node_base<std::__1::__hash_node<std::__1::__hash_value_type<FBDiskStoreIdentifier, std::__1::shared_future<FBDiskCacheWrapper> >, void *> *> {
	__hash_node<std::__1::__hash_value_type<FBDiskStoreIdentifier, std::__1::shared_future<FBDiskCacheWrapper> >, void *> __next_;
} hash_node_base<std::__1::__hash_node<std::__1::__hash_value_type<FBDiskStoreIdentifier, std::__1::shared_future<FBDiskCacheWrapper> >, void *> *>;

typedef struct _compressed_pair<std::__1::__hash_node_base<std::__1::__hash_node<std::__1::__hash_value_type<FBDiskStoreIdentifier, std::__1::shared_future<FBDiskCacheWrapper> >, void *> *>, std::__1::allocator<std::__1::__hash_node<std::__1::__hash_value_type<FBDiskStoreIdentifier, std::__1::shared_future<FBDiskCacheWrapper> >, void *> > > {
	hash_node_base<std::__1::__hash_node<std::__1::__hash_value_type<FBDiskStoreIdentifier, std::__1::shared_future<FBDiskCacheWrapper> >, void *> *> __first_;
} compressed_pair<std::__1::__hash_node_base<std::__1::__hash_node<std::__1::__hash_value_type<FBDiskStoreIdentifier, std::__1::shared_future<FBDiskCacheWrapper> >, void *> *>, std::__1::allocator<std::__1::__hash_node<std::__1::__hash_value_type<FBDiskStoreIdentifier, std::__1::shared_future<FBDiskCacheWrapper> >, void *> > >;

typedef struct _bucket_list_deallocator<std::__1::allocator<std::__1::__hash_node<std::__1::__hash_value_type<FBDiskStoreIdentifier, std::__1::shared_future<FBDiskCacheWrapper> >, void *> *> > {
	compressed_pair<unsigned long, std::__1::allocator<std::__1::__hash_node<std::__1::__hash_value_type<FBDiskStoreIdentifier, std::__1::shared_future<FBDiskCacheWrapper> >, void *> *> > __data_;
} bucket_list_deallocator<std::__1::allocator<std::__1::__hash_node<std::__1::__hash_value_type<FBDiskStoreIdentifier, std::__1::shared_future<FBDiskCacheWrapper> >, void *> *> >;

typedef struct _compressed_pair<std::__1::__hash_node<std::__1::__hash_value_type<FBDiskStoreIdentifier, std::__1::shared_future<FBDiskCacheWrapper> >, void *> **, std::__1::__bucket_list_deallocator<std::__1::allocator<std::__1::__hash_node<std::__1::__hash_value_type<FBDiskStoreIdentifier, std::__1::shared_future<FBDiskCacheWrapper> >, void *> *> > > {
	__hash_node<std::__1::__hash_value_type<FBDiskStoreIdentifier, std::__1::shared_future<FBDiskCacheWrapper> >, void *> __first_;
	bucket_list_deallocator<std::__1::allocator<std::__1::__hash_node<std::__1::__hash_value_type<FBDiskStoreIdentifier, std::__1::shared_future<FBDiskCacheWrapper> >, void *> *> > __second_;
} compressed_pair<std::__1::__hash_node<std::__1::__hash_value_type<FBDiskStoreIdentifier, std::__1::shared_future<FBDiskCacheWrapper> >, void *> **, std::__1::__bucket_list_deallocator<std::__1::allocator<std::__1::__hash_node<std::__1::__hash_value_type<FBDiskStoreIdentifier, std::__1::shared_future<FBDiskCacheWrapper> >, void *> *> > >;

typedef struct unique_ptr<std::__1::__hash_node<std::__1::__hash_value_type<FBDiskStoreIdentifier, std::__1::shared_future<FBDiskCacheWrapper> >, void *> *[], std::__1::__bucket_list_deallocator<std::__1::allocator<std::__1::__hash_node<std::__1::__hash_value_type<FBDiskStoreIdentifier, std::__1::shared_future<FBDiskCacheWrapper> >, void *> *> > > {
	compressed_pair<std::__1::__hash_node<std::__1::__hash_value_type<FBDiskStoreIdentifier, std::__1::shared_future<FBDiskCacheWrapper> >, void *> **, std::__1::__bucket_list_deallocator<std::__1::allocator<std::__1::__hash_node<std::__1::__hash_value_type<FBDiskStoreIdentifier, std::__1::shared_future<FBDiskCacheWrapper> >, void *> *> > > __ptr_;
} unique_ptr<std::__1::__hash_node<std::__1::__hash_value_type<FBDiskStoreIdentifier, std::__1::shared_future<FBDiskCacheWrapper> >, void *> *[], std::__1::__bucket_list_deallocator<std::__1::allocator<std::__1::__hash_node<std::__1::__hash_value_type<FBDiskStoreIdentifier, std::__1::shared_future<FBDiskCacheWrapper> >, void *> *> > >;

typedef struct _hash_table<std::__1::__hash_value_type<FBDiskStoreIdentifier, std::__1::shared_future<FBDiskCacheWrapper> >, std::__1::__unordered_map_hasher<FBDiskStoreIdentifier, std::__1::__hash_value_type<FBDiskStoreIdentifier, std::__1::shared_future<FBDiskCacheWrapper> >, std::__1::hash<FBDiskStoreIdentifier>, true>, std::__1::__unordered_map_equal<FBDiskStoreIdentifier, std::__1::__hash_value_type<FBDiskStoreIdentifier, std::__1::shared_future<FBDiskCacheWrapper> >, std::__1::equal_to<FBDiskStoreIdentifier>, true>, std::__1::allocator<std::__1::__hash_value_type<FBDiskStoreIdentifier, std::__1::shared_future<FBDiskCacheWrapper> > > > {
	unique_ptr<std::__1::__hash_node<std::__1::__hash_value_type<FBDiskStoreIdentifier, std::__1::shared_future<FBDiskCacheWrapper> >, void *> *[], std::__1::__bucket_list_deallocator<std::__1::allocator<std::__1::__hash_node<std::__1::__hash_value_type<FBDiskStoreIdentifier, std::__1::shared_future<FBDiskCacheWrapper> >, void *> *> > > __bucket_list_;
	compressed_pair<std::__1::__hash_node_base<std::__1::__hash_node<std::__1::__hash_value_type<FBDiskStoreIdentifier, std::__1::shared_future<FBDiskCacheWrapper> >, void *> *>, std::__1::allocator<std::__1::__hash_node<std::__1::__hash_value_type<FBDiskStoreIdentifier, std::__1::shared_future<FBDiskCacheWrapper> >, void *> > > __p1_;
	compressed_pair<unsigned long, std::__1::__unordered_map_hasher<FBDiskStoreIdentifier, std::__1::__hash_value_type<FBDiskStoreIdentifier, std::__1::shared_future<FBDiskCacheWrapper> >, std::__1::hash<FBDiskStoreIdentifier>, true> > __p2_;
	compressed_pair<float, std::__1::__unordered_map_equal<FBDiskStoreIdentifier, std::__1::__hash_value_type<FBDiskStoreIdentifier, std::__1::shared_future<FBDiskCacheWrapper> >, std::__1::equal_to<FBDiskStoreIdentifier>, true> > __p3_;
} hash_table<std::__1::__hash_value_type<FBDiskStoreIdentifier, std::__1::shared_future<FBDiskCacheWrapper> >, std::__1::__unordered_map_hasher<FBDiskStoreIdentifier, std::__1::__hash_value_type<FBDiskStoreIdentifier, std::__1::shared_future<FBDiskCacheWrapper> >, std::__1::hash<FBDiskStoreIdentifier>, true>, std::__1::__unordered_map_equal<FBDiskStoreIdentifier, std::__1::__hash_value_type<FBDiskStoreIdentifier, std::__1::shared_future<FBDiskCacheWrapper> >, std::__1::equal_to<FBDiskStoreIdentifier>, true>, std::__1::allocator<std::__1::__hash_value_type<FBDiskStoreIdentifier, std::__1::shared_future<FBDiskCacheWrapper> > > >;

typedef struct unordered_map<FBDiskStoreIdentifier, std::__1::shared_future<FBDiskCacheWrapper>, std::__1::hash<FBDiskStoreIdentifier>, std::__1::equal_to<FBDiskStoreIdentifier>, std::__1::allocator<std::__1::pair<const FBDiskStoreIdentifier, std::__1::shared_future<FBDiskCacheWrapper> > > > {
	hash_table<std::__1::__hash_value_type<FBDiskStoreIdentifier, std::__1::shared_future<FBDiskCacheWrapper> >, std::__1::__unordered_map_hasher<FBDiskStoreIdentifier, std::__1::__hash_value_type<FBDiskStoreIdentifier, std::__1::shared_future<FBDiskCacheWrapper> >, std::__1::hash<FBDiskStoreIdentifier>, true>, std::__1::__unordered_map_equal<FBDiskStoreIdentifier, std::__1::__hash_value_type<FBDiskStoreIdentifier, std::__1::shared_future<FBDiskCacheWrapper> >, std::__1::equal_to<FBDiskStoreIdentifier>, true>, std::__1::allocator<std::__1::__hash_value_type<FBDiskStoreIdentifier, std::__1::shared_future<FBDiskCacheWrapper> > > > __table_;
} unordered_map<FBDiskStoreIdentifier, std::__1::shared_future<FBDiskCacheWrapper>, std::__1::hash<FBDiskStoreIdentifier>, std::__1::equal_to<FBDiskStoreIdentifier>, std::__1::allocator<std::__1::pair<const FBDiskStoreIdentifier, std::__1::shared_future<FBDiskCacheWrapper> > > >;

typedef struct shared_ptr<facebook::mobile::xplat::compactdisk::BackgroundExceptionLogger> {
	BackgroundExceptionLogger __ptr_;
	__shared_weak_count __cntrl_;
} shared_ptr<facebook::mobile::xplat::compactdisk::BackgroundExceptionLogger>;

typedef struct _compressed_pair<unsigned long, std::__1::allocator<std::__1::__hash_node<std::__1::__hash_value_type<FBDiskStoreManagerIdentifier, std::__1::shared_future<FBDiskStoreManagerWrapper> >, void *> *> > {
	unsigned long long __first_;
} compressed_pair<unsigned long, std::__1::allocator<std::__1::__hash_node<std::__1::__hash_value_type<FBDiskStoreManagerIdentifier, std::__1::shared_future<FBDiskStoreManagerWrapper> >, void *> *> >;

typedef struct _compressed_pair<unsigned long, std::__1::__unordered_map_hasher<FBDiskStoreManagerIdentifier, std::__1::__hash_value_type<FBDiskStoreManagerIdentifier, std::__1::shared_future<FBDiskStoreManagerWrapper> >, std::__1::hash<FBDiskStoreManagerIdentifier>, true> > {
	unsigned long long __first_;
} compressed_pair<unsigned long, std::__1::__unordered_map_hasher<FBDiskStoreManagerIdentifier, std::__1::__hash_value_type<FBDiskStoreManagerIdentifier, std::__1::shared_future<FBDiskStoreManagerWrapper> >, std::__1::hash<FBDiskStoreManagerIdentifier>, true> >;

typedef struct _compressed_pair<float, std::__1::__unordered_map_equal<FBDiskStoreManagerIdentifier, std::__1::__hash_value_type<FBDiskStoreManagerIdentifier, std::__1::shared_future<FBDiskStoreManagerWrapper> >, std::__1::equal_to<FBDiskStoreManagerIdentifier>, true> > {
	float __first_;
} compressed_pair<float, std::__1::__unordered_map_equal<FBDiskStoreManagerIdentifier, std::__1::__hash_value_type<FBDiskStoreManagerIdentifier, std::__1::shared_future<FBDiskStoreManagerWrapper> >, std::__1::equal_to<FBDiskStoreManagerIdentifier>, true> >;

typedef struct _hash_node_base<std::__1::__hash_node<std::__1::__hash_value_type<FBDiskStoreManagerIdentifier, std::__1::shared_future<FBDiskStoreManagerWrapper> >, void *> *> {
	__hash_node<std::__1::__hash_value_type<FBDiskStoreManagerIdentifier, std::__1::shared_future<FBDiskStoreManagerWrapper> >, void *> __next_;
} hash_node_base<std::__1::__hash_node<std::__1::__hash_value_type<FBDiskStoreManagerIdentifier, std::__1::shared_future<FBDiskStoreManagerWrapper> >, void *> *>;

typedef struct _compressed_pair<std::__1::__hash_node_base<std::__1::__hash_node<std::__1::__hash_value_type<FBDiskStoreManagerIdentifier, std::__1::shared_future<FBDiskStoreManagerWrapper> >, void *> *>, std::__1::allocator<std::__1::__hash_node<std::__1::__hash_value_type<FBDiskStoreManagerIdentifier, std::__1::shared_future<FBDiskStoreManagerWrapper> >, void *> > > {
	hash_node_base<std::__1::__hash_node<std::__1::__hash_value_type<FBDiskStoreManagerIdentifier, std::__1::shared_future<FBDiskStoreManagerWrapper> >, void *> *> __first_;
} compressed_pair<std::__1::__hash_node_base<std::__1::__hash_node<std::__1::__hash_value_type<FBDiskStoreManagerIdentifier, std::__1::shared_future<FBDiskStoreManagerWrapper> >, void *> *>, std::__1::allocator<std::__1::__hash_node<std::__1::__hash_value_type<FBDiskStoreManagerIdentifier, std::__1::shared_future<FBDiskStoreManagerWrapper> >, void *> > >;

typedef struct _bucket_list_deallocator<std::__1::allocator<std::__1::__hash_node<std::__1::__hash_value_type<FBDiskStoreManagerIdentifier, std::__1::shared_future<FBDiskStoreManagerWrapper> >, void *> *> > {
	compressed_pair<unsigned long, std::__1::allocator<std::__1::__hash_node<std::__1::__hash_value_type<FBDiskStoreManagerIdentifier, std::__1::shared_future<FBDiskStoreManagerWrapper> >, void *> *> > __data_;
} bucket_list_deallocator<std::__1::allocator<std::__1::__hash_node<std::__1::__hash_value_type<FBDiskStoreManagerIdentifier, std::__1::shared_future<FBDiskStoreManagerWrapper> >, void *> *> >;

typedef struct _compressed_pair<std::__1::__hash_node<std::__1::__hash_value_type<FBDiskStoreManagerIdentifier, std::__1::shared_future<FBDiskStoreManagerWrapper> >, void *> **, std::__1::__bucket_list_deallocator<std::__1::allocator<std::__1::__hash_node<std::__1::__hash_value_type<FBDiskStoreManagerIdentifier, std::__1::shared_future<FBDiskStoreManagerWrapper> >, void *> *> > > {
	__hash_node<std::__1::__hash_value_type<FBDiskStoreManagerIdentifier, std::__1::shared_future<FBDiskStoreManagerWrapper> >, void *> __first_;
	bucket_list_deallocator<std::__1::allocator<std::__1::__hash_node<std::__1::__hash_value_type<FBDiskStoreManagerIdentifier, std::__1::shared_future<FBDiskStoreManagerWrapper> >, void *> *> > __second_;
} compressed_pair<std::__1::__hash_node<std::__1::__hash_value_type<FBDiskStoreManagerIdentifier, std::__1::shared_future<FBDiskStoreManagerWrapper> >, void *> **, std::__1::__bucket_list_deallocator<std::__1::allocator<std::__1::__hash_node<std::__1::__hash_value_type<FBDiskStoreManagerIdentifier, std::__1::shared_future<FBDiskStoreManagerWrapper> >, void *> *> > >;

typedef struct unique_ptr<std::__1::__hash_node<std::__1::__hash_value_type<FBDiskStoreManagerIdentifier, std::__1::shared_future<FBDiskStoreManagerWrapper> >, void *> *[], std::__1::__bucket_list_deallocator<std::__1::allocator<std::__1::__hash_node<std::__1::__hash_value_type<FBDiskStoreManagerIdentifier, std::__1::shared_future<FBDiskStoreManagerWrapper> >, void *> *> > > {
	compressed_pair<std::__1::__hash_node<std::__1::__hash_value_type<FBDiskStoreManagerIdentifier, std::__1::shared_future<FBDiskStoreManagerWrapper> >, void *> **, std::__1::__bucket_list_deallocator<std::__1::allocator<std::__1::__hash_node<std::__1::__hash_value_type<FBDiskStoreManagerIdentifier, std::__1::shared_future<FBDiskStoreManagerWrapper> >, void *> *> > > __ptr_;
} unique_ptr<std::__1::__hash_node<std::__1::__hash_value_type<FBDiskStoreManagerIdentifier, std::__1::shared_future<FBDiskStoreManagerWrapper> >, void *> *[], std::__1::__bucket_list_deallocator<std::__1::allocator<std::__1::__hash_node<std::__1::__hash_value_type<FBDiskStoreManagerIdentifier, std::__1::shared_future<FBDiskStoreManagerWrapper> >, void *> *> > >;

typedef struct _hash_table<std::__1::__hash_value_type<FBDiskStoreManagerIdentifier, std::__1::shared_future<FBDiskStoreManagerWrapper> >, std::__1::__unordered_map_hasher<FBDiskStoreManagerIdentifier, std::__1::__hash_value_type<FBDiskStoreManagerIdentifier, std::__1::shared_future<FBDiskStoreManagerWrapper> >, std::__1::hash<FBDiskStoreManagerIdentifier>, true>, std::__1::__unordered_map_equal<FBDiskStoreManagerIdentifier, std::__1::__hash_value_type<FBDiskStoreManagerIdentifier, std::__1::shared_future<FBDiskStoreManagerWrapper> >, std::__1::equal_to<FBDiskStoreManagerIdentifier>, true>, std::__1::allocator<std::__1::__hash_value_type<FBDiskStoreManagerIdentifier, std::__1::shared_future<FBDiskStoreManagerWrapper> > > > {
	unique_ptr<std::__1::__hash_node<std::__1::__hash_value_type<FBDiskStoreManagerIdentifier, std::__1::shared_future<FBDiskStoreManagerWrapper> >, void *> *[], std::__1::__bucket_list_deallocator<std::__1::allocator<std::__1::__hash_node<std::__1::__hash_value_type<FBDiskStoreManagerIdentifier, std::__1::shared_future<FBDiskStoreManagerWrapper> >, void *> *> > > __bucket_list_;
	compressed_pair<std::__1::__hash_node_base<std::__1::__hash_node<std::__1::__hash_value_type<FBDiskStoreManagerIdentifier, std::__1::shared_future<FBDiskStoreManagerWrapper> >, void *> *>, std::__1::allocator<std::__1::__hash_node<std::__1::__hash_value_type<FBDiskStoreManagerIdentifier, std::__1::shared_future<FBDiskStoreManagerWrapper> >, void *> > > __p1_;
	compressed_pair<unsigned long, std::__1::__unordered_map_hasher<FBDiskStoreManagerIdentifier, std::__1::__hash_value_type<FBDiskStoreManagerIdentifier, std::__1::shared_future<FBDiskStoreManagerWrapper> >, std::__1::hash<FBDiskStoreManagerIdentifier>, true> > __p2_;
	compressed_pair<float, std::__1::__unordered_map_equal<FBDiskStoreManagerIdentifier, std::__1::__hash_value_type<FBDiskStoreManagerIdentifier, std::__1::shared_future<FBDiskStoreManagerWrapper> >, std::__1::equal_to<FBDiskStoreManagerIdentifier>, true> > __p3_;
} hash_table<std::__1::__hash_value_type<FBDiskStoreManagerIdentifier, std::__1::shared_future<FBDiskStoreManagerWrapper> >, std::__1::__unordered_map_hasher<FBDiskStoreManagerIdentifier, std::__1::__hash_value_type<FBDiskStoreManagerIdentifier, std::__1::shared_future<FBDiskStoreManagerWrapper> >, std::__1::hash<FBDiskStoreManagerIdentifier>, true>, std::__1::__unordered_map_equal<FBDiskStoreManagerIdentifier, std::__1::__hash_value_type<FBDiskStoreManagerIdentifier, std::__1::shared_future<FBDiskStoreManagerWrapper> >, std::__1::equal_to<FBDiskStoreManagerIdentifier>, true>, std::__1::allocator<std::__1::__hash_value_type<FBDiskStoreManagerIdentifier, std::__1::shared_future<FBDiskStoreManagerWrapper> > > >;

typedef struct unordered_map<FBDiskStoreManagerIdentifier, std::__1::shared_future<FBDiskStoreManagerWrapper>, std::__1::hash<FBDiskStoreManagerIdentifier>, std::__1::equal_to<FBDiskStoreManagerIdentifier>, std::__1::allocator<std::__1::pair<const FBDiskStoreManagerIdentifier, std::__1::shared_future<FBDiskStoreManagerWrapper> > > > {
	hash_table<std::__1::__hash_value_type<FBDiskStoreManagerIdentifier, std::__1::shared_future<FBDiskStoreManagerWrapper> >, std::__1::__unordered_map_hasher<FBDiskStoreManagerIdentifier, std::__1::__hash_value_type<FBDiskStoreManagerIdentifier, std::__1::shared_future<FBDiskStoreManagerWrapper> >, std::__1::hash<FBDiskStoreManagerIdentifier>, true>, std::__1::__unordered_map_equal<FBDiskStoreManagerIdentifier, std::__1::__hash_value_type<FBDiskStoreManagerIdentifier, std::__1::shared_future<FBDiskStoreManagerWrapper> >, std::__1::equal_to<FBDiskStoreManagerIdentifier>, true>, std::__1::allocator<std::__1::__hash_value_type<FBDiskStoreManagerIdentifier, std::__1::shared_future<FBDiskStoreManagerWrapper> > > > __table_;
} unordered_map<FBDiskStoreManagerIdentifier, std::__1::shared_future<FBDiskStoreManagerWrapper>, std::__1::hash<FBDiskStoreManagerIdentifier>, std::__1::equal_to<FBDiskStoreManagerIdentifier>, std::__1::allocator<std::__1::pair<const FBDiskStoreManagerIdentifier, std::__1::shared_future<FBDiskStoreManagerWrapper> > > >;

typedef struct shared_ptr<facebook::mobile::xplat::compactdisk::StoreManagerFactory> {
	StoreManagerFactory __ptr_;
	__shared_weak_count __cntrl_;
} shared_ptr<facebook::mobile::xplat::compactdisk::StoreManagerFactory>;

typedef struct shared_ptr<facebook::mobile::xplat::compactdisk::PersistentKeyValueStore> {
	PersistentKeyValueStore __ptr_;
	__shared_weak_count __cntrl_;
} shared_ptr<facebook::mobile::xplat::compactdisk::PersistentKeyValueStore>;

typedef struct _compressed_pair<unsigned long, std::__1::__map_value_compare<std::__1::basic_string<char>, std::__1::__value_type<std::__1::basic_string<char>, std::__1::pair<__CFHost *, double> >, std::__1::less<std::__1::basic_string<char> >, true> > {
	unsigned long long __first_;
} compressed_pair<unsigned long, std::__1::__map_value_compare<std::__1::basic_string<char>, std::__1::__value_type<std::__1::basic_string<char>, std::__1::pair<__CFHost *, double> >, std::__1::less<std::__1::basic_string<char> >, true> >;

typedef struct _tree_end_node<std::__1::__tree_node_base<void *> *> {
	__tree_node_base<void *> __left_;
} tree_end_node<std::__1::__tree_node_base<void *> *>;

typedef struct _compressed_pair<std::__1::__tree_end_node<std::__1::__tree_node_base<void *> *>, std::__1::allocator<std::__1::__tree_node<std::__1::__value_type<std::__1::basic_string<char>, std::__1::pair<__CFHost *, double> >, void *> > > {
	tree_end_node<std::__1::__tree_node_base<void *> *> __first_;
} compressed_pair<std::__1::__tree_end_node<std::__1::__tree_node_base<void *> *>, std::__1::allocator<std::__1::__tree_node<std::__1::__value_type<std::__1::basic_string<char>, std::__1::pair<__CFHost *, double> >, void *> > >;

typedef struct _tree<std::__1::__value_type<std::__1::basic_string<char>, std::__1::pair<__CFHost *, double> >, std::__1::__map_value_compare<std::__1::basic_string<char>, std::__1::__value_type<std::__1::basic_string<char>, std::__1::pair<__CFHost *, double> >, std::__1::less<std::__1::basic_string<char> >, true>, std::__1::allocator<std::__1::__value_type<std::__1::basic_string<char>, std::__1::pair<__CFHost *, double> > > > {
	__tree_node<std::__1::__value_type<std::__1::basic_string<char>, std::__1::pair<__CFHost *, double> >, void *> __begin_node_;
	compressed_pair<std::__1::__tree_end_node<std::__1::__tree_node_base<void *> *>, std::__1::allocator<std::__1::__tree_node<std::__1::__value_type<std::__1::basic_string<char>, std::__1::pair<__CFHost *, double> >, void *> > > __pair1_;
	compressed_pair<unsigned long, std::__1::__map_value_compare<std::__1::basic_string<char>, std::__1::__value_type<std::__1::basic_string<char>, std::__1::pair<__CFHost *, double> >, std::__1::less<std::__1::basic_string<char> >, true> > __pair3_;
} tree<std::__1::__value_type<std::__1::basic_string<char>, std::__1::pair<__CFHost *, double> >, std::__1::__map_value_compare<std::__1::basic_string<char>, std::__1::__value_type<std::__1::basic_string<char>, std::__1::pair<__CFHost *, double> >, std::__1::less<std::__1::basic_string<char> >, true>, std::__1::allocator<std::__1::__value_type<std::__1::basic_string<char>, std::__1::pair<__CFHost *, double> > > >;

typedef struct map<std::__1::basic_string<char>, std::__1::pair<__CFHost *, double>, std::__1::less<std::__1::basic_string<char> >, std::__1::allocator<std::__1::pair<const std::__1::basic_string<char>, std::__1::pair<__CFHost *, double> > > > {
	tree<std::__1::__value_type<std::__1::basic_string<char>, std::__1::pair<__CFHost *, double> >, std::__1::__map_value_compare<std::__1::basic_string<char>, std::__1::__value_type<std::__1::basic_string<char>, std::__1::pair<__CFHost *, double> >, std::__1::less<std::__1::basic_string<char> >, true>, std::__1::allocator<std::__1::__value_type<std::__1::basic_string<char>, std::__1::pair<__CFHost *, double> > > > __tree_;
} map<std::__1::basic_string<char>, std::__1::pair<__CFHost *, double>, std::__1::less<std::__1::basic_string<char> >, std::__1::allocator<std::__1::pair<const std::__1::basic_string<char>, std::__1::pair<__CFHost *, double> > > >;

typedef struct __CFHost* CFHostRef;

typedef struct {
	long long field1;
	int field2;
} SCD_Struct_FB110;

typedef struct __SecTrust* SecTrustRef;

typedef struct {
	unsigned short field1;
	unsigned short field2;
	unsigned short field3;
} SCD_Struct_FB112;

typedef struct {
	unsigned short low;
	unsigned short normal;
	unsigned short immediate;
} SCD_Struct_FB113;

typedef struct CGPoint {
	double x;
	double y;
} CGPoint;

typedef struct CGSize {
	double width;
	double height;
} CGSize;

typedef struct CGRect {
	CGPoint origin;
	CGSize size;
} CGRect;

typedef struct {
	id field1;
	id field2;
	/*function pointer*/void* field3;
	id field4;
	/*function pointer*/void* field5;
	double field6;
} SCD_Struct_PO117;

typedef struct SpringSolver<POP::Vector4<double> >* SpringSolver<POP::Vector4<double> >Ref;

typedef struct _compressed_pair<unsigned long, std::__1::allocator<std::__1::__list_node<std::__1::shared_ptr<POPAnimatorItem>, void *> > > {
	unsigned long long __first_;
} compressed_pair<unsigned long, std::__1::allocator<std::__1::__list_node<std::__1::shared_ptr<POPAnimatorItem>, void *> > >;

typedef struct _list_node_base<std::__1::shared_ptr<POPAnimatorItem>, void *> {
	__list_node<std::__1::shared_ptr<POPAnimatorItem>, void *> __prev_;
	__list_node<std::__1::shared_ptr<POPAnimatorItem>, void *> __next_;
} list_node_base<std::__1::shared_ptr<POPAnimatorItem>, void *>;

typedef struct list<std::__1::shared_ptr<POPAnimatorItem>, std::__1::allocator<std::__1::shared_ptr<POPAnimatorItem> > > {
	list_node_base<std::__1::shared_ptr<POPAnimatorItem>, void *> __end_;
	compressed_pair<unsigned long, std::__1::allocator<std::__1::__list_node<std::__1::shared_ptr<POPAnimatorItem>, void *> > > __size_alloc_;
} list<std::__1::shared_ptr<POPAnimatorItem>, std::__1::allocator<std::__1::shared_ptr<POPAnimatorItem> > >;

typedef struct __CFDictionary* CFDictionaryRef;

typedef struct UIEdgeInsets {
	double top;
	double left;
	double bottom;
	double right;
} UIEdgeInsets;

typedef struct {
	BOOL shouldDismiss;
	BOOL willDismiss;
	BOOL didDismiss;
} SCD_Struct_FB124;

typedef struct CGContext* CGContextRef;

typedef struct FBNSStringCache {
	FBNSStringCacheItem items;
	unsigned prng_lfsr;
	unsigned char age[1024];
} FBNSStringCache;

typedef struct MessagePackParseState {
	FBNSStringCache cache;
} MessagePackParseState;

typedef struct _compressed_pair<FBMPCEncodingObjectContext **, std::__1::allocator<FBMPCEncodingObjectContext *> > {
	FBMPCEncodingObjectContext __first_;
} compressed_pair<FBMPCEncodingObjectContext **, std::__1::allocator<FBMPCEncodingObjectContext *> >;

typedef struct vector<FBMPCEncodingObjectContext *, std::__1::allocator<FBMPCEncodingObjectContext *> > {
	FBMPCEncodingObjectContext __begin_;
	FBMPCEncodingObjectContext __end_;
	compressed_pair<FBMPCEncodingObjectContext **, std::__1::allocator<FBMPCEncodingObjectContext *> > __end_cap_;
} vector<FBMPCEncodingObjectContext *, std::__1::allocator<FBMPCEncodingObjectContext *> >;

typedef struct _compressed_pair<FBMPCDecodingObjectContext *, std::__1::allocator<FBMPCDecodingObjectContext> > {
	FBMPCDecodingObjectContext __first_;
} compressed_pair<FBMPCDecodingObjectContext *, std::__1::allocator<FBMPCDecodingObjectContext> >;

typedef struct vector<FBMPCDecodingObjectContext, std::__1::allocator<FBMPCDecodingObjectContext> > {
	FBMPCDecodingObjectContext __begin_;
	FBMPCDecodingObjectContext __end_;
	compressed_pair<FBMPCDecodingObjectContext *, std::__1::allocator<FBMPCDecodingObjectContext> > __end_cap_;
} vector<FBMPCDecodingObjectContext, std::__1::allocator<FBMPCDecodingObjectContext> >;

typedef struct _compressed_pair<FBMPCEncodingObjectContext::EncodedObjectRecord *, std::__1::allocator<FBMPCEncodingObjectContext::EncodedObjectRecord> > {
	EncodedObjectRecord __first_;
} compressed_pair<FBMPCEncodingObjectContext::EncodedObjectRecord *, std::__1::allocator<FBMPCEncodingObjectContext::EncodedObjectRecord> >;

typedef struct vector<FBMPCEncodingObjectContext::EncodedObjectRecord, std::__1::allocator<FBMPCEncodingObjectContext::EncodedObjectRecord> > {
	EncodedObjectRecord __begin_;
	EncodedObjectRecord __end_;
	compressed_pair<FBMPCEncodingObjectContext::EncodedObjectRecord *, std::__1::allocator<FBMPCEncodingObjectContext::EncodedObjectRecord> > __end_cap_;
} vector<FBMPCEncodingObjectContext::EncodedObjectRecord, std::__1::allocator<FBMPCEncodingObjectContext::EncodedObjectRecord> >;

typedef struct FBMPCEncodingObjectContext {
	vector<FBMPCEncodingObjectContext::EncodedObjectRecord, std::__1::allocator<FBMPCEncodingObjectContext::EncodedObjectRecord> > _encodedObjects;
} FBMPCEncodingObjectContext;

typedef struct {
	unsigned field1;
	msgpack_object_kv field2;
} SCD_Struct_FB135;

typedef struct CGColor* CGColorRef;

typedef struct _compressed_pair<FBRangeAttributes *, std::__1::allocator<FBRangeAttributes> > {
	FBRangeAttributes __first_;
} compressed_pair<FBRangeAttributes *, std::__1::allocator<FBRangeAttributes> >;

typedef struct vector<FBRangeAttributes, std::__1::allocator<FBRangeAttributes> > {
	FBRangeAttributes __begin_;
	FBRangeAttributes __end_;
	compressed_pair<FBRangeAttributes *, std::__1::allocator<FBRangeAttributes> > __end_cap_;
} vector<FBRangeAttributes, std::__1::allocator<FBRangeAttributes> >;

typedef struct _compressed_pair<unsigned long *, std::__1::allocator<unsigned long> > {
	unsigned long long __first_;
} compressed_pair<unsigned long *, std::__1::allocator<unsigned long> >;

typedef struct vector<unsigned long, std::__1::allocator<unsigned long> > {
	unsigned long long __begin_;
	unsigned long long __end_;
	compressed_pair<unsigned long *, std::__1::allocator<unsigned long> > __end_cap_;
} vector<unsigned long, std::__1::allocator<unsigned long> >;

typedef struct {
	unsigned objectDidMeetVisibilityThreshold : 1;
	unsigned stoppedTrackingObjectWithoutMeetingVisibilityThreshold : 1;
	unsigned stoppedTrackingObjectAfterMeetingVisibilityThreshold : 1;
} SCD_Struct_FB141;

typedef struct _compressed_pair<NSValue *__strong **, std::__1::allocator<NSValue *__strong *> > {
	id __first_;
} compressed_pair<NSValue *__strong **, std::__1::allocator<NSValue *__strong *> >;

typedef struct _compressed_pair<unsigned long, std::__1::allocator<NSValue *> > {
	unsigned long long __first_;
} compressed_pair<unsigned long, std::__1::allocator<NSValue *> >;

typedef struct _split_buffer<NSValue *__strong *, std::__1::allocator<NSValue *__strong *> > {
	id __first_;
	id __begin_;
	id __end_;
	compressed_pair<NSValue *__strong **, std::__1::allocator<NSValue *__strong *> > __end_cap_;
} split_buffer<NSValue *__strong *, std::__1::allocator<NSValue *__strong *> >;

typedef struct deque<NSValue *, std::__1::allocator<NSValue *> > {
	split_buffer<NSValue *__strong *, std::__1::allocator<NSValue *__strong *> > __map_;
	unsigned long long __start_;
	compressed_pair<unsigned long, std::__1::allocator<NSValue *> > __size_;
} deque<NSValue *, std::__1::allocator<NSValue *> >;

typedef struct _tree_const_iterator<std::__1::__value_type<id, id>, std::__1::__tree_node<std::__1::__value_type<id, id>, void *> *, long> {
	__tree_node<std::__1::__value_type<id, id>, void *> __ptr_;
} tree_const_iterator<std::__1::__value_type<id, id>, std::__1::__tree_node<std::__1::__value_type<id, id>, void *> *, long>;

typedef struct _map_const_iterator<std::__1::__tree_const_iterator<std::__1::__value_type<id, id>, std::__1::__tree_node<std::__1::__value_type<id, id>, void *> *, long> > {
	tree_const_iterator<std::__1::__value_type<id, id>, std::__1::__tree_node<std::__1::__value_type<id, id>, void *> *, long> __i_;
} map_const_iterator<std::__1::__tree_const_iterator<std::__1::__value_type<id, id>, std::__1::__tree_node<std::__1::__value_type<id, id>, void *> *, long> >;

typedef struct FBOrderedDictionaryDynamicKeyComparator {
	/*^block*/id _f;
} FBOrderedDictionaryDynamicKeyComparator;

typedef struct _map_value_compare<id, std::__1::__value_type<id, id>, FBOrderedDictionaryDynamicKeyComparator, false> {
	FBOrderedDictionaryDynamicKeyComparator comp;
} map_value_compare<id, std::__1::__value_type<id, id>, FBOrderedDictionaryDynamicKeyComparator, false>;

typedef struct _compressed_pair<unsigned long, std::__1::__map_value_compare<id, std::__1::__value_type<id, id>, FBOrderedDictionaryDynamicKeyComparator, false> > {
	unsigned long long __first_;
	map_value_compare<id, std::__1::__value_type<id, id>, FBOrderedDictionaryDynamicKeyComparator, false> __second_;
} compressed_pair<unsigned long, std::__1::__map_value_compare<id, std::__1::__value_type<id, id>, FBOrderedDictionaryDynamicKeyComparator, false> >;

typedef struct _compressed_pair<std::__1::__tree_end_node<std::__1::__tree_node_base<void *> *>, std::__1::allocator<std::__1::__tree_node<std::__1::__value_type<id, id>, void *> > > {
	tree_end_node<std::__1::__tree_node_base<void *> *> __first_;
} compressed_pair<std::__1::__tree_end_node<std::__1::__tree_node_base<void *> *>, std::__1::allocator<std::__1::__tree_node<std::__1::__value_type<id, id>, void *> > >;

typedef struct _tree<std::__1::__value_type<id, id>, std::__1::__map_value_compare<id, std::__1::__value_type<id, id>, FBOrderedDictionaryDynamicKeyComparator, false>, std::__1::allocator<std::__1::__value_type<id, id> > > {
	__tree_node<std::__1::__value_type<id, id>, void *> __begin_node_;
	compressed_pair<std::__1::__tree_end_node<std::__1::__tree_node_base<void *> *>, std::__1::allocator<std::__1::__tree_node<std::__1::__value_type<id, id>, void *> > > __pair1_;
	compressed_pair<unsigned long, std::__1::__map_value_compare<id, std::__1::__value_type<id, id>, FBOrderedDictionaryDynamicKeyComparator, false> > __pair3_;
} tree<std::__1::__value_type<id, id>, std::__1::__map_value_compare<id, std::__1::__value_type<id, id>, FBOrderedDictionaryDynamicKeyComparator, false>, std::__1::allocator<std::__1::__value_type<id, id> > >;

typedef struct map<id, id, FBOrderedDictionaryDynamicKeyComparator, std::__1::allocator<std::__1::pair<const id, id> > > {
	tree<std::__1::__value_type<id, id>, std::__1::__map_value_compare<id, std::__1::__value_type<id, id>, FBOrderedDictionaryDynamicKeyComparator, false>, std::__1::allocator<std::__1::__value_type<id, id> > > __tree_;
} map<id, id, FBOrderedDictionaryDynamicKeyComparator, std::__1::allocator<std::__1::pair<const id, id> > >;

typedef struct _compressed_pair<std::__1::function<NSString *()> *, std::__1::allocator<std::__1::function<NSString *()> > > {
	function<NSString *()> __first_;
} compressed_pair<std::__1::function<NSString *()> *, std::__1::allocator<std::__1::function<NSString *()> > >;

typedef struct vector<std::__1::function<NSString *()>, std::__1::allocator<std::__1::function<NSString *()> > > {
	function<NSString *()> __begin_;
	function<NSString *()> __end_;
	compressed_pair<std::__1::function<NSString *()> *, std::__1::allocator<std::__1::function<NSString *()> > > __end_cap_;
} vector<std::__1::function<NSString *()>, std::__1::allocator<std::__1::function<NSString *()> > >;

typedef struct {
	long long field1;
	unsigned long long field2;
} SCD_Struct_FB156;

typedef struct opaque_pthread_rwlock_t {
	long long __sig;
	char __opaque[192];
} opaque_pthread_rwlock_t;

typedef struct ReadWriteLock {
	opaque_pthread_rwlock_t _rwlock;
} ReadWriteLock;

typedef struct CATransform3D {
	double m11;
	double m12;
	double m13;
	double m14;
	double m21;
	double m22;
	double m23;
	double m24;
	double m31;
	double m32;
	double m33;
	double m34;
	double m41;
	double m42;
	double m43;
	double m44;
} CATransform3D;

typedef struct CGImage* CGImageRef;

typedef struct {
	unsigned long long width;
	unsigned long long height;
} SCD_Struct_FB161;

typedef struct {
	int field1;
	int field2;
	int field3;
	int field4;
} SCD_Struct_FB162;

typedef struct {
	int field1;
	int field2;
	int field3;
} SCD_Struct_FB163;

typedef struct {
	int memory;
	int disk;
	int misses;
} SCD_Struct_FB164;

typedef struct _compressed_pair<unsigned long, std::__1::allocator<std::__1::__hash_node<std::__1::__hash_value_type<FBServiceNetworkerRequest *, FBServiceInternalState *>, void *> *> > {
	unsigned long long __first_;
} compressed_pair<unsigned long, std::__1::allocator<std::__1::__hash_node<std::__1::__hash_value_type<FBServiceNetworkerRequest *, FBServiceInternalState *>, void *> *> >;

typedef struct _compressed_pair<unsigned long, std::__1::__unordered_map_hasher<FBServiceNetworkerRequest *, std::__1::__hash_value_type<FBServiceNetworkerRequest *, FBServiceInternalState *>, FB::HashFunctor<NSObject *>, true> > {
	unsigned long long __first_;
} compressed_pair<unsigned long, std::__1::__unordered_map_hasher<FBServiceNetworkerRequest *, std::__1::__hash_value_type<FBServiceNetworkerRequest *, FBServiceInternalState *>, FB::HashFunctor<NSObject *>, true> >;

typedef struct _compressed_pair<float, std::__1::__unordered_map_equal<FBServiceNetworkerRequest *, std::__1::__hash_value_type<FBServiceNetworkerRequest *, FBServiceInternalState *>, FB::EqualFunctor<NSObject *>, true> > {
	float __first_;
} compressed_pair<float, std::__1::__unordered_map_equal<FBServiceNetworkerRequest *, std::__1::__hash_value_type<FBServiceNetworkerRequest *, FBServiceInternalState *>, FB::EqualFunctor<NSObject *>, true> >;

typedef struct _hash_node_base<std::__1::__hash_node<std::__1::__hash_value_type<FBServiceNetworkerRequest *, FBServiceInternalState *>, void *> *> {
	__hash_node<std::__1::__hash_value_type<FBServiceNetworkerRequest *, FBServiceInternalState *>, void *> __next_;
} hash_node_base<std::__1::__hash_node<std::__1::__hash_value_type<FBServiceNetworkerRequest *, FBServiceInternalState *>, void *> *>;

typedef struct _compressed_pair<std::__1::__hash_node_base<std::__1::__hash_node<std::__1::__hash_value_type<FBServiceNetworkerRequest *, FBServiceInternalState *>, void *> *>, std::__1::allocator<std::__1::__hash_node<std::__1::__hash_value_type<FBServiceNetworkerRequest *, FBServiceInternalState *>, void *> > > {
	hash_node_base<std::__1::__hash_node<std::__1::__hash_value_type<FBServiceNetworkerRequest *, FBServiceInternalState *>, void *> *> __first_;
} compressed_pair<std::__1::__hash_node_base<std::__1::__hash_node<std::__1::__hash_value_type<FBServiceNetworkerRequest *, FBServiceInternalState *>, void *> *>, std::__1::allocator<std::__1::__hash_node<std::__1::__hash_value_type<FBServiceNetworkerRequest *, FBServiceInternalState *>, void *> > >;

typedef struct _bucket_list_deallocator<std::__1::allocator<std::__1::__hash_node<std::__1::__hash_value_type<FBServiceNetworkerRequest *, FBServiceInternalState *>, void *> *> > {
	compressed_pair<unsigned long, std::__1::allocator<std::__1::__hash_node<std::__1::__hash_value_type<FBServiceNetworkerRequest *, FBServiceInternalState *>, void *> *> > __data_;
} bucket_list_deallocator<std::__1::allocator<std::__1::__hash_node<std::__1::__hash_value_type<FBServiceNetworkerRequest *, FBServiceInternalState *>, void *> *> >;

typedef struct _compressed_pair<std::__1::__hash_node<std::__1::__hash_value_type<FBServiceNetworkerRequest *, FBServiceInternalState *>, void *> **, std::__1::__bucket_list_deallocator<std::__1::allocator<std::__1::__hash_node<std::__1::__hash_value_type<FBServiceNetworkerRequest *, FBServiceInternalState *>, void *> *> > > {
	__hash_node<std::__1::__hash_value_type<FBServiceNetworkerRequest *, FBServiceInternalState *>, void *> __first_;
	bucket_list_deallocator<std::__1::allocator<std::__1::__hash_node<std::__1::__hash_value_type<FBServiceNetworkerRequest *, FBServiceInternalState *>, void *> *> > __second_;
} compressed_pair<std::__1::__hash_node<std::__1::__hash_value_type<FBServiceNetworkerRequest *, FBServiceInternalState *>, void *> **, std::__1::__bucket_list_deallocator<std::__1::allocator<std::__1::__hash_node<std::__1::__hash_value_type<FBServiceNetworkerRequest *, FBServiceInternalState *>, void *> *> > >;

typedef struct unique_ptr<std::__1::__hash_node<std::__1::__hash_value_type<FBServiceNetworkerRequest *, FBServiceInternalState *>, void *> *[], std::__1::__bucket_list_deallocator<std::__1::allocator<std::__1::__hash_node<std::__1::__hash_value_type<FBServiceNetworkerRequest *, FBServiceInternalState *>, void *> *> > > {
	compressed_pair<std::__1::__hash_node<std::__1::__hash_value_type<FBServiceNetworkerRequest *, FBServiceInternalState *>, void *> **, std::__1::__bucket_list_deallocator<std::__1::allocator<std::__1::__hash_node<std::__1::__hash_value_type<FBServiceNetworkerRequest *, FBServiceInternalState *>, void *> *> > > __ptr_;
} unique_ptr<std::__1::__hash_node<std::__1::__hash_value_type<FBServiceNetworkerRequest *, FBServiceInternalState *>, void *> *[], std::__1::__bucket_list_deallocator<std::__1::allocator<std::__1::__hash_node<std::__1::__hash_value_type<FBServiceNetworkerRequest *, FBServiceInternalState *>, void *> *> > >;

typedef struct _hash_table<std::__1::__hash_value_type<FBServiceNetworkerRequest *, FBServiceInternalState *>, std::__1::__unordered_map_hasher<FBServiceNetworkerRequest *, std::__1::__hash_value_type<FBServiceNetworkerRequest *, FBServiceInternalState *>, FB::HashFunctor<NSObject *>, true>, std::__1::__unordered_map_equal<FBServiceNetworkerRequest *, std::__1::__hash_value_type<FBServiceNetworkerRequest *, FBServiceInternalState *>, FB::EqualFunctor<NSObject *>, true>, std::__1::allocator<std::__1::__hash_value_type<FBServiceNetworkerRequest *, FBServiceInternalState *> > > {
	unique_ptr<std::__1::__hash_node<std::__1::__hash_value_type<FBServiceNetworkerRequest *, FBServiceInternalState *>, void *> *[], std::__1::__bucket_list_deallocator<std::__1::allocator<std::__1::__hash_node<std::__1::__hash_value_type<FBServiceNetworkerRequest *, FBServiceInternalState *>, void *> *> > > __bucket_list_;
	compressed_pair<std::__1::__hash_node_base<std::__1::__hash_node<std::__1::__hash_value_type<FBServiceNetworkerRequest *, FBServiceInternalState *>, void *> *>, std::__1::allocator<std::__1::__hash_node<std::__1::__hash_value_type<FBServiceNetworkerRequest *, FBServiceInternalState *>, void *> > > __p1_;
	compressed_pair<unsigned long, std::__1::__unordered_map_hasher<FBServiceNetworkerRequest *, std::__1::__hash_value_type<FBServiceNetworkerRequest *, FBServiceInternalState *>, FB::HashFunctor<NSObject *>, true> > __p2_;
	compressed_pair<float, std::__1::__unordered_map_equal<FBServiceNetworkerRequest *, std::__1::__hash_value_type<FBServiceNetworkerRequest *, FBServiceInternalState *>, FB::EqualFunctor<NSObject *>, true> > __p3_;
} hash_table<std::__1::__hash_value_type<FBServiceNetworkerRequest *, FBServiceInternalState *>, std::__1::__unordered_map_hasher<FBServiceNetworkerRequest *, std::__1::__hash_value_type<FBServiceNetworkerRequest *, FBServiceInternalState *>, FB::HashFunctor<NSObject *>, true>, std::__1::__unordered_map_equal<FBServiceNetworkerRequest *, std::__1::__hash_value_type<FBServiceNetworkerRequest *, FBServiceInternalState *>, FB::EqualFunctor<NSObject *>, true>, std::__1::allocator<std::__1::__hash_value_type<FBServiceNetworkerRequest *, FBServiceInternalState *> > >;

typedef struct unordered_map<FBServiceNetworkerRequest *, FBServiceInternalState *, FB::HashFunctor<NSObject *>, FB::EqualFunctor<NSObject *>, std::__1::allocator<std::__1::pair<FBServiceNetworkerRequest *const, FBServiceInternalState *> > > {
	hash_table<std::__1::__hash_value_type<FBServiceNetworkerRequest *, FBServiceInternalState *>, std::__1::__unordered_map_hasher<FBServiceNetworkerRequest *, std::__1::__hash_value_type<FBServiceNetworkerRequest *, FBServiceInternalState *>, FB::HashFunctor<NSObject *>, true>, std::__1::__unordered_map_equal<FBServiceNetworkerRequest *, std::__1::__hash_value_type<FBServiceNetworkerRequest *, FBServiceInternalState *>, FB::EqualFunctor<NSObject *>, true>, std::__1::allocator<std::__1::__hash_value_type<FBServiceNetworkerRequest *, FBServiceInternalState *> > > __table_;
} unordered_map<FBServiceNetworkerRequest *, FBServiceInternalState *, FB::HashFunctor<NSObject *>, FB::EqualFunctor<NSObject *>, std::__1::allocator<std::__1::pair<FBServiceNetworkerRequest *const, FBServiceInternalState *> > >;

typedef struct __CTFrame* CTFrameRef;

typedef struct __CTLine* CTLineRef;

typedef struct {
	long long location;
	long long length;
} SCD_Struct_FB177;

typedef struct FBRichTextImageAttachmentInsets {
	double top;
	double left;
	double bottom;
	double right;
} FBRichTextImageAttachmentInsets;

typedef struct NSRange {
	unsigned long long location;
	unsigned long long length;
} NSRange;

typedef struct FBGraphQLStreamingResponseParser* FBGraphQLStreamingResponseParserRef;

typedef struct _compressed_pair<unsigned long, std::__1::allocator<std::__1::__hash_node<std::__1::__hash_value_type<const char *, const char *>, void *> *> > {
	unsigned long long __first_;
} compressed_pair<unsigned long, std::__1::allocator<std::__1::__hash_node<std::__1::__hash_value_type<const char *, const char *>, void *> *> >;

typedef struct _compressed_pair<unsigned long, std::__1::__unordered_map_hasher<const char *, std::__1::__hash_value_type<const char *, const char *>, FB::CStringHasher, true> > {
	unsigned long long __first_;
} compressed_pair<unsigned long, std::__1::__unordered_map_hasher<const char *, std::__1::__hash_value_type<const char *, const char *>, FB::CStringHasher, true> >;

typedef struct _compressed_pair<float, std::__1::__unordered_map_equal<const char *, std::__1::__hash_value_type<const char *, const char *>, FB::CStringComparer, true> > {
	float __first_;
} compressed_pair<float, std::__1::__unordered_map_equal<const char *, std::__1::__hash_value_type<const char *, const char *>, FB::CStringComparer, true> >;

typedef struct _hash_node_base<std::__1::__hash_node<std::__1::__hash_value_type<const char *, const char *>, void *> *> {
	__hash_node<std::__1::__hash_value_type<const char *, const char *>, void *> __next_;
} hash_node_base<std::__1::__hash_node<std::__1::__hash_value_type<const char *, const char *>, void *> *>;

typedef struct _compressed_pair<std::__1::__hash_node_base<std::__1::__hash_node<std::__1::__hash_value_type<const char *, const char *>, void *> *>, std::__1::allocator<std::__1::__hash_node<std::__1::__hash_value_type<const char *, const char *>, void *> > > {
	hash_node_base<std::__1::__hash_node<std::__1::__hash_value_type<const char *, const char *>, void *> *> __first_;
} compressed_pair<std::__1::__hash_node_base<std::__1::__hash_node<std::__1::__hash_value_type<const char *, const char *>, void *> *>, std::__1::allocator<std::__1::__hash_node<std::__1::__hash_value_type<const char *, const char *>, void *> > >;

typedef struct _bucket_list_deallocator<std::__1::allocator<std::__1::__hash_node<std::__1::__hash_value_type<const char *, const char *>, void *> *> > {
	compressed_pair<unsigned long, std::__1::allocator<std::__1::__hash_node<std::__1::__hash_value_type<const char *, const char *>, void *> *> > __data_;
} bucket_list_deallocator<std::__1::allocator<std::__1::__hash_node<std::__1::__hash_value_type<const char *, const char *>, void *> *> >;

typedef struct _compressed_pair<std::__1::__hash_node<std::__1::__hash_value_type<const char *, const char *>, void *> **, std::__1::__bucket_list_deallocator<std::__1::allocator<std::__1::__hash_node<std::__1::__hash_value_type<const char *, const char *>, void *> *> > > {
	__hash_node<std::__1::__hash_value_type<const char *, const char *>, void *> __first_;
	bucket_list_deallocator<std::__1::allocator<std::__1::__hash_node<std::__1::__hash_value_type<const char *, const char *>, void *> *> > __second_;
} compressed_pair<std::__1::__hash_node<std::__1::__hash_value_type<const char *, const char *>, void *> **, std::__1::__bucket_list_deallocator<std::__1::allocator<std::__1::__hash_node<std::__1::__hash_value_type<const char *, const char *>, void *> *> > >;

typedef struct unique_ptr<std::__1::__hash_node<std::__1::__hash_value_type<const char *, const char *>, void *> *[], std::__1::__bucket_list_deallocator<std::__1::allocator<std::__1::__hash_node<std::__1::__hash_value_type<const char *, const char *>, void *> *> > > {
	compressed_pair<std::__1::__hash_node<std::__1::__hash_value_type<const char *, const char *>, void *> **, std::__1::__bucket_list_deallocator<std::__1::allocator<std::__1::__hash_node<std::__1::__hash_value_type<const char *, const char *>, void *> *> > > __ptr_;
} unique_ptr<std::__1::__hash_node<std::__1::__hash_value_type<const char *, const char *>, void *> *[], std::__1::__bucket_list_deallocator<std::__1::allocator<std::__1::__hash_node<std::__1::__hash_value_type<const char *, const char *>, void *> *> > >;

typedef struct _hash_table<std::__1::__hash_value_type<const char *, const char *>, std::__1::__unordered_map_hasher<const char *, std::__1::__hash_value_type<const char *, const char *>, FB::CStringHasher, true>, std::__1::__unordered_map_equal<const char *, std::__1::__hash_value_type<const char *, const char *>, FB::CStringComparer, true>, std::__1::allocator<std::__1::__hash_value_type<const char *, const char *> > > {
	unique_ptr<std::__1::__hash_node<std::__1::__hash_value_type<const char *, const char *>, void *> *[], std::__1::__bucket_list_deallocator<std::__1::allocator<std::__1::__hash_node<std::__1::__hash_value_type<const char *, const char *>, void *> *> > > __bucket_list_;
	compressed_pair<std::__1::__hash_node_base<std::__1::__hash_node<std::__1::__hash_value_type<const char *, const char *>, void *> *>, std::__1::allocator<std::__1::__hash_node<std::__1::__hash_value_type<const char *, const char *>, void *> > > __p1_;
	compressed_pair<unsigned long, std::__1::__unordered_map_hasher<const char *, std::__1::__hash_value_type<const char *, const char *>, FB::CStringHasher, true> > __p2_;
	compressed_pair<float, std::__1::__unordered_map_equal<const char *, std::__1::__hash_value_type<const char *, const char *>, FB::CStringComparer, true> > __p3_;
} hash_table<std::__1::__hash_value_type<const char *, const char *>, std::__1::__unordered_map_hasher<const char *, std::__1::__hash_value_type<const char *, const char *>, FB::CStringHasher, true>, std::__1::__unordered_map_equal<const char *, std::__1::__hash_value_type<const char *, const char *>, FB::CStringComparer, true>, std::__1::allocator<std::__1::__hash_value_type<const char *, const char *> > >;

typedef struct unordered_map<const char *, const char *, FB::CStringHasher, FB::CStringComparer, std::__1::allocator<std::__1::pair<const char *const, const char *> > > {
	hash_table<std::__1::__hash_value_type<const char *, const char *>, std::__1::__unordered_map_hasher<const char *, std::__1::__hash_value_type<const char *, const char *>, FB::CStringHasher, true>, std::__1::__unordered_map_equal<const char *, std::__1::__hash_value_type<const char *, const char *>, FB::CStringComparer, true>, std::__1::allocator<std::__1::__hash_value_type<const char *, const char *> > > __table_;
} unordered_map<const char *, const char *, FB::CStringHasher, FB::CStringComparer, std::__1::allocator<std::__1::pair<const char *const, const char *> > >;

typedef const struct FBGraphQLFieldSet* FBGraphQLFieldSetRef;

typedef struct _compressed_pair<facebook::mobile::graphstore::GraphStore::SubscriptionHandle *, std::__1::default_delete<facebook::mobile::graphstore::GraphStore::SubscriptionHandle> > {
	SubscriptionHandle __first_;
} compressed_pair<facebook::mobile::graphstore::GraphStore::SubscriptionHandle *, std::__1::default_delete<facebook::mobile::graphstore::GraphStore::SubscriptionHandle> >;

typedef struct unique_ptr<facebook::mobile::graphstore::GraphStore::SubscriptionHandle, std::__1::default_delete<facebook::mobile::graphstore::GraphStore::SubscriptionHandle> > {
	compressed_pair<facebook::mobile::graphstore::GraphStore::SubscriptionHandle *, std::__1::default_delete<facebook::mobile::graphstore::GraphStore::SubscriptionHandle> > __ptr_;
} unique_ptr<facebook::mobile::graphstore::GraphStore::SubscriptionHandle, std::__1::default_delete<facebook::mobile::graphstore::GraphStore::SubscriptionHandle> >;

typedef struct _compressed_pair<unsigned long, std::__1::allocator<std::__1::__hash_node<std::__1::__hash_value_type<std::__1::pair<NSString *, NSString *>, FBConsistentLookasideRecord *>, void *> *> > {
	unsigned long long __first_;
} compressed_pair<unsigned long, std::__1::allocator<std::__1::__hash_node<std::__1::__hash_value_type<std::__1::pair<NSString *, NSString *>, FBConsistentLookasideRecord *>, void *> *> >;

typedef struct _compressed_pair<unsigned long, std::__1::__unordered_map_hasher<std::__1::pair<NSString *, NSString *>, std::__1::__hash_value_type<std::__1::pair<NSString *, NSString *>, FBConsistentLookasideRecord *>, (anonymous namespace)::Hasher, true> > {
	unsigned long long __first_;
} compressed_pair<unsigned long, std::__1::__unordered_map_hasher<std::__1::pair<NSString *, NSString *>, std::__1::__hash_value_type<std::__1::pair<NSString *, NSString *>, FBConsistentLookasideRecord *>, (anonymous namespace)::Hasher, true> >;

typedef struct _compressed_pair<float, std::__1::__unordered_map_equal<std::__1::pair<NSString *, NSString *>, std::__1::__hash_value_type<std::__1::pair<NSString *, NSString *>, FBConsistentLookasideRecord *>, (anonymous namespace)::EqualTo, true> > {
	float __first_;
} compressed_pair<float, std::__1::__unordered_map_equal<std::__1::pair<NSString *, NSString *>, std::__1::__hash_value_type<std::__1::pair<NSString *, NSString *>, FBConsistentLookasideRecord *>, (anonymous namespace)::EqualTo, true> >;

typedef struct _hash_node_base<std::__1::__hash_node<std::__1::__hash_value_type<std::__1::pair<NSString *, NSString *>, FBConsistentLookasideRecord *>, void *> *> {
	__hash_node<std::__1::__hash_value_type<std::__1::pair<NSString *, NSString *>, FBConsistentLookasideRecord *>, void *> __next_;
} hash_node_base<std::__1::__hash_node<std::__1::__hash_value_type<std::__1::pair<NSString *, NSString *>, FBConsistentLookasideRecord *>, void *> *>;

typedef struct _compressed_pair<std::__1::__hash_node_base<std::__1::__hash_node<std::__1::__hash_value_type<std::__1::pair<NSString *, NSString *>, FBConsistentLookasideRecord *>, void *> *>, std::__1::allocator<std::__1::__hash_node<std::__1::__hash_value_type<std::__1::pair<NSString *, NSString *>, FBConsistentLookasideRecord *>, void *> > > {
	hash_node_base<std::__1::__hash_node<std::__1::__hash_value_type<std::__1::pair<NSString *, NSString *>, FBConsistentLookasideRecord *>, void *> *> __first_;
} compressed_pair<std::__1::__hash_node_base<std::__1::__hash_node<std::__1::__hash_value_type<std::__1::pair<NSString *, NSString *>, FBConsistentLookasideRecord *>, void *> *>, std::__1::allocator<std::__1::__hash_node<std::__1::__hash_value_type<std::__1::pair<NSString *, NSString *>, FBConsistentLookasideRecord *>, void *> > >;

typedef struct _bucket_list_deallocator<std::__1::allocator<std::__1::__hash_node<std::__1::__hash_value_type<std::__1::pair<NSString *, NSString *>, FBConsistentLookasideRecord *>, void *> *> > {
	compressed_pair<unsigned long, std::__1::allocator<std::__1::__hash_node<std::__1::__hash_value_type<std::__1::pair<NSString *, NSString *>, FBConsistentLookasideRecord *>, void *> *> > __data_;
} bucket_list_deallocator<std::__1::allocator<std::__1::__hash_node<std::__1::__hash_value_type<std::__1::pair<NSString *, NSString *>, FBConsistentLookasideRecord *>, void *> *> >;

typedef struct _compressed_pair<std::__1::__hash_node<std::__1::__hash_value_type<std::__1::pair<NSString *, NSString *>, FBConsistentLookasideRecord *>, void *> **, std::__1::__bucket_list_deallocator<std::__1::allocator<std::__1::__hash_node<std::__1::__hash_value_type<std::__1::pair<NSString *, NSString *>, FBConsistentLookasideRecord *>, void *> *> > > {
	__hash_node<std::__1::__hash_value_type<std::__1::pair<NSString *, NSString *>, FBConsistentLookasideRecord *>, void *> __first_;
	bucket_list_deallocator<std::__1::allocator<std::__1::__hash_node<std::__1::__hash_value_type<std::__1::pair<NSString *, NSString *>, FBConsistentLookasideRecord *>, void *> *> > __second_;
} compressed_pair<std::__1::__hash_node<std::__1::__hash_value_type<std::__1::pair<NSString *, NSString *>, FBConsistentLookasideRecord *>, void *> **, std::__1::__bucket_list_deallocator<std::__1::allocator<std::__1::__hash_node<std::__1::__hash_value_type<std::__1::pair<NSString *, NSString *>, FBConsistentLookasideRecord *>, void *> *> > >;

typedef struct unique_ptr<std::__1::__hash_node<std::__1::__hash_value_type<std::__1::pair<NSString *, NSString *>, FBConsistentLookasideRecord *>, void *> *[], std::__1::__bucket_list_deallocator<std::__1::allocator<std::__1::__hash_node<std::__1::__hash_value_type<std::__1::pair<NSString *, NSString *>, FBConsistentLookasideRecord *>, void *> *> > > {
	compressed_pair<std::__1::__hash_node<std::__1::__hash_value_type<std::__1::pair<NSString *, NSString *>, FBConsistentLookasideRecord *>, void *> **, std::__1::__bucket_list_deallocator<std::__1::allocator<std::__1::__hash_node<std::__1::__hash_value_type<std::__1::pair<NSString *, NSString *>, FBConsistentLookasideRecord *>, void *> *> > > __ptr_;
} unique_ptr<std::__1::__hash_node<std::__1::__hash_value_type<std::__1::pair<NSString *, NSString *>, FBConsistentLookasideRecord *>, void *> *[], std::__1::__bucket_list_deallocator<std::__1::allocator<std::__1::__hash_node<std::__1::__hash_value_type<std::__1::pair<NSString *, NSString *>, FBConsistentLookasideRecord *>, void *> *> > >;

typedef struct _hash_table<std::__1::__hash_value_type<std::__1::pair<NSString *, NSString *>, FBConsistentLookasideRecord *>, std::__1::__unordered_map_hasher<std::__1::pair<NSString *, NSString *>, std::__1::__hash_value_type<std::__1::pair<NSString *, NSString *>, FBConsistentLookasideRecord *>, (anonymous namespace)::Hasher, true>, std::__1::__unordered_map_equal<std::__1::pair<NSString *, NSString *>, std::__1::__hash_value_type<std::__1::pair<NSString *, NSString *>, FBConsistentLookasideRecord *>, (anonymous namespace)::EqualTo, true>, std::__1::allocator<std::__1::__hash_value_type<std::__1::pair<NSString *, NSString *>, FBConsistentLookasideRecord *> > > {
	unique_ptr<std::__1::__hash_node<std::__1::__hash_value_type<std::__1::pair<NSString *, NSString *>, FBConsistentLookasideRecord *>, void *> *[], std::__1::__bucket_list_deallocator<std::__1::allocator<std::__1::__hash_node<std::__1::__hash_value_type<std::__1::pair<NSString *, NSString *>, FBConsistentLookasideRecord *>, void *> *> > > __bucket_list_;
	compressed_pair<std::__1::__hash_node_base<std::__1::__hash_node<std::__1::__hash_value_type<std::__1::pair<NSString *, NSString *>, FBConsistentLookasideRecord *>, void *> *>, std::__1::allocator<std::__1::__hash_node<std::__1::__hash_value_type<std::__1::pair<NSString *, NSString *>, FBConsistentLookasideRecord *>, void *> > > __p1_;
	compressed_pair<unsigned long, std::__1::__unordered_map_hasher<std::__1::pair<NSString *, NSString *>, std::__1::__hash_value_type<std::__1::pair<NSString *, NSString *>, FBConsistentLookasideRecord *>, (anonymous namespace)::Hasher, true> > __p2_;
	compressed_pair<float, std::__1::__unordered_map_equal<std::__1::pair<NSString *, NSString *>, std::__1::__hash_value_type<std::__1::pair<NSString *, NSString *>, FBConsistentLookasideRecord *>, (anonymous namespace)::EqualTo, true> > __p3_;
} hash_table<std::__1::__hash_value_type<std::__1::pair<NSString *, NSString *>, FBConsistentLookasideRecord *>, std::__1::__unordered_map_hasher<std::__1::pair<NSString *, NSString *>, std::__1::__hash_value_type<std::__1::pair<NSString *, NSString *>, FBConsistentLookasideRecord *>, (anonymous namespace)::Hasher, true>, std::__1::__unordered_map_equal<std::__1::pair<NSString *, NSString *>, std::__1::__hash_value_type<std::__1::pair<NSString *, NSString *>, FBConsistentLookasideRecord *>, (anonymous namespace)::EqualTo, true>, std::__1::allocator<std::__1::__hash_value_type<std::__1::pair<NSString *, NSString *>, FBConsistentLookasideRecord *> > >;

typedef struct unordered_map<std::__1::pair<NSString *, NSString *>, FBConsistentLookasideRecord *, (anonymous namespace)::Hasher, (anonymous namespace)::EqualTo, std::__1::allocator<std::__1::pair<const std::__1::pair<NSString *, NSString *>, FBConsistentLookasideRecord *> > > {
	hash_table<std::__1::__hash_value_type<std::__1::pair<NSString *, NSString *>, FBConsistentLookasideRecord *>, std::__1::__unordered_map_hasher<std::__1::pair<NSString *, NSString *>, std::__1::__hash_value_type<std::__1::pair<NSString *, NSString *>, FBConsistentLookasideRecord *>, (anonymous namespace)::Hasher, true>, std::__1::__unordered_map_equal<std::__1::pair<NSString *, NSString *>, std::__1::__hash_value_type<std::__1::pair<NSString *, NSString *>, FBConsistentLookasideRecord *>, (anonymous namespace)::EqualTo, true>, std::__1::allocator<std::__1::__hash_value_type<std::__1::pair<NSString *, NSString *>, FBConsistentLookasideRecord *> > > __table_;
} unordered_map<std::__1::pair<NSString *, NSString *>, FBConsistentLookasideRecord *, (anonymous namespace)::Hasher, (anonymous namespace)::EqualTo, std::__1::allocator<std::__1::pair<const std::__1::pair<NSString *, NSString *>, FBConsistentLookasideRecord *> > >;

typedef struct _compressed_pair<FB::DataModelInfra::Persistence *, std::__1::default_delete<FB::DataModelInfra::Persistence> > {
	Persistence __first_;
} compressed_pair<FB::DataModelInfra::Persistence *, std::__1::default_delete<FB::DataModelInfra::Persistence> >;

typedef struct unique_ptr<FB::DataModelInfra::Persistence, std::__1::default_delete<FB::DataModelInfra::Persistence> > {
	compressed_pair<FB::DataModelInfra::Persistence *, std::__1::default_delete<FB::DataModelInfra::Persistence> > __ptr_;
} unique_ptr<FB::DataModelInfra::Persistence, std::__1::default_delete<FB::DataModelInfra::Persistence> >;

typedef struct _compressed_pair<facebook::mobile::FBMemModel::detail::CLCImpl *, std::__1::default_delete<facebook::mobile::FBMemModel::detail::CLCImpl> > {
	CLCImpl __first_;
} compressed_pair<facebook::mobile::FBMemModel::detail::CLCImpl *, std::__1::default_delete<facebook::mobile::FBMemModel::detail::CLCImpl> >;

typedef struct unique_ptr<facebook::mobile::FBMemModel::detail::CLCImpl, std::__1::default_delete<facebook::mobile::FBMemModel::detail::CLCImpl> > {
	compressed_pair<facebook::mobile::FBMemModel::detail::CLCImpl *, std::__1::default_delete<facebook::mobile::FBMemModel::detail::CLCImpl> > __ptr_;
} unique_ptr<facebook::mobile::FBMemModel::detail::CLCImpl, std::__1::default_delete<facebook::mobile::FBMemModel::detail::CLCImpl> >;

typedef struct _compressed_pair<facebook::mobile::FBMemModel::detail::IVarArray *, std::__1::default_delete<facebook::mobile::FBMemModel::detail::IVarArray> > {
	IVarArray __first_;
} compressed_pair<facebook::mobile::FBMemModel::detail::IVarArray *, std::__1::default_delete<facebook::mobile::FBMemModel::detail::IVarArray> >;

typedef struct unique_ptr<facebook::mobile::FBMemModel::detail::IVarArray, std::__1::default_delete<facebook::mobile::FBMemModel::detail::IVarArray> > {
	compressed_pair<facebook::mobile::FBMemModel::detail::IVarArray *, std::__1::default_delete<facebook::mobile::FBMemModel::detail::IVarArray> > __ptr_;
} unique_ptr<facebook::mobile::FBMemModel::detail::IVarArray, std::__1::default_delete<facebook::mobile::FBMemModel::detail::IVarArray> >;

typedef struct _compressed_pair<facebook::mobile::FBMemModel::detail::RecordAndSnapshot *, std::__1::default_delete<facebook::mobile::FBMemModel::detail::RecordAndSnapshot> > {
	RecordAndSnapshot __first_;
} compressed_pair<facebook::mobile::FBMemModel::detail::RecordAndSnapshot *, std::__1::default_delete<facebook::mobile::FBMemModel::detail::RecordAndSnapshot> >;

typedef struct unique_ptr<facebook::mobile::FBMemModel::detail::RecordAndSnapshot, std::__1::default_delete<facebook::mobile::FBMemModel::detail::RecordAndSnapshot> > {
	compressed_pair<facebook::mobile::FBMemModel::detail::RecordAndSnapshot *, std::__1::default_delete<facebook::mobile::FBMemModel::detail::RecordAndSnapshot> > __ptr_;
} unique_ptr<facebook::mobile::FBMemModel::detail::RecordAndSnapshot, std::__1::default_delete<facebook::mobile::FBMemModel::detail::RecordAndSnapshot> >;

typedef struct vector<FBMemModelUpdateReason, std::__1::allocator<FBMemModelUpdateReason> >* vector<FBMemModelUpdateReason, std::__1::allocator<FBMemModelUpdateReason> >Ref;

typedef struct _compressed_pair<facebook::mobile::FBMemModel::detail::BuilderImpl *, std::__1::default_delete<facebook::mobile::FBMemModel::detail::BuilderImpl> > {
	BuilderImpl __first_;
} compressed_pair<facebook::mobile::FBMemModel::detail::BuilderImpl *, std::__1::default_delete<facebook::mobile::FBMemModel::detail::BuilderImpl> >;

typedef struct unique_ptr<facebook::mobile::FBMemModel::detail::BuilderImpl, std::__1::default_delete<facebook::mobile::FBMemModel::detail::BuilderImpl> > {
	compressed_pair<facebook::mobile::FBMemModel::detail::BuilderImpl *, std::__1::default_delete<facebook::mobile::FBMemModel::detail::BuilderImpl> > __ptr_;
} unique_ptr<facebook::mobile::FBMemModel::detail::BuilderImpl, std::__1::default_delete<facebook::mobile::FBMemModel::detail::BuilderImpl> >;

typedef const struct RecordAndSnapshot* RecordAndSnapshotRef;

typedef const struct shared_ptr<const facebook::mobile::graphstore::Record>* shared_ptr<const facebook::mobile::graphstore::Record>Ref;

typedef const struct shared_ptr<const facebook::mobile::graphstore::NodeSource>* shared_ptr<const facebook::mobile::graphstore::NodeSource>Ref;

typedef struct shared_ptr<facebook::mobile::graphstore::GraphStore> {
	GraphStore __ptr_;
	__shared_weak_count __cntrl_;
} shared_ptr<facebook::mobile::graphstore::GraphStore>;

typedef struct atomic<FBRequestPriority> {
	Aq __a_;
} atomic<FBRequestPriority>;

typedef struct _compressed_pair<unsigned long, std::__1::allocator<std::__1::__hash_node<std::__1::__hash_value_type<FBGraphQLFetchConfiguration *, FBAnalyticsPrefetcherLogger *>, void *> *> > {
	unsigned long long __first_;
} compressed_pair<unsigned long, std::__1::allocator<std::__1::__hash_node<std::__1::__hash_value_type<FBGraphQLFetchConfiguration *, FBAnalyticsPrefetcherLogger *>, void *> *> >;

typedef struct _compressed_pair<unsigned long, std::__1::__unordered_map_hasher<FBGraphQLFetchConfiguration *, std::__1::__hash_value_type<FBGraphQLFetchConfiguration *, FBAnalyticsPrefetcherLogger *>, FB::HashFunctor<NSObject *>, true> > {
	unsigned long long __first_;
} compressed_pair<unsigned long, std::__1::__unordered_map_hasher<FBGraphQLFetchConfiguration *, std::__1::__hash_value_type<FBGraphQLFetchConfiguration *, FBAnalyticsPrefetcherLogger *>, FB::HashFunctor<NSObject *>, true> >;

typedef struct _compressed_pair<float, std::__1::__unordered_map_equal<FBGraphQLFetchConfiguration *, std::__1::__hash_value_type<FBGraphQLFetchConfiguration *, FBAnalyticsPrefetcherLogger *>, FB::EqualFunctor<NSObject *>, true> > {
	float __first_;
} compressed_pair<float, std::__1::__unordered_map_equal<FBGraphQLFetchConfiguration *, std::__1::__hash_value_type<FBGraphQLFetchConfiguration *, FBAnalyticsPrefetcherLogger *>, FB::EqualFunctor<NSObject *>, true> >;

typedef struct _hash_node_base<std::__1::__hash_node<std::__1::__hash_value_type<FBGraphQLFetchConfiguration *, FBAnalyticsPrefetcherLogger *>, void *> *> {
	__hash_node<std::__1::__hash_value_type<FBGraphQLFetchConfiguration *, FBAnalyticsPrefetcherLogger *>, void *> __next_;
} hash_node_base<std::__1::__hash_node<std::__1::__hash_value_type<FBGraphQLFetchConfiguration *, FBAnalyticsPrefetcherLogger *>, void *> *>;

typedef struct _compressed_pair<std::__1::__hash_node_base<std::__1::__hash_node<std::__1::__hash_value_type<FBGraphQLFetchConfiguration *, FBAnalyticsPrefetcherLogger *>, void *> *>, std::__1::allocator<std::__1::__hash_node<std::__1::__hash_value_type<FBGraphQLFetchConfiguration *, FBAnalyticsPrefetcherLogger *>, void *> > > {
	hash_node_base<std::__1::__hash_node<std::__1::__hash_value_type<FBGraphQLFetchConfiguration *, FBAnalyticsPrefetcherLogger *>, void *> *> __first_;
} compressed_pair<std::__1::__hash_node_base<std::__1::__hash_node<std::__1::__hash_value_type<FBGraphQLFetchConfiguration *, FBAnalyticsPrefetcherLogger *>, void *> *>, std::__1::allocator<std::__1::__hash_node<std::__1::__hash_value_type<FBGraphQLFetchConfiguration *, FBAnalyticsPrefetcherLogger *>, void *> > >;

typedef struct _bucket_list_deallocator<std::__1::allocator<std::__1::__hash_node<std::__1::__hash_value_type<FBGraphQLFetchConfiguration *, FBAnalyticsPrefetcherLogger *>, void *> *> > {
	compressed_pair<unsigned long, std::__1::allocator<std::__1::__hash_node<std::__1::__hash_value_type<FBGraphQLFetchConfiguration *, FBAnalyticsPrefetcherLogger *>, void *> *> > __data_;
} bucket_list_deallocator<std::__1::allocator<std::__1::__hash_node<std::__1::__hash_value_type<FBGraphQLFetchConfiguration *, FBAnalyticsPrefetcherLogger *>, void *> *> >;

typedef struct _compressed_pair<std::__1::__hash_node<std::__1::__hash_value_type<FBGraphQLFetchConfiguration *, FBAnalyticsPrefetcherLogger *>, void *> **, std::__1::__bucket_list_deallocator<std::__1::allocator<std::__1::__hash_node<std::__1::__hash_value_type<FBGraphQLFetchConfiguration *, FBAnalyticsPrefetcherLogger *>, void *> *> > > {
	__hash_node<std::__1::__hash_value_type<FBGraphQLFetchConfiguration *, FBAnalyticsPrefetcherLogger *>, void *> __first_;
	bucket_list_deallocator<std::__1::allocator<std::__1::__hash_node<std::__1::__hash_value_type<FBGraphQLFetchConfiguration *, FBAnalyticsPrefetcherLogger *>, void *> *> > __second_;
} compressed_pair<std::__1::__hash_node<std::__1::__hash_value_type<FBGraphQLFetchConfiguration *, FBAnalyticsPrefetcherLogger *>, void *> **, std::__1::__bucket_list_deallocator<std::__1::allocator<std::__1::__hash_node<std::__1::__hash_value_type<FBGraphQLFetchConfiguration *, FBAnalyticsPrefetcherLogger *>, void *> *> > >;

typedef struct unique_ptr<std::__1::__hash_node<std::__1::__hash_value_type<FBGraphQLFetchConfiguration *, FBAnalyticsPrefetcherLogger *>, void *> *[], std::__1::__bucket_list_deallocator<std::__1::allocator<std::__1::__hash_node<std::__1::__hash_value_type<FBGraphQLFetchConfiguration *, FBAnalyticsPrefetcherLogger *>, void *> *> > > {
	compressed_pair<std::__1::__hash_node<std::__1::__hash_value_type<FBGraphQLFetchConfiguration *, FBAnalyticsPrefetcherLogger *>, void *> **, std::__1::__bucket_list_deallocator<std::__1::allocator<std::__1::__hash_node<std::__1::__hash_value_type<FBGraphQLFetchConfiguration *, FBAnalyticsPrefetcherLogger *>, void *> *> > > __ptr_;
} unique_ptr<std::__1::__hash_node<std::__1::__hash_value_type<FBGraphQLFetchConfiguration *, FBAnalyticsPrefetcherLogger *>, void *> *[], std::__1::__bucket_list_deallocator<std::__1::allocator<std::__1::__hash_node<std::__1::__hash_value_type<FBGraphQLFetchConfiguration *, FBAnalyticsPrefetcherLogger *>, void *> *> > >;

typedef struct _hash_table<std::__1::__hash_value_type<FBGraphQLFetchConfiguration *, FBAnalyticsPrefetcherLogger *>, std::__1::__unordered_map_hasher<FBGraphQLFetchConfiguration *, std::__1::__hash_value_type<FBGraphQLFetchConfiguration *, FBAnalyticsPrefetcherLogger *>, FB::HashFunctor<NSObject *>, true>, std::__1::__unordered_map_equal<FBGraphQLFetchConfiguration *, std::__1::__hash_value_type<FBGraphQLFetchConfiguration *, FBAnalyticsPrefetcherLogger *>, FB::EqualFunctor<NSObject *>, true>, std::__1::allocator<std::__1::__hash_value_type<FBGraphQLFetchConfiguration *, FBAnalyticsPrefetcherLogger *> > > {
	unique_ptr<std::__1::__hash_node<std::__1::__hash_value_type<FBGraphQLFetchConfiguration *, FBAnalyticsPrefetcherLogger *>, void *> *[], std::__1::__bucket_list_deallocator<std::__1::allocator<std::__1::__hash_node<std::__1::__hash_value_type<FBGraphQLFetchConfiguration *, FBAnalyticsPrefetcherLogger *>, void *> *> > > __bucket_list_;
	compressed_pair<std::__1::__hash_node_base<std::__1::__hash_node<std::__1::__hash_value_type<FBGraphQLFetchConfiguration *, FBAnalyticsPrefetcherLogger *>, void *> *>, std::__1::allocator<std::__1::__hash_node<std::__1::__hash_value_type<FBGraphQLFetchConfiguration *, FBAnalyticsPrefetcherLogger *>, void *> > > __p1_;
	compressed_pair<unsigned long, std::__1::__unordered_map_hasher<FBGraphQLFetchConfiguration *, std::__1::__hash_value_type<FBGraphQLFetchConfiguration *, FBAnalyticsPrefetcherLogger *>, FB::HashFunctor<NSObject *>, true> > __p2_;
	compressed_pair<float, std::__1::__unordered_map_equal<FBGraphQLFetchConfiguration *, std::__1::__hash_value_type<FBGraphQLFetchConfiguration *, FBAnalyticsPrefetcherLogger *>, FB::EqualFunctor<NSObject *>, true> > __p3_;
} hash_table<std::__1::__hash_value_type<FBGraphQLFetchConfiguration *, FBAnalyticsPrefetcherLogger *>, std::__1::__unordered_map_hasher<FBGraphQLFetchConfiguration *, std::__1::__hash_value_type<FBGraphQLFetchConfiguration *, FBAnalyticsPrefetcherLogger *>, FB::HashFunctor<NSObject *>, true>, std::__1::__unordered_map_equal<FBGraphQLFetchConfiguration *, std::__1::__hash_value_type<FBGraphQLFetchConfiguration *, FBAnalyticsPrefetcherLogger *>, FB::EqualFunctor<NSObject *>, true>, std::__1::allocator<std::__1::__hash_value_type<FBGraphQLFetchConfiguration *, FBAnalyticsPrefetcherLogger *> > >;

typedef struct unordered_map<FBGraphQLFetchConfiguration *, FBAnalyticsPrefetcherLogger *, FB::HashFunctor<NSObject *>, FB::EqualFunctor<NSObject *>, std::__1::allocator<std::__1::pair<FBGraphQLFetchConfiguration *const, FBAnalyticsPrefetcherLogger *> > > {
	hash_table<std::__1::__hash_value_type<FBGraphQLFetchConfiguration *, FBAnalyticsPrefetcherLogger *>, std::__1::__unordered_map_hasher<FBGraphQLFetchConfiguration *, std::__1::__hash_value_type<FBGraphQLFetchConfiguration *, FBAnalyticsPrefetcherLogger *>, FB::HashFunctor<NSObject *>, true>, std::__1::__unordered_map_equal<FBGraphQLFetchConfiguration *, std::__1::__hash_value_type<FBGraphQLFetchConfiguration *, FBAnalyticsPrefetcherLogger *>, FB::EqualFunctor<NSObject *>, true>, std::__1::allocator<std::__1::__hash_value_type<FBGraphQLFetchConfiguration *, FBAnalyticsPrefetcherLogger *> > > __table_;
} unordered_map<FBGraphQLFetchConfiguration *, FBAnalyticsPrefetcherLogger *, FB::HashFunctor<NSObject *>, FB::EqualFunctor<NSObject *>, std::__1::allocator<std::__1::pair<FBGraphQLFetchConfiguration *const, FBAnalyticsPrefetcherLogger *> > >;

typedef struct _compressed_pair<unsigned long, std::__1::allocator<std::__1::__hash_node<std::__1::__hash_value_type<std::__1::pair<id<FBGraphQLFetchUnit>, FBGraphQLFetchConfiguration *>, std::__1::vector<FBGraphQLFetchRequest, std::__1::allocator<FBGraphQLFetchRequest> > >, void *> *> > {
	unsigned long long __first_;
} compressed_pair<unsigned long, std::__1::allocator<std::__1::__hash_node<std::__1::__hash_value_type<std::__1::pair<id<FBGraphQLFetchUnit>, FBGraphQLFetchConfiguration *>, std::__1::vector<FBGraphQLFetchRequest, std::__1::allocator<FBGraphQLFetchRequest> > >, void *> *> >;

typedef struct _compressed_pair<unsigned long, std::__1::__unordered_map_hasher<std::__1::pair<id<FBGraphQLFetchUnit>, FBGraphQLFetchConfiguration *>, std::__1::__hash_value_type<std::__1::pair<id<FBGraphQLFetchUnit>, FBGraphQLFetchConfiguration *>, std::__1::vector<FBGraphQLFetchRequest, std::__1::allocator<FBGraphQLFetchRequest> > >, FB::HashFunctor<RequestMapKey>, true> > {
	unsigned long long __first_;
} compressed_pair<unsigned long, std::__1::__unordered_map_hasher<std::__1::pair<id<FBGraphQLFetchUnit>, FBGraphQLFetchConfiguration *>, std::__1::__hash_value_type<std::__1::pair<id<FBGraphQLFetchUnit>, FBGraphQLFetchConfiguration *>, std::__1::vector<FBGraphQLFetchRequest, std::__1::allocator<FBGraphQLFetchRequest> > >, FB::HashFunctor<RequestMapKey>, true> >;

typedef struct _compressed_pair<float, std::__1::__unordered_map_equal<std::__1::pair<id<FBGraphQLFetchUnit>, FBGraphQLFetchConfiguration *>, std::__1::__hash_value_type<std::__1::pair<id<FBGraphQLFetchUnit>, FBGraphQLFetchConfiguration *>, std::__1::vector<FBGraphQLFetchRequest, std::__1::allocator<FBGraphQLFetchRequest> > >, FB::EqualFunctor<RequestMapKey>, true> > {
	float __first_;
} compressed_pair<float, std::__1::__unordered_map_equal<std::__1::pair<id<FBGraphQLFetchUnit>, FBGraphQLFetchConfiguration *>, std::__1::__hash_value_type<std::__1::pair<id<FBGraphQLFetchUnit>, FBGraphQLFetchConfiguration *>, std::__1::vector<FBGraphQLFetchRequest, std::__1::allocator<FBGraphQLFetchRequest> > >, FB::EqualFunctor<RequestMapKey>, true> >;

typedef struct _hash_node_base<std::__1::__hash_node<std::__1::__hash_value_type<std::__1::pair<id<FBGraphQLFetchUnit>, FBGraphQLFetchConfiguration *>, std::__1::vector<FBGraphQLFetchRequest, std::__1::allocator<FBGraphQLFetchRequest> > >, void *> *> {
	__hash_node<std::__1::__hash_value_type<std::__1::pair<id<FBGraphQLFetchUnit>, FBGraphQLFetchConfiguration *>, std::__1::vector<FBGraphQLFetchRequest, std::__1::allocator<FBGraphQLFetchRequest> > >, void *> __next_;
} hash_node_base<std::__1::__hash_node<std::__1::__hash_value_type<std::__1::pair<id<FBGraphQLFetchUnit>, FBGraphQLFetchConfiguration *>, std::__1::vector<FBGraphQLFetchRequest, std::__1::allocator<FBGraphQLFetchRequest> > >, void *> *>;

typedef struct _compressed_pair<std::__1::__hash_node_base<std::__1::__hash_node<std::__1::__hash_value_type<std::__1::pair<id<FBGraphQLFetchUnit>, FBGraphQLFetchConfiguration *>, std::__1::vector<FBGraphQLFetchRequest, std::__1::allocator<FBGraphQLFetchRequest> > >, void *> *>, std::__1::allocator<std::__1::__hash_node<std::__1::__hash_value_type<std::__1::pair<id<FBGraphQLFetchUnit>, FBGraphQLFetchConfiguration *>, std::__1::vector<FBGraphQLFetchRequest, std::__1::allocator<FBGraphQLFetchRequest> > >, void *> > > {
	hash_node_base<std::__1::__hash_node<std::__1::__hash_value_type<std::__1::pair<id<FBGraphQLFetchUnit>, FBGraphQLFetchConfiguration *>, std::__1::vector<FBGraphQLFetchRequest, std::__1::allocator<FBGraphQLFetchRequest> > >, void *> *> __first_;
} compressed_pair<std::__1::__hash_node_base<std::__1::__hash_node<std::__1::__hash_value_type<std::__1::pair<id<FBGraphQLFetchUnit>, FBGraphQLFetchConfiguration *>, std::__1::vector<FBGraphQLFetchRequest, std::__1::allocator<FBGraphQLFetchRequest> > >, void *> *>, std::__1::allocator<std::__1::__hash_node<std::__1::__hash_value_type<std::__1::pair<id<FBGraphQLFetchUnit>, FBGraphQLFetchConfiguration *>, std::__1::vector<FBGraphQLFetchRequest, std::__1::allocator<FBGraphQLFetchRequest> > >, void *> > >;

typedef struct _bucket_list_deallocator<std::__1::allocator<std::__1::__hash_node<std::__1::__hash_value_type<std::__1::pair<id<FBGraphQLFetchUnit>, FBGraphQLFetchConfiguration *>, std::__1::vector<FBGraphQLFetchRequest, std::__1::allocator<FBGraphQLFetchRequest> > >, void *> *> > {
	compressed_pair<unsigned long, std::__1::allocator<std::__1::__hash_node<std::__1::__hash_value_type<std::__1::pair<id<FBGraphQLFetchUnit>, FBGraphQLFetchConfiguration *>, std::__1::vector<FBGraphQLFetchRequest, std::__1::allocator<FBGraphQLFetchRequest> > >, void *> *> > __data_;
} bucket_list_deallocator<std::__1::allocator<std::__1::__hash_node<std::__1::__hash_value_type<std::__1::pair<id<FBGraphQLFetchUnit>, FBGraphQLFetchConfiguration *>, std::__1::vector<FBGraphQLFetchRequest, std::__1::allocator<FBGraphQLFetchRequest> > >, void *> *> >;

typedef struct _compressed_pair<std::__1::__hash_node<std::__1::__hash_value_type<std::__1::pair<id<FBGraphQLFetchUnit>, FBGraphQLFetchConfiguration *>, std::__1::vector<FBGraphQLFetchRequest, std::__1::allocator<FBGraphQLFetchRequest> > >, void *> **, std::__1::__bucket_list_deallocator<std::__1::allocator<std::__1::__hash_node<std::__1::__hash_value_type<std::__1::pair<id<FBGraphQLFetchUnit>, FBGraphQLFetchConfiguration *>, std::__1::vector<FBGraphQLFetchRequest, std::__1::allocator<FBGraphQLFetchRequest> > >, void *> *> > > {
	__hash_node<std::__1::__hash_value_type<std::__1::pair<id<FBGraphQLFetchUnit>, FBGraphQLFetchConfiguration *>, std::__1::vector<FBGraphQLFetchRequest, std::__1::allocator<FBGraphQLFetchRequest> > >, void *> __first_;
	bucket_list_deallocator<std::__1::allocator<std::__1::__hash_node<std::__1::__hash_value_type<std::__1::pair<id<FBGraphQLFetchUnit>, FBGraphQLFetchConfiguration *>, std::__1::vector<FBGraphQLFetchRequest, std::__1::allocator<FBGraphQLFetchRequest> > >, void *> *> > __second_;
} compressed_pair<std::__1::__hash_node<std::__1::__hash_value_type<std::__1::pair<id<FBGraphQLFetchUnit>, FBGraphQLFetchConfiguration *>, std::__1::vector<FBGraphQLFetchRequest, std::__1::allocator<FBGraphQLFetchRequest> > >, void *> **, std::__1::__bucket_list_deallocator<std::__1::allocator<std::__1::__hash_node<std::__1::__hash_value_type<std::__1::pair<id<FBGraphQLFetchUnit>, FBGraphQLFetchConfiguration *>, std::__1::vector<FBGraphQLFetchRequest, std::__1::allocator<FBGraphQLFetchRequest> > >, void *> *> > >;

typedef struct unique_ptr<std::__1::__hash_node<std::__1::__hash_value_type<std::__1::pair<id<FBGraphQLFetchUnit>, FBGraphQLFetchConfiguration *>, std::__1::vector<FBGraphQLFetchRequest, std::__1::allocator<FBGraphQLFetchRequest> > >, void *> *[], std::__1::__bucket_list_deallocator<std::__1::allocator<std::__1::__hash_node<std::__1::__hash_value_type<std::__1::pair<id<FBGraphQLFetchUnit>, FBGraphQLFetchConfiguration *>, std::__1::vector<FBGraphQLFetchRequest, std::__1::allocator<FBGraphQLFetchRequest> > >, void *> *> > > {
	compressed_pair<std::__1::__hash_node<std::__1::__hash_value_type<std::__1::pair<id<FBGraphQLFetchUnit>, FBGraphQLFetchConfiguration *>, std::__1::vector<FBGraphQLFetchRequest, std::__1::allocator<FBGraphQLFetchRequest> > >, void *> **, std::__1::__bucket_list_deallocator<std::__1::allocator<std::__1::__hash_node<std::__1::__hash_value_type<std::__1::pair<id<FBGraphQLFetchUnit>, FBGraphQLFetchConfiguration *>, std::__1::vector<FBGraphQLFetchRequest, std::__1::allocator<FBGraphQLFetchRequest> > >, void *> *> > > __ptr_;
} unique_ptr<std::__1::__hash_node<std::__1::__hash_value_type<std::__1::pair<id<FBGraphQLFetchUnit>, FBGraphQLFetchConfiguration *>, std::__1::vector<FBGraphQLFetchRequest, std::__1::allocator<FBGraphQLFetchRequest> > >, void *> *[], std::__1::__bucket_list_deallocator<std::__1::allocator<std::__1::__hash_node<std::__1::__hash_value_type<std::__1::pair<id<FBGraphQLFetchUnit>, FBGraphQLFetchConfiguration *>, std::__1::vector<FBGraphQLFetchRequest, std::__1::allocator<FBGraphQLFetchRequest> > >, void *> *> > >;

typedef struct _hash_table<std::__1::__hash_value_type<std::__1::pair<id<FBGraphQLFetchUnit>, FBGraphQLFetchConfiguration *>, std::__1::vector<FBGraphQLFetchRequest, std::__1::allocator<FBGraphQLFetchRequest> > >, std::__1::__unordered_map_hasher<std::__1::pair<id<FBGraphQLFetchUnit>, FBGraphQLFetchConfiguration *>, std::__1::__hash_value_type<std::__1::pair<id<FBGraphQLFetchUnit>, FBGraphQLFetchConfiguration *>, std::__1::vector<FBGraphQLFetchRequest, std::__1::allocator<FBGraphQLFetchRequest> > >, FB::HashFunctor<RequestMapKey>, true>, std::__1::__unordered_map_equal<std::__1::pair<id<FBGraphQLFetchUnit>, FBGraphQLFetchConfiguration *>, std::__1::__hash_value_type<std::__1::pair<id<FBGraphQLFetchUnit>, FBGraphQLFetchConfiguration *>, std::__1::vector<FBGraphQLFetchRequest, std::__1::allocator<FBGraphQLFetchRequest> > >, FB::EqualFunctor<RequestMapKey>, true>, std::__1::allocator<std::__1::__hash_value_type<std::__1::pair<id<FBGraphQLFetchUnit>, FBGraphQLFetchConfiguration *>, std::__1::vector<FBGraphQLFetchRequest, std::__1::allocator<FBGraphQLFetchRequest> > > > > {
	unique_ptr<std::__1::__hash_node<std::__1::__hash_value_type<std::__1::pair<id<FBGraphQLFetchUnit>, FBGraphQLFetchConfiguration *>, std::__1::vector<FBGraphQLFetchRequest, std::__1::allocator<FBGraphQLFetchRequest> > >, void *> *[], std::__1::__bucket_list_deallocator<std::__1::allocator<std::__1::__hash_node<std::__1::__hash_value_type<std::__1::pair<id<FBGraphQLFetchUnit>, FBGraphQLFetchConfiguration *>, std::__1::vector<FBGraphQLFetchRequest, std::__1::allocator<FBGraphQLFetchRequest> > >, void *> *> > > __bucket_list_;
	compressed_pair<std::__1::__hash_node_base<std::__1::__hash_node<std::__1::__hash_value_type<std::__1::pair<id<FBGraphQLFetchUnit>, FBGraphQLFetchConfiguration *>, std::__1::vector<FBGraphQLFetchRequest, std::__1::allocator<FBGraphQLFetchRequest> > >, void *> *>, std::__1::allocator<std::__1::__hash_node<std::__1::__hash_value_type<std::__1::pair<id<FBGraphQLFetchUnit>, FBGraphQLFetchConfiguration *>, std::__1::vector<FBGraphQLFetchRequest, std::__1::allocator<FBGraphQLFetchRequest> > >, void *> > > __p1_;
	compressed_pair<unsigned long, std::__1::__unordered_map_hasher<std::__1::pair<id<FBGraphQLFetchUnit>, FBGraphQLFetchConfiguration *>, std::__1::__hash_value_type<std::__1::pair<id<FBGraphQLFetchUnit>, FBGraphQLFetchConfiguration *>, std::__1::vector<FBGraphQLFetchRequest, std::__1::allocator<FBGraphQLFetchRequest> > >, FB::HashFunctor<RequestMapKey>, true> > __p2_;
	compressed_pair<float, std::__1::__unordered_map_equal<std::__1::pair<id<FBGraphQLFetchUnit>, FBGraphQLFetchConfiguration *>, std::__1::__hash_value_type<std::__1::pair<id<FBGraphQLFetchUnit>, FBGraphQLFetchConfiguration *>, std::__1::vector<FBGraphQLFetchRequest, std::__1::allocator<FBGraphQLFetchRequest> > >, FB::EqualFunctor<RequestMapKey>, true> > __p3_;
} hash_table<std::__1::__hash_value_type<std::__1::pair<id<FBGraphQLFetchUnit>, FBGraphQLFetchConfiguration *>, std::__1::vector<FBGraphQLFetchRequest, std::__1::allocator<FBGraphQLFetchRequest> > >, std::__1::__unordered_map_hasher<std::__1::pair<id<FBGraphQLFetchUnit>, FBGraphQLFetchConfiguration *>, std::__1::__hash_value_type<std::__1::pair<id<FBGraphQLFetchUnit>, FBGraphQLFetchConfiguration *>, std::__1::vector<FBGraphQLFetchRequest, std::__1::allocator<FBGraphQLFetchRequest> > >, FB::HashFunctor<RequestMapKey>, true>, std::__1::__unordered_map_equal<std::__1::pair<id<FBGraphQLFetchUnit>, FBGraphQLFetchConfiguration *>, std::__1::__hash_value_type<std::__1::pair<id<FBGraphQLFetchUnit>, FBGraphQLFetchConfiguration *>, std::__1::vector<FBGraphQLFetchRequest, std::__1::allocator<FBGraphQLFetchRequest> > >, FB::EqualFunctor<RequestMapKey>, true>, std::__1::allocator<std::__1::__hash_value_type<std::__1::pair<id<FBGraphQLFetchUnit>, FBGraphQLFetchConfiguration *>, std::__1::vector<FBGraphQLFetchRequest, std::__1::allocator<FBGraphQLFetchRequest> > > > >;

typedef struct unordered_map<std::__1::pair<id<FBGraphQLFetchUnit>, FBGraphQLFetchConfiguration *>, std::__1::vector<FBGraphQLFetchRequest, std::__1::allocator<FBGraphQLFetchRequest> >, FB::HashFunctor<RequestMapKey>, FB::EqualFunctor<RequestMapKey>, std::__1::allocator<std::__1::pair<const std::__1::pair<id<FBGraphQLFetchUnit>, FBGraphQLFetchConfiguration *>, std::__1::vector<FBGraphQLFetchRequest, std::__1::allocator<FBGraphQLFetchRequest> > > > > {
	hash_table<std::__1::__hash_value_type<std::__1::pair<id<FBGraphQLFetchUnit>, FBGraphQLFetchConfiguration *>, std::__1::vector<FBGraphQLFetchRequest, std::__1::allocator<FBGraphQLFetchRequest> > >, std::__1::__unordered_map_hasher<std::__1::pair<id<FBGraphQLFetchUnit>, FBGraphQLFetchConfiguration *>, std::__1::__hash_value_type<std::__1::pair<id<FBGraphQLFetchUnit>, FBGraphQLFetchConfiguration *>, std::__1::vector<FBGraphQLFetchRequest, std::__1::allocator<FBGraphQLFetchRequest> > >, FB::HashFunctor<RequestMapKey>, true>, std::__1::__unordered_map_equal<std::__1::pair<id<FBGraphQLFetchUnit>, FBGraphQLFetchConfiguration *>, std::__1::__hash_value_type<std::__1::pair<id<FBGraphQLFetchUnit>, FBGraphQLFetchConfiguration *>, std::__1::vector<FBGraphQLFetchRequest, std::__1::allocator<FBGraphQLFetchRequest> > >, FB::EqualFunctor<RequestMapKey>, true>, std::__1::allocator<std::__1::__hash_value_type<std::__1::pair<id<FBGraphQLFetchUnit>, FBGraphQLFetchConfiguration *>, std::__1::vector<FBGraphQLFetchRequest, std::__1::allocator<FBGraphQLFetchRequest> > > > > __table_;
} unordered_map<std::__1::pair<id<FBGraphQLFetchUnit>, FBGraphQLFetchConfiguration *>, std::__1::vector<FBGraphQLFetchRequest, std::__1::allocator<FBGraphQLFetchRequest> >, FB::HashFunctor<RequestMapKey>, FB::EqualFunctor<RequestMapKey>, std::__1::allocator<std::__1::pair<const std::__1::pair<id<FBGraphQLFetchUnit>, FBGraphQLFetchConfiguration *>, std::__1::vector<FBGraphQLFetchRequest, std::__1::allocator<FBGraphQLFetchRequest> > > > >;

typedef struct FBGraphQLFetchRequestManager {
	unordered_map<std::__1::pair<id<FBGraphQLFetchUnit>, FBGraphQLFetchConfiguration *>, std::__1::vector<FBGraphQLFetchRequest, std::__1::allocator<FBGraphQLFetchRequest> >, FB::HashFunctor<RequestMapKey>, FB::EqualFunctor<RequestMapKey>, std::__1::allocator<std::__1::pair<const std::__1::pair<id<FBGraphQLFetchUnit>, FBGraphQLFetchConfiguration *>, std::__1::vector<FBGraphQLFetchRequest, std::__1::allocator<FBGraphQLFetchRequest> > > > > _requestsInFlight;
} FBGraphQLFetchRequestManager;

typedef struct opaqueCMSampleBuffer* opaqueCMSampleBufferRef;

typedef struct {
	long long value;
	int timescale;
	unsigned flags;
	long long epoch;
} SCD_Struct_FB242;

typedef struct __CFArray* CFArrayRef;

typedef struct _compressed_pair<unsigned long long **, std::__1::allocator<unsigned long long *> > {
	unsigned long long __first_;
} compressed_pair<unsigned long long **, std::__1::allocator<unsigned long long *> >;

typedef struct _compressed_pair<unsigned long, std::__1::allocator<unsigned long long> > {
	unsigned long long __first_;
} compressed_pair<unsigned long, std::__1::allocator<unsigned long long> >;

typedef struct _split_buffer<unsigned long long *, std::__1::allocator<unsigned long long *> > {
	unsigned long long __first_;
	unsigned long long __begin_;
	unsigned long long __end_;
	compressed_pair<unsigned long long **, std::__1::allocator<unsigned long long *> > __end_cap_;
} split_buffer<unsigned long long *, std::__1::allocator<unsigned long long *> >;

typedef struct deque<unsigned long long, std::__1::allocator<unsigned long long> > {
	split_buffer<unsigned long long *, std::__1::allocator<unsigned long long *> > __map_;
	unsigned long long __start_;
	compressed_pair<unsigned long, std::__1::allocator<unsigned long long> > __size_;
} deque<unsigned long long, std::__1::allocator<unsigned long long> >;

typedef struct queue<unsigned long long, std::__1::deque<unsigned long long, std::__1::allocator<unsigned long long> > > {
	deque<unsigned long long, std::__1::allocator<unsigned long long> > c;
} queue<unsigned long long, std::__1::deque<unsigned long long, std::__1::allocator<unsigned long long> > >;

typedef struct _compressed_pair<unsigned long, std::__1::allocator<CKSuspensionControllerChangesetContainer> > {
	unsigned long long __first_;
} compressed_pair<unsigned long, std::__1::allocator<CKSuspensionControllerChangesetContainer> >;

typedef struct _compressed_pair<CKSuspensionControllerChangesetContainer **, std::__1::allocator<CKSuspensionControllerChangesetContainer *> > {
	CKSuspensionControllerChangesetContainer __first_;
} compressed_pair<CKSuspensionControllerChangesetContainer **, std::__1::allocator<CKSuspensionControllerChangesetContainer *> >;

typedef struct _split_buffer<CKSuspensionControllerChangesetContainer *, std::__1::allocator<CKSuspensionControllerChangesetContainer *> > {
	CKSuspensionControllerChangesetContainer __first_;
	CKSuspensionControllerChangesetContainer __begin_;
	CKSuspensionControllerChangesetContainer __end_;
	compressed_pair<CKSuspensionControllerChangesetContainer **, std::__1::allocator<CKSuspensionControllerChangesetContainer *> > __end_cap_;
} split_buffer<CKSuspensionControllerChangesetContainer *, std::__1::allocator<CKSuspensionControllerChangesetContainer *> >;

typedef struct deque<CKSuspensionControllerChangesetContainer, std::__1::allocator<CKSuspensionControllerChangesetContainer> > {
	split_buffer<CKSuspensionControllerChangesetContainer *, std::__1::allocator<CKSuspensionControllerChangesetContainer *> > __map_;
	unsigned long long __start_;
	compressed_pair<unsigned long, std::__1::allocator<CKSuspensionControllerChangesetContainer> > __size_;
} deque<CKSuspensionControllerChangesetContainer, std::__1::allocator<CKSuspensionControllerChangesetContainer> >;

typedef struct _compressed_pair<unsigned long, std::__1::less<long> > {
	unsigned long long __first_;
} compressed_pair<unsigned long, std::__1::less<long> >;

typedef struct _compressed_pair<CKComponentPreparationInputItem *__strong *, std::__1::allocator<CKComponentPreparationInputItem *> > {
	id __first_;
} compressed_pair<CKComponentPreparationInputItem *__strong *, std::__1::allocator<CKComponentPreparationInputItem *> >;

typedef struct vector<CKComponentPreparationInputItem *, std::__1::allocator<CKComponentPreparationInputItem *> > {
	id __begin_;
	id __end_;
	compressed_pair<CKComponentPreparationInputItem *__strong *, std::__1::allocator<CKComponentPreparationInputItem *> > __end_cap_;
} vector<CKComponentPreparationInputItem *, std::__1::allocator<CKComponentPreparationInputItem *> >;

typedef struct _compressed_pair<std::__1::__tree_end_node<std::__1::__tree_node_base<void *> *>, std::__1::allocator<std::__1::__tree_node<long, void *> > > {
	tree_end_node<std::__1::__tree_node_base<void *> *> __first_;
} compressed_pair<std::__1::__tree_end_node<std::__1::__tree_node_base<void *> *>, std::__1::allocator<std::__1::__tree_node<long, void *> > >;

typedef struct _tree<long, std::__1::less<long>, std::__1::allocator<long> > {
	__tree_node<long, void *> __begin_node_;
	compressed_pair<std::__1::__tree_end_node<std::__1::__tree_node_base<void *> *>, std::__1::allocator<std::__1::__tree_node<long, void *> > > __pair1_;
	compressed_pair<unsigned long, std::__1::less<long> > __pair3_;
} tree<long, std::__1::less<long>, std::__1::allocator<long> >;

typedef struct set<long, std::__1::less<long>, std::__1::allocator<long> > {
	tree<long, std::__1::less<long>, std::__1::allocator<long> > __tree_;
} set<long, std::__1::less<long>, std::__1::allocator<long> >;

typedef struct Sections {
	set<long, std::__1::less<long>, std::__1::allocator<long> > _insertions;
	set<long, std::__1::less<long>, std::__1::allocator<long> > _removals;
} Sections;

typedef struct CKComponentPreparationInputBatch {
	unsigned long long ID;
	Sections sections;
	vector<CKComponentPreparationInputItem *, std::__1::allocator<CKComponentPreparationInputItem *> > items;
	BOOL isContiguousTailInsertion;
} CKComponentPreparationInputBatch;

typedef struct CKStateConfiguration {
	NSString* title;
	UIColor* titleColor;
	UIImage* image;
	UIImage* backgroundImage;
} CKStateConfiguration;

typedef struct array<CKStateConfiguration, 8> {
	CKStateConfiguration __elems_[8];
} array<CKStateConfiguration, 8>;

typedef struct _compressed_pair<unsigned long, std::__1::allocator<std::__1::__hash_node<std::__1::__hash_value_type<_CKStateScopeKey, CKComponentScopeFrame *>, void *> *> > {
	unsigned long long __first_;
} compressed_pair<unsigned long, std::__1::allocator<std::__1::__hash_node<std::__1::__hash_value_type<_CKStateScopeKey, CKComponentScopeFrame *>, void *> *> >;

typedef struct _compressed_pair<unsigned long, std::__1::__unordered_map_hasher<_CKStateScopeKey, std::__1::__hash_value_type<_CKStateScopeKey, CKComponentScopeFrame *>, std::__1::hash<_CKStateScopeKey>, true> > {
	unsigned long long __first_;
} compressed_pair<unsigned long, std::__1::__unordered_map_hasher<_CKStateScopeKey, std::__1::__hash_value_type<_CKStateScopeKey, CKComponentScopeFrame *>, std::__1::hash<_CKStateScopeKey>, true> >;

typedef struct _compressed_pair<float, std::__1::__unordered_map_equal<_CKStateScopeKey, std::__1::__hash_value_type<_CKStateScopeKey, CKComponentScopeFrame *>, std::__1::equal_to<_CKStateScopeKey>, true> > {
	float __first_;
} compressed_pair<float, std::__1::__unordered_map_equal<_CKStateScopeKey, std::__1::__hash_value_type<_CKStateScopeKey, CKComponentScopeFrame *>, std::__1::equal_to<_CKStateScopeKey>, true> >;

typedef struct _hash_node_base<std::__1::__hash_node<std::__1::__hash_value_type<_CKStateScopeKey, CKComponentScopeFrame *>, void *> *> {
	__hash_node<std::__1::__hash_value_type<_CKStateScopeKey, CKComponentScopeFrame *>, void *> __next_;
} hash_node_base<std::__1::__hash_node<std::__1::__hash_value_type<_CKStateScopeKey, CKComponentScopeFrame *>, void *> *>;

typedef struct _compressed_pair<std::__1::__hash_node_base<std::__1::__hash_node<std::__1::__hash_value_type<_CKStateScopeKey, CKComponentScopeFrame *>, void *> *>, std::__1::allocator<std::__1::__hash_node<std::__1::__hash_value_type<_CKStateScopeKey, CKComponentScopeFrame *>, void *> > > {
	hash_node_base<std::__1::__hash_node<std::__1::__hash_value_type<_CKStateScopeKey, CKComponentScopeFrame *>, void *> *> __first_;
} compressed_pair<std::__1::__hash_node_base<std::__1::__hash_node<std::__1::__hash_value_type<_CKStateScopeKey, CKComponentScopeFrame *>, void *> *>, std::__1::allocator<std::__1::__hash_node<std::__1::__hash_value_type<_CKStateScopeKey, CKComponentScopeFrame *>, void *> > >;

typedef struct _bucket_list_deallocator<std::__1::allocator<std::__1::__hash_node<std::__1::__hash_value_type<_CKStateScopeKey, CKComponentScopeFrame *>, void *> *> > {
	compressed_pair<unsigned long, std::__1::allocator<std::__1::__hash_node<std::__1::__hash_value_type<_CKStateScopeKey, CKComponentScopeFrame *>, void *> *> > __data_;
} bucket_list_deallocator<std::__1::allocator<std::__1::__hash_node<std::__1::__hash_value_type<_CKStateScopeKey, CKComponentScopeFrame *>, void *> *> >;

typedef struct _compressed_pair<std::__1::__hash_node<std::__1::__hash_value_type<_CKStateScopeKey, CKComponentScopeFrame *>, void *> **, std::__1::__bucket_list_deallocator<std::__1::allocator<std::__1::__hash_node<std::__1::__hash_value_type<_CKStateScopeKey, CKComponentScopeFrame *>, void *> *> > > {
	__hash_node<std::__1::__hash_value_type<_CKStateScopeKey, CKComponentScopeFrame *>, void *> __first_;
	bucket_list_deallocator<std::__1::allocator<std::__1::__hash_node<std::__1::__hash_value_type<_CKStateScopeKey, CKComponentScopeFrame *>, void *> *> > __second_;
} compressed_pair<std::__1::__hash_node<std::__1::__hash_value_type<_CKStateScopeKey, CKComponentScopeFrame *>, void *> **, std::__1::__bucket_list_deallocator<std::__1::allocator<std::__1::__hash_node<std::__1::__hash_value_type<_CKStateScopeKey, CKComponentScopeFrame *>, void *> *> > >;

typedef struct unique_ptr<std::__1::__hash_node<std::__1::__hash_value_type<_CKStateScopeKey, CKComponentScopeFrame *>, void *> *[], std::__1::__bucket_list_deallocator<std::__1::allocator<std::__1::__hash_node<std::__1::__hash_value_type<_CKStateScopeKey, CKComponentScopeFrame *>, void *> *> > > {
	compressed_pair<std::__1::__hash_node<std::__1::__hash_value_type<_CKStateScopeKey, CKComponentScopeFrame *>, void *> **, std::__1::__bucket_list_deallocator<std::__1::allocator<std::__1::__hash_node<std::__1::__hash_value_type<_CKStateScopeKey, CKComponentScopeFrame *>, void *> *> > > __ptr_;
} unique_ptr<std::__1::__hash_node<std::__1::__hash_value_type<_CKStateScopeKey, CKComponentScopeFrame *>, void *> *[], std::__1::__bucket_list_deallocator<std::__1::allocator<std::__1::__hash_node<std::__1::__hash_value_type<_CKStateScopeKey, CKComponentScopeFrame *>, void *> *> > >;

typedef struct _hash_table<std::__1::__hash_value_type<_CKStateScopeKey, CKComponentScopeFrame *>, std::__1::__unordered_map_hasher<_CKStateScopeKey, std::__1::__hash_value_type<_CKStateScopeKey, CKComponentScopeFrame *>, std::__1::hash<_CKStateScopeKey>, true>, std::__1::__unordered_map_equal<_CKStateScopeKey, std::__1::__hash_value_type<_CKStateScopeKey, CKComponentScopeFrame *>, std::__1::equal_to<_CKStateScopeKey>, true>, std::__1::allocator<std::__1::__hash_value_type<_CKStateScopeKey, CKComponentScopeFrame *> > > {
	unique_ptr<std::__1::__hash_node<std::__1::__hash_value_type<_CKStateScopeKey, CKComponentScopeFrame *>, void *> *[], std::__1::__bucket_list_deallocator<std::__1::allocator<std::__1::__hash_node<std::__1::__hash_value_type<_CKStateScopeKey, CKComponentScopeFrame *>, void *> *> > > __bucket_list_;
	compressed_pair<std::__1::__hash_node_base<std::__1::__hash_node<std::__1::__hash_value_type<_CKStateScopeKey, CKComponentScopeFrame *>, void *> *>, std::__1::allocator<std::__1::__hash_node<std::__1::__hash_value_type<_CKStateScopeKey, CKComponentScopeFrame *>, void *> > > __p1_;
	compressed_pair<unsigned long, std::__1::__unordered_map_hasher<_CKStateScopeKey, std::__1::__hash_value_type<_CKStateScopeKey, CKComponentScopeFrame *>, std::__1::hash<_CKStateScopeKey>, true> > __p2_;
	compressed_pair<float, std::__1::__unordered_map_equal<_CKStateScopeKey, std::__1::__hash_value_type<_CKStateScopeKey, CKComponentScopeFrame *>, std::__1::equal_to<_CKStateScopeKey>, true> > __p3_;
} hash_table<std::__1::__hash_value_type<_CKStateScopeKey, CKComponentScopeFrame *>, std::__1::__unordered_map_hasher<_CKStateScopeKey, std::__1::__hash_value_type<_CKStateScopeKey, CKComponentScopeFrame *>, std::__1::hash<_CKStateScopeKey>, true>, std::__1::__unordered_map_equal<_CKStateScopeKey, std::__1::__hash_value_type<_CKStateScopeKey, CKComponentScopeFrame *>, std::__1::equal_to<_CKStateScopeKey>, true>, std::__1::allocator<std::__1::__hash_value_type<_CKStateScopeKey, CKComponentScopeFrame *> > >;

typedef struct unordered_map<_CKStateScopeKey, CKComponentScopeFrame *, std::__1::hash<_CKStateScopeKey>, std::__1::equal_to<_CKStateScopeKey>, std::__1::allocator<std::__1::pair<const _CKStateScopeKey, CKComponentScopeFrame *> > > {
	hash_table<std::__1::__hash_value_type<_CKStateScopeKey, CKComponentScopeFrame *>, std::__1::__unordered_map_hasher<_CKStateScopeKey, std::__1::__hash_value_type<_CKStateScopeKey, CKComponentScopeFrame *>, std::__1::hash<_CKStateScopeKey>, true>, std::__1::__unordered_map_equal<_CKStateScopeKey, std::__1::__hash_value_type<_CKStateScopeKey, CKComponentScopeFrame *>, std::__1::equal_to<_CKStateScopeKey>, true>, std::__1::allocator<std::__1::__hash_value_type<_CKStateScopeKey, CKComponentScopeFrame *> > > __table_;
} unordered_map<_CKStateScopeKey, CKComponentScopeFrame *, std::__1::hash<_CKStateScopeKey>, std::__1::equal_to<_CKStateScopeKey>, std::__1::allocator<std::__1::pair<const _CKStateScopeKey, CKComponentScopeFrame *> > >;

typedef struct _compressed_pair<unsigned long, std::__1::allocator<std::__1::__hash_node<std::__1::__hash_value_type<CKComponentAnnouncedEvent, CKComponentController *>, void *> *> > {
	unsigned long long __first_;
} compressed_pair<unsigned long, std::__1::allocator<std::__1::__hash_node<std::__1::__hash_value_type<CKComponentAnnouncedEvent, CKComponentController *>, void *> *> >;

typedef struct _compressed_pair<unsigned long, std::__1::__unordered_map_hasher<CKComponentAnnouncedEvent, std::__1::__hash_value_type<CKComponentAnnouncedEvent, CKComponentController *>, std::__1::hash<unsigned long>, true> > {
	unsigned long long __first_;
} compressed_pair<unsigned long, std::__1::__unordered_map_hasher<CKComponentAnnouncedEvent, std::__1::__hash_value_type<CKComponentAnnouncedEvent, CKComponentController *>, std::__1::hash<unsigned long>, true> >;

typedef struct _compressed_pair<float, std::__1::__unordered_map_equal<CKComponentAnnouncedEvent, std::__1::__hash_value_type<CKComponentAnnouncedEvent, CKComponentController *>, std::__1::equal_to<unsigned long>, true> > {
	float __first_;
} compressed_pair<float, std::__1::__unordered_map_equal<CKComponentAnnouncedEvent, std::__1::__hash_value_type<CKComponentAnnouncedEvent, CKComponentController *>, std::__1::equal_to<unsigned long>, true> >;

typedef struct _hash_node_base<std::__1::__hash_node<std::__1::__hash_value_type<CKComponentAnnouncedEvent, CKComponentController *>, void *> *> {
	__hash_node<std::__1::__hash_value_type<CKComponentAnnouncedEvent, CKComponentController *>, void *> __next_;
} hash_node_base<std::__1::__hash_node<std::__1::__hash_value_type<CKComponentAnnouncedEvent, CKComponentController *>, void *> *>;

typedef struct _compressed_pair<std::__1::__hash_node_base<std::__1::__hash_node<std::__1::__hash_value_type<CKComponentAnnouncedEvent, CKComponentController *>, void *> *>, std::__1::allocator<std::__1::__hash_node<std::__1::__hash_value_type<CKComponentAnnouncedEvent, CKComponentController *>, void *> > > {
	hash_node_base<std::__1::__hash_node<std::__1::__hash_value_type<CKComponentAnnouncedEvent, CKComponentController *>, void *> *> __first_;
} compressed_pair<std::__1::__hash_node_base<std::__1::__hash_node<std::__1::__hash_value_type<CKComponentAnnouncedEvent, CKComponentController *>, void *> *>, std::__1::allocator<std::__1::__hash_node<std::__1::__hash_value_type<CKComponentAnnouncedEvent, CKComponentController *>, void *> > >;

typedef struct _bucket_list_deallocator<std::__1::allocator<std::__1::__hash_node<std::__1::__hash_value_type<CKComponentAnnouncedEvent, CKComponentController *>, void *> *> > {
	compressed_pair<unsigned long, std::__1::allocator<std::__1::__hash_node<std::__1::__hash_value_type<CKComponentAnnouncedEvent, CKComponentController *>, void *> *> > __data_;
} bucket_list_deallocator<std::__1::allocator<std::__1::__hash_node<std::__1::__hash_value_type<CKComponentAnnouncedEvent, CKComponentController *>, void *> *> >;

typedef struct _compressed_pair<std::__1::__hash_node<std::__1::__hash_value_type<CKComponentAnnouncedEvent, CKComponentController *>, void *> **, std::__1::__bucket_list_deallocator<std::__1::allocator<std::__1::__hash_node<std::__1::__hash_value_type<CKComponentAnnouncedEvent, CKComponentController *>, void *> *> > > {
	__hash_node<std::__1::__hash_value_type<CKComponentAnnouncedEvent, CKComponentController *>, void *> __first_;
	bucket_list_deallocator<std::__1::allocator<std::__1::__hash_node<std::__1::__hash_value_type<CKComponentAnnouncedEvent, CKComponentController *>, void *> *> > __second_;
} compressed_pair<std::__1::__hash_node<std::__1::__hash_value_type<CKComponentAnnouncedEvent, CKComponentController *>, void *> **, std::__1::__bucket_list_deallocator<std::__1::allocator<std::__1::__hash_node<std::__1::__hash_value_type<CKComponentAnnouncedEvent, CKComponentController *>, void *> *> > >;

typedef struct unique_ptr<std::__1::__hash_node<std::__1::__hash_value_type<CKComponentAnnouncedEvent, CKComponentController *>, void *> *[], std::__1::__bucket_list_deallocator<std::__1::allocator<std::__1::__hash_node<std::__1::__hash_value_type<CKComponentAnnouncedEvent, CKComponentController *>, void *> *> > > {
	compressed_pair<std::__1::__hash_node<std::__1::__hash_value_type<CKComponentAnnouncedEvent, CKComponentController *>, void *> **, std::__1::__bucket_list_deallocator<std::__1::allocator<std::__1::__hash_node<std::__1::__hash_value_type<CKComponentAnnouncedEvent, CKComponentController *>, void *> *> > > __ptr_;
} unique_ptr<std::__1::__hash_node<std::__1::__hash_value_type<CKComponentAnnouncedEvent, CKComponentController *>, void *> *[], std::__1::__bucket_list_deallocator<std::__1::allocator<std::__1::__hash_node<std::__1::__hash_value_type<CKComponentAnnouncedEvent, CKComponentController *>, void *> *> > >;

typedef struct _hash_table<std::__1::__hash_value_type<CKComponentAnnouncedEvent, CKComponentController *>, std::__1::__unordered_map_hasher<CKComponentAnnouncedEvent, std::__1::__hash_value_type<CKComponentAnnouncedEvent, CKComponentController *>, std::__1::hash<unsigned long>, true>, std::__1::__unordered_map_equal<CKComponentAnnouncedEvent, std::__1::__hash_value_type<CKComponentAnnouncedEvent, CKComponentController *>, std::__1::equal_to<unsigned long>, true>, std::__1::allocator<std::__1::__hash_value_type<CKComponentAnnouncedEvent, CKComponentController *> > > {
	unique_ptr<std::__1::__hash_node<std::__1::__hash_value_type<CKComponentAnnouncedEvent, CKComponentController *>, void *> *[], std::__1::__bucket_list_deallocator<std::__1::allocator<std::__1::__hash_node<std::__1::__hash_value_type<CKComponentAnnouncedEvent, CKComponentController *>, void *> *> > > __bucket_list_;
	compressed_pair<std::__1::__hash_node_base<std::__1::__hash_node<std::__1::__hash_value_type<CKComponentAnnouncedEvent, CKComponentController *>, void *> *>, std::__1::allocator<std::__1::__hash_node<std::__1::__hash_value_type<CKComponentAnnouncedEvent, CKComponentController *>, void *> > > __p1_;
	compressed_pair<unsigned long, std::__1::__unordered_map_hasher<CKComponentAnnouncedEvent, std::__1::__hash_value_type<CKComponentAnnouncedEvent, CKComponentController *>, std::__1::hash<unsigned long>, true> > __p2_;
	compressed_pair<float, std::__1::__unordered_map_equal<CKComponentAnnouncedEvent, std::__1::__hash_value_type<CKComponentAnnouncedEvent, CKComponentController *>, std::__1::equal_to<unsigned long>, true> > __p3_;
} hash_table<std::__1::__hash_value_type<CKComponentAnnouncedEvent, CKComponentController *>, std::__1::__unordered_map_hasher<CKComponentAnnouncedEvent, std::__1::__hash_value_type<CKComponentAnnouncedEvent, CKComponentController *>, std::__1::hash<unsigned long>, true>, std::__1::__unordered_map_equal<CKComponentAnnouncedEvent, std::__1::__hash_value_type<CKComponentAnnouncedEvent, CKComponentController *>, std::__1::equal_to<unsigned long>, true>, std::__1::allocator<std::__1::__hash_value_type<CKComponentAnnouncedEvent, CKComponentController *> > >;

typedef struct unordered_multimap<CKComponentAnnouncedEvent, CKComponentController *, std::__1::hash<unsigned long>, std::__1::equal_to<unsigned long>, std::__1::allocator<std::__1::pair<const CKComponentAnnouncedEvent, CKComponentController *> > > {
	hash_table<std::__1::__hash_value_type<CKComponentAnnouncedEvent, CKComponentController *>, std::__1::__unordered_map_hasher<CKComponentAnnouncedEvent, std::__1::__hash_value_type<CKComponentAnnouncedEvent, CKComponentController *>, std::__1::hash<unsigned long>, true>, std::__1::__unordered_map_equal<CKComponentAnnouncedEvent, std::__1::__hash_value_type<CKComponentAnnouncedEvent, CKComponentController *>, std::__1::equal_to<unsigned long>, true>, std::__1::allocator<std::__1::__hash_value_type<CKComponentAnnouncedEvent, CKComponentController *> > > __table_;
} unordered_multimap<CKComponentAnnouncedEvent, CKComponentController *, std::__1::hash<unsigned long>, std::__1::equal_to<unsigned long>, std::__1::allocator<std::__1::pair<const CKComponentAnnouncedEvent, CKComponentController *> > >;

typedef struct shared_ptr<const CKComponentViewConfiguration::Repr> {
	Repr __ptr_;
	__shared_weak_count __cntrl_;
} shared_ptr<const CKComponentViewConfiguration::Repr>;

typedef struct CKComponentViewConfiguration {
	shared_ptr<const CKComponentViewConfiguration::Repr> rep;
} CKComponentViewConfiguration;

typedef struct CKRelativeDimension {
	int _type;
	double _value;
} CKRelativeDimension;

typedef struct CKComponentSize {
	CKRelativeDimension width;
	CKRelativeDimension height;
	CKRelativeDimension minWidth;
	CKRelativeDimension minHeight;
	CKRelativeDimension maxWidth;
	CKRelativeDimension maxHeight;
} CKComponentSize;

typedef struct _compressed_pair<CKComponentMountInfo *, std::__1::default_delete<CKComponentMountInfo> > {
	CKComponentMountInfo __first_;
} compressed_pair<CKComponentMountInfo *, std::__1::default_delete<CKComponentMountInfo> >;

typedef struct unique_ptr<CKComponentMountInfo, std::__1::default_delete<CKComponentMountInfo> > {
	compressed_pair<CKComponentMountInfo *, std::__1::default_delete<CKComponentMountInfo> > __ptr_;
} unique_ptr<CKComponentMountInfo, std::__1::default_delete<CKComponentMountInfo> >;

typedef struct _compressed_pair<CKPendingComponentAnimation *, std::__1::allocator<CKPendingComponentAnimation> > {
	CKPendingComponentAnimation __first_;
} compressed_pair<CKPendingComponentAnimation *, std::__1::allocator<CKPendingComponentAnimation> >;

typedef struct vector<CKPendingComponentAnimation, std::__1::allocator<CKPendingComponentAnimation> > {
	CKPendingComponentAnimation __begin_;
	CKPendingComponentAnimation __end_;
	compressed_pair<CKPendingComponentAnimation *, std::__1::allocator<CKPendingComponentAnimation> > __end_cap_;
} vector<CKPendingComponentAnimation, std::__1::allocator<CKPendingComponentAnimation> >;

typedef struct _compressed_pair<CKAppliedComponentAnimation *, std::__1::allocator<CKAppliedComponentAnimation> > {
	CKAppliedComponentAnimation __first_;
} compressed_pair<CKAppliedComponentAnimation *, std::__1::allocator<CKAppliedComponentAnimation> >;

typedef struct vector<CKAppliedComponentAnimation, std::__1::allocator<CKAppliedComponentAnimation> > {
	CKAppliedComponentAnimation __begin_;
	CKAppliedComponentAnimation __end_;
	compressed_pair<CKAppliedComponentAnimation *, std::__1::allocator<CKAppliedComponentAnimation> > __end_cap_;
} vector<CKAppliedComponentAnimation, std::__1::allocator<CKAppliedComponentAnimation> >;

typedef struct _compressed_pair<unsigned long, std::__1::allocator<std::__1::__hash_node<std::__1::__hash_value_type<int, id ()(id)>, void *> *> > {
	unsigned long long __first_;
} compressed_pair<unsigned long, std::__1::allocator<std::__1::__hash_node<std::__1::__hash_value_type<int, id ()(id)>, void *> *> >;

typedef struct _compressed_pair<unsigned long, std::__1::__unordered_map_hasher<int, std::__1::__hash_value_type<int, id ()(id)>, std::__1::hash<int>, true> > {
	unsigned long long __first_;
} compressed_pair<unsigned long, std::__1::__unordered_map_hasher<int, std::__1::__hash_value_type<int, id ()(id)>, std::__1::hash<int>, true> >;

typedef struct _compressed_pair<float, std::__1::__unordered_map_equal<int, std::__1::__hash_value_type<int, id ()(id)>, std::__1::equal_to<int>, true> > {
	float __first_;
} compressed_pair<float, std::__1::__unordered_map_equal<int, std::__1::__hash_value_type<int, id ()(id)>, std::__1::equal_to<int>, true> >;

typedef struct _hash_node_base<std::__1::__hash_node<std::__1::__hash_value_type<int, id ()(id)>, void *> *> {
	__hash_node<std::__1::__hash_value_type<int, id ()(id)>, void *> __next_;
} hash_node_base<std::__1::__hash_node<std::__1::__hash_value_type<int, id ()(id)>, void *> *>;

typedef struct _compressed_pair<std::__1::__hash_node_base<std::__1::__hash_node<std::__1::__hash_value_type<int, id ()(id)>, void *> *>, std::__1::allocator<std::__1::__hash_node<std::__1::__hash_value_type<int, id ()(id)>, void *> > > {
	hash_node_base<std::__1::__hash_node<std::__1::__hash_value_type<int, id ()(id)>, void *> *> __first_;
} compressed_pair<std::__1::__hash_node_base<std::__1::__hash_node<std::__1::__hash_value_type<int, id ()(id)>, void *> *>, std::__1::allocator<std::__1::__hash_node<std::__1::__hash_value_type<int, id ()(id)>, void *> > >;

typedef struct _bucket_list_deallocator<std::__1::allocator<std::__1::__hash_node<std::__1::__hash_value_type<int, id ()(id)>, void *> *> > {
	compressed_pair<unsigned long, std::__1::allocator<std::__1::__hash_node<std::__1::__hash_value_type<int, id ()(id)>, void *> *> > __data_;
} bucket_list_deallocator<std::__1::allocator<std::__1::__hash_node<std::__1::__hash_value_type<int, id ()(id)>, void *> *> >;

typedef struct _compressed_pair<std::__1::__hash_node<std::__1::__hash_value_type<int, id ()(id)>, void *> **, std::__1::__bucket_list_deallocator<std::__1::allocator<std::__1::__hash_node<std::__1::__hash_value_type<int, id ()(id)>, void *> *> > > {
	__hash_node<std::__1::__hash_value_type<int, id ()(id)>, void *> __first_;
	bucket_list_deallocator<std::__1::allocator<std::__1::__hash_node<std::__1::__hash_value_type<int, id ()(id)>, void *> *> > __second_;
} compressed_pair<std::__1::__hash_node<std::__1::__hash_value_type<int, id ()(id)>, void *> **, std::__1::__bucket_list_deallocator<std::__1::allocator<std::__1::__hash_node<std::__1::__hash_value_type<int, id ()(id)>, void *> *> > >;

typedef struct unique_ptr<std::__1::__hash_node<std::__1::__hash_value_type<int, id ()(id)>, void *> *[], std::__1::__bucket_list_deallocator<std::__1::allocator<std::__1::__hash_node<std::__1::__hash_value_type<int, id ()(id)>, void *> *> > > {
	compressed_pair<std::__1::__hash_node<std::__1::__hash_value_type<int, id ()(id)>, void *> **, std::__1::__bucket_list_deallocator<std::__1::allocator<std::__1::__hash_node<std::__1::__hash_value_type<int, id ()(id)>, void *> *> > > __ptr_;
} unique_ptr<std::__1::__hash_node<std::__1::__hash_value_type<int, id ()(id)>, void *> *[], std::__1::__bucket_list_deallocator<std::__1::allocator<std::__1::__hash_node<std::__1::__hash_value_type<int, id ()(id)>, void *> *> > >;

typedef struct _hash_table<std::__1::__hash_value_type<int, id ()(id)>, std::__1::__unordered_map_hasher<int, std::__1::__hash_value_type<int, id ()(id)>, std::__1::hash<int>, true>, std::__1::__unordered_map_equal<int, std::__1::__hash_value_type<int, id ()(id)>, std::__1::equal_to<int>, true>, std::__1::allocator<std::__1::__hash_value_type<int, id ()(id)> > > {
	unique_ptr<std::__1::__hash_node<std::__1::__hash_value_type<int, id ()(id)>, void *> *[], std::__1::__bucket_list_deallocator<std::__1::allocator<std::__1::__hash_node<std::__1::__hash_value_type<int, id ()(id)>, void *> *> > > __bucket_list_;
	compressed_pair<std::__1::__hash_node_base<std::__1::__hash_node<std::__1::__hash_value_type<int, id ()(id)>, void *> *>, std::__1::allocator<std::__1::__hash_node<std::__1::__hash_value_type<int, id ()(id)>, void *> > > __p1_;
	compressed_pair<unsigned long, std::__1::__unordered_map_hasher<int, std::__1::__hash_value_type<int, id ()(id)>, std::__1::hash<int>, true> > __p2_;
	compressed_pair<float, std::__1::__unordered_map_equal<int, std::__1::__hash_value_type<int, id ()(id)>, std::__1::equal_to<int>, true> > __p3_;
} hash_table<std::__1::__hash_value_type<int, id ()(id)>, std::__1::__unordered_map_hasher<int, std::__1::__hash_value_type<int, id ()(id)>, std::__1::hash<int>, true>, std::__1::__unordered_map_equal<int, std::__1::__hash_value_type<int, id ()(id)>, std::__1::equal_to<int>, true>, std::__1::allocator<std::__1::__hash_value_type<int, id ()(id)> > >;

typedef struct unordered_multimap<int, id ()(id), std::__1::hash<int>, std::__1::equal_to<int>, std::__1::allocator<std::__1::pair<const int, id ()(id)> > > {
	hash_table<std::__1::__hash_value_type<int, id ()(id)>, std::__1::__unordered_map_hasher<int, std::__1::__hash_value_type<int, id ()(id)>, std::__1::hash<int>, true>, std::__1::__unordered_map_equal<int, std::__1::__hash_value_type<int, id ()(id)>, std::__1::equal_to<int>, true>, std::__1::allocator<std::__1::__hash_value_type<int, id ()(id)> > > __table_;
} unordered_multimap<int, id ()(id), std::__1::hash<int>, std::__1::equal_to<int>, std::__1::allocator<std::__1::pair<const int, id ()(id)> > >;

typedef struct CKComponentBoundsAnimation {
	double duration;
	double delay;
	unsigned long long mode;
	double springDampingRatio;
	double springInitialVelocity;
} CKComponentBoundsAnimation;

typedef struct shared_ptr<const std::__1::vector<CKComponentLayoutChild, std::__1::allocator<CKComponentLayoutChild> > > {
	vector<CKComponentLayoutChild, std::__1::allocator<CKComponentLayoutChild> > __ptr_;
	__shared_weak_count __cntrl_;
} shared_ptr<const std::__1::vector<CKComponentLayoutChild, std::__1::allocator<CKComponentLayoutChild> > >;

typedef struct CKSizeRange {
	CGSize min;
	CGSize max;
} CKSizeRange;

typedef struct CKComponentLayout {
	CKComponent* component;
	CGSize size;
	shared_ptr<const std::__1::vector<CKComponentLayoutChild, std::__1::allocator<CKComponentLayoutChild> > > children;
	NSDictionary* extra;
} CKComponentLayout;

typedef struct CKComponentLifecycleManagerState {
	id model;
	id context;
	 <NSObject>;
	CKSizeRange constrainedSize;
	CKComponentLayout layout;
	id root;
	 CKComponentScopeRoot;
	id memoizerState;
	CKComponentBoundsAnimation boundsAnimation;
} CKComponentLifecycleManagerState;

typedef struct _compressed_pair<unsigned long, std::__1::allocator<std::__1::__hash_node<std::__1::__hash_value_type<CKMemoizationKey, CKComponent *>, void *> *> > {
	unsigned long long __first_;
} compressed_pair<unsigned long, std::__1::allocator<std::__1::__hash_node<std::__1::__hash_value_type<CKMemoizationKey, CKComponent *>, void *> *> >;

typedef struct _compressed_pair<unsigned long, std::__1::__unordered_map_hasher<CKMemoizationKey, std::__1::__hash_value_type<CKMemoizationKey, CKComponent *>, std::__1::hash<CKMemoizationKey>, true> > {
	unsigned long long __first_;
} compressed_pair<unsigned long, std::__1::__unordered_map_hasher<CKMemoizationKey, std::__1::__hash_value_type<CKMemoizationKey, CKComponent *>, std::__1::hash<CKMemoizationKey>, true> >;

typedef struct _compressed_pair<float, std::__1::__unordered_map_equal<CKMemoizationKey, std::__1::__hash_value_type<CKMemoizationKey, CKComponent *>, std::__1::equal_to<CKMemoizationKey>, true> > {
	float __first_;
} compressed_pair<float, std::__1::__unordered_map_equal<CKMemoizationKey, std::__1::__hash_value_type<CKMemoizationKey, CKComponent *>, std::__1::equal_to<CKMemoizationKey>, true> >;

typedef struct _hash_node_base<std::__1::__hash_node<std::__1::__hash_value_type<CKMemoizationKey, CKComponent *>, void *> *> {
	__hash_node<std::__1::__hash_value_type<CKMemoizationKey, CKComponent *>, void *> __next_;
} hash_node_base<std::__1::__hash_node<std::__1::__hash_value_type<CKMemoizationKey, CKComponent *>, void *> *>;

typedef struct _compressed_pair<std::__1::__hash_node_base<std::__1::__hash_node<std::__1::__hash_value_type<CKMemoizationKey, CKComponent *>, void *> *>, std::__1::allocator<std::__1::__hash_node<std::__1::__hash_value_type<CKMemoizationKey, CKComponent *>, void *> > > {
	hash_node_base<std::__1::__hash_node<std::__1::__hash_value_type<CKMemoizationKey, CKComponent *>, void *> *> __first_;
} compressed_pair<std::__1::__hash_node_base<std::__1::__hash_node<std::__1::__hash_value_type<CKMemoizationKey, CKComponent *>, void *> *>, std::__1::allocator<std::__1::__hash_node<std::__1::__hash_value_type<CKMemoizationKey, CKComponent *>, void *> > >;

typedef struct _bucket_list_deallocator<std::__1::allocator<std::__1::__hash_node<std::__1::__hash_value_type<CKMemoizationKey, CKComponent *>, void *> *> > {
	compressed_pair<unsigned long, std::__1::allocator<std::__1::__hash_node<std::__1::__hash_value_type<CKMemoizationKey, CKComponent *>, void *> *> > __data_;
} bucket_list_deallocator<std::__1::allocator<std::__1::__hash_node<std::__1::__hash_value_type<CKMemoizationKey, CKComponent *>, void *> *> >;

typedef struct _compressed_pair<std::__1::__hash_node<std::__1::__hash_value_type<CKMemoizationKey, CKComponent *>, void *> **, std::__1::__bucket_list_deallocator<std::__1::allocator<std::__1::__hash_node<std::__1::__hash_value_type<CKMemoizationKey, CKComponent *>, void *> *> > > {
	__hash_node<std::__1::__hash_value_type<CKMemoizationKey, CKComponent *>, void *> __first_;
	bucket_list_deallocator<std::__1::allocator<std::__1::__hash_node<std::__1::__hash_value_type<CKMemoizationKey, CKComponent *>, void *> *> > __second_;
} compressed_pair<std::__1::__hash_node<std::__1::__hash_value_type<CKMemoizationKey, CKComponent *>, void *> **, std::__1::__bucket_list_deallocator<std::__1::allocator<std::__1::__hash_node<std::__1::__hash_value_type<CKMemoizationKey, CKComponent *>, void *> *> > >;

typedef struct unique_ptr<std::__1::__hash_node<std::__1::__hash_value_type<CKMemoizationKey, CKComponent *>, void *> *[], std::__1::__bucket_list_deallocator<std::__1::allocator<std::__1::__hash_node<std::__1::__hash_value_type<CKMemoizationKey, CKComponent *>, void *> *> > > {
	compressed_pair<std::__1::__hash_node<std::__1::__hash_value_type<CKMemoizationKey, CKComponent *>, void *> **, std::__1::__bucket_list_deallocator<std::__1::allocator<std::__1::__hash_node<std::__1::__hash_value_type<CKMemoizationKey, CKComponent *>, void *> *> > > __ptr_;
} unique_ptr<std::__1::__hash_node<std::__1::__hash_value_type<CKMemoizationKey, CKComponent *>, void *> *[], std::__1::__bucket_list_deallocator<std::__1::allocator<std::__1::__hash_node<std::__1::__hash_value_type<CKMemoizationKey, CKComponent *>, void *> *> > >;

typedef struct _hash_table<std::__1::__hash_value_type<CKMemoizationKey, CKComponent *>, std::__1::__unordered_map_hasher<CKMemoizationKey, std::__1::__hash_value_type<CKMemoizationKey, CKComponent *>, std::__1::hash<CKMemoizationKey>, true>, std::__1::__unordered_map_equal<CKMemoizationKey, std::__1::__hash_value_type<CKMemoizationKey, CKComponent *>, std::__1::equal_to<CKMemoizationKey>, true>, std::__1::allocator<std::__1::__hash_value_type<CKMemoizationKey, CKComponent *> > > {
	unique_ptr<std::__1::__hash_node<std::__1::__hash_value_type<CKMemoizationKey, CKComponent *>, void *> *[], std::__1::__bucket_list_deallocator<std::__1::allocator<std::__1::__hash_node<std::__1::__hash_value_type<CKMemoizationKey, CKComponent *>, void *> *> > > __bucket_list_;
	compressed_pair<std::__1::__hash_node_base<std::__1::__hash_node<std::__1::__hash_value_type<CKMemoizationKey, CKComponent *>, void *> *>, std::__1::allocator<std::__1::__hash_node<std::__1::__hash_value_type<CKMemoizationKey, CKComponent *>, void *> > > __p1_;
	compressed_pair<unsigned long, std::__1::__unordered_map_hasher<CKMemoizationKey, std::__1::__hash_value_type<CKMemoizationKey, CKComponent *>, std::__1::hash<CKMemoizationKey>, true> > __p2_;
	compressed_pair<float, std::__1::__unordered_map_equal<CKMemoizationKey, std::__1::__hash_value_type<CKMemoizationKey, CKComponent *>, std::__1::equal_to<CKMemoizationKey>, true> > __p3_;
} hash_table<std::__1::__hash_value_type<CKMemoizationKey, CKComponent *>, std::__1::__unordered_map_hasher<CKMemoizationKey, std::__1::__hash_value_type<CKMemoizationKey, CKComponent *>, std::__1::hash<CKMemoizationKey>, true>, std::__1::__unordered_map_equal<CKMemoizationKey, std::__1::__hash_value_type<CKMemoizationKey, CKComponent *>, std::__1::equal_to<CKMemoizationKey>, true>, std::__1::allocator<std::__1::__hash_value_type<CKMemoizationKey, CKComponent *> > >;

typedef struct unordered_multimap<CKMemoizationKey, CKComponent *, std::__1::hash<CKMemoizationKey>, std::__1::equal_to<CKMemoizationKey>, std::__1::allocator<std::__1::pair<const CKMemoizationKey, CKComponent *> > > {
	hash_table<std::__1::__hash_value_type<CKMemoizationKey, CKComponent *>, std::__1::__unordered_map_hasher<CKMemoizationKey, std::__1::__hash_value_type<CKMemoizationKey, CKComponent *>, std::__1::hash<CKMemoizationKey>, true>, std::__1::__unordered_map_equal<CKMemoizationKey, std::__1::__hash_value_type<CKMemoizationKey, CKComponent *>, std::__1::equal_to<CKMemoizationKey>, true>, std::__1::allocator<std::__1::__hash_value_type<CKMemoizationKey, CKComponent *> > > __table_;
} unordered_multimap<CKMemoizationKey, CKComponent *, std::__1::hash<CKMemoizationKey>, std::__1::equal_to<CKMemoizationKey>, std::__1::allocator<std::__1::pair<const CKMemoizationKey, CKComponent *> > >;

typedef struct _compressed_pair<unsigned long, std::__1::allocator<std::__1::__hash_node<std::__1::__hash_value_type<CKLayoutMemoizationKey, CKComponentLayout>, void *> *> > {
	unsigned long long __first_;
} compressed_pair<unsigned long, std::__1::allocator<std::__1::__hash_node<std::__1::__hash_value_type<CKLayoutMemoizationKey, CKComponentLayout>, void *> *> >;

typedef struct _compressed_pair<unsigned long, std::__1::__unordered_map_hasher<CKLayoutMemoizationKey, std::__1::__hash_value_type<CKLayoutMemoizationKey, CKComponentLayout>, CKLayoutMemoizationKey::Hash, true> > {
	unsigned long long __first_;
} compressed_pair<unsigned long, std::__1::__unordered_map_hasher<CKLayoutMemoizationKey, std::__1::__hash_value_type<CKLayoutMemoizationKey, CKComponentLayout>, CKLayoutMemoizationKey::Hash, true> >;

typedef struct _compressed_pair<float, std::__1::__unordered_map_equal<CKLayoutMemoizationKey, std::__1::__hash_value_type<CKLayoutMemoizationKey, CKComponentLayout>, CKLayoutMemoizationKey::Equals, true> > {
	float __first_;
} compressed_pair<float, std::__1::__unordered_map_equal<CKLayoutMemoizationKey, std::__1::__hash_value_type<CKLayoutMemoizationKey, CKComponentLayout>, CKLayoutMemoizationKey::Equals, true> >;

typedef struct _hash_node_base<std::__1::__hash_node<std::__1::__hash_value_type<CKLayoutMemoizationKey, CKComponentLayout>, void *> *> {
	__hash_node<std::__1::__hash_value_type<CKLayoutMemoizationKey, CKComponentLayout>, void *> __next_;
} hash_node_base<std::__1::__hash_node<std::__1::__hash_value_type<CKLayoutMemoizationKey, CKComponentLayout>, void *> *>;

typedef struct _compressed_pair<std::__1::__hash_node_base<std::__1::__hash_node<std::__1::__hash_value_type<CKLayoutMemoizationKey, CKComponentLayout>, void *> *>, std::__1::allocator<std::__1::__hash_node<std::__1::__hash_value_type<CKLayoutMemoizationKey, CKComponentLayout>, void *> > > {
	hash_node_base<std::__1::__hash_node<std::__1::__hash_value_type<CKLayoutMemoizationKey, CKComponentLayout>, void *> *> __first_;
} compressed_pair<std::__1::__hash_node_base<std::__1::__hash_node<std::__1::__hash_value_type<CKLayoutMemoizationKey, CKComponentLayout>, void *> *>, std::__1::allocator<std::__1::__hash_node<std::__1::__hash_value_type<CKLayoutMemoizationKey, CKComponentLayout>, void *> > >;

typedef struct _bucket_list_deallocator<std::__1::allocator<std::__1::__hash_node<std::__1::__hash_value_type<CKLayoutMemoizationKey, CKComponentLayout>, void *> *> > {
	compressed_pair<unsigned long, std::__1::allocator<std::__1::__hash_node<std::__1::__hash_value_type<CKLayoutMemoizationKey, CKComponentLayout>, void *> *> > __data_;
} bucket_list_deallocator<std::__1::allocator<std::__1::__hash_node<std::__1::__hash_value_type<CKLayoutMemoizationKey, CKComponentLayout>, void *> *> >;

typedef struct _compressed_pair<std::__1::__hash_node<std::__1::__hash_value_type<CKLayoutMemoizationKey, CKComponentLayout>, void *> **, std::__1::__bucket_list_deallocator<std::__1::allocator<std::__1::__hash_node<std::__1::__hash_value_type<CKLayoutMemoizationKey, CKComponentLayout>, void *> *> > > {
	__hash_node<std::__1::__hash_value_type<CKLayoutMemoizationKey, CKComponentLayout>, void *> __first_;
	bucket_list_deallocator<std::__1::allocator<std::__1::__hash_node<std::__1::__hash_value_type<CKLayoutMemoizationKey, CKComponentLayout>, void *> *> > __second_;
} compressed_pair<std::__1::__hash_node<std::__1::__hash_value_type<CKLayoutMemoizationKey, CKComponentLayout>, void *> **, std::__1::__bucket_list_deallocator<std::__1::allocator<std::__1::__hash_node<std::__1::__hash_value_type<CKLayoutMemoizationKey, CKComponentLayout>, void *> *> > >;

typedef struct unique_ptr<std::__1::__hash_node<std::__1::__hash_value_type<CKLayoutMemoizationKey, CKComponentLayout>, void *> *[], std::__1::__bucket_list_deallocator<std::__1::allocator<std::__1::__hash_node<std::__1::__hash_value_type<CKLayoutMemoizationKey, CKComponentLayout>, void *> *> > > {
	compressed_pair<std::__1::__hash_node<std::__1::__hash_value_type<CKLayoutMemoizationKey, CKComponentLayout>, void *> **, std::__1::__bucket_list_deallocator<std::__1::allocator<std::__1::__hash_node<std::__1::__hash_value_type<CKLayoutMemoizationKey, CKComponentLayout>, void *> *> > > __ptr_;
} unique_ptr<std::__1::__hash_node<std::__1::__hash_value_type<CKLayoutMemoizationKey, CKComponentLayout>, void *> *[], std::__1::__bucket_list_deallocator<std::__1::allocator<std::__1::__hash_node<std::__1::__hash_value_type<CKLayoutMemoizationKey, CKComponentLayout>, void *> *> > >;

typedef struct _hash_table<std::__1::__hash_value_type<CKLayoutMemoizationKey, CKComponentLayout>, std::__1::__unordered_map_hasher<CKLayoutMemoizationKey, std::__1::__hash_value_type<CKLayoutMemoizationKey, CKComponentLayout>, CKLayoutMemoizationKey::Hash, true>, std::__1::__unordered_map_equal<CKLayoutMemoizationKey, std::__1::__hash_value_type<CKLayoutMemoizationKey, CKComponentLayout>, CKLayoutMemoizationKey::Equals, true>, std::__1::allocator<std::__1::__hash_value_type<CKLayoutMemoizationKey, CKComponentLayout> > > {
	unique_ptr<std::__1::__hash_node<std::__1::__hash_value_type<CKLayoutMemoizationKey, CKComponentLayout>, void *> *[], std::__1::__bucket_list_deallocator<std::__1::allocator<std::__1::__hash_node<std::__1::__hash_value_type<CKLayoutMemoizationKey, CKComponentLayout>, void *> *> > > __bucket_list_;
	compressed_pair<std::__1::__hash_node_base<std::__1::__hash_node<std::__1::__hash_value_type<CKLayoutMemoizationKey, CKComponentLayout>, void *> *>, std::__1::allocator<std::__1::__hash_node<std::__1::__hash_value_type<CKLayoutMemoizationKey, CKComponentLayout>, void *> > > __p1_;
	compressed_pair<unsigned long, std::__1::__unordered_map_hasher<CKLayoutMemoizationKey, std::__1::__hash_value_type<CKLayoutMemoizationKey, CKComponentLayout>, CKLayoutMemoizationKey::Hash, true> > __p2_;
	compressed_pair<float, std::__1::__unordered_map_equal<CKLayoutMemoizationKey, std::__1::__hash_value_type<CKLayoutMemoizationKey, CKComponentLayout>, CKLayoutMemoizationKey::Equals, true> > __p3_;
} hash_table<std::__1::__hash_value_type<CKLayoutMemoizationKey, CKComponentLayout>, std::__1::__unordered_map_hasher<CKLayoutMemoizationKey, std::__1::__hash_value_type<CKLayoutMemoizationKey, CKComponentLayout>, CKLayoutMemoizationKey::Hash, true>, std::__1::__unordered_map_equal<CKLayoutMemoizationKey, std::__1::__hash_value_type<CKLayoutMemoizationKey, CKComponentLayout>, CKLayoutMemoizationKey::Equals, true>, std::__1::allocator<std::__1::__hash_value_type<CKLayoutMemoizationKey, CKComponentLayout> > >;

typedef struct unordered_map<CKLayoutMemoizationKey, CKComponentLayout, CKLayoutMemoizationKey::Hash, CKLayoutMemoizationKey::Equals, std::__1::allocator<std::__1::pair<const CKLayoutMemoizationKey, CKComponentLayout> > > {
	hash_table<std::__1::__hash_value_type<CKLayoutMemoizationKey, CKComponentLayout>, std::__1::__unordered_map_hasher<CKLayoutMemoizationKey, std::__1::__hash_value_type<CKLayoutMemoizationKey, CKComponentLayout>, CKLayoutMemoizationKey::Hash, true>, std::__1::__unordered_map_equal<CKLayoutMemoizationKey, std::__1::__hash_value_type<CKLayoutMemoizationKey, CKComponentLayout>, CKLayoutMemoizationKey::Equals, true>, std::__1::allocator<std::__1::__hash_value_type<CKLayoutMemoizationKey, CKComponentLayout> > > __table_;
} unordered_map<CKLayoutMemoizationKey, CKComponentLayout, CKLayoutMemoizationKey::Hash, CKLayoutMemoizationKey::Equals, std::__1::allocator<std::__1::pair<const CKLayoutMemoizationKey, CKComponentLayout> > >;

typedef struct shared_ptr<const std::__1::unordered_map<CKComponentViewAttribute, id, std::__1::hash<CKComponentViewAttribute>, std::__1::equal_to<CKComponentViewAttribute>, std::__1::allocator<std::__1::pair<const CKComponentViewAttribute, id> > > > {
	unordered_map<CKComponentViewAttribute, id, std::__1::hash<CKComponentViewAttribute>, std::__1::equal_to<CKComponentViewAttribute>, std::__1::allocator<std::__1::pair<const CKComponentViewAttribute, id> > > __ptr_;
	__shared_weak_count __cntrl_;
} shared_ptr<const std::__1::unordered_map<CKComponentViewAttribute, id, std::__1::hash<CKComponentViewAttribute>, std::__1::equal_to<CKComponentViewAttribute>, std::__1::allocator<std::__1::pair<const CKComponentViewAttribute, id> > > >;

typedef struct _compressed_pair<unsigned long, std::__1::allocator<std::__1::__hash_node<std::__1::__hash_value_type<CK::Component::ViewKey, CK::Component::ViewReusePool>, void *> *> > {
	unsigned long long __first_;
} compressed_pair<unsigned long, std::__1::allocator<std::__1::__hash_node<std::__1::__hash_value_type<CK::Component::ViewKey, CK::Component::ViewReusePool>, void *> *> >;

typedef struct _compressed_pair<unsigned long, std::__1::__unordered_map_hasher<CK::Component::ViewKey, std::__1::__hash_value_type<CK::Component::ViewKey, CK::Component::ViewReusePool>, std::__1::hash<CK::Component::ViewKey>, true> > {
	unsigned long long __first_;
} compressed_pair<unsigned long, std::__1::__unordered_map_hasher<CK::Component::ViewKey, std::__1::__hash_value_type<CK::Component::ViewKey, CK::Component::ViewReusePool>, std::__1::hash<CK::Component::ViewKey>, true> >;

typedef struct _compressed_pair<float, std::__1::__unordered_map_equal<CK::Component::ViewKey, std::__1::__hash_value_type<CK::Component::ViewKey, CK::Component::ViewReusePool>, std::__1::equal_to<CK::Component::ViewKey>, true> > {
	float __first_;
} compressed_pair<float, std::__1::__unordered_map_equal<CK::Component::ViewKey, std::__1::__hash_value_type<CK::Component::ViewKey, CK::Component::ViewReusePool>, std::__1::equal_to<CK::Component::ViewKey>, true> >;

typedef struct _compressed_pair<UIView *__strong *, std::__1::allocator<UIView *> > {
	id __first_;
} compressed_pair<UIView *__strong *, std::__1::allocator<UIView *> >;

typedef struct vector<UIView *, std::__1::allocator<UIView *> > {
	id __begin_;
	id __end_;
	compressed_pair<UIView *__strong *, std::__1::allocator<UIView *> > __end_cap_;
} vector<UIView *, std::__1::allocator<UIView *> >;

typedef struct _hash_node_base<std::__1::__hash_node<std::__1::__hash_value_type<CK::Component::ViewKey, CK::Component::ViewReusePool>, void *> *> {
	__hash_node<std::__1::__hash_value_type<CK::Component::ViewKey, CK::Component::ViewReusePool>, void *> __next_;
} hash_node_base<std::__1::__hash_node<std::__1::__hash_value_type<CK::Component::ViewKey, CK::Component::ViewReusePool>, void *> *>;

typedef struct _compressed_pair<std::__1::__hash_node_base<std::__1::__hash_node<std::__1::__hash_value_type<CK::Component::ViewKey, CK::Component::ViewReusePool>, void *> *>, std::__1::allocator<std::__1::__hash_node<std::__1::__hash_value_type<CK::Component::ViewKey, CK::Component::ViewReusePool>, void *> > > {
	hash_node_base<std::__1::__hash_node<std::__1::__hash_value_type<CK::Component::ViewKey, CK::Component::ViewReusePool>, void *> *> __first_;
} compressed_pair<std::__1::__hash_node_base<std::__1::__hash_node<std::__1::__hash_value_type<CK::Component::ViewKey, CK::Component::ViewReusePool>, void *> *>, std::__1::allocator<std::__1::__hash_node<std::__1::__hash_value_type<CK::Component::ViewKey, CK::Component::ViewReusePool>, void *> > >;

typedef struct _bucket_list_deallocator<std::__1::allocator<std::__1::__hash_node<std::__1::__hash_value_type<CK::Component::ViewKey, CK::Component::ViewReusePool>, void *> *> > {
	compressed_pair<unsigned long, std::__1::allocator<std::__1::__hash_node<std::__1::__hash_value_type<CK::Component::ViewKey, CK::Component::ViewReusePool>, void *> *> > __data_;
} bucket_list_deallocator<std::__1::allocator<std::__1::__hash_node<std::__1::__hash_value_type<CK::Component::ViewKey, CK::Component::ViewReusePool>, void *> *> >;

typedef struct _compressed_pair<std::__1::__hash_node<std::__1::__hash_value_type<CK::Component::ViewKey, CK::Component::ViewReusePool>, void *> **, std::__1::__bucket_list_deallocator<std::__1::allocator<std::__1::__hash_node<std::__1::__hash_value_type<CK::Component::ViewKey, CK::Component::ViewReusePool>, void *> *> > > {
	__hash_node<std::__1::__hash_value_type<CK::Component::ViewKey, CK::Component::ViewReusePool>, void *> __first_;
	bucket_list_deallocator<std::__1::allocator<std::__1::__hash_node<std::__1::__hash_value_type<CK::Component::ViewKey, CK::Component::ViewReusePool>, void *> *> > __second_;
} compressed_pair<std::__1::__hash_node<std::__1::__hash_value_type<CK::Component::ViewKey, CK::Component::ViewReusePool>, void *> **, std::__1::__bucket_list_deallocator<std::__1::allocator<std::__1::__hash_node<std::__1::__hash_value_type<CK::Component::ViewKey, CK::Component::ViewReusePool>, void *> *> > >;

typedef struct unique_ptr<std::__1::__hash_node<std::__1::__hash_value_type<CK::Component::ViewKey, CK::Component::ViewReusePool>, void *> *[], std::__1::__bucket_list_deallocator<std::__1::allocator<std::__1::__hash_node<std::__1::__hash_value_type<CK::Component::ViewKey, CK::Component::ViewReusePool>, void *> *> > > {
	compressed_pair<std::__1::__hash_node<std::__1::__hash_value_type<CK::Component::ViewKey, CK::Component::ViewReusePool>, void *> **, std::__1::__bucket_list_deallocator<std::__1::allocator<std::__1::__hash_node<std::__1::__hash_value_type<CK::Component::ViewKey, CK::Component::ViewReusePool>, void *> *> > > __ptr_;
} unique_ptr<std::__1::__hash_node<std::__1::__hash_value_type<CK::Component::ViewKey, CK::Component::ViewReusePool>, void *> *[], std::__1::__bucket_list_deallocator<std::__1::allocator<std::__1::__hash_node<std::__1::__hash_value_type<CK::Component::ViewKey, CK::Component::ViewReusePool>, void *> *> > >;

typedef struct _hash_table<std::__1::__hash_value_type<CK::Component::ViewKey, CK::Component::ViewReusePool>, std::__1::__unordered_map_hasher<CK::Component::ViewKey, std::__1::__hash_value_type<CK::Component::ViewKey, CK::Component::ViewReusePool>, std::__1::hash<CK::Component::ViewKey>, true>, std::__1::__unordered_map_equal<CK::Component::ViewKey, std::__1::__hash_value_type<CK::Component::ViewKey, CK::Component::ViewReusePool>, std::__1::equal_to<CK::Component::ViewKey>, true>, std::__1::allocator<std::__1::__hash_value_type<CK::Component::ViewKey, CK::Component::ViewReusePool> > > {
	unique_ptr<std::__1::__hash_node<std::__1::__hash_value_type<CK::Component::ViewKey, CK::Component::ViewReusePool>, void *> *[], std::__1::__bucket_list_deallocator<std::__1::allocator<std::__1::__hash_node<std::__1::__hash_value_type<CK::Component::ViewKey, CK::Component::ViewReusePool>, void *> *> > > __bucket_list_;
	compressed_pair<std::__1::__hash_node_base<std::__1::__hash_node<std::__1::__hash_value_type<CK::Component::ViewKey, CK::Component::ViewReusePool>, void *> *>, std::__1::allocator<std::__1::__hash_node<std::__1::__hash_value_type<CK::Component::ViewKey, CK::Component::ViewReusePool>, void *> > > __p1_;
	compressed_pair<unsigned long, std::__1::__unordered_map_hasher<CK::Component::ViewKey, std::__1::__hash_value_type<CK::Component::ViewKey, CK::Component::ViewReusePool>, std::__1::hash<CK::Component::ViewKey>, true> > __p2_;
	compressed_pair<float, std::__1::__unordered_map_equal<CK::Component::ViewKey, std::__1::__hash_value_type<CK::Component::ViewKey, CK::Component::ViewReusePool>, std::__1::equal_to<CK::Component::ViewKey>, true> > __p3_;
} hash_table<std::__1::__hash_value_type<CK::Component::ViewKey, CK::Component::ViewReusePool>, std::__1::__unordered_map_hasher<CK::Component::ViewKey, std::__1::__hash_value_type<CK::Component::ViewKey, CK::Component::ViewReusePool>, std::__1::hash<CK::Component::ViewKey>, true>, std::__1::__unordered_map_equal<CK::Component::ViewKey, std::__1::__hash_value_type<CK::Component::ViewKey, CK::Component::ViewReusePool>, std::__1::equal_to<CK::Component::ViewKey>, true>, std::__1::allocator<std::__1::__hash_value_type<CK::Component::ViewKey, CK::Component::ViewReusePool> > >;

typedef struct unordered_map<CK::Component::ViewKey, CK::Component::ViewReusePool, std::__1::hash<CK::Component::ViewKey>, std::__1::equal_to<CK::Component::ViewKey>, std::__1::allocator<std::__1::pair<const CK::Component::ViewKey, CK::Component::ViewReusePool> > > {
	hash_table<std::__1::__hash_value_type<CK::Component::ViewKey, CK::Component::ViewReusePool>, std::__1::__unordered_map_hasher<CK::Component::ViewKey, std::__1::__hash_value_type<CK::Component::ViewKey, CK::Component::ViewReusePool>, std::__1::hash<CK::Component::ViewKey>, true>, std::__1::__unordered_map_equal<CK::Component::ViewKey, std::__1::__hash_value_type<CK::Component::ViewKey, CK::Component::ViewReusePool>, std::__1::equal_to<CK::Component::ViewKey>, true>, std::__1::allocator<std::__1::__hash_value_type<CK::Component::ViewKey, CK::Component::ViewReusePool> > > __table_;
} unordered_map<CK::Component::ViewKey, CK::Component::ViewReusePool, std::__1::hash<CK::Component::ViewKey>, std::__1::equal_to<CK::Component::ViewKey>, std::__1::allocator<std::__1::pair<const CK::Component::ViewKey, CK::Component::ViewReusePool> > >;

typedef struct ViewReusePoolMap {
	unordered_map<CK::Component::ViewKey, CK::Component::ViewReusePool, std::__1::hash<CK::Component::ViewKey>, std::__1::equal_to<CK::Component::ViewKey>, std::__1::allocator<std::__1::pair<const CK::Component::ViewKey, CK::Component::ViewReusePool> > > map;
	vector<UIView *, std::__1::allocator<UIView *> > vendedViews;
} ViewReusePoolMap;

typedef struct CKComponentHostingViewInputs {
	CKComponentScopeRoot* scopeRoot;
	<NSObject>* model;
	<NSObject>* context;
	unordered_multimap<int, id ()(id), std::__1::hash<int>, std::__1::equal_to<int>, std::__1::allocator<std::__1::pair<const int, id ()(id)> > > stateUpdates;
} CKComponentHostingViewInputs;

typedef struct CKStackLayoutComponentStyle {
	unsigned long long direction;
	double spacing;
	unsigned long long justifyContent;
	unsigned long long alignItems;
} CKStackLayoutComponentStyle;

typedef struct _compressed_pair<CKStackLayoutComponentChild *, std::__1::allocator<CKStackLayoutComponentChild> > {
	CKStackLayoutComponentChild __first_;
} compressed_pair<CKStackLayoutComponentChild *, std::__1::allocator<CKStackLayoutComponentChild> >;

typedef struct vector<CKStackLayoutComponentChild, std::__1::allocator<CKStackLayoutComponentChild> > {
	CKStackLayoutComponentChild __begin_;
	CKStackLayoutComponentChild __end_;
	compressed_pair<CKStackLayoutComponentChild *, std::__1::allocator<CKStackLayoutComponentChild> > __end_cap_;
} vector<CKStackLayoutComponentChild, std::__1::allocator<CKStackLayoutComponentChild> >;

typedef struct _compressed_pair<CKStaticLayoutComponentChild *, std::__1::allocator<CKStaticLayoutComponentChild> > {
	CKStaticLayoutComponentChild __first_;
} compressed_pair<CKStaticLayoutComponentChild *, std::__1::allocator<CKStaticLayoutComponentChild> >;

typedef struct vector<CKStaticLayoutComponentChild, std::__1::allocator<CKStaticLayoutComponentChild> > {
	CKStaticLayoutComponentChild __begin_;
	CKStaticLayoutComponentChild __end_;
	compressed_pair<CKStaticLayoutComponentChild *, std::__1::allocator<CKStaticLayoutComponentChild> > __end_cap_;
} vector<CKStaticLayoutComponentChild, std::__1::allocator<CKStaticLayoutComponentChild> >;

typedef struct _compressed_pair<unsigned long, std::__1::allocator<std::__1::__hash_node<std::__1::__hash_value_type<std::__1::pair<__unsafe_unretained Class, id>, FBStatefulReusePoolItem>, void *> *> > {
	unsigned long long __first_;
} compressed_pair<unsigned long, std::__1::allocator<std::__1::__hash_node<std::__1::__hash_value_type<std::__1::pair<__unsafe_unretained Class, id>, FBStatefulReusePoolItem>, void *> *> >;

typedef struct _compressed_pair<unsigned long, std::__1::__unordered_map_hasher<std::__1::pair<__unsafe_unretained Class, id>, std::__1::__hash_value_type<std::__1::pair<__unsafe_unretained Class, id>, FBStatefulReusePoolItem>, PoolKeyHasher, true> > {
	unsigned long long __first_;
} compressed_pair<unsigned long, std::__1::__unordered_map_hasher<std::__1::pair<__unsafe_unretained Class, id>, std::__1::__hash_value_type<std::__1::pair<__unsafe_unretained Class, id>, FBStatefulReusePoolItem>, PoolKeyHasher, true> >;

typedef struct _compressed_pair<float, std::__1::__unordered_map_equal<std::__1::pair<__unsafe_unretained Class, id>, std::__1::__hash_value_type<std::__1::pair<__unsafe_unretained Class, id>, FBStatefulReusePoolItem>, std::__1::equal_to<std::__1::pair<__unsafe_unretained Class, id> >, true> > {
	float __first_;
} compressed_pair<float, std::__1::__unordered_map_equal<std::__1::pair<__unsafe_unretained Class, id>, std::__1::__hash_value_type<std::__1::pair<__unsafe_unretained Class, id>, FBStatefulReusePoolItem>, std::__1::equal_to<std::__1::pair<__unsafe_unretained Class, id> >, true> >;

typedef struct _hash_node_base<std::__1::__hash_node<std::__1::__hash_value_type<std::__1::pair<__unsafe_unretained Class, id>, FBStatefulReusePoolItem>, void *> *> {
	__hash_node<std::__1::__hash_value_type<std::__1::pair<__unsafe_unretained Class, id>, FBStatefulReusePoolItem>, void *> __next_;
} hash_node_base<std::__1::__hash_node<std::__1::__hash_value_type<std::__1::pair<__unsafe_unretained Class, id>, FBStatefulReusePoolItem>, void *> *>;

typedef struct _compressed_pair<std::__1::__hash_node_base<std::__1::__hash_node<std::__1::__hash_value_type<std::__1::pair<__unsafe_unretained Class, id>, FBStatefulReusePoolItem>, void *> *>, std::__1::allocator<std::__1::__hash_node<std::__1::__hash_value_type<std::__1::pair<__unsafe_unretained Class, id>, FBStatefulReusePoolItem>, void *> > > {
	hash_node_base<std::__1::__hash_node<std::__1::__hash_value_type<std::__1::pair<__unsafe_unretained Class, id>, FBStatefulReusePoolItem>, void *> *> __first_;
} compressed_pair<std::__1::__hash_node_base<std::__1::__hash_node<std::__1::__hash_value_type<std::__1::pair<__unsafe_unretained Class, id>, FBStatefulReusePoolItem>, void *> *>, std::__1::allocator<std::__1::__hash_node<std::__1::__hash_value_type<std::__1::pair<__unsafe_unretained Class, id>, FBStatefulReusePoolItem>, void *> > >;

typedef struct _bucket_list_deallocator<std::__1::allocator<std::__1::__hash_node<std::__1::__hash_value_type<std::__1::pair<__unsafe_unretained Class, id>, FBStatefulReusePoolItem>, void *> *> > {
	compressed_pair<unsigned long, std::__1::allocator<std::__1::__hash_node<std::__1::__hash_value_type<std::__1::pair<__unsafe_unretained Class, id>, FBStatefulReusePoolItem>, void *> *> > __data_;
} bucket_list_deallocator<std::__1::allocator<std::__1::__hash_node<std::__1::__hash_value_type<std::__1::pair<__unsafe_unretained Class, id>, FBStatefulReusePoolItem>, void *> *> >;

typedef struct _compressed_pair<std::__1::__hash_node<std::__1::__hash_value_type<std::__1::pair<__unsafe_unretained Class, id>, FBStatefulReusePoolItem>, void *> **, std::__1::__bucket_list_deallocator<std::__1::allocator<std::__1::__hash_node<std::__1::__hash_value_type<std::__1::pair<__unsafe_unretained Class, id>, FBStatefulReusePoolItem>, void *> *> > > {
	__hash_node<std::__1::__hash_value_type<std::__1::pair<__unsafe_unretained Class, id>, FBStatefulReusePoolItem>, void *> __first_;
	bucket_list_deallocator<std::__1::allocator<std::__1::__hash_node<std::__1::__hash_value_type<std::__1::pair<__unsafe_unretained Class, id>, FBStatefulReusePoolItem>, void *> *> > __second_;
} compressed_pair<std::__1::__hash_node<std::__1::__hash_value_type<std::__1::pair<__unsafe_unretained Class, id>, FBStatefulReusePoolItem>, void *> **, std::__1::__bucket_list_deallocator<std::__1::allocator<std::__1::__hash_node<std::__1::__hash_value_type<std::__1::pair<__unsafe_unretained Class, id>, FBStatefulReusePoolItem>, void *> *> > >;

typedef struct unique_ptr<std::__1::__hash_node<std::__1::__hash_value_type<std::__1::pair<__unsafe_unretained Class, id>, FBStatefulReusePoolItem>, void *> *[], std::__1::__bucket_list_deallocator<std::__1::allocator<std::__1::__hash_node<std::__1::__hash_value_type<std::__1::pair<__unsafe_unretained Class, id>, FBStatefulReusePoolItem>, void *> *> > > {
	compressed_pair<std::__1::__hash_node<std::__1::__hash_value_type<std::__1::pair<__unsafe_unretained Class, id>, FBStatefulReusePoolItem>, void *> **, std::__1::__bucket_list_deallocator<std::__1::allocator<std::__1::__hash_node<std::__1::__hash_value_type<std::__1::pair<__unsafe_unretained Class, id>, FBStatefulReusePoolItem>, void *> *> > > __ptr_;
} unique_ptr<std::__1::__hash_node<std::__1::__hash_value_type<std::__1::pair<__unsafe_unretained Class, id>, FBStatefulReusePoolItem>, void *> *[], std::__1::__bucket_list_deallocator<std::__1::allocator<std::__1::__hash_node<std::__1::__hash_value_type<std::__1::pair<__unsafe_unretained Class, id>, FBStatefulReusePoolItem>, void *> *> > >;

typedef struct _hash_table<std::__1::__hash_value_type<std::__1::pair<__unsafe_unretained Class, id>, FBStatefulReusePoolItem>, std::__1::__unordered_map_hasher<std::__1::pair<__unsafe_unretained Class, id>, std::__1::__hash_value_type<std::__1::pair<__unsafe_unretained Class, id>, FBStatefulReusePoolItem>, PoolKeyHasher, true>, std::__1::__unordered_map_equal<std::__1::pair<__unsafe_unretained Class, id>, std::__1::__hash_value_type<std::__1::pair<__unsafe_unretained Class, id>, FBStatefulReusePoolItem>, std::__1::equal_to<std::__1::pair<__unsafe_unretained Class, id> >, true>, std::__1::allocator<std::__1::__hash_value_type<std::__1::pair<__unsafe_unretained Class, id>, FBStatefulReusePoolItem> > > {
	unique_ptr<std::__1::__hash_node<std::__1::__hash_value_type<std::__1::pair<__unsafe_unretained Class, id>, FBStatefulReusePoolItem>, void *> *[], std::__1::__bucket_list_deallocator<std::__1::allocator<std::__1::__hash_node<std::__1::__hash_value_type<std::__1::pair<__unsafe_unretained Class, id>, FBStatefulReusePoolItem>, void *> *> > > __bucket_list_;
	compressed_pair<std::__1::__hash_node_base<std::__1::__hash_node<std::__1::__hash_value_type<std::__1::pair<__unsafe_unretained Class, id>, FBStatefulReusePoolItem>, void *> *>, std::__1::allocator<std::__1::__hash_node<std::__1::__hash_value_type<std::__1::pair<__unsafe_unretained Class, id>, FBStatefulReusePoolItem>, void *> > > __p1_;
	compressed_pair<unsigned long, std::__1::__unordered_map_hasher<std::__1::pair<__unsafe_unretained Class, id>, std::__1::__hash_value_type<std::__1::pair<__unsafe_unretained Class, id>, FBStatefulReusePoolItem>, PoolKeyHasher, true> > __p2_;
	compressed_pair<float, std::__1::__unordered_map_equal<std::__1::pair<__unsafe_unretained Class, id>, std::__1::__hash_value_type<std::__1::pair<__unsafe_unretained Class, id>, FBStatefulReusePoolItem>, std::__1::equal_to<std::__1::pair<__unsafe_unretained Class, id> >, true> > __p3_;
} hash_table<std::__1::__hash_value_type<std::__1::pair<__unsafe_unretained Class, id>, FBStatefulReusePoolItem>, std::__1::__unordered_map_hasher<std::__1::pair<__unsafe_unretained Class, id>, std::__1::__hash_value_type<std::__1::pair<__unsafe_unretained Class, id>, FBStatefulReusePoolItem>, PoolKeyHasher, true>, std::__1::__unordered_map_equal<std::__1::pair<__unsafe_unretained Class, id>, std::__1::__hash_value_type<std::__1::pair<__unsafe_unretained Class, id>, FBStatefulReusePoolItem>, std::__1::equal_to<std::__1::pair<__unsafe_unretained Class, id> >, true>, std::__1::allocator<std::__1::__hash_value_type<std::__1::pair<__unsafe_unretained Class, id>, FBStatefulReusePoolItem> > >;

typedef struct unordered_map<std::__1::pair<__unsafe_unretained Class, id>, FBStatefulReusePoolItem, PoolKeyHasher, std::__1::equal_to<std::__1::pair<__unsafe_unretained Class, id> >, std::__1::allocator<std::__1::pair<const std::__1::pair<__unsafe_unretained Class, id>, FBStatefulReusePoolItem> > > {
	hash_table<std::__1::__hash_value_type<std::__1::pair<__unsafe_unretained Class, id>, FBStatefulReusePoolItem>, std::__1::__unordered_map_hasher<std::__1::pair<__unsafe_unretained Class, id>, std::__1::__hash_value_type<std::__1::pair<__unsafe_unretained Class, id>, FBStatefulReusePoolItem>, PoolKeyHasher, true>, std::__1::__unordered_map_equal<std::__1::pair<__unsafe_unretained Class, id>, std::__1::__hash_value_type<std::__1::pair<__unsafe_unretained Class, id>, FBStatefulReusePoolItem>, std::__1::equal_to<std::__1::pair<__unsafe_unretained Class, id> >, true>, std::__1::allocator<std::__1::__hash_value_type<std::__1::pair<__unsafe_unretained Class, id>, FBStatefulReusePoolItem> > > __table_;
} unordered_map<std::__1::pair<__unsafe_unretained Class, id>, FBStatefulReusePoolItem, PoolKeyHasher, std::__1::equal_to<std::__1::pair<__unsafe_unretained Class, id> >, std::__1::allocator<std::__1::pair<const std::__1::pair<__unsafe_unretained Class, id>, FBStatefulReusePoolItem> > >;

typedef struct _compressed_pair<unsigned long, std::__1::allocator<std::__1::__hash_node<std::__1::__hash_value_type<int, std::__1::unordered_multimap<int, id ()(id), std::__1::hash<int>, std::__1::equal_to<int>, std::__1::allocator<std::__1::pair<const int, id ()(id)> > > >, void *> *> > {
	unsigned long long __first_;
} compressed_pair<unsigned long, std::__1::allocator<std::__1::__hash_node<std::__1::__hash_value_type<int, std::__1::unordered_multimap<int, id ()(id), std::__1::hash<int>, std::__1::equal_to<int>, std::__1::allocator<std::__1::pair<const int, id ()(id)> > > >, void *> *> >;

typedef struct _compressed_pair<unsigned long, std::__1::__unordered_map_hasher<int, std::__1::__hash_value_type<int, std::__1::unordered_multimap<int, id ()(id), std::__1::hash<int>, std::__1::equal_to<int>, std::__1::allocator<std::__1::pair<const int, id ()(id)> > > >, std::__1::hash<int>, true> > {
	unsigned long long __first_;
} compressed_pair<unsigned long, std::__1::__unordered_map_hasher<int, std::__1::__hash_value_type<int, std::__1::unordered_multimap<int, id ()(id), std::__1::hash<int>, std::__1::equal_to<int>, std::__1::allocator<std::__1::pair<const int, id ()(id)> > > >, std::__1::hash<int>, true> >;

typedef struct _compressed_pair<float, std::__1::__unordered_map_equal<int, std::__1::__hash_value_type<int, std::__1::unordered_multimap<int, id ()(id), std::__1::hash<int>, std::__1::equal_to<int>, std::__1::allocator<std::__1::pair<const int, id ()(id)> > > >, std::__1::equal_to<int>, true> > {
	float __first_;
} compressed_pair<float, std::__1::__unordered_map_equal<int, std::__1::__hash_value_type<int, std::__1::unordered_multimap<int, id ()(id), std::__1::hash<int>, std::__1::equal_to<int>, std::__1::allocator<std::__1::pair<const int, id ()(id)> > > >, std::__1::equal_to<int>, true> >;

typedef struct _hash_node_base<std::__1::__hash_node<std::__1::__hash_value_type<int, std::__1::unordered_multimap<int, id ()(id), std::__1::hash<int>, std::__1::equal_to<int>, std::__1::allocator<std::__1::pair<const int, id ()(id)> > > >, void *> *> {
	__hash_node<std::__1::__hash_value_type<int, std::__1::unordered_multimap<int, id ()(id), std::__1::hash<int>, std::__1::equal_to<int>, std::__1::allocator<std::__1::pair<const int, id ()(id)> > > >, void *> __next_;
} hash_node_base<std::__1::__hash_node<std::__1::__hash_value_type<int, std::__1::unordered_multimap<int, id ()(id), std::__1::hash<int>, std::__1::equal_to<int>, std::__1::allocator<std::__1::pair<const int, id ()(id)> > > >, void *> *>;

typedef struct _compressed_pair<std::__1::__hash_node_base<std::__1::__hash_node<std::__1::__hash_value_type<int, std::__1::unordered_multimap<int, id ()(id), std::__1::hash<int>, std::__1::equal_to<int>, std::__1::allocator<std::__1::pair<const int, id ()(id)> > > >, void *> *>, std::__1::allocator<std::__1::__hash_node<std::__1::__hash_value_type<int, std::__1::unordered_multimap<int, id ()(id), std::__1::hash<int>, std::__1::equal_to<int>, std::__1::allocator<std::__1::pair<const int, id ()(id)> > > >, void *> > > {
	hash_node_base<std::__1::__hash_node<std::__1::__hash_value_type<int, std::__1::unordered_multimap<int, id ()(id), std::__1::hash<int>, std::__1::equal_to<int>, std::__1::allocator<std::__1::pair<const int, id ()(id)> > > >, void *> *> __first_;
} compressed_pair<std::__1::__hash_node_base<std::__1::__hash_node<std::__1::__hash_value_type<int, std::__1::unordered_multimap<int, id ()(id), std::__1::hash<int>, std::__1::equal_to<int>, std::__1::allocator<std::__1::pair<const int, id ()(id)> > > >, void *> *>, std::__1::allocator<std::__1::__hash_node<std::__1::__hash_value_type<int, std::__1::unordered_multimap<int, id ()(id), std::__1::hash<int>, std::__1::equal_to<int>, std::__1::allocator<std::__1::pair<const int, id ()(id)> > > >, void *> > >;

typedef struct _bucket_list_deallocator<std::__1::allocator<std::__1::__hash_node<std::__1::__hash_value_type<int, std::__1::unordered_multimap<int, id ()(id), std::__1::hash<int>, std::__1::equal_to<int>, std::__1::allocator<std::__1::pair<const int, id ()(id)> > > >, void *> *> > {
	compressed_pair<unsigned long, std::__1::allocator<std::__1::__hash_node<std::__1::__hash_value_type<int, std::__1::unordered_multimap<int, id ()(id), std::__1::hash<int>, std::__1::equal_to<int>, std::__1::allocator<std::__1::pair<const int, id ()(id)> > > >, void *> *> > __data_;
} bucket_list_deallocator<std::__1::allocator<std::__1::__hash_node<std::__1::__hash_value_type<int, std::__1::unordered_multimap<int, id ()(id), std::__1::hash<int>, std::__1::equal_to<int>, std::__1::allocator<std::__1::pair<const int, id ()(id)> > > >, void *> *> >;

typedef struct _compressed_pair<std::__1::__hash_node<std::__1::__hash_value_type<int, std::__1::unordered_multimap<int, id ()(id), std::__1::hash<int>, std::__1::equal_to<int>, std::__1::allocator<std::__1::pair<const int, id ()(id)> > > >, void *> **, std::__1::__bucket_list_deallocator<std::__1::allocator<std::__1::__hash_node<std::__1::__hash_value_type<int, std::__1::unordered_multimap<int, id ()(id), std::__1::hash<int>, std::__1::equal_to<int>, std::__1::allocator<std::__1::pair<const int, id ()(id)> > > >, void *> *> > > {
	__hash_node<std::__1::__hash_value_type<int, std::__1::unordered_multimap<int, id ()(id), std::__1::hash<int>, std::__1::equal_to<int>, std::__1::allocator<std::__1::pair<const int, id ()(id)> > > >, void *> __first_;
	bucket_list_deallocator<std::__1::allocator<std::__1::__hash_node<std::__1::__hash_value_type<int, std::__1::unordered_multimap<int, id ()(id), std::__1::hash<int>, std::__1::equal_to<int>, std::__1::allocator<std::__1::pair<const int, id ()(id)> > > >, void *> *> > __second_;
} compressed_pair<std::__1::__hash_node<std::__1::__hash_value_type<int, std::__1::unordered_multimap<int, id ()(id), std::__1::hash<int>, std::__1::equal_to<int>, std::__1::allocator<std::__1::pair<const int, id ()(id)> > > >, void *> **, std::__1::__bucket_list_deallocator<std::__1::allocator<std::__1::__hash_node<std::__1::__hash_value_type<int, std::__1::unordered_multimap<int, id ()(id), std::__1::hash<int>, std::__1::equal_to<int>, std::__1::allocator<std::__1::pair<const int, id ()(id)> > > >, void *> *> > >;

typedef struct unique_ptr<std::__1::__hash_node<std::__1::__hash_value_type<int, std::__1::unordered_multimap<int, id ()(id), std::__1::hash<int>, std::__1::equal_to<int>, std::__1::allocator<std::__1::pair<const int, id ()(id)> > > >, void *> *[], std::__1::__bucket_list_deallocator<std::__1::allocator<std::__1::__hash_node<std::__1::__hash_value_type<int, std::__1::unordered_multimap<int, id ()(id), std::__1::hash<int>, std::__1::equal_to<int>, std::__1::allocator<std::__1::pair<const int, id ()(id)> > > >, void *> *> > > {
	compressed_pair<std::__1::__hash_node<std::__1::__hash_value_type<int, std::__1::unordered_multimap<int, id ()(id), std::__1::hash<int>, std::__1::equal_to<int>, std::__1::allocator<std::__1::pair<const int, id ()(id)> > > >, void *> **, std::__1::__bucket_list_deallocator<std::__1::allocator<std::__1::__hash_node<std::__1::__hash_value_type<int, std::__1::unordered_multimap<int, id ()(id), std::__1::hash<int>, std::__1::equal_to<int>, std::__1::allocator<std::__1::pair<const int, id ()(id)> > > >, void *> *> > > __ptr_;
} unique_ptr<std::__1::__hash_node<std::__1::__hash_value_type<int, std::__1::unordered_multimap<int, id ()(id), std::__1::hash<int>, std::__1::equal_to<int>, std::__1::allocator<std::__1::pair<const int, id ()(id)> > > >, void *> *[], std::__1::__bucket_list_deallocator<std::__1::allocator<std::__1::__hash_node<std::__1::__hash_value_type<int, std::__1::unordered_multimap<int, id ()(id), std::__1::hash<int>, std::__1::equal_to<int>, std::__1::allocator<std::__1::pair<const int, id ()(id)> > > >, void *> *> > >;

typedef struct _hash_table<std::__1::__hash_value_type<int, std::__1::unordered_multimap<int, id ()(id), std::__1::hash<int>, std::__1::equal_to<int>, std::__1::allocator<std::__1::pair<const int, id ()(id)> > > >, std::__1::__unordered_map_hasher<int, std::__1::__hash_value_type<int, std::__1::unordered_multimap<int, id ()(id), std::__1::hash<int>, std::__1::equal_to<int>, std::__1::allocator<std::__1::pair<const int, id ()(id)> > > >, std::__1::hash<int>, true>, std::__1::__unordered_map_equal<int, std::__1::__hash_value_type<int, std::__1::unordered_multimap<int, id ()(id), std::__1::hash<int>, std::__1::equal_to<int>, std::__1::allocator<std::__1::pair<const int, id ()(id)> > > >, std::__1::equal_to<int>, true>, std::__1::allocator<std::__1::__hash_value_type<int, std::__1::unordered_multimap<int, id ()(id), std::__1::hash<int>, std::__1::equal_to<int>, std::__1::allocator<std::__1::pair<const int, id ()(id)> > > > > > {
	unique_ptr<std::__1::__hash_node<std::__1::__hash_value_type<int, std::__1::unordered_multimap<int, id ()(id), std::__1::hash<int>, std::__1::equal_to<int>, std::__1::allocator<std::__1::pair<const int, id ()(id)> > > >, void *> *[], std::__1::__bucket_list_deallocator<std::__1::allocator<std::__1::__hash_node<std::__1::__hash_value_type<int, std::__1::unordered_multimap<int, id ()(id), std::__1::hash<int>, std::__1::equal_to<int>, std::__1::allocator<std::__1::pair<const int, id ()(id)> > > >, void *> *> > > __bucket_list_;
	compressed_pair<std::__1::__hash_node_base<std::__1::__hash_node<std::__1::__hash_value_type<int, std::__1::unordered_multimap<int, id ()(id), std::__1::hash<int>, std::__1::equal_to<int>, std::__1::allocator<std::__1::pair<const int, id ()(id)> > > >, void *> *>, std::__1::allocator<std::__1::__hash_node<std::__1::__hash_value_type<int, std::__1::unordered_multimap<int, id ()(id), std::__1::hash<int>, std::__1::equal_to<int>, std::__1::allocator<std::__1::pair<const int, id ()(id)> > > >, void *> > > __p1_;
	compressed_pair<unsigned long, std::__1::__unordered_map_hasher<int, std::__1::__hash_value_type<int, std::__1::unordered_multimap<int, id ()(id), std::__1::hash<int>, std::__1::equal_to<int>, std::__1::allocator<std::__1::pair<const int, id ()(id)> > > >, std::__1::hash<int>, true> > __p2_;
	compressed_pair<float, std::__1::__unordered_map_equal<int, std::__1::__hash_value_type<int, std::__1::unordered_multimap<int, id ()(id), std::__1::hash<int>, std::__1::equal_to<int>, std::__1::allocator<std::__1::pair<const int, id ()(id)> > > >, std::__1::equal_to<int>, true> > __p3_;
} hash_table<std::__1::__hash_value_type<int, std::__1::unordered_multimap<int, id ()(id), std::__1::hash<int>, std::__1::equal_to<int>, std::__1::allocator<std::__1::pair<const int, id ()(id)> > > >, std::__1::__unordered_map_hasher<int, std::__1::__hash_value_type<int, std::__1::unordered_multimap<int, id ()(id), std::__1::hash<int>, std::__1::equal_to<int>, std::__1::allocator<std::__1::pair<const int, id ()(id)> > > >, std::__1::hash<int>, true>, std::__1::__unordered_map_equal<int, std::__1::__hash_value_type<int, std::__1::unordered_multimap<int, id ()(id), std::__1::hash<int>, std::__1::equal_to<int>, std::__1::allocator<std::__1::pair<const int, id ()(id)> > > >, std::__1::equal_to<int>, true>, std::__1::allocator<std::__1::__hash_value_type<int, std::__1::unordered_multimap<int, id ()(id), std::__1::hash<int>, std::__1::equal_to<int>, std::__1::allocator<std::__1::pair<const int, id ()(id)> > > > > >;

typedef struct unordered_map<int, std::__1::unordered_multimap<int, id ()(id), std::__1::hash<int>, std::__1::equal_to<int>, std::__1::allocator<std::__1::pair<const int, id ()(id)> > >, std::__1::hash<int>, std::__1::equal_to<int>, std::__1::allocator<std::__1::pair<const int, std::__1::unordered_multimap<int, id ()(id), std::__1::hash<int>, std::__1::equal_to<int>, std::__1::allocator<std::__1::pair<const int, id ()(id)> > > > > > {
	hash_table<std::__1::__hash_value_type<int, std::__1::unordered_multimap<int, id ()(id), std::__1::hash<int>, std::__1::equal_to<int>, std::__1::allocator<std::__1::pair<const int, id ()(id)> > > >, std::__1::__unordered_map_hasher<int, std::__1::__hash_value_type<int, std::__1::unordered_multimap<int, id ()(id), std::__1::hash<int>, std::__1::equal_to<int>, std::__1::allocator<std::__1::pair<const int, id ()(id)> > > >, std::__1::hash<int>, true>, std::__1::__unordered_map_equal<int, std::__1::__hash_value_type<int, std::__1::unordered_multimap<int, id ()(id), std::__1::hash<int>, std::__1::equal_to<int>, std::__1::allocator<std::__1::pair<const int, id ()(id)> > > >, std::__1::equal_to<int>, true>, std::__1::allocator<std::__1::__hash_value_type<int, std::__1::unordered_multimap<int, id ()(id), std::__1::hash<int>, std::__1::equal_to<int>, std::__1::allocator<std::__1::pair<const int, id ()(id)> > > > > > __table_;
} unordered_map<int, std::__1::unordered_multimap<int, id ()(id), std::__1::hash<int>, std::__1::equal_to<int>, std::__1::allocator<std::__1::pair<const int, id ()(id)> > >, std::__1::hash<int>, std::__1::equal_to<int>, std::__1::allocator<std::__1::pair<const int, std::__1::unordered_multimap<int, id ()(id), std::__1::hash<int>, std::__1::equal_to<int>, std::__1::allocator<std::__1::pair<const int, id ()(id)> > > > > >;

typedef struct _compressed_pair<SEL **, std::__1::allocator<SEL *> > {
	SEL __first_;
} compressed_pair<SEL **, std::__1::allocator<SEL *> >;

typedef struct vector<SEL *, std::__1::allocator<SEL *> > {
	SEL __begin_;
	SEL __end_;
	compressed_pair<SEL **, std::__1::allocator<SEL *> > __end_cap_;
} vector<SEL *, std::__1::allocator<SEL *> >;

typedef struct FBRichTextComponentStyle {
	UIFont* font;
	UIColor* color;
	FBImageDownloader* imageDownloader;
	CGSize textShadowOffset;
	unsigned long long maximumNumberOfLines;
	unsigned long long truncationMode;
	NSAttributedString* truncationAttributedString;
	long long horizontalAlignmentMode;
	NSArray* menuItems;
} FBRichTextComponentStyle;

typedef struct FBFourPartBorderLayoutChildren {
	CKComponent* top;
	CKComponent* left;
	CKComponent* bottom;
	CKComponent* right;
} FBFourPartBorderLayoutChildren;

typedef struct CGPath* CGPathRef;

typedef struct UIOffset {
	double horizontal;
	double vertical;
} UIOffset;

typedef struct FBAnimationPerformanceTrackerConfig {
	long long smallDropEventFrameNumber;
	long long largeDropEventFrameNumber;
	long long maxFrameDropAccount;
	BOOL reportStackTraces;
} FBAnimationPerformanceTrackerConfig;

typedef struct _compressed_pair<double *, std::__1::allocator<double> > {
	double __first_;
} compressed_pair<double *, std::__1::allocator<double> >;

typedef struct vector<double, std::__1::allocator<double> > {
	double __begin_;
	double __end_;
	compressed_pair<double *, std::__1::allocator<double> > __end_cap_;
} vector<double, std::__1::allocator<double> >;

typedef struct {
	CGSize fullBodySize;
	CGSize constrainedSize;
	double bodyCollapsedHeight;
	double bodyWithoutGradientHeight;
	UIEdgeInsets insidePadding;
	BOOL isValid;
	BOOL textLabelNeedsUpdate;
} SCD_Struct_FB377;

typedef struct {
	CGSize field1;
	CGSize field2;
	double field3;
	double field4;
	UIEdgeInsets field5;
	BOOL field6;
	BOOL field7;
} SCD_Struct_FB378;

typedef struct FBCollageItemOrigin {
	unsigned long long x;
	unsigned long long y;
} FBCollageItemOrigin;

typedef struct FBCollageItemSize {
	unsigned long long width;
	unsigned long long height;
} FBCollageItemSize;

typedef struct FBCollageItemRect {
	FBCollageItemOrigin origin;
	FBCollageItemSize size;
} FBCollageItemRect;

typedef struct delegateOptionalProtocolResponseFlags {
	unsigned delegateCollectionViewSizeForBackgroundHeaderViewInSection : 1;
	unsigned delegateCollectionViewHeightForRowCellInSection : 1;
	unsigned delegateCollectionViewSpacingBetweenRowsInSection : 1;
	unsigned delegateCollectionViewSectionInsetsForSection : 1;
} delegateOptionalProtocolResponseFlags;

typedef struct flags {
	unsigned isInTextChanged : 1;
	unsigned delegateTextFieldDidAddObject_DEPRECATED : 1;
	unsigned delegateTextFieldWillRemoveObject_DEPRECATED : 1;
	unsigned delegateTextFieldHeightWillChange : 1;
	unsigned delegateTextFieldHeightDidChange : 1;
	unsigned delegateTextFieldSearchTextChanged : 1;
	unsigned isInternalTextChange : 1;
	unsigned delegateTextFieldUserWillDeleteObjectByTyping : 1;
	unsigned delegateTextFieldSupportsEditing : 1;
	unsigned delegateTextFieldDidReceiveTap : 1;
} flags;

typedef struct FBHScrollComponentAlpha {
	double alpha;
} FBHScrollComponentAlpha;

typedef struct FBHScrollComponentStyle {
	double spacing;
	unsigned long long alignItems;
	FBHScrollComponentAlpha alpha;
	CKRelativeDimension width;
	unsigned long long clippingStyle;
	unsigned long long decelerationRate;
	Class targetComponentClass;
	BOOL hscrollResizingEnabled;
	id currentChildScopeFrameID;
} FBHScrollComponentStyle;

typedef struct FBHScrollOptions {
	Class expandToTargetClass;
	double hExpansionLeftAndRightInset;
	long long nearingEndOffset;
	SEL endDraggingScrollViewAction;
	FBHScrollOffsetStore* hscrollOffsetStore;
	NSString* accessibilityIdentifier;
	unsigned long long delaysContentTouchesOption;
	BOOL disableBounce;
	SEL didScrollAction;
	SEL nearingEndAction;
	SEL scrollToComponentAction;
	unsigned long long touchThroughOption;
} FBHScrollOptions;

typedef struct _compressed_pair<FBHScrollComponentChild *, std::__1::allocator<FBHScrollComponentChild> > {
	FBHScrollComponentChild __first_;
} compressed_pair<FBHScrollComponentChild *, std::__1::allocator<FBHScrollComponentChild> >;

typedef struct vector<FBHScrollComponentChild, std::__1::allocator<FBHScrollComponentChild> > {
	FBHScrollComponentChild __begin_;
	FBHScrollComponentChild __end_;
	compressed_pair<FBHScrollComponentChild *, std::__1::allocator<FBHScrollComponentChild> > __end_cap_;
} vector<FBHScrollComponentChild, std::__1::allocator<FBHScrollComponentChild> >;

typedef struct _compressed_pair<UICollectionViewLayoutAttributes *__strong *, std::__1::allocator<UICollectionViewLayoutAttributes *> > {
	id __first_;
} compressed_pair<UICollectionViewLayoutAttributes *__strong *, std::__1::allocator<UICollectionViewLayoutAttributes *> >;

typedef struct vector<UICollectionViewLayoutAttributes *, std::__1::allocator<UICollectionViewLayoutAttributes *> > {
	id __begin_;
	id __end_;
	compressed_pair<UICollectionViewLayoutAttributes *__strong *, std::__1::allocator<UICollectionViewLayoutAttributes *> > __end_cap_;
} vector<UICollectionViewLayoutAttributes *, std::__1::allocator<UICollectionViewLayoutAttributes *> >;

typedef struct _compressed_pair<unsigned long, std::__1::allocator<std::__1::__hash_node<std::__1::__hash_value_type<UICollectionViewCell *, FBHScrollMountInfo>, void *> *> > {
	unsigned long long __first_;
} compressed_pair<unsigned long, std::__1::allocator<std::__1::__hash_node<std::__1::__hash_value_type<UICollectionViewCell *, FBHScrollMountInfo>, void *> *> >;

typedef struct _compressed_pair<unsigned long, std::__1::__unordered_map_hasher<UICollectionViewCell *, std::__1::__hash_value_type<UICollectionViewCell *, FBHScrollMountInfo>, FB::HashFunctor<NSObject *>, true> > {
	unsigned long long __first_;
} compressed_pair<unsigned long, std::__1::__unordered_map_hasher<UICollectionViewCell *, std::__1::__hash_value_type<UICollectionViewCell *, FBHScrollMountInfo>, FB::HashFunctor<NSObject *>, true> >;

typedef struct _compressed_pair<float, std::__1::__unordered_map_equal<UICollectionViewCell *, std::__1::__hash_value_type<UICollectionViewCell *, FBHScrollMountInfo>, std::__1::equal_to<UICollectionViewCell *>, true> > {
	float __first_;
} compressed_pair<float, std::__1::__unordered_map_equal<UICollectionViewCell *, std::__1::__hash_value_type<UICollectionViewCell *, FBHScrollMountInfo>, std::__1::equal_to<UICollectionViewCell *>, true> >;

typedef struct _hash_node_base<std::__1::__hash_node<std::__1::__hash_value_type<UICollectionViewCell *, FBHScrollMountInfo>, void *> *> {
	__hash_node<std::__1::__hash_value_type<UICollectionViewCell *, FBHScrollMountInfo>, void *> __next_;
} hash_node_base<std::__1::__hash_node<std::__1::__hash_value_type<UICollectionViewCell *, FBHScrollMountInfo>, void *> *>;

typedef struct _compressed_pair<std::__1::__hash_node_base<std::__1::__hash_node<std::__1::__hash_value_type<UICollectionViewCell *, FBHScrollMountInfo>, void *> *>, std::__1::allocator<std::__1::__hash_node<std::__1::__hash_value_type<UICollectionViewCell *, FBHScrollMountInfo>, void *> > > {
	hash_node_base<std::__1::__hash_node<std::__1::__hash_value_type<UICollectionViewCell *, FBHScrollMountInfo>, void *> *> __first_;
} compressed_pair<std::__1::__hash_node_base<std::__1::__hash_node<std::__1::__hash_value_type<UICollectionViewCell *, FBHScrollMountInfo>, void *> *>, std::__1::allocator<std::__1::__hash_node<std::__1::__hash_value_type<UICollectionViewCell *, FBHScrollMountInfo>, void *> > >;

typedef struct _bucket_list_deallocator<std::__1::allocator<std::__1::__hash_node<std::__1::__hash_value_type<UICollectionViewCell *, FBHScrollMountInfo>, void *> *> > {
	compressed_pair<unsigned long, std::__1::allocator<std::__1::__hash_node<std::__1::__hash_value_type<UICollectionViewCell *, FBHScrollMountInfo>, void *> *> > __data_;
} bucket_list_deallocator<std::__1::allocator<std::__1::__hash_node<std::__1::__hash_value_type<UICollectionViewCell *, FBHScrollMountInfo>, void *> *> >;

typedef struct _compressed_pair<std::__1::__hash_node<std::__1::__hash_value_type<UICollectionViewCell *, FBHScrollMountInfo>, void *> **, std::__1::__bucket_list_deallocator<std::__1::allocator<std::__1::__hash_node<std::__1::__hash_value_type<UICollectionViewCell *, FBHScrollMountInfo>, void *> *> > > {
	__hash_node<std::__1::__hash_value_type<UICollectionViewCell *, FBHScrollMountInfo>, void *> __first_;
	bucket_list_deallocator<std::__1::allocator<std::__1::__hash_node<std::__1::__hash_value_type<UICollectionViewCell *, FBHScrollMountInfo>, void *> *> > __second_;
} compressed_pair<std::__1::__hash_node<std::__1::__hash_value_type<UICollectionViewCell *, FBHScrollMountInfo>, void *> **, std::__1::__bucket_list_deallocator<std::__1::allocator<std::__1::__hash_node<std::__1::__hash_value_type<UICollectionViewCell *, FBHScrollMountInfo>, void *> *> > >;

typedef struct unique_ptr<std::__1::__hash_node<std::__1::__hash_value_type<UICollectionViewCell *, FBHScrollMountInfo>, void *> *[], std::__1::__bucket_list_deallocator<std::__1::allocator<std::__1::__hash_node<std::__1::__hash_value_type<UICollectionViewCell *, FBHScrollMountInfo>, void *> *> > > {
	compressed_pair<std::__1::__hash_node<std::__1::__hash_value_type<UICollectionViewCell *, FBHScrollMountInfo>, void *> **, std::__1::__bucket_list_deallocator<std::__1::allocator<std::__1::__hash_node<std::__1::__hash_value_type<UICollectionViewCell *, FBHScrollMountInfo>, void *> *> > > __ptr_;
} unique_ptr<std::__1::__hash_node<std::__1::__hash_value_type<UICollectionViewCell *, FBHScrollMountInfo>, void *> *[], std::__1::__bucket_list_deallocator<std::__1::allocator<std::__1::__hash_node<std::__1::__hash_value_type<UICollectionViewCell *, FBHScrollMountInfo>, void *> *> > >;

typedef struct _hash_table<std::__1::__hash_value_type<UICollectionViewCell *, FBHScrollMountInfo>, std::__1::__unordered_map_hasher<UICollectionViewCell *, std::__1::__hash_value_type<UICollectionViewCell *, FBHScrollMountInfo>, FB::HashFunctor<NSObject *>, true>, std::__1::__unordered_map_equal<UICollectionViewCell *, std::__1::__hash_value_type<UICollectionViewCell *, FBHScrollMountInfo>, std::__1::equal_to<UICollectionViewCell *>, true>, std::__1::allocator<std::__1::__hash_value_type<UICollectionViewCell *, FBHScrollMountInfo> > > {
	unique_ptr<std::__1::__hash_node<std::__1::__hash_value_type<UICollectionViewCell *, FBHScrollMountInfo>, void *> *[], std::__1::__bucket_list_deallocator<std::__1::allocator<std::__1::__hash_node<std::__1::__hash_value_type<UICollectionViewCell *, FBHScrollMountInfo>, void *> *> > > __bucket_list_;
	compressed_pair<std::__1::__hash_node_base<std::__1::__hash_node<std::__1::__hash_value_type<UICollectionViewCell *, FBHScrollMountInfo>, void *> *>, std::__1::allocator<std::__1::__hash_node<std::__1::__hash_value_type<UICollectionViewCell *, FBHScrollMountInfo>, void *> > > __p1_;
	compressed_pair<unsigned long, std::__1::__unordered_map_hasher<UICollectionViewCell *, std::__1::__hash_value_type<UICollectionViewCell *, FBHScrollMountInfo>, FB::HashFunctor<NSObject *>, true> > __p2_;
	compressed_pair<float, std::__1::__unordered_map_equal<UICollectionViewCell *, std::__1::__hash_value_type<UICollectionViewCell *, FBHScrollMountInfo>, std::__1::equal_to<UICollectionViewCell *>, true> > __p3_;
} hash_table<std::__1::__hash_value_type<UICollectionViewCell *, FBHScrollMountInfo>, std::__1::__unordered_map_hasher<UICollectionViewCell *, std::__1::__hash_value_type<UICollectionViewCell *, FBHScrollMountInfo>, FB::HashFunctor<NSObject *>, true>, std::__1::__unordered_map_equal<UICollectionViewCell *, std::__1::__hash_value_type<UICollectionViewCell *, FBHScrollMountInfo>, std::__1::equal_to<UICollectionViewCell *>, true>, std::__1::allocator<std::__1::__hash_value_type<UICollectionViewCell *, FBHScrollMountInfo> > >;

typedef struct unordered_map<UICollectionViewCell *, FBHScrollMountInfo, FB::HashFunctor<NSObject *>, std::__1::equal_to<UICollectionViewCell *>, std::__1::allocator<std::__1::pair<UICollectionViewCell *const, FBHScrollMountInfo> > > {
	hash_table<std::__1::__hash_value_type<UICollectionViewCell *, FBHScrollMountInfo>, std::__1::__unordered_map_hasher<UICollectionViewCell *, std::__1::__hash_value_type<UICollectionViewCell *, FBHScrollMountInfo>, FB::HashFunctor<NSObject *>, true>, std::__1::__unordered_map_equal<UICollectionViewCell *, std::__1::__hash_value_type<UICollectionViewCell *, FBHScrollMountInfo>, std::__1::equal_to<UICollectionViewCell *>, true>, std::__1::allocator<std::__1::__hash_value_type<UICollectionViewCell *, FBHScrollMountInfo> > > __table_;
} unordered_map<UICollectionViewCell *, FBHScrollMountInfo, FB::HashFunctor<NSObject *>, std::__1::equal_to<UICollectionViewCell *>, std::__1::allocator<std::__1::pair<UICollectionViewCell *const, FBHScrollMountInfo> > >;

typedef struct _compressed_pair<unsigned long, std::__1::allocator<std::__1::__hash_node<std::__1::__hash_value_type<id, UICollectionViewCell *>, void *> *> > {
	unsigned long long __first_;
} compressed_pair<unsigned long, std::__1::allocator<std::__1::__hash_node<std::__1::__hash_value_type<id, UICollectionViewCell *>, void *> *> >;

typedef struct _compressed_pair<unsigned long, std::__1::__unordered_map_hasher<id, std::__1::__hash_value_type<id, UICollectionViewCell *>, FB::HashFunctor<NSObject *>, true> > {
	unsigned long long __first_;
} compressed_pair<unsigned long, std::__1::__unordered_map_hasher<id, std::__1::__hash_value_type<id, UICollectionViewCell *>, FB::HashFunctor<NSObject *>, true> >;

typedef struct _compressed_pair<float, std::__1::__unordered_map_equal<id, std::__1::__hash_value_type<id, UICollectionViewCell *>, std::__1::equal_to<id>, true> > {
	float __first_;
} compressed_pair<float, std::__1::__unordered_map_equal<id, std::__1::__hash_value_type<id, UICollectionViewCell *>, std::__1::equal_to<id>, true> >;

typedef struct _hash_node_base<std::__1::__hash_node<std::__1::__hash_value_type<id, UICollectionViewCell *>, void *> *> {
	__hash_node<std::__1::__hash_value_type<id, UICollectionViewCell *>, void *> __next_;
} hash_node_base<std::__1::__hash_node<std::__1::__hash_value_type<id, UICollectionViewCell *>, void *> *>;

typedef struct _compressed_pair<std::__1::__hash_node_base<std::__1::__hash_node<std::__1::__hash_value_type<id, UICollectionViewCell *>, void *> *>, std::__1::allocator<std::__1::__hash_node<std::__1::__hash_value_type<id, UICollectionViewCell *>, void *> > > {
	hash_node_base<std::__1::__hash_node<std::__1::__hash_value_type<id, UICollectionViewCell *>, void *> *> __first_;
} compressed_pair<std::__1::__hash_node_base<std::__1::__hash_node<std::__1::__hash_value_type<id, UICollectionViewCell *>, void *> *>, std::__1::allocator<std::__1::__hash_node<std::__1::__hash_value_type<id, UICollectionViewCell *>, void *> > >;

typedef struct _bucket_list_deallocator<std::__1::allocator<std::__1::__hash_node<std::__1::__hash_value_type<id, UICollectionViewCell *>, void *> *> > {
	compressed_pair<unsigned long, std::__1::allocator<std::__1::__hash_node<std::__1::__hash_value_type<id, UICollectionViewCell *>, void *> *> > __data_;
} bucket_list_deallocator<std::__1::allocator<std::__1::__hash_node<std::__1::__hash_value_type<id, UICollectionViewCell *>, void *> *> >;

typedef struct _compressed_pair<std::__1::__hash_node<std::__1::__hash_value_type<id, UICollectionViewCell *>, void *> **, std::__1::__bucket_list_deallocator<std::__1::allocator<std::__1::__hash_node<std::__1::__hash_value_type<id, UICollectionViewCell *>, void *> *> > > {
	__hash_node<std::__1::__hash_value_type<id, UICollectionViewCell *>, void *> __first_;
	bucket_list_deallocator<std::__1::allocator<std::__1::__hash_node<std::__1::__hash_value_type<id, UICollectionViewCell *>, void *> *> > __second_;
} compressed_pair<std::__1::__hash_node<std::__1::__hash_value_type<id, UICollectionViewCell *>, void *> **, std::__1::__bucket_list_deallocator<std::__1::allocator<std::__1::__hash_node<std::__1::__hash_value_type<id, UICollectionViewCell *>, void *> *> > >;

typedef struct unique_ptr<std::__1::__hash_node<std::__1::__hash_value_type<id, UICollectionViewCell *>, void *> *[], std::__1::__bucket_list_deallocator<std::__1::allocator<std::__1::__hash_node<std::__1::__hash_value_type<id, UICollectionViewCell *>, void *> *> > > {
	compressed_pair<std::__1::__hash_node<std::__1::__hash_value_type<id, UICollectionViewCell *>, void *> **, std::__1::__bucket_list_deallocator<std::__1::allocator<std::__1::__hash_node<std::__1::__hash_value_type<id, UICollectionViewCell *>, void *> *> > > __ptr_;
} unique_ptr<std::__1::__hash_node<std::__1::__hash_value_type<id, UICollectionViewCell *>, void *> *[], std::__1::__bucket_list_deallocator<std::__1::allocator<std::__1::__hash_node<std::__1::__hash_value_type<id, UICollectionViewCell *>, void *> *> > >;

typedef struct _hash_table<std::__1::__hash_value_type<id, UICollectionViewCell *>, std::__1::__unordered_map_hasher<id, std::__1::__hash_value_type<id, UICollectionViewCell *>, FB::HashFunctor<NSObject *>, true>, std::__1::__unordered_map_equal<id, std::__1::__hash_value_type<id, UICollectionViewCell *>, std::__1::equal_to<id>, true>, std::__1::allocator<std::__1::__hash_value_type<id, UICollectionViewCell *> > > {
	unique_ptr<std::__1::__hash_node<std::__1::__hash_value_type<id, UICollectionViewCell *>, void *> *[], std::__1::__bucket_list_deallocator<std::__1::allocator<std::__1::__hash_node<std::__1::__hash_value_type<id, UICollectionViewCell *>, void *> *> > > __bucket_list_;
	compressed_pair<std::__1::__hash_node_base<std::__1::__hash_node<std::__1::__hash_value_type<id, UICollectionViewCell *>, void *> *>, std::__1::allocator<std::__1::__hash_node<std::__1::__hash_value_type<id, UICollectionViewCell *>, void *> > > __p1_;
	compressed_pair<unsigned long, std::__1::__unordered_map_hasher<id, std::__1::__hash_value_type<id, UICollectionViewCell *>, FB::HashFunctor<NSObject *>, true> > __p2_;
	compressed_pair<float, std::__1::__unordered_map_equal<id, std::__1::__hash_value_type<id, UICollectionViewCell *>, std::__1::equal_to<id>, true> > __p3_;
} hash_table<std::__1::__hash_value_type<id, UICollectionViewCell *>, std::__1::__unordered_map_hasher<id, std::__1::__hash_value_type<id, UICollectionViewCell *>, FB::HashFunctor<NSObject *>, true>, std::__1::__unordered_map_equal<id, std::__1::__hash_value_type<id, UICollectionViewCell *>, std::__1::equal_to<id>, true>, std::__1::allocator<std::__1::__hash_value_type<id, UICollectionViewCell *> > >;

typedef struct unordered_map<id, UICollectionViewCell *, FB::HashFunctor<NSObject *>, std::__1::equal_to<id>, std::__1::allocator<std::__1::pair<const id, UICollectionViewCell *> > > {
	hash_table<std::__1::__hash_value_type<id, UICollectionViewCell *>, std::__1::__unordered_map_hasher<id, std::__1::__hash_value_type<id, UICollectionViewCell *>, FB::HashFunctor<NSObject *>, true>, std::__1::__unordered_map_equal<id, std::__1::__hash_value_type<id, UICollectionViewCell *>, std::__1::equal_to<id>, true>, std::__1::allocator<std::__1::__hash_value_type<id, UICollectionViewCell *> > > __table_;
} unordered_map<id, UICollectionViewCell *, FB::HashFunctor<NSObject *>, std::__1::equal_to<id>, std::__1::allocator<std::__1::pair<const id, UICollectionViewCell *> > >;

typedef struct FBImpressionContentOffsetTrigger {
	double minimumContentOffset;
	double maximumContentOffset;
} FBImpressionContentOffsetTrigger;

typedef struct _compressed_pair<FBCollageLayoutComponentChild *, std::__1::allocator<FBCollageLayoutComponentChild> > {
	FBCollageLayoutComponentChild __first_;
} compressed_pair<FBCollageLayoutComponentChild *, std::__1::allocator<FBCollageLayoutComponentChild> >;

typedef struct vector<FBCollageLayoutComponentChild, std::__1::allocator<FBCollageLayoutComponentChild> > {
	FBCollageLayoutComponentChild __begin_;
	FBCollageLayoutComponentChild __end_;
	compressed_pair<FBCollageLayoutComponentChild *, std::__1::allocator<FBCollageLayoutComponentChild> > __end_cap_;
} vector<FBCollageLayoutComponentChild, std::__1::allocator<FBCollageLayoutComponentChild> >;

typedef struct _compressed_pair<FBHorizontalLineItem *, std::__1::allocator<FBHorizontalLineItem> > {
	FBHorizontalLineItem __first_;
} compressed_pair<FBHorizontalLineItem *, std::__1::allocator<FBHorizontalLineItem> >;

typedef struct vector<FBHorizontalLineItem, std::__1::allocator<FBHorizontalLineItem> > {
	FBHorizontalLineItem __begin_;
	FBHorizontalLineItem __end_;
	compressed_pair<FBHorizontalLineItem *, std::__1::allocator<FBHorizontalLineItem> > __end_cap_;
} vector<FBHorizontalLineItem, std::__1::allocator<FBHorizontalLineItem> >;

typedef struct {
	double field1;
	double field2;
	CGPoint field3;
} SCD_Struct_FB416;

typedef struct CGAffineTransform {
	double a;
	double b;
	double c;
	double d;
	double tx;
	double ty;
} CGAffineTransform;

typedef struct FBMediaViewControllerTransitionDismissingContext {
	unsigned long long dismissalType;
	FBDisplayableMediaViewProviderContext* mediaViewProviderContext;
	id mediaViewOrLayer;
	unsigned long long slideAwayType;
	id transitionContext;
	 <UIViewControllerContextTransitioning>;
	CGPoint velocity;
} FBMediaViewControllerTransitionDismissingContext;

typedef struct {
	SCD_Struct_FB242 start;
	SCD_Struct_FB242 duration;
} SCD_Struct_FB419;

typedef struct {
	BOOL useCustomTranscoding;
	SCD_Struct_FB419 timeRange;
	int maxNumberOfVideoSegments;
	int maxVideoSegmentDurationInSeconds;
	FBVideoExportConfig* videoExportConfig;
} SCD_Struct_FB420;

typedef struct {
	BOOL field1;
	SCD_Struct_FB419 field2;
	int field3;
	int field4;
	id field5;
} SCD_Struct_FB421;

typedef struct FBVideoAssetExportParams {
	AVAssetReader* assetReader;
	AVAssetTrack* audioTrack;
	AVAssetTrack* videoTrack;
	AVAssetReaderOutput* audioOutput;
	AVAssetReaderOutput* videoOutput;
	AVAssetWriterInput* audioInput;
	AVAssetWriterInput* videoInput;
	AVAssetWriter* assetWriter;
	NSURL* outputURL;
} FBVideoAssetExportParams;

typedef struct _compressed_pair<unsigned long, std::__1::__map_value_compare<id<FBCollectionViewSectionDataSource>, std::__1::__value_type<id<FBCollectionViewSectionDataSource>, FBCollectionViewDelegateRespondsToCache>, std::__1::less<id<FBCollectionViewSectionDataSource> >, true> > {
	unsigned long long __first_;
} compressed_pair<unsigned long, std::__1::__map_value_compare<id<FBCollectionViewSectionDataSource>, std::__1::__value_type<id<FBCollectionViewSectionDataSource>, FBCollectionViewDelegateRespondsToCache>, std::__1::less<id<FBCollectionViewSectionDataSource> >, true> >;

typedef struct _compressed_pair<std::__1::__tree_end_node<std::__1::__tree_node_base<void *> *>, std::__1::allocator<std::__1::__tree_node<std::__1::__value_type<id<FBCollectionViewSectionDataSource>, FBCollectionViewDelegateRespondsToCache>, void *> > > {
	tree_end_node<std::__1::__tree_node_base<void *> *> __first_;
} compressed_pair<std::__1::__tree_end_node<std::__1::__tree_node_base<void *> *>, std::__1::allocator<std::__1::__tree_node<std::__1::__value_type<id<FBCollectionViewSectionDataSource>, FBCollectionViewDelegateRespondsToCache>, void *> > >;

typedef struct _tree<std::__1::__value_type<id<FBCollectionViewSectionDataSource>, FBCollectionViewDelegateRespondsToCache>, std::__1::__map_value_compare<id<FBCollectionViewSectionDataSource>, std::__1::__value_type<id<FBCollectionViewSectionDataSource>, FBCollectionViewDelegateRespondsToCache>, std::__1::less<id<FBCollectionViewSectionDataSource> >, true>, std::__1::allocator<std::__1::__value_type<id<FBCollectionViewSectionDataSource>, FBCollectionViewDelegateRespondsToCache> > > {
	__tree_node<std::__1::__value_type<id<FBCollectionViewSectionDataSource>, FBCollectionViewDelegateRespondsToCache>, void *> __begin_node_;
	compressed_pair<std::__1::__tree_end_node<std::__1::__tree_node_base<void *> *>, std::__1::allocator<std::__1::__tree_node<std::__1::__value_type<id<FBCollectionViewSectionDataSource>, FBCollectionViewDelegateRespondsToCache>, void *> > > __pair1_;
	compressed_pair<unsigned long, std::__1::__map_value_compare<id<FBCollectionViewSectionDataSource>, std::__1::__value_type<id<FBCollectionViewSectionDataSource>, FBCollectionViewDelegateRespondsToCache>, std::__1::less<id<FBCollectionViewSectionDataSource> >, true> > __pair3_;
} tree<std::__1::__value_type<id<FBCollectionViewSectionDataSource>, FBCollectionViewDelegateRespondsToCache>, std::__1::__map_value_compare<id<FBCollectionViewSectionDataSource>, std::__1::__value_type<id<FBCollectionViewSectionDataSource>, FBCollectionViewDelegateRespondsToCache>, std::__1::less<id<FBCollectionViewSectionDataSource> >, true>, std::__1::allocator<std::__1::__value_type<id<FBCollectionViewSectionDataSource>, FBCollectionViewDelegateRespondsToCache> > >;

typedef struct map<id<FBCollectionViewSectionDataSource>, FBCollectionViewDelegateRespondsToCache, std::__1::less<id<FBCollectionViewSectionDataSource> >, std::__1::allocator<std::__1::pair<const id<FBCollectionViewSectionDataSource>, FBCollectionViewDelegateRespondsToCache> > > {
	tree<std::__1::__value_type<id<FBCollectionViewSectionDataSource>, FBCollectionViewDelegateRespondsToCache>, std::__1::__map_value_compare<id<FBCollectionViewSectionDataSource>, std::__1::__value_type<id<FBCollectionViewSectionDataSource>, FBCollectionViewDelegateRespondsToCache>, std::__1::less<id<FBCollectionViewSectionDataSource> >, true>, std::__1::allocator<std::__1::__value_type<id<FBCollectionViewSectionDataSource>, FBCollectionViewDelegateRespondsToCache> > > __tree_;
} map<id<FBCollectionViewSectionDataSource>, FBCollectionViewDelegateRespondsToCache, std::__1::less<id<FBCollectionViewSectionDataSource> >, std::__1::allocator<std::__1::pair<const id<FBCollectionViewSectionDataSource>, FBCollectionViewDelegateRespondsToCache> > >;

typedef struct _compressed_pair<unsigned long, std::__1::__map_value_compare<id<FBTableViewSectionDataSource>, std::__1::__value_type<id<FBTableViewSectionDataSource>, FBTableViewDelegateRespondsToCache>, std::__1::less<id<FBTableViewSectionDataSource> >, true> > {
	unsigned long long __first_;
} compressed_pair<unsigned long, std::__1::__map_value_compare<id<FBTableViewSectionDataSource>, std::__1::__value_type<id<FBTableViewSectionDataSource>, FBTableViewDelegateRespondsToCache>, std::__1::less<id<FBTableViewSectionDataSource> >, true> >;

typedef struct _compressed_pair<std::__1::__tree_end_node<std::__1::__tree_node_base<void *> *>, std::__1::allocator<std::__1::__tree_node<std::__1::__value_type<id<FBTableViewSectionDataSource>, FBTableViewDelegateRespondsToCache>, void *> > > {
	tree_end_node<std::__1::__tree_node_base<void *> *> __first_;
} compressed_pair<std::__1::__tree_end_node<std::__1::__tree_node_base<void *> *>, std::__1::allocator<std::__1::__tree_node<std::__1::__value_type<id<FBTableViewSectionDataSource>, FBTableViewDelegateRespondsToCache>, void *> > >;

typedef struct _tree<std::__1::__value_type<id<FBTableViewSectionDataSource>, FBTableViewDelegateRespondsToCache>, std::__1::__map_value_compare<id<FBTableViewSectionDataSource>, std::__1::__value_type<id<FBTableViewSectionDataSource>, FBTableViewDelegateRespondsToCache>, std::__1::less<id<FBTableViewSectionDataSource> >, true>, std::__1::allocator<std::__1::__value_type<id<FBTableViewSectionDataSource>, FBTableViewDelegateRespondsToCache> > > {
	__tree_node<std::__1::__value_type<id<FBTableViewSectionDataSource>, FBTableViewDelegateRespondsToCache>, void *> __begin_node_;
	compressed_pair<std::__1::__tree_end_node<std::__1::__tree_node_base<void *> *>, std::__1::allocator<std::__1::__tree_node<std::__1::__value_type<id<FBTableViewSectionDataSource>, FBTableViewDelegateRespondsToCache>, void *> > > __pair1_;
	compressed_pair<unsigned long, std::__1::__map_value_compare<id<FBTableViewSectionDataSource>, std::__1::__value_type<id<FBTableViewSectionDataSource>, FBTableViewDelegateRespondsToCache>, std::__1::less<id<FBTableViewSectionDataSource> >, true> > __pair3_;
} tree<std::__1::__value_type<id<FBTableViewSectionDataSource>, FBTableViewDelegateRespondsToCache>, std::__1::__map_value_compare<id<FBTableViewSectionDataSource>, std::__1::__value_type<id<FBTableViewSectionDataSource>, FBTableViewDelegateRespondsToCache>, std::__1::less<id<FBTableViewSectionDataSource> >, true>, std::__1::allocator<std::__1::__value_type<id<FBTableViewSectionDataSource>, FBTableViewDelegateRespondsToCache> > >;

typedef struct map<id<FBTableViewSectionDataSource>, FBTableViewDelegateRespondsToCache, std::__1::less<id<FBTableViewSectionDataSource> >, std::__1::allocator<std::__1::pair<const id<FBTableViewSectionDataSource>, FBTableViewDelegateRespondsToCache> > > {
	tree<std::__1::__value_type<id<FBTableViewSectionDataSource>, FBTableViewDelegateRespondsToCache>, std::__1::__map_value_compare<id<FBTableViewSectionDataSource>, std::__1::__value_type<id<FBTableViewSectionDataSource>, FBTableViewDelegateRespondsToCache>, std::__1::less<id<FBTableViewSectionDataSource> >, true>, std::__1::allocator<std::__1::__value_type<id<FBTableViewSectionDataSource>, FBTableViewDelegateRespondsToCache> > > __tree_;
} map<id<FBTableViewSectionDataSource>, FBTableViewDelegateRespondsToCache, std::__1::less<id<FBTableViewSectionDataSource> >, std::__1::allocator<std::__1::pair<const id<FBTableViewSectionDataSource>, FBTableViewDelegateRespondsToCache> > >;

typedef struct shared_ptr<facebook::image_processing::RGBA8Pixel> {
	RGBA8Pixel __ptr_;
	__shared_weak_count __cntrl_;
} shared_ptr<facebook::image_processing::RGBA8Pixel>;

typedef struct Image<facebook::image_processing::RGBA8Pixel> {
	shared_ptr<facebook::image_processing::RGBA8Pixel> data_;
	unsigned long long widthInPixels;
	unsigned long long heightInPixels;
	unsigned long long bytesPerPixel;
} Image<facebook::image_processing::RGBA8Pixel>;

typedef struct FilterConfig {
	float vibranceValue;
	float equalizationWeight;
	float minimumFaceBrightness;
	float minSlope;
	float maxSlope;
	float bilateralDetailScale;
	float denoising;
	float bilateralDefaultDetailScale;
	float bilateralMaxDetailScale;
	float bilateralLumSigma;
	float bilateralSpaceSigmaFactor;
	BOOL useBilateralGridApproximation;
	float noiseMaskScale;
	int noiseMaskRadius;
	float kneeDenoising;
	float maxDenoising;
} FilterConfig;

typedef struct _compressed_pair<facebook::image_processing::FilteredImage *, std::__1::default_delete<facebook::image_processing::FilteredImage> > {
	FilteredImage __first_;
} compressed_pair<facebook::image_processing::FilteredImage *, std::__1::default_delete<facebook::image_processing::FilteredImage> >;

typedef struct unique_ptr<facebook::image_processing::FilteredImage, std::__1::default_delete<facebook::image_processing::FilteredImage> > {
	compressed_pair<facebook::image_processing::FilteredImage *, std::__1::default_delete<facebook::image_processing::FilteredImage> > __ptr_;
} unique_ptr<facebook::image_processing::FilteredImage, std::__1::default_delete<facebook::image_processing::FilteredImage> >;

typedef struct _long {
	char* __data_;
	unsigned long long __size_;
	unsigned long long __cap_;
} long;

typedef struct {
	unsigned char __size_;
} SCD_Struct_FB437;

typedef struct _raw {
	unsigned long long __words[3];
} raw;

typedef struct _short {
	char __data_[23];
	SCD_Struct_FB437 ;
} short;

typedef struct _rep {
	/*function pointer*/void* ;
	long __l;
	short __s;
	const aw) __r;
} rep;

typedef struct _compressed_pair<std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char> >::__rep, std::__1::allocator<char> > {
	const ep __first_;
} compressed_pair<std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char> >::__rep, std::__1::allocator<char> >;

typedef struct basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char> > {
	compressed_pair<std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char> >::__rep, std::__1::allocator<char> > __r_;
} basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char> >;

typedef struct shared_ptr<facebook::image_processing::ImageMetadata> {
	ImageMetadata __ptr_;
	__shared_weak_count __cntrl_;
} shared_ptr<facebook::image_processing::ImageMetadata>;

typedef struct array<float, 256> {
	float __elems_[256];
} array<float, 256>;

typedef struct CGColorSpace* CGColorSpaceRef;

typedef struct _compressed_pair<unsigned long, std::__1::allocator<std::__1::__hash_node<std::__1::__hash_value_type<StoreObservationKey, StoreObservationRecord>, void *> *> > {
	unsigned long long __first_;
} compressed_pair<unsigned long, std::__1::allocator<std::__1::__hash_node<std::__1::__hash_value_type<StoreObservationKey, StoreObservationRecord>, void *> *> >;

typedef struct _compressed_pair<unsigned long, std::__1::__unordered_map_hasher<StoreObservationKey, std::__1::__hash_value_type<StoreObservationKey, StoreObservationRecord>, StoreObservationKeyHasher, true> > {
	unsigned long long __first_;
} compressed_pair<unsigned long, std::__1::__unordered_map_hasher<StoreObservationKey, std::__1::__hash_value_type<StoreObservationKey, StoreObservationRecord>, StoreObservationKeyHasher, true> >;

typedef struct _compressed_pair<float, std::__1::__unordered_map_equal<StoreObservationKey, std::__1::__hash_value_type<StoreObservationKey, StoreObservationRecord>, std::__1::equal_to<StoreObservationKey>, true> > {
	float __first_;
} compressed_pair<float, std::__1::__unordered_map_equal<StoreObservationKey, std::__1::__hash_value_type<StoreObservationKey, StoreObservationRecord>, std::__1::equal_to<StoreObservationKey>, true> >;

typedef struct _hash_node_base<std::__1::__hash_node<std::__1::__hash_value_type<StoreObservationKey, StoreObservationRecord>, void *> *> {
	__hash_node<std::__1::__hash_value_type<StoreObservationKey, StoreObservationRecord>, void *> __next_;
} hash_node_base<std::__1::__hash_node<std::__1::__hash_value_type<StoreObservationKey, StoreObservationRecord>, void *> *>;

typedef struct _compressed_pair<std::__1::__hash_node_base<std::__1::__hash_node<std::__1::__hash_value_type<StoreObservationKey, StoreObservationRecord>, void *> *>, std::__1::allocator<std::__1::__hash_node<std::__1::__hash_value_type<StoreObservationKey, StoreObservationRecord>, void *> > > {
	hash_node_base<std::__1::__hash_node<std::__1::__hash_value_type<StoreObservationKey, StoreObservationRecord>, void *> *> __first_;
} compressed_pair<std::__1::__hash_node_base<std::__1::__hash_node<std::__1::__hash_value_type<StoreObservationKey, StoreObservationRecord>, void *> *>, std::__1::allocator<std::__1::__hash_node<std::__1::__hash_value_type<StoreObservationKey, StoreObservationRecord>, void *> > >;

typedef struct _bucket_list_deallocator<std::__1::allocator<std::__1::__hash_node<std::__1::__hash_value_type<StoreObservationKey, StoreObservationRecord>, void *> *> > {
	compressed_pair<unsigned long, std::__1::allocator<std::__1::__hash_node<std::__1::__hash_value_type<StoreObservationKey, StoreObservationRecord>, void *> *> > __data_;
} bucket_list_deallocator<std::__1::allocator<std::__1::__hash_node<std::__1::__hash_value_type<StoreObservationKey, StoreObservationRecord>, void *> *> >;

typedef struct _compressed_pair<std::__1::__hash_node<std::__1::__hash_value_type<StoreObservationKey, StoreObservationRecord>, void *> **, std::__1::__bucket_list_deallocator<std::__1::allocator<std::__1::__hash_node<std::__1::__hash_value_type<StoreObservationKey, StoreObservationRecord>, void *> *> > > {
	__hash_node<std::__1::__hash_value_type<StoreObservationKey, StoreObservationRecord>, void *> __first_;
	bucket_list_deallocator<std::__1::allocator<std::__1::__hash_node<std::__1::__hash_value_type<StoreObservationKey, StoreObservationRecord>, void *> *> > __second_;
} compressed_pair<std::__1::__hash_node<std::__1::__hash_value_type<StoreObservationKey, StoreObservationRecord>, void *> **, std::__1::__bucket_list_deallocator<std::__1::allocator<std::__1::__hash_node<std::__1::__hash_value_type<StoreObservationKey, StoreObservationRecord>, void *> *> > >;

typedef struct unique_ptr<std::__1::__hash_node<std::__1::__hash_value_type<StoreObservationKey, StoreObservationRecord>, void *> *[], std::__1::__bucket_list_deallocator<std::__1::allocator<std::__1::__hash_node<std::__1::__hash_value_type<StoreObservationKey, StoreObservationRecord>, void *> *> > > {
	compressed_pair<std::__1::__hash_node<std::__1::__hash_value_type<StoreObservationKey, StoreObservationRecord>, void *> **, std::__1::__bucket_list_deallocator<std::__1::allocator<std::__1::__hash_node<std::__1::__hash_value_type<StoreObservationKey, StoreObservationRecord>, void *> *> > > __ptr_;
} unique_ptr<std::__1::__hash_node<std::__1::__hash_value_type<StoreObservationKey, StoreObservationRecord>, void *> *[], std::__1::__bucket_list_deallocator<std::__1::allocator<std::__1::__hash_node<std::__1::__hash_value_type<StoreObservationKey, StoreObservationRecord>, void *> *> > >;

typedef struct _hash_table<std::__1::__hash_value_type<StoreObservationKey, StoreObservationRecord>, std::__1::__unordered_map_hasher<StoreObservationKey, std::__1::__hash_value_type<StoreObservationKey, StoreObservationRecord>, StoreObservationKeyHasher, true>, std::__1::__unordered_map_equal<StoreObservationKey, std::__1::__hash_value_type<StoreObservationKey, StoreObservationRecord>, std::__1::equal_to<StoreObservationKey>, true>, std::__1::allocator<std::__1::__hash_value_type<StoreObservationKey, StoreObservationRecord> > > {
	unique_ptr<std::__1::__hash_node<std::__1::__hash_value_type<StoreObservationKey, StoreObservationRecord>, void *> *[], std::__1::__bucket_list_deallocator<std::__1::allocator<std::__1::__hash_node<std::__1::__hash_value_type<StoreObservationKey, StoreObservationRecord>, void *> *> > > __bucket_list_;
	compressed_pair<std::__1::__hash_node_base<std::__1::__hash_node<std::__1::__hash_value_type<StoreObservationKey, StoreObservationRecord>, void *> *>, std::__1::allocator<std::__1::__hash_node<std::__1::__hash_value_type<StoreObservationKey, StoreObservationRecord>, void *> > > __p1_;
	compressed_pair<unsigned long, std::__1::__unordered_map_hasher<StoreObservationKey, std::__1::__hash_value_type<StoreObservationKey, StoreObservationRecord>, StoreObservationKeyHasher, true> > __p2_;
	compressed_pair<float, std::__1::__unordered_map_equal<StoreObservationKey, std::__1::__hash_value_type<StoreObservationKey, StoreObservationRecord>, std::__1::equal_to<StoreObservationKey>, true> > __p3_;
} hash_table<std::__1::__hash_value_type<StoreObservationKey, StoreObservationRecord>, std::__1::__unordered_map_hasher<StoreObservationKey, std::__1::__hash_value_type<StoreObservationKey, StoreObservationRecord>, StoreObservationKeyHasher, true>, std::__1::__unordered_map_equal<StoreObservationKey, std::__1::__hash_value_type<StoreObservationKey, StoreObservationRecord>, std::__1::equal_to<StoreObservationKey>, true>, std::__1::allocator<std::__1::__hash_value_type<StoreObservationKey, StoreObservationRecord> > >;

typedef struct unordered_map<StoreObservationKey, StoreObservationRecord, StoreObservationKeyHasher, std::__1::equal_to<StoreObservationKey>, std::__1::allocator<std::__1::pair<const StoreObservationKey, StoreObservationRecord> > > {
	hash_table<std::__1::__hash_value_type<StoreObservationKey, StoreObservationRecord>, std::__1::__unordered_map_hasher<StoreObservationKey, std::__1::__hash_value_type<StoreObservationKey, StoreObservationRecord>, StoreObservationKeyHasher, true>, std::__1::__unordered_map_equal<StoreObservationKey, std::__1::__hash_value_type<StoreObservationKey, StoreObservationRecord>, std::__1::equal_to<StoreObservationKey>, true>, std::__1::allocator<std::__1::__hash_value_type<StoreObservationKey, StoreObservationRecord> > > __table_;
} unordered_map<StoreObservationKey, StoreObservationRecord, StoreObservationKeyHasher, std::__1::equal_to<StoreObservationKey>, std::__1::allocator<std::__1::pair<const StoreObservationKey, StoreObservationRecord> > >;

typedef struct {
	BOOL field1;
	float field2;
} SCD_Struct_FB456;

typedef struct {
	char field1;
	char field2;
} SCD_Struct_FB457;

typedef struct __CFString* CFStringRef;

typedef struct _compressed_pair<SubPageInfo *, std::__1::allocator<SubPageInfo> > {
	SubPageInfo __first_;
} compressed_pair<SubPageInfo *, std::__1::allocator<SubPageInfo> >;

typedef struct vector<SubPageInfo, std::__1::allocator<SubPageInfo> > {
	SubPageInfo __begin_;
	SubPageInfo __end_;
	compressed_pair<SubPageInfo *, std::__1::allocator<SubPageInfo> > __end_cap_;
} vector<SubPageInfo, std::__1::allocator<SubPageInfo> >;

typedef struct _compressed_pair<unsigned long, std::__1::__map_value_compare<FBMemModelObject *, std::__1::__value_type<FBMemModelObject *, FBMemModelObject *>, std::__1::less<FBMemModelObject *>, true> > {
	unsigned long long __first_;
} compressed_pair<unsigned long, std::__1::__map_value_compare<FBMemModelObject *, std::__1::__value_type<FBMemModelObject *, FBMemModelObject *>, std::__1::less<FBMemModelObject *>, true> >;

typedef struct _compressed_pair<std::__1::__tree_end_node<std::__1::__tree_node_base<void *> *>, std::__1::allocator<std::__1::__tree_node<std::__1::__value_type<FBMemModelObject *, FBMemModelObject *>, void *> > > {
	tree_end_node<std::__1::__tree_node_base<void *> *> __first_;
} compressed_pair<std::__1::__tree_end_node<std::__1::__tree_node_base<void *> *>, std::__1::allocator<std::__1::__tree_node<std::__1::__value_type<FBMemModelObject *, FBMemModelObject *>, void *> > >;

typedef struct _tree<std::__1::__value_type<FBMemModelObject *, FBMemModelObject *>, std::__1::__map_value_compare<FBMemModelObject *, std::__1::__value_type<FBMemModelObject *, FBMemModelObject *>, std::__1::less<FBMemModelObject *>, true>, std::__1::allocator<std::__1::__value_type<FBMemModelObject *, FBMemModelObject *> > > {
	__tree_node<std::__1::__value_type<FBMemModelObject *, FBMemModelObject *>, void *> __begin_node_;
	compressed_pair<std::__1::__tree_end_node<std::__1::__tree_node_base<void *> *>, std::__1::allocator<std::__1::__tree_node<std::__1::__value_type<FBMemModelObject *, FBMemModelObject *>, void *> > > __pair1_;
	compressed_pair<unsigned long, std::__1::__map_value_compare<FBMemModelObject *, std::__1::__value_type<FBMemModelObject *, FBMemModelObject *>, std::__1::less<FBMemModelObject *>, true> > __pair3_;
} tree<std::__1::__value_type<FBMemModelObject *, FBMemModelObject *>, std::__1::__map_value_compare<FBMemModelObject *, std::__1::__value_type<FBMemModelObject *, FBMemModelObject *>, std::__1::less<FBMemModelObject *>, true>, std::__1::allocator<std::__1::__value_type<FBMemModelObject *, FBMemModelObject *> > >;

typedef struct map<FBMemModelObject *, FBMemModelObject *, std::__1::less<FBMemModelObject *>, std::__1::allocator<std::__1::pair<FBMemModelObject *const, FBMemModelObject *> > > {
	tree<std::__1::__value_type<FBMemModelObject *, FBMemModelObject *>, std::__1::__map_value_compare<FBMemModelObject *, std::__1::__value_type<FBMemModelObject *, FBMemModelObject *>, std::__1::less<FBMemModelObject *>, true>, std::__1::allocator<std::__1::__value_type<FBMemModelObject *, FBMemModelObject *> > > __tree_;
} map<FBMemModelObject *, FBMemModelObject *, std::__1::less<FBMemModelObject *>, std::__1::allocator<std::__1::pair<FBMemModelObject *const, FBMemModelObject *> > >;

typedef struct _compressed_pair<unsigned long, std::__1::__map_value_compare<FBConsistentLookasideCacheObservationHandle *, std::__1::__value_type<FBConsistentLookasideCacheObservationHandle *, FBMemModelObject *>, std::__1::less<FBConsistentLookasideCacheObservationHandle *>, true> > {
	unsigned long long __first_;
} compressed_pair<unsigned long, std::__1::__map_value_compare<FBConsistentLookasideCacheObservationHandle *, std::__1::__value_type<FBConsistentLookasideCacheObservationHandle *, FBMemModelObject *>, std::__1::less<FBConsistentLookasideCacheObservationHandle *>, true> >;

typedef struct _compressed_pair<std::__1::__tree_end_node<std::__1::__tree_node_base<void *> *>, std::__1::allocator<std::__1::__tree_node<std::__1::__value_type<FBConsistentLookasideCacheObservationHandle *, FBMemModelObject *>, void *> > > {
	tree_end_node<std::__1::__tree_node_base<void *> *> __first_;
} compressed_pair<std::__1::__tree_end_node<std::__1::__tree_node_base<void *> *>, std::__1::allocator<std::__1::__tree_node<std::__1::__value_type<FBConsistentLookasideCacheObservationHandle *, FBMemModelObject *>, void *> > >;

typedef struct _tree<std::__1::__value_type<FBConsistentLookasideCacheObservationHandle *, FBMemModelObject *>, std::__1::__map_value_compare<FBConsistentLookasideCacheObservationHandle *, std::__1::__value_type<FBConsistentLookasideCacheObservationHandle *, FBMemModelObject *>, std::__1::less<FBConsistentLookasideCacheObservationHandle *>, true>, std::__1::allocator<std::__1::__value_type<FBConsistentLookasideCacheObservationHandle *, FBMemModelObject *> > > {
	__tree_node<std::__1::__value_type<FBConsistentLookasideCacheObservationHandle *, FBMemModelObject *>, void *> __begin_node_;
	compressed_pair<std::__1::__tree_end_node<std::__1::__tree_node_base<void *> *>, std::__1::allocator<std::__1::__tree_node<std::__1::__value_type<FBConsistentLookasideCacheObservationHandle *, FBMemModelObject *>, void *> > > __pair1_;
	compressed_pair<unsigned long, std::__1::__map_value_compare<FBConsistentLookasideCacheObservationHandle *, std::__1::__value_type<FBConsistentLookasideCacheObservationHandle *, FBMemModelObject *>, std::__1::less<FBConsistentLookasideCacheObservationHandle *>, true> > __pair3_;
} tree<std::__1::__value_type<FBConsistentLookasideCacheObservationHandle *, FBMemModelObject *>, std::__1::__map_value_compare<FBConsistentLookasideCacheObservationHandle *, std::__1::__value_type<FBConsistentLookasideCacheObservationHandle *, FBMemModelObject *>, std::__1::less<FBConsistentLookasideCacheObservationHandle *>, true>, std::__1::allocator<std::__1::__value_type<FBConsistentLookasideCacheObservationHandle *, FBMemModelObject *> > >;

typedef struct map<FBConsistentLookasideCacheObservationHandle *, FBMemModelObject *, std::__1::less<FBConsistentLookasideCacheObservationHandle *>, std::__1::allocator<std::__1::pair<FBConsistentLookasideCacheObservationHandle *const, FBMemModelObject *> > > {
	tree<std::__1::__value_type<FBConsistentLookasideCacheObservationHandle *, FBMemModelObject *>, std::__1::__map_value_compare<FBConsistentLookasideCacheObservationHandle *, std::__1::__value_type<FBConsistentLookasideCacheObservationHandle *, FBMemModelObject *>, std::__1::less<FBConsistentLookasideCacheObservationHandle *>, true>, std::__1::allocator<std::__1::__value_type<FBConsistentLookasideCacheObservationHandle *, FBMemModelObject *> > > __tree_;
} map<FBConsistentLookasideCacheObservationHandle *, FBMemModelObject *, std::__1::less<FBConsistentLookasideCacheObservationHandle *>, std::__1::allocator<std::__1::pair<FBConsistentLookasideCacheObservationHandle *const, FBMemModelObject *> > >;

typedef struct {
	unsigned long long initial;
	unsigned long long headWithAutomaticRefresh;
	unsigned long long headWithManualRefresh;
	unsigned long long headWithUndefinedRefresh;
	unsigned long long tail;
	unsigned long long neck;
	unsigned long long invalid;
} SCD_Struct_FB469;

typedef struct {
	long long version;
	void info;
	/*function pointer*/void* retain;
	/*function pointer*/void* release;
	/*function pointer*/void* copyDescription;
} SCD_Struct_GC470;

typedef struct __CFReadStream* CFReadStreamRef;

typedef struct __CFWriteStream* CFWriteStreamRef;

typedef struct SSLContext* SSLContextRef;

typedef struct __CFHTTPMessage* CFHTTPMessageRef;

typedef struct {
	double field1;
	unsigned long long field2;
} SCD_Struct_FB475;

typedef struct _compressed_pair<unsigned long, std::__1::allocator<std::__1::__hash_node<std::__1::__hash_value_type<long long, FBClientProxyVideoPlayStatsMetaData>, void *> *> > {
	unsigned long long __first_;
} compressed_pair<unsigned long, std::__1::allocator<std::__1::__hash_node<std::__1::__hash_value_type<long long, FBClientProxyVideoPlayStatsMetaData>, void *> *> >;

typedef struct _compressed_pair<unsigned long, std::__1::__unordered_map_hasher<long long, std::__1::__hash_value_type<long long, FBClientProxyVideoPlayStatsMetaData>, std::__1::hash<long long>, true> > {
	unsigned long long __first_;
} compressed_pair<unsigned long, std::__1::__unordered_map_hasher<long long, std::__1::__hash_value_type<long long, FBClientProxyVideoPlayStatsMetaData>, std::__1::hash<long long>, true> >;

typedef struct _compressed_pair<float, std::__1::__unordered_map_equal<long long, std::__1::__hash_value_type<long long, FBClientProxyVideoPlayStatsMetaData>, std::__1::equal_to<long long>, true> > {
	float __first_;
} compressed_pair<float, std::__1::__unordered_map_equal<long long, std::__1::__hash_value_type<long long, FBClientProxyVideoPlayStatsMetaData>, std::__1::equal_to<long long>, true> >;

typedef struct _hash_node_base<std::__1::__hash_node<std::__1::__hash_value_type<long long, FBClientProxyVideoPlayStatsMetaData>, void *> *> {
	__hash_node<std::__1::__hash_value_type<long long, FBClientProxyVideoPlayStatsMetaData>, void *> __next_;
} hash_node_base<std::__1::__hash_node<std::__1::__hash_value_type<long long, FBClientProxyVideoPlayStatsMetaData>, void *> *>;

typedef struct _compressed_pair<std::__1::__hash_node_base<std::__1::__hash_node<std::__1::__hash_value_type<long long, FBClientProxyVideoPlayStatsMetaData>, void *> *>, std::__1::allocator<std::__1::__hash_node<std::__1::__hash_value_type<long long, FBClientProxyVideoPlayStatsMetaData>, void *> > > {
	hash_node_base<std::__1::__hash_node<std::__1::__hash_value_type<long long, FBClientProxyVideoPlayStatsMetaData>, void *> *> __first_;
} compressed_pair<std::__1::__hash_node_base<std::__1::__hash_node<std::__1::__hash_value_type<long long, FBClientProxyVideoPlayStatsMetaData>, void *> *>, std::__1::allocator<std::__1::__hash_node<std::__1::__hash_value_type<long long, FBClientProxyVideoPlayStatsMetaData>, void *> > >;

typedef struct _bucket_list_deallocator<std::__1::allocator<std::__1::__hash_node<std::__1::__hash_value_type<long long, FBClientProxyVideoPlayStatsMetaData>, void *> *> > {
	compressed_pair<unsigned long, std::__1::allocator<std::__1::__hash_node<std::__1::__hash_value_type<long long, FBClientProxyVideoPlayStatsMetaData>, void *> *> > __data_;
} bucket_list_deallocator<std::__1::allocator<std::__1::__hash_node<std::__1::__hash_value_type<long long, FBClientProxyVideoPlayStatsMetaData>, void *> *> >;

typedef struct _compressed_pair<std::__1::__hash_node<std::__1::__hash_value_type<long long, FBClientProxyVideoPlayStatsMetaData>, void *> **, std::__1::__bucket_list_deallocator<std::__1::allocator<std::__1::__hash_node<std::__1::__hash_value_type<long long, FBClientProxyVideoPlayStatsMetaData>, void *> *> > > {
	__hash_node<std::__1::__hash_value_type<long long, FBClientProxyVideoPlayStatsMetaData>, void *> __first_;
	bucket_list_deallocator<std::__1::allocator<std::__1::__hash_node<std::__1::__hash_value_type<long long, FBClientProxyVideoPlayStatsMetaData>, void *> *> > __second_;
} compressed_pair<std::__1::__hash_node<std::__1::__hash_value_type<long long, FBClientProxyVideoPlayStatsMetaData>, void *> **, std::__1::__bucket_list_deallocator<std::__1::allocator<std::__1::__hash_node<std::__1::__hash_value_type<long long, FBClientProxyVideoPlayStatsMetaData>, void *> *> > >;

typedef struct unique_ptr<std::__1::__hash_node<std::__1::__hash_value_type<long long, FBClientProxyVideoPlayStatsMetaData>, void *> *[], std::__1::__bucket_list_deallocator<std::__1::allocator<std::__1::__hash_node<std::__1::__hash_value_type<long long, FBClientProxyVideoPlayStatsMetaData>, void *> *> > > {
	compressed_pair<std::__1::__hash_node<std::__1::__hash_value_type<long long, FBClientProxyVideoPlayStatsMetaData>, void *> **, std::__1::__bucket_list_deallocator<std::__1::allocator<std::__1::__hash_node<std::__1::__hash_value_type<long long, FBClientProxyVideoPlayStatsMetaData>, void *> *> > > __ptr_;
} unique_ptr<std::__1::__hash_node<std::__1::__hash_value_type<long long, FBClientProxyVideoPlayStatsMetaData>, void *> *[], std::__1::__bucket_list_deallocator<std::__1::allocator<std::__1::__hash_node<std::__1::__hash_value_type<long long, FBClientProxyVideoPlayStatsMetaData>, void *> *> > >;

typedef struct _hash_table<std::__1::__hash_value_type<long long, FBClientProxyVideoPlayStatsMetaData>, std::__1::__unordered_map_hasher<long long, std::__1::__hash_value_type<long long, FBClientProxyVideoPlayStatsMetaData>, std::__1::hash<long long>, true>, std::__1::__unordered_map_equal<long long, std::__1::__hash_value_type<long long, FBClientProxyVideoPlayStatsMetaData>, std::__1::equal_to<long long>, true>, std::__1::allocator<std::__1::__hash_value_type<long long, FBClientProxyVideoPlayStatsMetaData> > > {
	unique_ptr<std::__1::__hash_node<std::__1::__hash_value_type<long long, FBClientProxyVideoPlayStatsMetaData>, void *> *[], std::__1::__bucket_list_deallocator<std::__1::allocator<std::__1::__hash_node<std::__1::__hash_value_type<long long, FBClientProxyVideoPlayStatsMetaData>, void *> *> > > __bucket_list_;
	compressed_pair<std::__1::__hash_node_base<std::__1::__hash_node<std::__1::__hash_value_type<long long, FBClientProxyVideoPlayStatsMetaData>, void *> *>, std::__1::allocator<std::__1::__hash_node<std::__1::__hash_value_type<long long, FBClientProxyVideoPlayStatsMetaData>, void *> > > __p1_;
	compressed_pair<unsigned long, std::__1::__unordered_map_hasher<long long, std::__1::__hash_value_type<long long, FBClientProxyVideoPlayStatsMetaData>, std::__1::hash<long long>, true> > __p2_;
	compressed_pair<float, std::__1::__unordered_map_equal<long long, std::__1::__hash_value_type<long long, FBClientProxyVideoPlayStatsMetaData>, std::__1::equal_to<long long>, true> > __p3_;
} hash_table<std::__1::__hash_value_type<long long, FBClientProxyVideoPlayStatsMetaData>, std::__1::__unordered_map_hasher<long long, std::__1::__hash_value_type<long long, FBClientProxyVideoPlayStatsMetaData>, std::__1::hash<long long>, true>, std::__1::__unordered_map_equal<long long, std::__1::__hash_value_type<long long, FBClientProxyVideoPlayStatsMetaData>, std::__1::equal_to<long long>, true>, std::__1::allocator<std::__1::__hash_value_type<long long, FBClientProxyVideoPlayStatsMetaData> > >;

typedef struct unordered_map<long long, FBClientProxyVideoPlayStatsMetaData, std::__1::hash<long long>, std::__1::equal_to<long long>, std::__1::allocator<std::__1::pair<const long long, FBClientProxyVideoPlayStatsMetaData> > > {
	hash_table<std::__1::__hash_value_type<long long, FBClientProxyVideoPlayStatsMetaData>, std::__1::__unordered_map_hasher<long long, std::__1::__hash_value_type<long long, FBClientProxyVideoPlayStatsMetaData>, std::__1::hash<long long>, true>, std::__1::__unordered_map_equal<long long, std::__1::__hash_value_type<long long, FBClientProxyVideoPlayStatsMetaData>, std::__1::equal_to<long long>, true>, std::__1::allocator<std::__1::__hash_value_type<long long, FBClientProxyVideoPlayStatsMetaData> > > __table_;
} unordered_map<long long, FBClientProxyVideoPlayStatsMetaData, std::__1::hash<long long>, std::__1::equal_to<long long>, std::__1::allocator<std::__1::pair<const long long, FBClientProxyVideoPlayStatsMetaData> > >;

typedef struct _compressed_pair<unsigned long, std::__1::allocator<std::__1::__hash_node<std::__1::__hash_value_type<long long, ClientProxyVideoStat>, void *> *> > {
	unsigned long long __first_;
} compressed_pair<unsigned long, std::__1::allocator<std::__1::__hash_node<std::__1::__hash_value_type<long long, ClientProxyVideoStat>, void *> *> >;

typedef struct _compressed_pair<unsigned long, std::__1::__unordered_map_hasher<long long, std::__1::__hash_value_type<long long, ClientProxyVideoStat>, std::__1::hash<long long>, true> > {
	unsigned long long __first_;
} compressed_pair<unsigned long, std::__1::__unordered_map_hasher<long long, std::__1::__hash_value_type<long long, ClientProxyVideoStat>, std::__1::hash<long long>, true> >;

typedef struct _compressed_pair<float, std::__1::__unordered_map_equal<long long, std::__1::__hash_value_type<long long, ClientProxyVideoStat>, std::__1::equal_to<long long>, true> > {
	float __first_;
} compressed_pair<float, std::__1::__unordered_map_equal<long long, std::__1::__hash_value_type<long long, ClientProxyVideoStat>, std::__1::equal_to<long long>, true> >;

typedef struct _hash_node_base<std::__1::__hash_node<std::__1::__hash_value_type<long long, ClientProxyVideoStat>, void *> *> {
	__hash_node<std::__1::__hash_value_type<long long, ClientProxyVideoStat>, void *> __next_;
} hash_node_base<std::__1::__hash_node<std::__1::__hash_value_type<long long, ClientProxyVideoStat>, void *> *>;

typedef struct _compressed_pair<std::__1::__hash_node_base<std::__1::__hash_node<std::__1::__hash_value_type<long long, ClientProxyVideoStat>, void *> *>, std::__1::allocator<std::__1::__hash_node<std::__1::__hash_value_type<long long, ClientProxyVideoStat>, void *> > > {
	hash_node_base<std::__1::__hash_node<std::__1::__hash_value_type<long long, ClientProxyVideoStat>, void *> *> __first_;
} compressed_pair<std::__1::__hash_node_base<std::__1::__hash_node<std::__1::__hash_value_type<long long, ClientProxyVideoStat>, void *> *>, std::__1::allocator<std::__1::__hash_node<std::__1::__hash_value_type<long long, ClientProxyVideoStat>, void *> > >;

typedef struct _bucket_list_deallocator<std::__1::allocator<std::__1::__hash_node<std::__1::__hash_value_type<long long, ClientProxyVideoStat>, void *> *> > {
	compressed_pair<unsigned long, std::__1::allocator<std::__1::__hash_node<std::__1::__hash_value_type<long long, ClientProxyVideoStat>, void *> *> > __data_;
} bucket_list_deallocator<std::__1::allocator<std::__1::__hash_node<std::__1::__hash_value_type<long long, ClientProxyVideoStat>, void *> *> >;

typedef struct _compressed_pair<std::__1::__hash_node<std::__1::__hash_value_type<long long, ClientProxyVideoStat>, void *> **, std::__1::__bucket_list_deallocator<std::__1::allocator<std::__1::__hash_node<std::__1::__hash_value_type<long long, ClientProxyVideoStat>, void *> *> > > {
	__hash_node<std::__1::__hash_value_type<long long, ClientProxyVideoStat>, void *> __first_;
	bucket_list_deallocator<std::__1::allocator<std::__1::__hash_node<std::__1::__hash_value_type<long long, ClientProxyVideoStat>, void *> *> > __second_;
} compressed_pair<std::__1::__hash_node<std::__1::__hash_value_type<long long, ClientProxyVideoStat>, void *> **, std::__1::__bucket_list_deallocator<std::__1::allocator<std::__1::__hash_node<std::__1::__hash_value_type<long long, ClientProxyVideoStat>, void *> *> > >;

typedef struct unique_ptr<std::__1::__hash_node<std::__1::__hash_value_type<long long, ClientProxyVideoStat>, void *> *[], std::__1::__bucket_list_deallocator<std::__1::allocator<std::__1::__hash_node<std::__1::__hash_value_type<long long, ClientProxyVideoStat>, void *> *> > > {
	compressed_pair<std::__1::__hash_node<std::__1::__hash_value_type<long long, ClientProxyVideoStat>, void *> **, std::__1::__bucket_list_deallocator<std::__1::allocator<std::__1::__hash_node<std::__1::__hash_value_type<long long, ClientProxyVideoStat>, void *> *> > > __ptr_;
} unique_ptr<std::__1::__hash_node<std::__1::__hash_value_type<long long, ClientProxyVideoStat>, void *> *[], std::__1::__bucket_list_deallocator<std::__1::allocator<std::__1::__hash_node<std::__1::__hash_value_type<long long, ClientProxyVideoStat>, void *> *> > >;

typedef struct _hash_table<std::__1::__hash_value_type<long long, ClientProxyVideoStat>, std::__1::__unordered_map_hasher<long long, std::__1::__hash_value_type<long long, ClientProxyVideoStat>, std::__1::hash<long long>, true>, std::__1::__unordered_map_equal<long long, std::__1::__hash_value_type<long long, ClientProxyVideoStat>, std::__1::equal_to<long long>, true>, std::__1::allocator<std::__1::__hash_value_type<long long, ClientProxyVideoStat> > > {
	unique_ptr<std::__1::__hash_node<std::__1::__hash_value_type<long long, ClientProxyVideoStat>, void *> *[], std::__1::__bucket_list_deallocator<std::__1::allocator<std::__1::__hash_node<std::__1::__hash_value_type<long long, ClientProxyVideoStat>, void *> *> > > __bucket_list_;
	compressed_pair<std::__1::__hash_node_base<std::__1::__hash_node<std::__1::__hash_value_type<long long, ClientProxyVideoStat>, void *> *>, std::__1::allocator<std::__1::__hash_node<std::__1::__hash_value_type<long long, ClientProxyVideoStat>, void *> > > __p1_;
	compressed_pair<unsigned long, std::__1::__unordered_map_hasher<long long, std::__1::__hash_value_type<long long, ClientProxyVideoStat>, std::__1::hash<long long>, true> > __p2_;
	compressed_pair<float, std::__1::__unordered_map_equal<long long, std::__1::__hash_value_type<long long, ClientProxyVideoStat>, std::__1::equal_to<long long>, true> > __p3_;
} hash_table<std::__1::__hash_value_type<long long, ClientProxyVideoStat>, std::__1::__unordered_map_hasher<long long, std::__1::__hash_value_type<long long, ClientProxyVideoStat>, std::__1::hash<long long>, true>, std::__1::__unordered_map_equal<long long, std::__1::__hash_value_type<long long, ClientProxyVideoStat>, std::__1::equal_to<long long>, true>, std::__1::allocator<std::__1::__hash_value_type<long long, ClientProxyVideoStat> > >;

typedef struct unordered_map<long long, ClientProxyVideoStat, std::__1::hash<long long>, std::__1::equal_to<long long>, std::__1::allocator<std::__1::pair<const long long, ClientProxyVideoStat> > > {
	hash_table<std::__1::__hash_value_type<long long, ClientProxyVideoStat>, std::__1::__unordered_map_hasher<long long, std::__1::__hash_value_type<long long, ClientProxyVideoStat>, std::__1::hash<long long>, true>, std::__1::__unordered_map_equal<long long, std::__1::__hash_value_type<long long, ClientProxyVideoStat>, std::__1::equal_to<long long>, true>, std::__1::allocator<std::__1::__hash_value_type<long long, ClientProxyVideoStat> > > __table_;
} unordered_map<long long, ClientProxyVideoStat, std::__1::hash<long long>, std::__1::equal_to<long long>, std::__1::allocator<std::__1::pair<const long long, ClientProxyVideoStat> > >;

typedef struct {
	long long field1;
	long long field2;
	long long field3;
	long long field4;
	long long field5;
	long long field6;
} SCD_Struct_FB496;

typedef struct {
	double byteRate;
	unsigned long long atomByteSize;
} SCD_Struct_FB497;

typedef struct {
	double field1;
	double field2;
	double field3;
	SCD_Struct_FB497 field4;
	BOOL field5;
	BOOL field6;
	BOOL field7;
} SCD_Struct_FB498;

typedef struct __CFBinaryHeap* CFBinaryHeapRef;

typedef struct CGImageSource* CGImageSourceRef;

typedef struct WebPDemuxer* WebPDemuxerRef;

typedef struct FBFramedImageViewConstraint {
	double borderWidth;
	CGSize borderImageSize;
} FBFramedImageViewConstraint;

typedef struct FBColorMetrics {
	/*function pointer*/void* _vptr$FBMetrics;
	BOOL _initialized;
	/*function pointer*/void* ;
	unsigned char red;
	C) r;
	/*function pointer*/void* ;
	unsigned char green;
	C) g;
	/*function pointer*/void* ;
	unsigned char blue;
	C) b;
	/*function pointer*/void* ;
	double alpha;
	d) a;
} FBColorMetrics;

typedef struct FBShadowMetrics {
	/*function pointer*/void* _vptr$FBMetrics;
	BOOL _initialized;
	CGSize offset;
	double blur;
	FBColorMetrics color;
} FBShadowMetrics;

typedef struct FBTagViewMetrics {
	/*function pointer*/void* _vptr$FBMetrics;
	BOOL _initialized;
	double tagVerticalOffset;
	double tagHorizontalOffset;
	double tagMaximumVerticalDownRatio;
	double tagMaximumHorizontalDownRatio;
	double tagRectOuterMargin;
	double tagFrameWidthPadding;
	double tagBorderPadding;
	double tagFrameTextBoxVerticalPadding;
	double removeButtonWidth;
	double tagRoundedCornerRadius;
	double tagArrowHeight;
	double tagHalfArrowWidth;
	double tagStrokeLineWidth;
	double tagOverlapThreshold;
	double tagOutOfScreenSizeThreshold;
	double leftPaddingForRemoveImage;
	double rightPaddingForRemoveImage;
	CGSize textShadowOffsetSize;
	unsigned long long textFontSize;
	UIColor* textColor;
	UIImage* removeImage;
	long long removeImageContentMode;
	UIColor* strokeColor;
	FBShadowMetrics shadowMetrics;
	UIColor* fillColor;
	BOOL shouldShowTagShadow;
	BOOL shouldFillBackgroundForRemoveImage;
	BOOL shouldBounceWhenTapped;
	BOOL shouldStrokePath;
} FBTagViewMetrics;

typedef struct MNRichMediaChunkedUploadJobBlueprint {
	long long eachChunkSize;
	long long remainderChunkSize;
	unsigned totalNumberOfChunks;
	long long maximumNumberFailedBytesAllowed;
	unsigned maximumNumberFailedChunksAllowed;
} MNRichMediaChunkedUploadJobBlueprint;

typedef struct MNRichMediaChunkedUploadStatus {
	unsigned long long jobStatus;
	unsigned chunksInFlight;
	BOOL uploadHasFinishedFailedOrCancelled;
	BOOL uploadWasResumed;
	long long bytesUploaded;
	unsigned chunksUploaded;
	unsigned totalChunksFailed;
	long long totalBytesFailed;
} MNRichMediaChunkedUploadStatus;

typedef struct MNRichMediaUploadJobMetadata {
	long long totalNumberOfBytes;
} MNRichMediaUploadJobMetadata;

typedef union {
	CGRect rect;
	CGPoint point;
} SCD_Union_FB509;

typedef struct {
	CGPoint center;
	CGPoint span;
} SCD_Struct_FB510;

typedef struct _compressed_pair<proxygen::mqttclient::MQTTClient *, std::__1::default_delete<proxygen::mqttclient::MQTTClient> > {
	MQTTClient __first_;
} compressed_pair<proxygen::mqttclient::MQTTClient *, std::__1::default_delete<proxygen::mqttclient::MQTTClient> >;

typedef struct unique_ptr<proxygen::mqttclient::MQTTClient, std::__1::default_delete<proxygen::mqttclient::MQTTClient> > {
	compressed_pair<proxygen::mqttclient::MQTTClient *, std::__1::default_delete<proxygen::mqttclient::MQTTClient> > __ptr_;
} unique_ptr<proxygen::mqttclient::MQTTClient, std::__1::default_delete<proxygen::mqttclient::MQTTClient> >;

typedef struct _compressed_pair<MQTTClientGlue *, std::__1::default_delete<MQTTClientGlue> > {
	MQTTClientGlue __first_;
} compressed_pair<MQTTClientGlue *, std::__1::default_delete<MQTTClientGlue> >;

typedef struct unique_ptr<MQTTClientGlue, std::__1::default_delete<MQTTClientGlue> > {
	compressed_pair<MQTTClientGlue *, std::__1::default_delete<MQTTClientGlue> > __ptr_;
} unique_ptr<MQTTClientGlue, std::__1::default_delete<MQTTClientGlue> >;

typedef struct _compressed_pair<unsigned long, std::__1::__map_value_compare<proxygen::TraceFieldType, std::__1::__value_type<proxygen::TraceFieldType, std::__1::basic_string<char> >, std::__1::less<proxygen::TraceFieldType>, true> > {
	unsigned long long __first_;
} compressed_pair<unsigned long, std::__1::__map_value_compare<proxygen::TraceFieldType, std::__1::__value_type<proxygen::TraceFieldType, std::__1::basic_string<char> >, std::__1::less<proxygen::TraceFieldType>, true> >;

typedef struct _compressed_pair<std::__1::pair<proxygen::TraceEventType, long long> *, std::__1::allocator<std::__1::pair<proxygen::TraceEventType, long long> > > {
	pair<proxygen::TraceEventType, long long> __first_;
} compressed_pair<std::__1::pair<proxygen::TraceEventType, long long> *, std::__1::allocator<std::__1::pair<proxygen::TraceEventType, long long> > >;

typedef struct vector<std::__1::pair<proxygen::TraceEventType, long long>, std::__1::allocator<std::__1::pair<proxygen::TraceEventType, long long> > > {
	pair<proxygen::TraceEventType, long long> __begin_;
	pair<proxygen::TraceEventType, long long> __end_;
	compressed_pair<std::__1::pair<proxygen::TraceEventType, long long> *, std::__1::allocator<std::__1::pair<proxygen::TraceEventType, long long> > > __end_cap_;
} vector<std::__1::pair<proxygen::TraceEventType, long long>, std::__1::allocator<std::__1::pair<proxygen::TraceEventType, long long> > >;

typedef struct _compressed_pair<std::__1::__tree_end_node<std::__1::__tree_node_base<void *> *>, std::__1::allocator<std::__1::__tree_node<std::__1::__value_type<proxygen::TraceFieldType, std::__1::basic_string<char> >, void *> > > {
	tree_end_node<std::__1::__tree_node_base<void *> *> __first_;
} compressed_pair<std::__1::__tree_end_node<std::__1::__tree_node_base<void *> *>, std::__1::allocator<std::__1::__tree_node<std::__1::__value_type<proxygen::TraceFieldType, std::__1::basic_string<char> >, void *> > >;

typedef struct _tree<std::__1::__value_type<proxygen::TraceFieldType, std::__1::basic_string<char> >, std::__1::__map_value_compare<proxygen::TraceFieldType, std::__1::__value_type<proxygen::TraceFieldType, std::__1::basic_string<char> >, std::__1::less<proxygen::TraceFieldType>, true>, std::__1::allocator<std::__1::__value_type<proxygen::TraceFieldType, std::__1::basic_string<char> > > > {
	__tree_node<std::__1::__value_type<proxygen::TraceFieldType, std::__1::basic_string<char> >, void *> __begin_node_;
	compressed_pair<std::__1::__tree_end_node<std::__1::__tree_node_base<void *> *>, std::__1::allocator<std::__1::__tree_node<std::__1::__value_type<proxygen::TraceFieldType, std::__1::basic_string<char> >, void *> > > __pair1_;
	compressed_pair<unsigned long, std::__1::__map_value_compare<proxygen::TraceFieldType, std::__1::__value_type<proxygen::TraceFieldType, std::__1::basic_string<char> >, std::__1::less<proxygen::TraceFieldType>, true> > __pair3_;
} tree<std::__1::__value_type<proxygen::TraceFieldType, std::__1::basic_string<char> >, std::__1::__map_value_compare<proxygen::TraceFieldType, std::__1::__value_type<proxygen::TraceFieldType, std::__1::basic_string<char> >, std::__1::less<proxygen::TraceFieldType>, true>, std::__1::allocator<std::__1::__value_type<proxygen::TraceFieldType, std::__1::basic_string<char> > > >;

typedef struct map<proxygen::TraceFieldType, std::__1::basic_string<char>, std::__1::less<proxygen::TraceFieldType>, std::__1::allocator<std::__1::pair<const proxygen::TraceFieldType, std::__1::basic_string<char> > > > {
	tree<std::__1::__value_type<proxygen::TraceFieldType, std::__1::basic_string<char> >, std::__1::__map_value_compare<proxygen::TraceFieldType, std::__1::__value_type<proxygen::TraceFieldType, std::__1::basic_string<char> >, std::__1::less<proxygen::TraceFieldType>, true>, std::__1::allocator<std::__1::__value_type<proxygen::TraceFieldType, std::__1::basic_string<char> > > > __tree_;
} map<proxygen::TraceFieldType, std::__1::basic_string<char>, std::__1::less<proxygen::TraceFieldType>, std::__1::allocator<std::__1::pair<const proxygen::TraceFieldType, std::__1::basic_string<char> > > >;

typedef struct FBWhistleConnectionStatsLogger {
	/*function pointer*/void* _vptr$TraceEventObserver;
	map<proxygen::TraceFieldType, std::__1::basic_string<char>, std::__1::less<proxygen::TraceFieldType>, std::__1::allocator<std::__1::pair<const proxygen::TraceFieldType, std::__1::basic_string<char> > > > connStats_;
	vector<std::__1::pair<proxygen::TraceEventType, long long>, std::__1::allocator<std::__1::pair<proxygen::TraceEventType, long long> > > eventTime_;
} FBWhistleConnectionStatsLogger;

typedef struct SmoothLoopTime {
	double expCoeff_;
	double value_;
	long long oldBusyLeftover_;
} SmoothLoopTime;

typedef struct type {
	unsigned char __lx[24];
} type;

typedef struct shared_ptr<folly::EventBaseObserver> {
	EventBaseObserver __ptr_;
	__shared_weak_count __cntrl_;
} shared_ptr<folly::EventBaseObserver>;

typedef struct function<void ()> {
	type __buf_;
	__base<void ()> __f_;
} function<void ()>;

typedef struct _compressed_pair<folly::EventBase::FunctionRunner *, std::__1::default_delete<folly::EventBase::FunctionRunner> > {
	FunctionRunner __first_;
} compressed_pair<folly::EventBase::FunctionRunner *, std::__1::default_delete<folly::EventBase::FunctionRunner> >;

typedef struct unique_ptr<folly::EventBase::FunctionRunner, std::__1::default_delete<folly::EventBase::FunctionRunner> > {
	compressed_pair<folly::EventBase::FunctionRunner *, std::__1::default_delete<folly::EventBase::FunctionRunner> > __ptr_;
} unique_ptr<folly::EventBase::FunctionRunner, std::__1::default_delete<folly::EventBase::FunctionRunner> >;

typedef struct _compressed_pair<folly::NotificationQueue<std::__1::pair<void (*)(void *), void *> > *, std::__1::default_delete<folly::NotificationQueue<std::__1::pair<void (*)(void *), void *> > > > {
	NotificationQueue<std::__1::pair<void (*)(void *), void *> > __first_;
} compressed_pair<folly::NotificationQueue<std::__1::pair<void (*)(void *), void *> > *, std::__1::default_delete<folly::NotificationQueue<std::__1::pair<void (*)(void *), void *> > > >;

typedef struct unique_ptr<folly::NotificationQueue<std::__1::pair<void (*)(void *), void *> >, std::__1::default_delete<folly::NotificationQueue<std::__1::pair<void (*)(void *), void *> > > > {
	compressed_pair<folly::NotificationQueue<std::__1::pair<void (*)(void *), void *> > *, std::__1::default_delete<folly::NotificationQueue<std::__1::pair<void (*)(void *), void *> > > > __ptr_;
} unique_ptr<folly::NotificationQueue<std::__1::pair<void (*)(void *), void *> >, std::__1::default_delete<folly::NotificationQueue<std::__1::pair<void (*)(void *), void *> > > >;

typedef struct atomic<_opaque_pthread_t *> {
	A_opaque_pthread_t __a_;
} atomic<_opaque_pthread_t *>;

typedef struct list_node<void *> {
	list_node<void *> next_;
	list_node<void *> prev_;
} list_node<void *>;

typedef struct root_plus_size {
	list_node<void *> root_;
} root_plus_size;

typedef struct data_t {
	const oot_plus_size root_plus_size_;
} data_t;

typedef struct list<folly::EventBase::CobTimeout, boost::intrusive::member_hook<folly::EventBase::CobTimeout, boost::intrusive::list_member_hook<boost::intrusive::link_mode<2>, boost::intrusive::none, boost::intrusive::none>, &folly::EventBase::CobTimeout::hook>, boost::intrusive::constant_time_size<false>, boost::intrusive::none> {
	data_t data_;
} list<folly::EventBase::CobTimeout, boost::intrusive::member_hook<folly::EventBase::CobTimeout, boost::intrusive::list_member_hook<boost::intrusive::link_mode<2>, boost::intrusive::none, boost::intrusive::none>, &folly::EventBase::CobTimeout::hook>, boost::intrusive::constant_time_size<false>, boost::intrusive::none>;

typedef struct list<folly::EventBase::LoopCallback, boost::intrusive::member_hook<folly::EventBase::LoopCallback, boost::intrusive::list_member_hook<boost::intrusive::link_mode<2>, boost::intrusive::none, boost::intrusive::none>, &folly::EventBase::LoopCallback::hook_>, boost::intrusive::constant_time_size<false>, boost::intrusive::none> {
	data_t data_;
} list<folly::EventBase::LoopCallback, boost::intrusive::member_hook<folly::EventBase::LoopCallback, boost::intrusive::list_member_hook<boost::intrusive::link_mode<2>, boost::intrusive::none, boost::intrusive::none>, &folly::EventBase::LoopCallback::hook_>, boost::intrusive::constant_time_size<false>, boost::intrusive::none>;

typedef struct EventBase {
	/*function pointer*/void* _vptr$TimeoutManager;
	/*function pointer*/void* _vptr$DrivableExecutor;
	list<folly::EventBase::CobTimeout, boost::intrusive::member_hook<folly::EventBase::CobTimeout, boost::intrusive::list_member_hook<boost::intrusive::link_mode<2>, boost::intrusive::none, boost::intrusive::none>, &folly::EventBase::CobTimeout::hook>, boost::intrusive::constant_time_size<false>, boost::intrusive::none> pendingCobTimeouts_;
	list<folly::EventBase::LoopCallback, boost::intrusive::member_hook<folly::EventBase::LoopCallback, boost::intrusive::list_member_hook<boost::intrusive::link_mode<2>, boost::intrusive::none, boost::intrusive::none>, &folly::EventBase::LoopCallback::hook_>, boost::intrusive::constant_time_size<false>, boost::intrusive::none> loopCallbacks_;
	list<folly::EventBase::LoopCallback, boost::intrusive::member_hook<folly::EventBase::LoopCallback, boost::intrusive::list_member_hook<boost::intrusive::link_mode<2>, boost::intrusive::none, boost::intrusive::none>, &folly::EventBase::LoopCallback::hook_>, boost::intrusive::constant_time_size<false>, boost::intrusive::none> runBeforeLoopCallbacks_;
	list<folly::EventBase::LoopCallback, boost::intrusive::member_hook<folly::EventBase::LoopCallback, boost::intrusive::list_member_hook<boost::intrusive::link_mode<2>, boost::intrusive::none, boost::intrusive::none>, &folly::EventBase::LoopCallback::hook_>, boost::intrusive::constant_time_size<false>, boost::intrusive::none> onDestructionCallbacks_;
	list<folly::EventBase::LoopCallback, boost::intrusive::member_hook<folly::EventBase::LoopCallback, boost::intrusive::list_member_hook<boost::intrusive::link_mode<2>, boost::intrusive::none, boost::intrusive::none>, &folly::EventBase::LoopCallback::hook_>, boost::intrusive::constant_time_size<false>, boost::intrusive::none> runOnceCallbacks_;
	atomic<bool> stop_;
	atomic<_opaque_pthread_t *> loopThread_;
	event_base evb_;
	unique_ptr<folly::NotificationQueue<std::__1::pair<void (*)(void *), void *> >, std::__1::default_delete<folly::NotificationQueue<std::__1::pair<void (*)(void *), void *> > > > queue_;
	unique_ptr<folly::EventBase::FunctionRunner, std::__1::default_delete<folly::EventBase::FunctionRunner> > fnRunner_;
	long long maxLatency_;
	SmoothLoopTime avgLoopTime_;
	SmoothLoopTime maxLatencyLoopTime_;
	function<void ()> maxLatencyCob_;
	BOOL enableTimeMeasurement_;
	unsigned long long nextLoopCnt_;
	unsigned long long latestLoopCnt_;
	unsigned long long startWork_;
	shared_ptr<folly::EventBaseObserver> observer_;
	unsigned observerSampleCount_;
	ExecutionObserver executionObserver_;
	basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char> > name_;
	mutex onDestructionCallbacksMutex_;
} EventBase;

typedef struct WhistleAppThreadExecutor {
	/*function pointer*/void* _vptr$Executor;
} WhistleAppThreadExecutor;

typedef struct pair<FBWebViewResponse *, NSError *> {
	FBWebViewResponse* first;
	NSError* second;
} pair<FBWebViewResponse *, NSError *>;

typedef struct _compressed_pair<FB::Functional::Callback<std::__1::pair<FBWebViewResponse *, NSError *> > *, std::__1::allocator<FB::Functional::Callback<std::__1::pair<FBWebViewResponse *, NSError *> > > > {
	Callback<std::__1::pair<FBWebViewResponse *, NSError *> > __first_;
} compressed_pair<FB::Functional::Callback<std::__1::pair<FBWebViewResponse *, NSError *> > *, std::__1::allocator<FB::Functional::Callback<std::__1::pair<FBWebViewResponse *, NSError *> > > >;

typedef struct vector<FB::Functional::Callback<std::__1::pair<FBWebViewResponse *, NSError *> >, std::__1::allocator<FB::Functional::Callback<std::__1::pair<FBWebViewResponse *, NSError *> > > > {
	Callback<std::__1::pair<FBWebViewResponse *, NSError *> > __begin_;
	Callback<std::__1::pair<FBWebViewResponse *, NSError *> > __end_;
	compressed_pair<FB::Functional::Callback<std::__1::pair<FBWebViewResponse *, NSError *> > *, std::__1::allocator<FB::Functional::Callback<std::__1::pair<FBWebViewResponse *, NSError *> > > > __end_cap_;
} vector<FB::Functional::Callback<std::__1::pair<FBWebViewResponse *, NSError *> >, std::__1::allocator<FB::Functional::Callback<std::__1::pair<FBWebViewResponse *, NSError *> > > >;

typedef struct Promise<std::__1::pair<FBWebViewResponse *, NSError *> > {
	unsigned long long ResolutionState;
	pair<FBWebViewResponse *, NSError *> _result;
	vector<FB::Functional::Callback<std::__1::pair<FBWebViewResponse *, NSError *> >, std::__1::allocator<FB::Functional::Callback<std::__1::pair<FBWebViewResponse *, NSError *> > > > _resolutionHandlers;
	unsigned long long _resolutionState;
	mutex _mutex;
} Promise<std::__1::pair<FBWebViewResponse *, NSError *> >;

typedef struct MNPaymentsSenderReceiverProfileViewParameters {
	CGSize profilePictureViewSize;
	double profilePictureViewCornerRadius;
	double profilePictureViewCornerSize;
	double profilePictureTopPadding;
	double profilePictureLeftPadding;
	double textViewLeftPadding;
	double textViewRightPadding;
	double bottomSeparatorThickness;
	double bottomSeparatorSidePadding;
	double bottomSeparatorTopPadding;
	double minimalHeight;
	double displayNameTextFontSize;
} MNPaymentsSenderReceiverProfileViewParameters;

typedef struct _compressed_pair<FB::Functional::Callback<id<MNServiceControllable> > *, std::__1::allocator<FB::Functional::Callback<id<MNServiceControllable> > > > {
	Callback<id<MNServiceControllable> > __first_;
} compressed_pair<FB::Functional::Callback<id<MNServiceControllable> > *, std::__1::allocator<FB::Functional::Callback<id<MNServiceControllable> > > >;

typedef struct vector<FB::Functional::Callback<id<MNServiceControllable> >, std::__1::allocator<FB::Functional::Callback<id<MNServiceControllable> > > > {
	Callback<id<MNServiceControllable> > __begin_;
	Callback<id<MNServiceControllable> > __end_;
	compressed_pair<FB::Functional::Callback<id<MNServiceControllable> > *, std::__1::allocator<FB::Functional::Callback<id<MNServiceControllable> > > > __end_cap_;
} vector<FB::Functional::Callback<id<MNServiceControllable> >, std::__1::allocator<FB::Functional::Callback<id<MNServiceControllable> > > >;

typedef struct Promise<id<MNServiceControllable> > {
	unsigned long long ResolutionState;
	<MNServiceControllable>* _result;
	vector<FB::Functional::Callback<id<MNServiceControllable> >, std::__1::allocator<FB::Functional::Callback<id<MNServiceControllable> > > > _resolutionHandlers;
	unsigned long long _resolutionState;
	mutex _mutex;
} Promise<id<MNServiceControllable> >;

typedef struct __CTFramesetter* CTFramesetterRef;

typedef struct __CTRun* CTRunRef;

typedef struct _compressed_pair<facebook::omnistore::Omnistore *, std::__1::default_delete<facebook::omnistore::Omnistore> > {
	Omnistore __first_;
} compressed_pair<facebook::omnistore::Omnistore *, std::__1::default_delete<facebook::omnistore::Omnistore> >;

typedef struct unique_ptr<facebook::omnistore::Omnistore, std::__1::default_delete<facebook::omnistore::Omnistore> > {
	compressed_pair<facebook::omnistore::Omnistore *, std::__1::default_delete<facebook::omnistore::Omnistore> > __ptr_;
} unique_ptr<facebook::omnistore::Omnistore, std::__1::default_delete<facebook::omnistore::Omnistore> >;

typedef struct __CFNotificationCenter* CFNotificationCenterRef;

typedef struct _compressed_pair<facebook::omnistore::Collection *, std::__1::default_delete<facebook::omnistore::Collection> > {
	Collection __first_;
} compressed_pair<facebook::omnistore::Collection *, std::__1::default_delete<facebook::omnistore::Collection> >;

typedef struct unique_ptr<facebook::omnistore::Collection, std::__1::default_delete<facebook::omnistore::Collection> > {
	compressed_pair<facebook::omnistore::Collection *, std::__1::default_delete<facebook::omnistore::Collection> > __ptr_;
} unique_ptr<facebook::omnistore::Collection, std::__1::default_delete<facebook::omnistore::Collection> >;

typedef struct _compressed_pair<facebook::omnistore::Cursor *, std::__1::default_delete<facebook::omnistore::Cursor> > {
	Cursor __first_;
} compressed_pair<facebook::omnistore::Cursor *, std::__1::default_delete<facebook::omnistore::Cursor> >;

typedef struct unique_ptr<facebook::omnistore::Cursor, std::__1::default_delete<facebook::omnistore::Cursor> > {
	compressed_pair<facebook::omnistore::Cursor *, std::__1::default_delete<facebook::omnistore::Cursor> > __ptr_;
} unique_ptr<facebook::omnistore::Cursor, std::__1::default_delete<facebook::omnistore::Cursor> >;

typedef struct shared_ptr<facebook::omnistore::Delta> {
	Delta __ptr_;
	__shared_weak_count __cntrl_;
} shared_ptr<facebook::omnistore::Delta>;

typedef struct shared_ptr<mobileconfig::FBMobileConfigMmapHandle> {
	FBMobileConfigMmapHandle __ptr_;
	__shared_weak_count __cntrl_;
} shared_ptr<mobileconfig::FBMobileConfigMmapHandle>;

typedef struct shared_ptr<mobileconfig::FBRateLimiter<unsigned long long> > {
	FBRateLimiter<unsigned long long> __ptr_;
	__shared_weak_count __cntrl_;
} shared_ptr<mobileconfig::FBRateLimiter<unsigned long long> >;

typedef struct FBMobileConfigManager* FBMobileConfigManagerRef;

typedef struct _compressed_pair<std::__1::vector<Section, std::__1::allocator<Section> > *, std::__1::default_delete<std::__1::vector<Section, std::__1::allocator<Section> > > > {
	vector<Section, std::__1::allocator<Section> > __first_;
} compressed_pair<std::__1::vector<Section, std::__1::allocator<Section> > *, std::__1::default_delete<std::__1::vector<Section, std::__1::allocator<Section> > > >;

typedef struct unique_ptr<std::__1::vector<Section, std::__1::allocator<Section> >, std::__1::default_delete<std::__1::vector<Section, std::__1::allocator<Section> > > > {
	compressed_pair<std::__1::vector<Section, std::__1::allocator<Section> > *, std::__1::default_delete<std::__1::vector<Section, std::__1::allocator<Section> > > > __ptr_;
} unique_ptr<std::__1::vector<Section, std::__1::allocator<Section> >, std::__1::default_delete<std::__1::vector<Section, std::__1::allocator<Section> > > >;

typedef struct _compressed_pair<facebook::simplesearch::OrderedList<unsigned long long> *, std::__1::default_delete<facebook::simplesearch::OrderedList<unsigned long long> > > {
	bycopy const deredList<unsigned long long> __first_;
} compressed_pair<facebook::simplesearch::OrderedList<unsigned long long> *, std::__1::default_delete<facebook::simplesearch::OrderedList<unsigned long long> > >;

typedef struct unique_ptr<facebook::simplesearch::OrderedList<unsigned long long>, std::__1::default_delete<facebook::simplesearch::OrderedList<unsigned long long> > > {
	compressed_pair<facebook::simplesearch::OrderedList<unsigned long long> *, std::__1::default_delete<facebook::simplesearch::OrderedList<unsigned long long> > > __ptr_;
} unique_ptr<facebook::simplesearch::OrderedList<unsigned long long>, std::__1::default_delete<facebook::simplesearch::OrderedList<unsigned long long> > >;

typedef struct _compressed_pair<facebook::simplesearch::SimpleIndex *, std::__1::default_delete<facebook::simplesearch::SimpleIndex> > {
	SimpleIndex __first_;
} compressed_pair<facebook::simplesearch::SimpleIndex *, std::__1::default_delete<facebook::simplesearch::SimpleIndex> >;

typedef struct unique_ptr<facebook::simplesearch::SimpleIndex, std::__1::default_delete<facebook::simplesearch::SimpleIndex> > {
	compressed_pair<facebook::simplesearch::SimpleIndex *, std::__1::default_delete<facebook::simplesearch::SimpleIndex> > __ptr_;
} unique_ptr<facebook::simplesearch::SimpleIndex, std::__1::default_delete<facebook::simplesearch::SimpleIndex> >;

typedef struct shared_ptr<std::__1::unordered_map<unsigned long long, SimpleSearchEntityMetadata, std::__1::hash<unsigned long long>, std::__1::equal_to<unsigned long long>, std::__1::allocator<std::__1::pair<const unsigned long long, SimpleSearchEntityMetadata> > > > {
	unordered_map<unsigned long long, SimpleSearchEntityMetadata, std::__1::hash<unsigned long long>, std::__1::equal_to<unsigned long long>, std::__1::allocator<std::__1::pair<const unsigned long long, SimpleSearchEntityMetadata> > > __ptr_;
	__shared_weak_count __cntrl_;
} shared_ptr<std::__1::unordered_map<unsigned long long, SimpleSearchEntityMetadata, std::__1::hash<unsigned long long>, std::__1::equal_to<unsigned long long>, std::__1::allocator<std::__1::pair<const unsigned long long, SimpleSearchEntityMetadata> > > >;

typedef struct __CFStringTokenizer* CFStringTokenizerRef;

typedef struct _CCCryptor* CCCryptorRef;

typedef struct CGDataProvider* CGDataProviderRef;

typedef struct z_stream_s {
	char* next_in;
	unsigned avail_in;
	unsigned long long total_in;
	char* next_out;
	unsigned avail_out;
	unsigned long long total_out;
	char* msg;
	internal_state state;
	/*function pointer*/void* zalloc;
	/*function pointer*/void* zfree;
	void opaque;
	int data_type;
	unsigned long long adler;
	unsigned long long reserved;
} z_stream_s;

typedef struct ZZStandardCryptoEngine {
	int keys[3];
} ZZStandardCryptoEngine;

typedef struct shared_ptr<mobileconfig::FBMobileConfigStorageManager> {
	FBMobileConfigStorageManager __ptr_;
	__shared_weak_count __cntrl_;
} shared_ptr<mobileconfig::FBMobileConfigStorageManager>;

typedef struct KeyboardConfiguration {
	long long interfaceOrientation;
	double keyboardHeight;
} KeyboardConfiguration;

typedef struct MNBubbleViewAttributes {
	unsigned long long displayType;
	unsigned long long type;
	unsigned long long position;
	unsigned long long section;
	unsigned long long groupingType;
	BOOL highlighted;
} MNBubbleViewAttributes;

typedef struct _compressed_pair<facebook::speech::AudioQueueRecorder *, std::__1::default_delete<facebook::speech::AudioQueueRecorder> > {
	AudioQueueRecorder __first_;
} compressed_pair<facebook::speech::AudioQueueRecorder *, std::__1::default_delete<facebook::speech::AudioQueueRecorder> >;

typedef struct unique_ptr<facebook::speech::AudioQueueRecorder, std::__1::default_delete<facebook::speech::AudioQueueRecorder> > {
	compressed_pair<facebook::speech::AudioQueueRecorder *, std::__1::default_delete<facebook::speech::AudioQueueRecorder> > __ptr_;
} unique_ptr<facebook::speech::AudioQueueRecorder, std::__1::default_delete<facebook::speech::AudioQueueRecorder> >;

typedef struct scoped_ptr<webrtc::OpenGles20> {
	OpenGles20 ptr;
} scoped_ptr<webrtc::OpenGles20>;

typedef struct _compressed_pair<WebRTCEngine *, std::__1::default_delete<WebRTCEngine> > {
	WebRTCEngine __first_;
} compressed_pair<WebRTCEngine *, std::__1::default_delete<WebRTCEngine> >;

typedef struct unique_ptr<WebRTCEngine, std::__1::default_delete<WebRTCEngine> > {
	compressed_pair<WebRTCEngine *, std::__1::default_delete<WebRTCEngine> > __ptr_;
} unique_ptr<WebRTCEngine, std::__1::default_delete<WebRTCEngine> >;

typedef struct {
	long long field1;
	long long field2;
	BOOL field3;
} SCD_Struct_MN579;

typedef struct _compressed_pair<FBComponentCollectionViewDataSourceCellConfig *, std::__1::default_delete<FBComponentCollectionViewDataSourceCellConfig> > {
	FBComponentCollectionViewDataSourceCellConfig __first_;
} compressed_pair<FBComponentCollectionViewDataSourceCellConfig *, std::__1::default_delete<FBComponentCollectionViewDataSourceCellConfig> >;

typedef struct unique_ptr<FBComponentCollectionViewDataSourceCellConfig, std::__1::default_delete<FBComponentCollectionViewDataSourceCellConfig> > {
	compressed_pair<FBComponentCollectionViewDataSourceCellConfig *, std::__1::default_delete<FBComponentCollectionViewDataSourceCellConfig> > __ptr_;
} unique_ptr<FBComponentCollectionViewDataSourceCellConfig, std::__1::default_delete<FBComponentCollectionViewDataSourceCellConfig> >;

typedef struct FlowLayoutDelegateRespondsTo {
	BOOL sizeForItemAtIndexPath;
	BOOL insetForSectionAtIndex;
	BOOL minimumLineSpacingForSectionAtIndex;
	BOOL minimumInteritemSpacingForSectionAtIndex;
	BOOL referenceSizeForHeaderInSection;
	BOOL referenceSizeForFooterInSection;
} FlowLayoutDelegateRespondsTo;

typedef struct _compressed_pair<unsigned long, std::__1::__map_value_compare<UIView *, std::__1::__value_type<UIView *, id<NSObject> >, std::__1::less<UIView *>, true> > {
	unsigned long long __first_;
} compressed_pair<unsigned long, std::__1::__map_value_compare<UIView *, std::__1::__value_type<UIView *, id<NSObject> >, std::__1::less<UIView *>, true> >;

typedef struct _compressed_pair<std::__1::__tree_end_node<std::__1::__tree_node_base<void *> *>, std::__1::allocator<std::__1::__tree_node<std::__1::__value_type<UIView *, id<NSObject> >, void *> > > {
	tree_end_node<std::__1::__tree_node_base<void *> *> __first_;
} compressed_pair<std::__1::__tree_end_node<std::__1::__tree_node_base<void *> *>, std::__1::allocator<std::__1::__tree_node<std::__1::__value_type<UIView *, id<NSObject> >, void *> > >;

typedef struct _tree<std::__1::__value_type<UIView *, id<NSObject> >, std::__1::__map_value_compare<UIView *, std::__1::__value_type<UIView *, id<NSObject> >, std::__1::less<UIView *>, true>, std::__1::allocator<std::__1::__value_type<UIView *, id<NSObject> > > > {
	__tree_node<std::__1::__value_type<UIView *, id<NSObject> >, void *> __begin_node_;
	compressed_pair<std::__1::__tree_end_node<std::__1::__tree_node_base<void *> *>, std::__1::allocator<std::__1::__tree_node<std::__1::__value_type<UIView *, id<NSObject> >, void *> > > __pair1_;
	compressed_pair<unsigned long, std::__1::__map_value_compare<UIView *, std::__1::__value_type<UIView *, id<NSObject> >, std::__1::less<UIView *>, true> > __pair3_;
} tree<std::__1::__value_type<UIView *, id<NSObject> >, std::__1::__map_value_compare<UIView *, std::__1::__value_type<UIView *, id<NSObject> >, std::__1::less<UIView *>, true>, std::__1::allocator<std::__1::__value_type<UIView *, id<NSObject> > > >;

typedef struct map<UIView *, id<NSObject>, std::__1::less<UIView *>, std::__1::allocator<std::__1::pair<UIView *const, id<NSObject> > > > {
	tree<std::__1::__value_type<UIView *, id<NSObject> >, std::__1::__map_value_compare<UIView *, std::__1::__value_type<UIView *, id<NSObject> >, std::__1::less<UIView *>, true>, std::__1::allocator<std::__1::__value_type<UIView *, id<NSObject> > > > __tree_;
} map<UIView *, id<NSObject>, std::__1::less<UIView *>, std::__1::allocator<std::__1::pair<UIView *const, id<NSObject> > > >;

typedef struct _compressed_pair<unsigned long, std::__1::__map_value_compare<id<NSObject>, std::__1::__value_type<id<NSObject>, UIView *>, std::__1::less<id<NSObject> >, true> > {
	unsigned long long __first_;
} compressed_pair<unsigned long, std::__1::__map_value_compare<id<NSObject>, std::__1::__value_type<id<NSObject>, UIView *>, std::__1::less<id<NSObject> >, true> >;

typedef struct _compressed_pair<std::__1::__tree_end_node<std::__1::__tree_node_base<void *> *>, std::__1::allocator<std::__1::__tree_node<std::__1::__value_type<id<NSObject>, UIView *>, void *> > > {
	tree_end_node<std::__1::__tree_node_base<void *> *> __first_;
} compressed_pair<std::__1::__tree_end_node<std::__1::__tree_node_base<void *> *>, std::__1::allocator<std::__1::__tree_node<std::__1::__value_type<id<NSObject>, UIView *>, void *> > >;

typedef struct _tree<std::__1::__value_type<id<NSObject>, UIView *>, std::__1::__map_value_compare<id<NSObject>, std::__1::__value_type<id<NSObject>, UIView *>, std::__1::less<id<NSObject> >, true>, std::__1::allocator<std::__1::__value_type<id<NSObject>, UIView *> > > {
	__tree_node<std::__1::__value_type<id<NSObject>, UIView *>, void *> __begin_node_;
	compressed_pair<std::__1::__tree_end_node<std::__1::__tree_node_base<void *> *>, std::__1::allocator<std::__1::__tree_node<std::__1::__value_type<id<NSObject>, UIView *>, void *> > > __pair1_;
	compressed_pair<unsigned long, std::__1::__map_value_compare<id<NSObject>, std::__1::__value_type<id<NSObject>, UIView *>, std::__1::less<id<NSObject> >, true> > __pair3_;
} tree<std::__1::__value_type<id<NSObject>, UIView *>, std::__1::__map_value_compare<id<NSObject>, std::__1::__value_type<id<NSObject>, UIView *>, std::__1::less<id<NSObject> >, true>, std::__1::allocator<std::__1::__value_type<id<NSObject>, UIView *> > >;

typedef struct map<id<NSObject>, UIView *, std::__1::less<id<NSObject> >, std::__1::allocator<std::__1::pair<const id<NSObject>, UIView *> > > {
	tree<std::__1::__value_type<id<NSObject>, UIView *>, std::__1::__map_value_compare<id<NSObject>, std::__1::__value_type<id<NSObject>, UIView *>, std::__1::less<id<NSObject> >, true>, std::__1::allocator<std::__1::__value_type<id<NSObject>, UIView *> > > __tree_;
} map<id<NSObject>, UIView *, std::__1::less<id<NSObject> >, std::__1::allocator<std::__1::pair<const id<NSObject>, UIView *> > >;

typedef struct _compressed_pair<unsigned long, std::__1::__map_value_compare<UITableViewCell *, std::__1::__value_type<UITableViewCell *, id<NSObject> >, std::__1::less<UITableViewCell *>, true> > {
	unsigned long long __first_;
} compressed_pair<unsigned long, std::__1::__map_value_compare<UITableViewCell *, std::__1::__value_type<UITableViewCell *, id<NSObject> >, std::__1::less<UITableViewCell *>, true> >;

typedef struct _compressed_pair<std::__1::__tree_end_node<std::__1::__tree_node_base<void *> *>, std::__1::allocator<std::__1::__tree_node<std::__1::__value_type<UITableViewCell *, id<NSObject> >, void *> > > {
	tree_end_node<std::__1::__tree_node_base<void *> *> __first_;
} compressed_pair<std::__1::__tree_end_node<std::__1::__tree_node_base<void *> *>, std::__1::allocator<std::__1::__tree_node<std::__1::__value_type<UITableViewCell *, id<NSObject> >, void *> > >;

typedef struct _tree<std::__1::__value_type<UITableViewCell *, id<NSObject> >, std::__1::__map_value_compare<UITableViewCell *, std::__1::__value_type<UITableViewCell *, id<NSObject> >, std::__1::less<UITableViewCell *>, true>, std::__1::allocator<std::__1::__value_type<UITableViewCell *, id<NSObject> > > > {
	__tree_node<std::__1::__value_type<UITableViewCell *, id<NSObject> >, void *> __begin_node_;
	compressed_pair<std::__1::__tree_end_node<std::__1::__tree_node_base<void *> *>, std::__1::allocator<std::__1::__tree_node<std::__1::__value_type<UITableViewCell *, id<NSObject> >, void *> > > __pair1_;
	compressed_pair<unsigned long, std::__1::__map_value_compare<UITableViewCell *, std::__1::__value_type<UITableViewCell *, id<NSObject> >, std::__1::less<UITableViewCell *>, true> > __pair3_;
} tree<std::__1::__value_type<UITableViewCell *, id<NSObject> >, std::__1::__map_value_compare<UITableViewCell *, std::__1::__value_type<UITableViewCell *, id<NSObject> >, std::__1::less<UITableViewCell *>, true>, std::__1::allocator<std::__1::__value_type<UITableViewCell *, id<NSObject> > > >;

typedef struct map<UITableViewCell *, id<NSObject>, std::__1::less<UITableViewCell *>, std::__1::allocator<std::__1::pair<UITableViewCell *const, id<NSObject> > > > {
	tree<std::__1::__value_type<UITableViewCell *, id<NSObject> >, std::__1::__map_value_compare<UITableViewCell *, std::__1::__value_type<UITableViewCell *, id<NSObject> >, std::__1::less<UITableViewCell *>, true>, std::__1::allocator<std::__1::__value_type<UITableViewCell *, id<NSObject> > > > __tree_;
} map<UITableViewCell *, id<NSObject>, std::__1::less<UITableViewCell *>, std::__1::allocator<std::__1::pair<UITableViewCell *const, id<NSObject> > > >;

typedef struct _compressed_pair<FBComponentTableViewDataSourceCellConfig *, std::__1::default_delete<FBComponentTableViewDataSourceCellConfig> > {
	FBComponentTableViewDataSourceCellConfig __first_;
} compressed_pair<FBComponentTableViewDataSourceCellConfig *, std::__1::default_delete<FBComponentTableViewDataSourceCellConfig> >;

typedef struct unique_ptr<FBComponentTableViewDataSourceCellConfig, std::__1::default_delete<FBComponentTableViewDataSourceCellConfig> > {
	compressed_pair<FBComponentTableViewDataSourceCellConfig *, std::__1::default_delete<FBComponentTableViewDataSourceCellConfig> > __ptr_;
} unique_ptr<FBComponentTableViewDataSourceCellConfig, std::__1::default_delete<FBComponentTableViewDataSourceCellConfig> >;

typedef struct _compressed_pair<unsigned long, std::__1::allocator<std::__1::__hash_node<std::__1::__hash_value_type<__unsafe_unretained Class, FBFeedComponentExperimentCacheContext>, void *> *> > {
	unsigned long long __first_;
} compressed_pair<unsigned long, std::__1::allocator<std::__1::__hash_node<std::__1::__hash_value_type<__unsafe_unretained Class, FBFeedComponentExperimentCacheContext>, void *> *> >;

typedef struct _compressed_pair<unsigned long, std::__1::__unordered_map_hasher<__unsafe_unretained Class, std::__1::__hash_value_type<__unsafe_unretained Class, FBFeedComponentExperimentCacheContext>, FB::HashFunctor<__unsafe_unretained Class>, true> > {
	unsigned long long __first_;
} compressed_pair<unsigned long, std::__1::__unordered_map_hasher<__unsafe_unretained Class, std::__1::__hash_value_type<__unsafe_unretained Class, FBFeedComponentExperimentCacheContext>, FB::HashFunctor<__unsafe_unretained Class>, true> >;

typedef struct _compressed_pair<float, std::__1::__unordered_map_equal<__unsafe_unretained Class, std::__1::__hash_value_type<__unsafe_unretained Class, FBFeedComponentExperimentCacheContext>, FB::EqualFunctor<__unsafe_unretained Class>, true> > {
	float __first_;
} compressed_pair<float, std::__1::__unordered_map_equal<__unsafe_unretained Class, std::__1::__hash_value_type<__unsafe_unretained Class, FBFeedComponentExperimentCacheContext>, FB::EqualFunctor<__unsafe_unretained Class>, true> >;

typedef struct _hash_node_base<std::__1::__hash_node<std::__1::__hash_value_type<__unsafe_unretained Class, FBFeedComponentExperimentCacheContext>, void *> *> {
	__hash_node<std::__1::__hash_value_type<__unsafe_unretained Class, FBFeedComponentExperimentCacheContext>, void *> __next_;
} hash_node_base<std::__1::__hash_node<std::__1::__hash_value_type<__unsafe_unretained Class, FBFeedComponentExperimentCacheContext>, void *> *>;

typedef struct _compressed_pair<std::__1::__hash_node_base<std::__1::__hash_node<std::__1::__hash_value_type<__unsafe_unretained Class, FBFeedComponentExperimentCacheContext>, void *> *>, std::__1::allocator<std::__1::__hash_node<std::__1::__hash_value_type<__unsafe_unretained Class, FBFeedComponentExperimentCacheContext>, void *> > > {
	hash_node_base<std::__1::__hash_node<std::__1::__hash_value_type<__unsafe_unretained Class, FBFeedComponentExperimentCacheContext>, void *> *> __first_;
} compressed_pair<std::__1::__hash_node_base<std::__1::__hash_node<std::__1::__hash_value_type<__unsafe_unretained Class, FBFeedComponentExperimentCacheContext>, void *> *>, std::__1::allocator<std::__1::__hash_node<std::__1::__hash_value_type<__unsafe_unretained Class, FBFeedComponentExperimentCacheContext>, void *> > >;

typedef struct _bucket_list_deallocator<std::__1::allocator<std::__1::__hash_node<std::__1::__hash_value_type<__unsafe_unretained Class, FBFeedComponentExperimentCacheContext>, void *> *> > {
	compressed_pair<unsigned long, std::__1::allocator<std::__1::__hash_node<std::__1::__hash_value_type<__unsafe_unretained Class, FBFeedComponentExperimentCacheContext>, void *> *> > __data_;
} bucket_list_deallocator<std::__1::allocator<std::__1::__hash_node<std::__1::__hash_value_type<__unsafe_unretained Class, FBFeedComponentExperimentCacheContext>, void *> *> >;

typedef struct _compressed_pair<std::__1::__hash_node<std::__1::__hash_value_type<__unsafe_unretained Class, FBFeedComponentExperimentCacheContext>, void *> **, std::__1::__bucket_list_deallocator<std::__1::allocator<std::__1::__hash_node<std::__1::__hash_value_type<__unsafe_unretained Class, FBFeedComponentExperimentCacheContext>, void *> *> > > {
	__hash_node<std::__1::__hash_value_type<__unsafe_unretained Class, FBFeedComponentExperimentCacheContext>, void *> __first_;
	bucket_list_deallocator<std::__1::allocator<std::__1::__hash_node<std::__1::__hash_value_type<__unsafe_unretained Class, FBFeedComponentExperimentCacheContext>, void *> *> > __second_;
} compressed_pair<std::__1::__hash_node<std::__1::__hash_value_type<__unsafe_unretained Class, FBFeedComponentExperimentCacheContext>, void *> **, std::__1::__bucket_list_deallocator<std::__1::allocator<std::__1::__hash_node<std::__1::__hash_value_type<__unsafe_unretained Class, FBFeedComponentExperimentCacheContext>, void *> *> > >;

typedef struct unique_ptr<std::__1::__hash_node<std::__1::__hash_value_type<__unsafe_unretained Class, FBFeedComponentExperimentCacheContext>, void *> *[], std::__1::__bucket_list_deallocator<std::__1::allocator<std::__1::__hash_node<std::__1::__hash_value_type<__unsafe_unretained Class, FBFeedComponentExperimentCacheContext>, void *> *> > > {
	compressed_pair<std::__1::__hash_node<std::__1::__hash_value_type<__unsafe_unretained Class, FBFeedComponentExperimentCacheContext>, void *> **, std::__1::__bucket_list_deallocator<std::__1::allocator<std::__1::__hash_node<std::__1::__hash_value_type<__unsafe_unretained Class, FBFeedComponentExperimentCacheContext>, void *> *> > > __ptr_;
} unique_ptr<std::__1::__hash_node<std::__1::__hash_value_type<__unsafe_unretained Class, FBFeedComponentExperimentCacheContext>, void *> *[], std::__1::__bucket_list_deallocator<std::__1::allocator<std::__1::__hash_node<std::__1::__hash_value_type<__unsafe_unretained Class, FBFeedComponentExperimentCacheContext>, void *> *> > >;

typedef struct _hash_table<std::__1::__hash_value_type<__unsafe_unretained Class, FBFeedComponentExperimentCacheContext>, std::__1::__unordered_map_hasher<__unsafe_unretained Class, std::__1::__hash_value_type<__unsafe_unretained Class, FBFeedComponentExperimentCacheContext>, FB::HashFunctor<__unsafe_unretained Class>, true>, std::__1::__unordered_map_equal<__unsafe_unretained Class, std::__1::__hash_value_type<__unsafe_unretained Class, FBFeedComponentExperimentCacheContext>, FB::EqualFunctor<__unsafe_unretained Class>, true>, std::__1::allocator<std::__1::__hash_value_type<__unsafe_unretained Class, FBFeedComponentExperimentCacheContext> > > {
	unique_ptr<std::__1::__hash_node<std::__1::__hash_value_type<__unsafe_unretained Class, FBFeedComponentExperimentCacheContext>, void *> *[], std::__1::__bucket_list_deallocator<std::__1::allocator<std::__1::__hash_node<std::__1::__hash_value_type<__unsafe_unretained Class, FBFeedComponentExperimentCacheContext>, void *> *> > > __bucket_list_;
	compressed_pair<std::__1::__hash_node_base<std::__1::__hash_node<std::__1::__hash_value_type<__unsafe_unretained Class, FBFeedComponentExperimentCacheContext>, void *> *>, std::__1::allocator<std::__1::__hash_node<std::__1::__hash_value_type<__unsafe_unretained Class, FBFeedComponentExperimentCacheContext>, void *> > > __p1_;
	compressed_pair<unsigned long, std::__1::__unordered_map_hasher<__unsafe_unretained Class, std::__1::__hash_value_type<__unsafe_unretained Class, FBFeedComponentExperimentCacheContext>, FB::HashFunctor<__unsafe_unretained Class>, true> > __p2_;
	compressed_pair<float, std::__1::__unordered_map_equal<__unsafe_unretained Class, std::__1::__hash_value_type<__unsafe_unretained Class, FBFeedComponentExperimentCacheContext>, FB::EqualFunctor<__unsafe_unretained Class>, true> > __p3_;
} hash_table<std::__1::__hash_value_type<__unsafe_unretained Class, FBFeedComponentExperimentCacheContext>, std::__1::__unordered_map_hasher<__unsafe_unretained Class, std::__1::__hash_value_type<__unsafe_unretained Class, FBFeedComponentExperimentCacheContext>, FB::HashFunctor<__unsafe_unretained Class>, true>, std::__1::__unordered_map_equal<__unsafe_unretained Class, std::__1::__hash_value_type<__unsafe_unretained Class, FBFeedComponentExperimentCacheContext>, FB::EqualFunctor<__unsafe_unretained Class>, true>, std::__1::allocator<std::__1::__hash_value_type<__unsafe_unretained Class, FBFeedComponentExperimentCacheContext> > >;

typedef struct unordered_map<__unsafe_unretained Class, FBFeedComponentExperimentCacheContext, FB::HashFunctor<__unsafe_unretained Class>, FB::EqualFunctor<__unsafe_unretained Class>, std::__1::allocator<std::__1::pair<const __unsafe_unretained Class, FBFeedComponentExperimentCacheContext> > > {
	hash_table<std::__1::__hash_value_type<__unsafe_unretained Class, FBFeedComponentExperimentCacheContext>, std::__1::__unordered_map_hasher<__unsafe_unretained Class, std::__1::__hash_value_type<__unsafe_unretained Class, FBFeedComponentExperimentCacheContext>, FB::HashFunctor<__unsafe_unretained Class>, true>, std::__1::__unordered_map_equal<__unsafe_unretained Class, std::__1::__hash_value_type<__unsafe_unretained Class, FBFeedComponentExperimentCacheContext>, FB::EqualFunctor<__unsafe_unretained Class>, true>, std::__1::allocator<std::__1::__hash_value_type<__unsafe_unretained Class, FBFeedComponentExperimentCacheContext> > > __table_;
} unordered_map<__unsafe_unretained Class, FBFeedComponentExperimentCacheContext, FB::HashFunctor<__unsafe_unretained Class>, FB::EqualFunctor<__unsafe_unretained Class>, std::__1::allocator<std::__1::pair<const __unsafe_unretained Class, FBFeedComponentExperimentCacheContext> > >;

typedef struct FBFeedHScrollComponentOffScreenAutoScrollConfig {
	BOOL shouldOffScreenAutoScroll;
	double delayBeforeAutoScroll;
	NSString* hscrollOffsetKey;
} FBFeedHScrollComponentOffScreenAutoScrollConfig;

typedef struct FBFeedHScrollComponentScrollToPreviewConfig {
	BOOL shouldScrollToPreview;
	double delayBeforeScrollToPreview;
	double delayBeforeScrollBackFromPreview;
	double scrollToPreviewPeriod;
	NSString* scrollToPreviewKey;
} FBFeedHScrollComponentScrollToPreviewConfig;

typedef struct FBFeedHscrollPaginatorConfiguration {
	unsigned long long numDotsPerPage;
	unsigned long long numTotalStories;
	BOOL useFixedDotsPerPage;
	UIColor* deselectedColor;
	UIColor* selectedColor;
	UIColor* borderColor;
	double borderWidth;
	double dotsSize;
	double dotSpacing;
	double arrowSpacing;
	BOOL isPaginatorOnTop;
	UIEdgeInsets paginatorMargins;
	UIEdgeInsets paginatorPaddings;
	unsigned long long backgroundStyle;
	SEL didTapPaginatorAction;
	SEL didHorizontallySwipePaginatorAction;
} FBFeedHscrollPaginatorConfiguration;

typedef struct FBFeedHScrollPaginatorDotsConfiguration {
	unsigned long long totalDots;
	UIColor* deselectedColor;
	UIColor* selectedColor;
	UIColor* borderColor;
	double borderWidth;
	double dotsSize;
	UIColor* backgroundColor;
	double dotSpacing;
} FBFeedHScrollPaginatorDotsConfiguration;

typedef struct _compressed_pair<FBFeedInfiniteHScrollEdge *, std::__1::allocator<FBFeedInfiniteHScrollEdge> > {
	FBFeedInfiniteHScrollEdge __first_;
} compressed_pair<FBFeedInfiniteHScrollEdge *, std::__1::allocator<FBFeedInfiniteHScrollEdge> >;

typedef struct vector<FBFeedInfiniteHScrollEdge, std::__1::allocator<FBFeedInfiniteHScrollEdge> > {
	FBFeedInfiniteHScrollEdge __begin_;
	FBFeedInfiniteHScrollEdge __end_;
	compressed_pair<FBFeedInfiniteHScrollEdge *, std::__1::allocator<FBFeedInfiniteHScrollEdge> > __end_cap_;
} vector<FBFeedInfiniteHScrollEdge, std::__1::allocator<FBFeedInfiniteHScrollEdge> >;

typedef struct FBSearchResultsLinkComponentStyle {
	long long layoutType;
} FBSearchResultsLinkComponentStyle;

typedef struct FBLayout {
	CGSize size;
	UIEdgeInsets margins;
} FBLayout;

typedef struct FBWebPivotsToolbarViewMetrics {
	/*function pointer*/void* _vptr$FBMetrics;
	BOOL _initialized;
	double toolbarHeight;
	double toolbarShadowHeight;
	double toolbarEdgePadding;
	double toolbarInterButtonSpacing;
	double toolbarButtonWidth;
} FBWebPivotsToolbarViewMetrics;

typedef struct FBBottomButtonViewComponentStyle {
	UIColor* logoColor;
	UIFont* titleFont;
	UIColor* titleColor;
	UIColor* subtitleColor;
	BOOL stretch;
} FBBottomButtonViewComponentStyle;

typedef struct __CVOpenGLESTextureCache* CVOpenGLESTextureCacheRef;

typedef struct __CVBuffer* CVBufferRef;

typedef struct TexCoordExtent {
	float left;
	float right;
	float bottom;
	float top;
} TexCoordExtent;

typedef struct Snapshot {
	unsigned gl_target;
	unsigned gl_texture;
	TexCoordExtent texCoordExtent;
	unsigned long long bitmapWidth;
	unsigned long long bitmapHeight;
	__CVOpenGLESTextureCache cv_textureCache;
	__CVBuffer cv_pixelBuffer;
	__CVBuffer cv_texture;
} Snapshot;

typedef struct PingPongFilter {
	int pingPong;
	int width;
	int height;
	unsigned bitmapInfo;
	CGColorSpace colorSpace;
	CVBuffer cv_pixelBuffers[2__];
	__CVOpenGLESTextureCache cv_textureCache;
	CVBuffer cv_textures[2__];
	unsigned gl_framebuffers[2];
	unsigned gl_fallback_textures[2];
} PingPongFilter;

typedef struct {
	unsigned texture;
	unsigned saturation;
	unsigned blendWithColor;
} SCD_Struct_FB622;

typedef struct SaturationShader {
	unsigned program;
	SCD_Struct_FB622 uniform;
} SaturationShader;

typedef struct {
	unsigned texture;
	unsigned texOffsetStep;
} SCD_Struct_FB624;

typedef struct BoxBlur1DShader {
	unsigned program;
	SCD_Struct_FB624 uniform;
} BoxBlur1DShader;

typedef struct PositionTexCoordQuad {
	unsigned buffers[2];
} PositionTexCoordQuad;

typedef struct FBFXGeometryEffectShader {
	unsigned program;
	SCD_Struct_FB624 uniform;
} FBFXGeometryEffectShader;

typedef struct TextureShader {
	unsigned program;
	SCD_Struct_FB624 uniform;
} TextureShader;

typedef struct {
	unsigned transform;
	unsigned texture;
	unsigned invBlockSize;
	unsigned alpha;
} SCD_Struct_FB629;

typedef struct FBFXPixellateEffectShader {
	unsigned program;
	SCD_Struct_FB629 uniform;
} FBFXPixellateEffectShader;

typedef struct MNVideoTrimmerVideoInfo {
	SCD_Struct_FB242 length;
	unsigned long long fileSize;
} MNVideoTrimmerVideoInfo;

typedef struct MNTypingCellLayoutSpec {
	double totalHeight;
	CGRect bubbleFrame;
	UIEdgeInsets bubbleContentInset;
	CGRect profileImageFrame;
} MNTypingCellLayoutSpec;

typedef struct FBMinimorphFactor {
	double minimorphFactor;
	double contentsScaleFactor;
} FBMinimorphFactor;

typedef struct FBFloatRange {
	double min;
	double max;
} FBFloatRange;

typedef struct {
	unsigned subtreeNeedsMinimorphUpdate : 1;
	unsigned subtreeDisableMinimorph : 1;
	unsigned hasHadMinimorphContentsScaleApplied : 1;
	unsigned miniSizeCalculated : 1;
	unsigned maxSizeCalculated : 1;
} SCD_Struct_AS635;

typedef struct FBMinimorphInfo {
	FBFloatRange contentsScaleRange;
	FBFloatRange redrawThresholdRange;
} FBMinimorphInfo;

typedef struct ASDisplayNodeExtraIvars {
	unsigned long long _minimorphType;
	FBMinimorphFactor _minimorphFactor;
	FBMinimorphInfo _lastKnownInfo;
	CGSize _miniConstrainedSize;
	CGSize _maxConstrainedSize;
	CGSize _miniSize;
	CGSize _maxSize;
	SCD_Struct_AS635 _flags;
} ASDisplayNodeExtraIvars;

typedef struct {
	CGPoint anchorPoint;
	CGRect bounds;
	CGPoint position;
} SCD_Struct_FB638;

typedef struct __CFSocket* CFSocketRef;

typedef struct jpeg_decompress_struct {
	jpeg_error_mgr err;
	jpeg_memory_mgr mem;
	jpeg_progress_mgr progress;
	void client_data;
	int is_decompressor;
	int global_state;
	jpeg_source_mgr src;
	unsigned image_width;
	unsigned image_height;
	int num_components;
	int jpeg_color_space;
	int out_color_space;
	unsigned scale_num;
	unsigned scale_denom;
	double output_gamma;
	int buffered_image;
	int raw_data_out;
	int dct_method;
	int do_fancy_upsampling;
	int do_block_smoothing;
	int quantize_colors;
	int dither_mode;
	int two_pass_quantize;
	int desired_number_of_colors;
	int enable_1pass_quant;
	int enable_external_quant;
	int enable_2pass_quant;
	unsigned output_width;
	unsigned output_height;
	int out_color_components;
	int output_components;
	int rec_outbuf_height;
	int actual_number_of_colors;
	char* colormap;
	unsigned output_scanline;
	int input_scan_number;
	unsigned input_iMCU_row;
	int output_scan_number;
	unsigned output_iMCU_row;
	int coef_bits[64];
	/*function pointer*/void* quant_tbl_ptrs[4];
	/*function pointer*/void* dc_huff_tbl_ptrs[4];
	/*function pointer*/void* ac_huff_tbl_ptrs[4];
	int data_precision;
	/*function pointer*/void* comp_info;
	int is_baseline;
	int progressive_mode;
	int arith_code;
	unsigned char arith_dc_L[16];
	unsigned char arith_dc_U[16];
	unsigned char arith_ac_K[16];
	unsigned restart_interval;
	int saw_JFIF_marker;
	unsigned char JFIF_major_version;
	unsigned char JFIF_minor_version;
	unsigned char density_unit;
	unsigned short X_density;
	unsigned short Y_density;
	int saw_Adobe_marker;
	unsigned char Adobe_transform;
	int CCIR601_sampling;
	jpeg_marker_struct marker_list;
	int max_h_samp_factor;
	int max_v_samp_factor;
	int min_DCT_h_scaled_size;
	int min_DCT_v_scaled_size;
	unsigned total_iMCU_rows;
	char* sample_range_limit;
	int comps_in_scan;
	/*function pointer*/void* cur_comp_info[4];
	unsigned MCUs_per_row;
	unsigned MCU_rows_in_scan;
	int blocks_in_MCU;
	int MCU_membership[10];
	int Ss;
	int Se;
	int Ah;
	int Al;
	int block_size;
	int natural_order;
	int lim_Se;
	int unread_marker;
	jpeg_decomp_master master;
	jpeg_d_main_controller main;
	jpeg_d_coef_controller coef;
	jpeg_d_post_controller post;
	jpeg_input_controller inputctl;
	jpeg_marker_reader marker;
	jpeg_entropy_decoder entropy;
	jpeg_inverse_dct idct;
	jpeg_upsampler upsample;
	jpeg_color_deconverter cconvert;
	jpeg_color_quantizer cquantize;
} jpeg_decompress_struct;

typedef struct jpeg_error_mgr {
	/*function pointer*/void* error_exit;
	/*function pointer*/void* emit_message;
	/*function pointer*/void* output_message;
	/*function pointer*/void* format_message;
	/*function pointer*/void* reset_error_mgr;
	int msg_code;
	/*function pointer*/void* msg_parm;
	int i[8];
	char s[80];
	int trace_level;
	long long num_warnings;
	char* jpeg_message_table;
	int last_jpeg_message;
	char* addon_message_table;
	int first_addon_message;
	int last_addon_message;
} jpeg_error_mgr;

typedef struct FBProgressiveJPEGErrorManager {
	jpeg_error_mgr pub;
	int setjmp_buffer[48];
} FBProgressiveJPEGErrorManager;

typedef struct FBPJPEGEncodingInfo {
	short _version;
	int _fileSize;
	NSArray* _scanOffsets;
} FBPJPEGEncodingInfo;

typedef struct Optional<FBPJPEGEncodingInfo> {
	/*function pointer*/void* ;
	FBPJPEGEncodingInfo) value_;
	BOOL hasValue_;
} Optional<FBPJPEGEncodingInfo>;

typedef struct _compressed_pair<unsigned long, std::__1::allocator<std::__1::__hash_node<std::__1::__hash_value_type<NSString *, unsigned long>, void *> *> > {
	unsigned long long __first_;
} compressed_pair<unsigned long, std::__1::allocator<std::__1::__hash_node<std::__1::__hash_value_type<NSString *, unsigned long>, void *> *> >;

typedef struct _compressed_pair<unsigned long, std::__1::__unordered_map_hasher<NSString *, std::__1::__hash_value_type<NSString *, unsigned long>, FB::HashFunctor<NSObject *>, true> > {
	unsigned long long __first_;
} compressed_pair<unsigned long, std::__1::__unordered_map_hasher<NSString *, std::__1::__hash_value_type<NSString *, unsigned long>, FB::HashFunctor<NSObject *>, true> >;

typedef struct _compressed_pair<float, std::__1::__unordered_map_equal<NSString *, std::__1::__hash_value_type<NSString *, unsigned long>, FB::EqualFunctor<NSObject *>, true> > {
	float __first_;
} compressed_pair<float, std::__1::__unordered_map_equal<NSString *, std::__1::__hash_value_type<NSString *, unsigned long>, FB::EqualFunctor<NSObject *>, true> >;

typedef struct _hash_node_base<std::__1::__hash_node<std::__1::__hash_value_type<NSString *, unsigned long>, void *> *> {
	__hash_node<std::__1::__hash_value_type<NSString *, unsigned long>, void *> __next_;
} hash_node_base<std::__1::__hash_node<std::__1::__hash_value_type<NSString *, unsigned long>, void *> *>;

typedef struct _compressed_pair<std::__1::__hash_node_base<std::__1::__hash_node<std::__1::__hash_value_type<NSString *, unsigned long>, void *> *>, std::__1::allocator<std::__1::__hash_node<std::__1::__hash_value_type<NSString *, unsigned long>, void *> > > {
	hash_node_base<std::__1::__hash_node<std::__1::__hash_value_type<NSString *, unsigned long>, void *> *> __first_;
} compressed_pair<std::__1::__hash_node_base<std::__1::__hash_node<std::__1::__hash_value_type<NSString *, unsigned long>, void *> *>, std::__1::allocator<std::__1::__hash_node<std::__1::__hash_value_type<NSString *, unsigned long>, void *> > >;

typedef struct _bucket_list_deallocator<std::__1::allocator<std::__1::__hash_node<std::__1::__hash_value_type<NSString *, unsigned long>, void *> *> > {
	compressed_pair<unsigned long, std::__1::allocator<std::__1::__hash_node<std::__1::__hash_value_type<NSString *, unsigned long>, void *> *> > __data_;
} bucket_list_deallocator<std::__1::allocator<std::__1::__hash_node<std::__1::__hash_value_type<NSString *, unsigned long>, void *> *> >;

typedef struct _compressed_pair<std::__1::__hash_node<std::__1::__hash_value_type<NSString *, unsigned long>, void *> **, std::__1::__bucket_list_deallocator<std::__1::allocator<std::__1::__hash_node<std::__1::__hash_value_type<NSString *, unsigned long>, void *> *> > > {
	__hash_node<std::__1::__hash_value_type<NSString *, unsigned long>, void *> __first_;
	bucket_list_deallocator<std::__1::allocator<std::__1::__hash_node<std::__1::__hash_value_type<NSString *, unsigned long>, void *> *> > __second_;
} compressed_pair<std::__1::__hash_node<std::__1::__hash_value_type<NSString *, unsigned long>, void *> **, std::__1::__bucket_list_deallocator<std::__1::allocator<std::__1::__hash_node<std::__1::__hash_value_type<NSString *, unsigned long>, void *> *> > >;

typedef struct unique_ptr<std::__1::__hash_node<std::__1::__hash_value_type<NSString *, unsigned long>, void *> *[], std::__1::__bucket_list_deallocator<std::__1::allocator<std::__1::__hash_node<std::__1::__hash_value_type<NSString *, unsigned long>, void *> *> > > {
	compressed_pair<std::__1::__hash_node<std::__1::__hash_value_type<NSString *, unsigned long>, void *> **, std::__1::__bucket_list_deallocator<std::__1::allocator<std::__1::__hash_node<std::__1::__hash_value_type<NSString *, unsigned long>, void *> *> > > __ptr_;
} unique_ptr<std::__1::__hash_node<std::__1::__hash_value_type<NSString *, unsigned long>, void *> *[], std::__1::__bucket_list_deallocator<std::__1::allocator<std::__1::__hash_node<std::__1::__hash_value_type<NSString *, unsigned long>, void *> *> > >;

typedef struct _hash_table<std::__1::__hash_value_type<NSString *, unsigned long>, std::__1::__unordered_map_hasher<NSString *, std::__1::__hash_value_type<NSString *, unsigned long>, FB::HashFunctor<NSObject *>, true>, std::__1::__unordered_map_equal<NSString *, std::__1::__hash_value_type<NSString *, unsigned long>, FB::EqualFunctor<NSObject *>, true>, std::__1::allocator<std::__1::__hash_value_type<NSString *, unsigned long> > > {
	unique_ptr<std::__1::__hash_node<std::__1::__hash_value_type<NSString *, unsigned long>, void *> *[], std::__1::__bucket_list_deallocator<std::__1::allocator<std::__1::__hash_node<std::__1::__hash_value_type<NSString *, unsigned long>, void *> *> > > __bucket_list_;
	compressed_pair<std::__1::__hash_node_base<std::__1::__hash_node<std::__1::__hash_value_type<NSString *, unsigned long>, void *> *>, std::__1::allocator<std::__1::__hash_node<std::__1::__hash_value_type<NSString *, unsigned long>, void *> > > __p1_;
	compressed_pair<unsigned long, std::__1::__unordered_map_hasher<NSString *, std::__1::__hash_value_type<NSString *, unsigned long>, FB::HashFunctor<NSObject *>, true> > __p2_;
	compressed_pair<float, std::__1::__unordered_map_equal<NSString *, std::__1::__hash_value_type<NSString *, unsigned long>, FB::EqualFunctor<NSObject *>, true> > __p3_;
} hash_table<std::__1::__hash_value_type<NSString *, unsigned long>, std::__1::__unordered_map_hasher<NSString *, std::__1::__hash_value_type<NSString *, unsigned long>, FB::HashFunctor<NSObject *>, true>, std::__1::__unordered_map_equal<NSString *, std::__1::__hash_value_type<NSString *, unsigned long>, FB::EqualFunctor<NSObject *>, true>, std::__1::allocator<std::__1::__hash_value_type<NSString *, unsigned long> > >;

typedef struct unordered_map<NSString *, unsigned long, FB::HashFunctor<NSObject *>, FB::EqualFunctor<NSObject *>, std::__1::allocator<std::__1::pair<NSString *const, unsigned long> > > {
	hash_table<std::__1::__hash_value_type<NSString *, unsigned long>, std::__1::__unordered_map_hasher<NSString *, std::__1::__hash_value_type<NSString *, unsigned long>, FB::HashFunctor<NSObject *>, true>, std::__1::__unordered_map_equal<NSString *, std::__1::__hash_value_type<NSString *, unsigned long>, FB::EqualFunctor<NSObject *>, true>, std::__1::allocator<std::__1::__hash_value_type<NSString *, unsigned long> > > __table_;
} unordered_map<NSString *, unsigned long, FB::HashFunctor<NSObject *>, FB::EqualFunctor<NSObject *>, std::__1::allocator<std::__1::pair<NSString *const, unsigned long> > >;

typedef struct FBStreamingFlagsManager {
	unordered_map<NSString *, unsigned long, FB::HashFunctor<NSObject *>, FB::EqualFunctor<NSObject *>, std::__1::allocator<std::__1::pair<NSString *const, unsigned long> > > _maxImageFlagPerUrlKey;
	Mutex _lock;
} FBStreamingFlagsManager;

typedef struct _compressed_pair<FBLigerHTTPCallbacks *, std::__1::default_delete<FBLigerHTTPCallbacks> > {
	FBLigerHTTPCallbacks __first_;
} compressed_pair<FBLigerHTTPCallbacks *, std::__1::default_delete<FBLigerHTTPCallbacks> >;

typedef struct unique_ptr<FBLigerHTTPCallbacks, std::__1::default_delete<FBLigerHTTPCallbacks> > {
	compressed_pair<FBLigerHTTPCallbacks *, std::__1::default_delete<FBLigerHTTPCallbacks> > __ptr_;
} unique_ptr<FBLigerHTTPCallbacks, std::__1::default_delete<FBLigerHTTPCallbacks> >;

typedef struct duration<long long, std::__1::ratio<1, 1> > {
	long long __rep_;
} duration<long long, std::__1::ratio<1, 1> >;

typedef struct _compressed_pair<proxygen::httpclient::monitor::BandwidthMonitor *, std::__1::default_delete<proxygen::httpclient::monitor::BandwidthMonitor> > {
	BandwidthMonitor __first_;
} compressed_pair<proxygen::httpclient::monitor::BandwidthMonitor *, std::__1::default_delete<proxygen::httpclient::monitor::BandwidthMonitor> >;

typedef struct unique_ptr<proxygen::httpclient::monitor::BandwidthMonitor, std::__1::default_delete<proxygen::httpclient::monitor::BandwidthMonitor> > {
	compressed_pair<proxygen::httpclient::monitor::BandwidthMonitor *, std::__1::default_delete<proxygen::httpclient::monitor::BandwidthMonitor> > __ptr_;
} unique_ptr<proxygen::httpclient::monitor::BandwidthMonitor, std::__1::default_delete<proxygen::httpclient::monitor::BandwidthMonitor> >;

typedef struct shared_ptr<const facebook::tigon::TigonBuffer> {
	TigonBuffer __ptr_;
	__shared_weak_count __cntrl_;
} shared_ptr<const facebook::tigon::TigonBuffer>;

typedef struct _compressed_pair<facebook::tigon::TigonCallbacks *, std::__1::default_delete<facebook::tigon::TigonCallbacks> > {
	TigonCallbacks __first_;
} compressed_pair<facebook::tigon::TigonCallbacks *, std::__1::default_delete<facebook::tigon::TigonCallbacks> >;

typedef struct unique_ptr<facebook::tigon::TigonCallbacks, std::__1::default_delete<facebook::tigon::TigonCallbacks> > {
	compressed_pair<facebook::tigon::TigonCallbacks *, std::__1::default_delete<facebook::tigon::TigonCallbacks> > __ptr_;
} unique_ptr<facebook::tigon::TigonCallbacks, std::__1::default_delete<facebook::tigon::TigonCallbacks> >;

typedef struct _compressed_pair<FBTigonService *, std::__1::default_delete<FBTigonService> > {
	FBTigonService __first_;
} compressed_pair<FBTigonService *, std::__1::default_delete<FBTigonService> >;

typedef struct unique_ptr<FBTigonService, std::__1::default_delete<FBTigonService> > {
	compressed_pair<FBTigonService *, std::__1::default_delete<FBTigonService> > __ptr_;
} unique_ptr<FBTigonService, std::__1::default_delete<FBTigonService> >;

typedef struct __SecRandom* SecRandomRef;

typedef struct FBAConfig {
	basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char> > appId;
	basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char> > appSecret;
	basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char> > appVersion;
	basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char> > deviceId;
	basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char> > logDirectory;
	basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char> > hostname;
	/*function pointer*/void* parameterCallbacks;
	unsigned numParameterCallbacks;
} FBAConfig;

