/*
* This header is generated by classdump-dyld 1.0
* on Friday, August 26, 2016 at 5:18:36 PM British Summer Time
* Operating System: Version 9.3.3 (Build 13G34)
* Image Source: /var/containers/Bundle/Application/6F5201FD-3D2F-4BE1-80E5-E1251C7564E3/Messenger.app/Messenger
* classdump-dyld is licensed under GPLv3, Copyright Â© 2013-2016 by Elias Limneos.
*/

#import <Messenger/Messenger-Structs.h>
#import <Messenger/FNFDataLoader.h>

@protocol FNFDataLoaderDelegate, FNFTimerManager, OS_dispatch_queue, FNFTimer;
@class FNFAssetResourceLoader, FNFDataBlockDistributor, NSObject, NSURL, NSData, FNFAssetResourceLoadingRequest, NSString, NSMutableArray, FNFDashPlaylistData, FNFDashAdaptiveBitrateSelector;

@interface FNFDashDataLoader : NSObject <FNFDataLoader> {

	id<FNFDataLoaderDelegate> _delegate;
	FNFAssetResourceLoader* _resourceLoader;
	FNFDataBlockDistributor* _dataBlockDistributors[2];
	id<FNFTimerManager> _timerMananger;
	NSObject*<OS_dispatch_queue> _dispatchQueue;
	NSURL* _mpdURL;
	NSData* _mpdData;
	NSData* _initialMpdData;
	FNFAssetResourceLoadingRequest* _currentResourceLoaderRequests[2];
	FNFAssetResourceLoadingRequest* _currentResourceLoaderRequestForPlaylist;
	FNFTrackDownloaderState _downloadTrackers[2];
	BOOL _fullyLoaded[2];
	unsigned long long _bitrates[2];
	NSString* _representationId;
	NSString* _qualityLabel;
	int _urlIndex[2];
	BOOL _segmented;
	NSMutableArray* _segmentedURLs[2];
	NSURL* _segmentedInitURLs[2];
	BOOL _fetchedInitURL[2];
	NSURL* _cachedSegmentURLs[2];
	BOOL _dynamic;
	BOOL _live;
	id<FNFTimer> _playlistRefreshTimer;
	FNFDashPlaylistData* _playlistData;
	int _consecutiveStaleUpdates;
	int _consecutiveStaleUpdatesThreshold;
	int _segmentsFromEndToStart;
	NSURL* _fragmentedURLs[2];
	unsigned long long _fileSizes[2];
	unsigned long long _fragmentedInitializationLengths[2];
	int _indexToFetchTo;
	BOOL _parsedPlaylist;
	BOOL _prefetchFirstDataSegment;
	FNFDashAdaptiveBitrateSelector* _abrSelector;
	BOOL _async;

}
-(id)debugDetails;
-(id)representationId;
-(BOOL)isFragmented;
-(void)_cancelPlaylistTimer;
-(void)_handleMpdData:(id)arg1 ;
-(void)_fetchNextSegmentForTrack:(long long)arg1 ;
-(void)_fetchNextFragmentedRangeAtOffset:(unsigned long long)arg1 length:(unsigned long long)arg2 track:(long long)arg3 ;
-(void)_updatePlaylist;
-(void)_playlistLoadingRequestCallback:(id)arg1 error:(id)arg2 ;
-(void)_fetchUrlRequest:(id)arg1 offset:(unsigned long long)arg2 length:(unsigned long long)arg3 track:(long long)arg4 ;
-(void)_prefetchSegmentedUrlRequest:(id)arg1 ;
-(void)_dataCallback:(id)arg1 offset:(unsigned long long)arg2 dataRequest:(id)arg3 track:(long long)arg4 ;
-(void)_dataFinished:(id)arg1 dataRequest:(id)arg2 contentInfo:(id)arg3 loadingRequest:(id)arg4 track:(long long)arg5 ;
-(void)fetchFirstRequestForSeconds:(unsigned)arg1 initializationAtomSize:(unsigned long long)arg2 track:(long long)arg3 ;
-(void)seekForwardToOffset:(unsigned long long)arg1 forTrack:(long long)arg2 ;
-(void)fetchToOffset:(unsigned long long)arg1 forTrack:(long long)arg2 ;
-(void)resetWithNewVideoDataBlockDistributor:(id)arg1 audioDataBlockDistributor:(id)arg2 ;
-(unsigned long long)currentReceiveOffsetForTrack:(long long)arg1 ;
-(BOOL)isStreamDry;
-(BOOL)isFullyDownloaded:(long long)arg1 ;
-(BOOL)live;
-(BOOL)fetchInProgressForTrack:(long long)arg1 ;
-(BOOL)isDash;
-(id)initWithMpdUrl:(id)arg1 mpdData:(id)arg2 videoDataBlockDistributor:(id)arg3 audioDataBlockDistributor:(id)arg4 abrSelector:(id)arg5 segmentsFromEndToStart:(int)arg6 staleMpdUpdatesThreshold:(int)arg7 prefetchFirstDataSegment:(BOOL)arg8 ;
-(id)segmentedInitUrlForTrack:(long long)arg1 ;
-(id)segmentedUrlForTrack:(long long)arg1 ;
-(id)allSegmentedUrlsForTrack:(long long)arg1 ;
-(int)segmentedCurrentRequestOffsetForTrack:(long long)arg1 ;
-(int)indexToFetchTo;
-(void)_forTestingOverrideResourceLoader:(id)arg1 ;
-(void)_forTestingOverrideTimerManager:(id)arg1 ;
-(void)_forTestingMakeSynchronous;
-(void)setDelegate:(id)arg1 ;
-(void)dealloc;
-(id)description;
-(void)resume;
-(void)pause;
-(BOOL)isSegmented;
-(id)playlistData;
-(void)cancelRequests;
-(id)resourceLoader;
@end

