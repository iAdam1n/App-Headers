/*
* This header is generated by classdump-dyld 1.0
* on Friday, August 26, 2016 at 5:18:22 PM British Summer Time
* Operating System: Version 9.3.3 (Build 13G34)
* Image Source: /var/containers/Bundle/Application/6F5201FD-3D2F-4BE1-80E5-E1251C7564E3/Messenger.app/Messenger
* classdump-dyld is licensed under GPLv3, Copyright Â© 2013-2016 by Elias Limneos.
*/

#import <Messenger/FBMSPErrorRetryManagerDelegate.h>
#import <Messenger/FBMessagingStoreDatabaseLifetimeEventListening.h>
#import <Messenger/FBViewerContextClassProvidable.h>
#import <Messenger/FBMMessagingStoreRestoreStateListening.h>
#import <Messenger/MNMessagesSyncDeltaHandlerDataRefreshing.h>
#import <Messenger/MNMessagesSyncCoordinatorRefreshRetrierDelegate.h>

@protocol MNSyncProtocolConfigurationCreating;
@class FBMSPDataStore, MNSyncProtocolQueueRequester, MNSyncProtocolDeltaRequester, NSNotificationCenter, FBMMQTTManager, FBMSPErrorRetryManager, MNMessagesSyncCoordinatorRefreshRetrier, FBMessagingStoreDatabaseLifetimeEventListeningAnnouncer, MNSyncProtocolCoordinatorListenerAnnouncer, FBAnalytics, MNMessagesSyncSnapshotPersistenceRunner, NSString;

@interface FBMSPCoordinator : NSObject <FBMSPErrorRetryManagerDelegate, FBMessagingStoreDatabaseLifetimeEventListening, FBViewerContextClassProvidable, FBMMessagingStoreRestoreStateListening, MNMessagesSyncDeltaHandlerDataRefreshing, MNMessagesSyncCoordinatorRefreshRetrierDelegate> {

	FBMSPDataStore* _dataStore;
	MNSyncProtocolQueueRequester* _queueRequester;
	MNSyncProtocolDeltaRequester* _deltaRequester;
	NSNotificationCenter* _notificationCenter;
	FBMMQTTManager* _mqttManager;
	FBMSPErrorRetryManager* _retryManager;
	MNMessagesSyncCoordinatorRefreshRetrier* _coordinatorRefreshRetier;
	FBMessagingStoreDatabaseLifetimeEventListeningAnnouncer* _databaseLifetimeEventAnnouncer;
	MNSyncProtocolCoordinatorListenerAnnouncer* _spCoordinatorAnnouncer;
	FBAnalytics* _analyticsLogger;
	MNMessagesSyncSnapshotPersistenceRunner* _snapshotPersistenceRunner;
	id<MNSyncProtocolConfigurationCreating> _configFactory;
	BOOL _didSuccessfullySendQueueParams;
	long long _lastDeltaRequestSequenceId;
	unsigned long long _lastDeltaRequestTimeInMS;
	BOOL _didStart;

}

@property (readonly) unsigned long long hash; 
@property (readonly) Class superclass; 
@property (copy,readonly) NSString * description; 
@property (copy,readonly) NSString * debugDescription; 
-(id)initWithProviderMapData:(id)arg1 ;
-(void)didOpenDatabase;
-(void)didFailToOpenDatabaseWithError:(id)arg1 ;
-(void)didCreateDatabaseTables;
-(void)didDiscardDatabaseFile;
-(void)willDiscardDatabaseContents;
-(void)addSPCoordinatorListener:(id)arg1 ;
-(void)messagingStoreDidFailToRestoreWithError:(id)arg1 ;
-(void)messagingStoreDidCompleteRestore;
-(void)removeSPCoordinatorListener:(id)arg1 ;
-(id)initWithDataStore:(id)arg1 queueRequester:(id)arg2 deltaRequester:(id)arg3 configFactory:(id)arg4 mqttManager:(id)arg5 retryManager:(id)arg6 notificationCenter:(id)arg7 analyticsLogger:(id)arg8 snapshotPersistenceRunner:(id)arg9 coordinatorRefreshRetier:(id)arg10 databaseLifetimeEventAnnouncer:(id)arg11 ;
-(void)_handleRefreshForNotification:(id)arg1 ;
-(void)_onMQTTSubscribeToPatternNotification:(id)arg1 ;
-(void)_requestSyncProtocolQueue;
-(void)_fetchDeltaWithShouldForce:(BOOL)arg1 ;
-(void)_handleNewSequenceIdFromSnapshotRefresh:(long long)arg1 ;
-(void)_refreshWithShouldForce:(BOOL)arg1 skipDeltaFetch:(BOOL)arg2 ;
-(void)_handleRefreshForReason:(long long)arg1 ;
-(void)_logCreateQueueRequestSucceeded;
-(void)_logCreateQueueRequestFailedWithError:(id)arg1 ;
-(BOOL)_shouldCoalesceDeltaRequest;
-(void)_logGetDiffsRequestSucceeded;
-(void)_logGetDiffsRequestFailedWithError:(id)arg1 ;
-(void)_logCoordinatorRefreshWithReason:(long long)arg1 ;
-(void)messagesSyncCoordinatorShouldPerformRefreshNow;
-(void)snapshotShouldBeFiredDueToForceFetchInboxDeltaReceived;
-(void)snapshotShouldBeFiredDueToQueueErrors;
-(void)snapshotShouldBeFiredDueToErrorProcessingDeltas;
-(void)syncProtocolConnectionShouldBeRefreshedDueToSequenceIdGap;
-(void)syncProtocolConnectionShouldBeRefreshedDueToTemporarilyUnavailableError;
-(void)syncProtocolErrorRetryManager:(id)arg1 didFetchDataUpToSequenceId:(long long)arg2 ;
-(void)dealloc;
-(void)stop;
-(void)start;
@end

