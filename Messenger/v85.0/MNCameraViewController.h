/*
* This header is generated by classdump-dyld 1.0
* on Friday, August 26, 2016 at 5:18:21 PM British Summer Time
* Operating System: Version 9.3.3 (Build 13G34)
* Image Source: /var/containers/Bundle/Application/6F5201FD-3D2F-4BE1-80E5-E1251C7564E3/Messenger.app/Messenger
* classdump-dyld is licensed under GPLv3, Copyright Â© 2013-2016 by Elias Limneos.
*/

#import <Messenger/Messenger-Structs.h>
#import <UIKit/UIViewController.h>
#import <Messenger/FBCaptureManagerListener.h>
#import <Messenger/FBExpanding.h>
#import <Messenger/MNCameraViewDelegate.h>
#import <Messenger/MNCameraPreviewViewControllerDelegate.h>
#import <Messenger/MNPermissionsViewControllerDelegate.h>
#import <UIKit/UIAlertViewDelegate.h>

@protocol MNCameraSettingsInterface, MNCameraDeviceCycling, FBOrientationTracking, MNCameraViewControllerDelegate;
@class FBCaptureManager, MNSoundController, NSTimer, FBUserSession, MNVideoAnalyticsLogger, MNVideoRecordEventListenerAnnouncer, MNSelfieCamLoadPerfLogger, MNSelfieCamLoadEventListenerAnnouncer, MNCameraPermissionsLogger, MNPermissionsViewController, MNPermissionsWrapperView, MNCameraCapturedPhoto, MNCameraCapturedVideo, MNCameraPreviewViewController, FBCameraRollWriter, NSString, FBLazyCreator, MNCameraView;

@interface MNCameraViewController : UIViewController <FBCaptureManagerListener, FBExpanding, MNCameraViewDelegate, MNCameraPreviewViewControllerDelegate, MNPermissionsViewControllerDelegate, UIAlertViewDelegate> {

	FBCaptureManager* _captureManager;
	MNSoundController* _soundController;
	NSTimer* _startRecordingTimer;
	BOOL _isObservingOrientationNotifications;
	FBUserSession* _userSession;
	BOOL _reachedMaxRecordingLimit;
	MNVideoAnalyticsLogger* _videoAnalyticsLogger;
	MNVideoRecordEventListenerAnnouncer* _videoRecordEventAnnouncer;
	MNSelfieCamLoadPerfLogger* _selfieCamLoadPerfLogger;
	MNSelfieCamLoadEventListenerAnnouncer* _selfieCamLoadEventAnnouncer;
	NSTimer* _videoTimer;
	id<MNCameraSettingsInterface> _cameraSettings;
	id<MNCameraDeviceCycling> _cameraCycler;
	id<FBOrientationTracking> _orientationTracker;
	BOOL _sendOrPreviewIsWaitingOnAssetWrite;
	unsigned long long _appearanceState;
	MNCameraPermissionsLogger* _permissionsLogger;
	MNPermissionsViewController* _permissionsViewController;
	MNPermissionsWrapperView* _permissionsWrapperView;
	MNCameraCapturedPhoto* _photoCapture;
	MNCameraCapturedVideo* _videoCapture;
	MNCameraPreviewViewController* _previewViewController;
	FBCameraRollWriter* _cameraRollWriter;
	long long _permissionCheckStatus;
	long long _flashMode;
	NSString* _applicationName;
	BOOL _shouldAllowVideoCapture;
	FBLazyCreator* _cameraImprovementFilterRemovalExperimentContextCreator;
	double _zoomAnchor;
	FBLazyCreator* _cameraQuickReplyExperimentContextCreator;
	BOOL _allowTapToEnhance;
	id<MNCameraViewControllerDelegate> _delegate;
	MNCameraView* _cameraView;

}

@property (nonatomic,retain) MNCameraView * cameraView;                                       //@synthesize cameraView=_cameraView - In the implementation block
@property (assign,nonatomic,__weak) id<MNCameraViewControllerDelegate> delegate;              //@synthesize delegate=_delegate - In the implementation block
@property (assign,nonatomic) BOOL allowTapToEnhance;                                          //@synthesize allowTapToEnhance=_allowTapToEnhance - In the implementation block
@property (readonly) unsigned long long hash; 
@property (readonly) Class superclass; 
@property (copy,readonly) NSString * description; 
@property (copy,readonly) NSString * debugDescription; 
-(void)captureManagerCapturedImage:(id)arg1 metadata:(id)arg2 cameraPosition:(long long)arg3 orientation:(long long)arg4 ;
-(void)captureManagerCapturedVideo:(id)arg1 thumbnail:(id)arg2 cameraPosition:(long long)arg3 ;
-(void)captureManagerDidFailToCaptureImage;
-(void)captureManagerDidFailToCaptureVideo;
-(void)captureManagerPreviewDidLoad:(id)arg1 ;
-(void)captureManagerHasFinishedLoadingAudioSession;
-(void)captureManagerDidFailToLoadAudioSessionWithError:(id)arg1 ;
-(void)captureManagerHasFinishedLoadingCaptureSession;
-(void)captureManagerHasEndedCaptureSession;
-(void)captureManagerUpdatedPreviousCaptureDevice:(id)arg1 toCurrentCaptureDevice:(id)arg2 ;
-(void)_startObservingIfNeeded;
-(void)_stopObservingIfNeeded;
-(void)_handleOrientationDidChange:(id)arg1 ;
-(void)_updateViewForCurrentOrientation;
-(id)initWithSoundController:(id)arg1 captureManager:(id)arg2 cameraSettings:(id)arg3 videoAnalyticsLogger:(id)arg4 selfieCamLoadPerfLogger:(id)arg5 userSession:(id)arg6 applicationName:(id)arg7 cameraCycler:(id)arg8 orientationTracker:(id)arg9 shouldAllowVideoCapture:(BOOL)arg10 ;
-(void)_initPermissionsViewControllerIfNecessary;
-(void)_captureImage;
-(void)_setupTorch:(long long)arg1 ;
-(void)_photoDidCapture;
-(void)_completePhotoCapture:(id)arg1 ;
-(void)_completeVideoCapture:(id)arg1 ;
-(void)_videoDidCapture;
-(void)_loadPreviewLayerCameraOptions;
-(void)_completeCapture;
-(id)currentCaptureDevice;
-(void)switchToCaptureDeviceWithID:(id)arg1 ;
-(void)setExpansionProgress:(double)arg1 ;
-(BOOL)shouldAllowInteractiveExpanding;
-(void)captureManagerCapturedFrame:(opaqueCMSampleBufferRef)arg1 filteredBuffer:(opaqueCMSampleBufferRef)arg2 startedRecording:(BOOL)arg3 ;
-(void)cameraPreviewViewControllerDidPressRetakeButton:(id)arg1 ;
-(void)cameraPreviewViewControllerDidPressSendButton:(id)arg1 ;
-(void)_initPreviewViewControllerIfNecessary;
-(void)_requestPermissions;
-(void)_startCaptureManagerSession;
-(void)setCameraViewUsesFullscreenLayout:(BOOL)arg1 ;
-(void)_updatePreviewViewControllerIsFullScreen:(BOOL)arg1 ;
-(void)setCameraViewFullScreenTransitionProgress:(double)arg1 ;
-(void)_enterCaptureMode;
-(void)_showSaveToCameraRollAlertView;
-(void)_updateCaptureInterfaceRotationAngle;
-(void)_startRecording;
-(void)_reachedMaxVideoLength;
-(BOOL)_shouldAllowToggleFullScreen;
-(BOOL)_shouldShowSelfieCamInstructions;
-(double)_calculateInterfaceRotationAngle;
-(void)_updateSelfieCamInstructionsVisibility;
-(void)_transformPreviewLayerForInterfaceOrientation;
-(void)_previewPhotoCapture;
-(void)_previewVideoCapture;
-(void)permissionsViewControllerDidPressDismissButton:(id)arg1 ;
-(void)permissionsViewControllerDidPressRequest:(id)arg1 ;
-(CGSize)imageOverlaySize;
-(BOOL)allowTapToEnhance;
-(void)cameraViewDidSelectSwitchCamera:(id)arg1 ;
-(void)cameraViewDidPressFullscreenButton:(id)arg1 ;
-(void)cameraViewDidPressCloseButton:(id)arg1 ;
-(void)cameraViewDidPresentMicrophonePermissionsWarning:(id)arg1 ;
-(void)cameraViewDidUpdateFlashMode:(long long)arg1 ;
-(void)cameraViewDidSelectCaptureImage:(id)arg1 ;
-(void)cameraViewDidStartRecording:(id)arg1 ;
-(void)cameraViewDidStopRecording:(id)arg1 duration:(double)arg2 ;
-(void)cameraViewDidCancelRecording:(id)arg1 duration:(double)arg2 ;
-(void)cameraView:(id)arg1 didTapAtPoint:(CGPoint)arg2 ;
-(void)cameraViewDidPinch:(id)arg1 ;
-(void)setAllowTapToEnhance:(BOOL)arg1 ;
-(void)setDelegate:(id<MNCameraViewControllerDelegate>)arg1 ;
-(id<MNCameraViewControllerDelegate>)delegate;
-(BOOL)prefersStatusBarHidden;
-(void)reset;
-(BOOL)shouldAutorotate;
-(void)alertView:(id)arg1 willDismissWithButtonIndex:(long long)arg2 ;
-(void)loadView;
-(void)viewWillAppear:(BOOL)arg1 ;
-(void)viewDidLoad;
-(void)viewDidAppear:(BOOL)arg1 ;
-(void)viewWillDisappear:(BOOL)arg1 ;
-(void)viewDidDisappear:(BOOL)arg1 ;
-(void)didRotateFromInterfaceOrientation:(long long)arg1 ;
-(void)_stopRecording;
-(MNCameraView *)cameraView;
-(void)setCameraView:(MNCameraView *)arg1 ;
@end

