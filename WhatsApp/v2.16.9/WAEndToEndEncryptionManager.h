/*
* This header is generated by classdump-dyld 1.0
* on Thursday, August 25, 2016 at 11:47:04 PM British Summer Time
* Operating System: Version 9.3.3 (Build 13G34)
* Image Source: /var/containers/Bundle/Application/342EE397-EC3B-4D13-968C-80EF1D13592D/WhatsApp.app/WhatsApp
* classdump-dyld is licensed under GPLv3, Copyright Â© 2013-2016 by Elias Limneos.
*/

#import <WhatsApp/WhatsApp-Structs.h>
#import <WhatsApp/WAUpgradeCallback.h>
#import <WhatsApp/WAAxolotlStoreDelegate.h>

@protocol OS_dispatch_group;
@class WASignalCoordinator, NSMutableDictionary, NSObject, NSMutableSet, NSString;

@interface WAEndToEndEncryptionManager : NSObject <WAUpgradeCallback, WAAxolotlStoreDelegate> {

	BOOL _needServerRegistration;
	WASignalCoordinator* _signalCoordinator;
	NSMutableDictionary* _retryJobDictionary;
	NSMutableDictionary* _pendingTasksForJid;
	BOOL _registrationOnIdMismatchPermitted;
	NSObject*<OS_dispatch_group> _registrationDispatchGroup;
	BOOL _digestCheckPending;
	NSMutableSet* _pendingKeyRequestJids;
	BOOL _needPhoneRestart;
	unsigned _registrationId;

}

@property (assign) unsigned registrationId;                         //@synthesize registrationId=_registrationId - In the implementation block
@property (assign,nonatomic) BOOL needPhoneRestart;                 //@synthesize needPhoneRestart=_needPhoneRestart - In the implementation block
@property (readonly) unsigned long long hash; 
@property (readonly) Class superclass; 
@property (copy,readonly) NSString * description; 
@property (copy,readonly) NSString * debugDescription; 
+(void)wa_didUpgradeFrom:(id)arg1 to:(id)arg2 ;
+(void)setNeedDigestCheckFlag;
+(unsigned long long)wmCipherTypeFromAxolotlCipherType:(int)arg1 ;
+(id)xmppCipherTypeStringFromWMCipherType:(unsigned long long)arg1 ;
+(unsigned long long)wmCipherTypeFromXMPPCipherTypeString:(id)arg1 ;
+(id)sharedManager;
-(void)xmppConnectionStateDidChange:(id)arg1 ;
-(void)sendE2eMessage:(id)arg1 forParticipant:(id)arg2 ;
-(BOOL)shouldEncryptMessage:(id)arg1 ;
-(BOOL)needPhoneRestart;
-(BOOL)regenerateIdentity;
-(BOOL)preflightChatSessionForSendingDocuments:(id)arg1 showingErrorFromViewControllerIfNeeded:(id)arg2 ;
-(unsigned)registrationId;
-(id)e2eMessageForMessage:(id)arg1 forParticipant:(id)arg2 errorReason:(out int*)arg3 ;
-(BOOL)shouldEncryptSharedItem:(id)arg1 ;
-(id)e2eMessageForSharedItem:(id)arg1 errorReason:(out int*)arg2 ;
-(BOOL)areCapabilities:(id)arg1 enabledForChatSession:(id)arg2 unsupportedJIDs:(id*)arg3 ;
-(BOOL)shouldEncryptAudioForChatSession:(id)arg1 ;
-(id)fetchLocalKeyBundle;
-(void)didReceiveRetryReceiptForMessageWithStanzaId:(id)arg1 fromJid:(id)arg2 participantJid:(id)arg3 registrationId:(int)arg4 retryCount:(unsigned)arg5 ;
-(void)retrySendMessageWithStanzaID:(id)arg1 fromJID:(id)arg2 participantJID:(id)arg3 retryCount:(unsigned)arg4 ;
-(void)didReceiveUnknownTagsReceiptForStanzaID:(id)arg1 fromJID:(id)arg2 participantJID:(id)arg3 unknownTags:(id)arg4 ;
-(void)serverRejectRetryForReceipt:(id)arg1 registrationId:(int)arg2 fromJID:(id)arg3 participanr:(id)arg4 ;
-(void)loadAndRegisterIfNeeded;
-(void)registerWithServerWithCompletion:(/*^block*/id)arg1 ;
-(id)plaintextFromStandardCiphertext:(id)arg1 axolotlAddress:(signal_protocol_address*)arg2 axolotlErrno:(int*)arg3 ;
-(id)plaintextFromPreKeyCiphertext:(id)arg1 axolotlAddress:(signal_protocol_address*)arg2 axolotlErrno:(int*)arg3 ;
-(int)fsFailureReasonForAxolotlError:(int)arg1 ;
-(id)plaintextFromSenderKeyCiphertext:(id)arg1 axolotlSenderKeyName:(signal_protocol_sender_key_name*)arg2 axolotlErrno:(int*)arg3 ;
-(void)processSenderKeyDistributionMessageData:(id)arg1 axolotlSenderKeyName:(signal_protocol_sender_key_name*)arg2 errorReason:(int*)arg3 ;
-(double)fsFailureReasonForProtobufError:(int)arg1 ;
-(id)decryptedE2eV1MessageForJid:(id)arg1 stanzaId:(id)arg2 cipherType:(id)arg3 encryptedData:(id)arg4 decryptEvent:(id)arg5 success:(BOOL*)arg6 ;
-(id)decryptedE2eV2MessageForJid:(id)arg1 participant:(id)arg2 stanzaId:(id)arg3 cipherType:(id)arg4 encryptedData:(id)arg5 decryptEvent:(id)arg6 success:(BOOL*)arg7 ;
-(long long)recepientIdForJid:(id)arg1 ;
-(void)requestKeyForJid:(id)arg1 withCompletion:(/*^block*/id)arg2 ;
-(id)e2eMessageForMessage:(id)arg1 ;
-(int)encryptE2eMessage:(id)arg1 ;
-(id)e2eMessageForSharedItem:(id)arg1 ;
-(int)encryptWithIndividualCipherJid:(id)arg1 plaintext:(id)arg2 ciphertext:(out id*)arg3 ciphertextType:(out int*)arg4 ;
-(BOOL)hasOutgoingSenderKeyStateForGroup:(id)arg1 ;
-(void)clearSessionForGroup:(id)arg1 ;
-(int)senderKeyData:(out id*)arg1 forGroupJid:(id)arg2 ;
-(void)setAxolotlAddress:(signal_protocol_address*)arg1 forJid:(id)arg2 ;
-(void)requestNewKeyForJid:(id)arg1 ;
-(int)encryptWithGroupCipherJid:(id)arg1 plaintext:(id)arg2 ciphertext:(out id*)arg3 ;
-(BOOL)areCapabilities:(id)arg1 enabledForChatSession:(id)arg2 unsupportedJIDs:(out id*)arg3 inContactsMoc:(id)arg4 ;
-(BOOL)isUserJidCapabilities:(id)arg1 e2eCapableForMessageType:(int)arg2 withSessionType:(short)arg3 ;
-(BOOL)shouldEncryptMessageWithType:(int)arg1 forContactJid:(id)arg2 ;
-(BOOL)shouldEncryptMessageWithType:(int)arg1 inChatSession:(id)arg2 ;
-(void)addTask:(id)arg1 toResendQueueForJid:(id)arg2 ;
-(void)addPendingMessage:(id)arg1 forParticipant:(id)arg2 toResendQueueForJids:(id)arg3 ;
-(unsigned long long)sessionStatusForJid:(id)arg1 ;
-(void)didReceiveRetryReceiptForStanzaID:(id)arg1 fromJID:(id)arg2 participantJID:(id)arg3 registrationId:(int)arg4 retryCount:(unsigned)arg5 ;
-(void)clearAxolotlSessionForJid:(id)arg1 clearIdentity:(BOOL)arg2 ;
-(int)axolotlBaseKeyData:(out id*)arg1 fromUserJid:(id)arg2 ;
-(void)generatePreKeys;
-(void)checkServerDigest;
-(void)sendMorePreKeys;
-(id)processPrekeyTasksWaitingOnPrekeyForJid:(id)arg1 ;
-(void)encryptedPayloadForVoIPKey:(id)arg1 toJid:(id)arg2 withCompletionBlock:(/*^block*/id)arg3 ;
-(void)sendNewSignedPrekey;
-(void)processMessageSendCompletionForStanzaId:(id)arg1 chatJid:(id)arg2 participantJid:(id)arg3 result:(unsigned long long)arg4 ;
-(void)addPendingEncryptVoIPKey:(id)arg1 forJid:(id)arg2 withCompletion:(/*^block*/id)arg3 ;
-(BOOL)processMismatchedRegistrationID:(int)arg1 forXMPPMessageStanza:(id)arg2 withRetryCount:(int)arg3 ;
-(id)stableJidFromJid:(id)arg1 ;
-(void)axolotlFailedWithError:(id)arg1 ;
-(void)identityChangedForRecipientId:(long long)arg1 ;
-(id)decryptedE2eMessageForVersion:(int)arg1 jid:(id)arg2 participant:(id)arg3 stanzaId:(id)arg4 cipherType:(id)arg5 encryptedData:(id)arg6 retryCount:(int)arg7 success:(out BOOL*)arg8 ;
-(void)prepareSessionsForJids:(id)arg1 withCompletion:(/*^block*/id)arg2 ;
-(id)requiredCapabilitiesForSendingMessages:(id)arg1 ;
-(void)didReceiveIdentityChangedNotificationForJid:(id)arg1 ;
-(void)beginProcessingIncomingMessages;
-(void)endProcessingIncomingMessages;
-(void)checkPreKeysCount;
-(void)processMessageSentAckForStanzaId:(id)arg1 chatJid:(id)arg2 participantJid:(id)arg3 negative:(BOOL)arg4 ;
-(void)sendJobRetryForMessageWithStanzaId:(id)arg1 chatJid:(id)arg2 participantJid:(id)arg3 retryCount:(unsigned long long)arg4 completion:(/*^block*/id)arg5 ;
-(void)checkRegistrationId:(unsigned)arg1 forJid:(id)arg2 ;
-(void)didReceiveRetryReceiptForVoipOfferWithStanzaId:(id)arg1 fromJid:(id)arg2 registrationId:(int)arg3 retryCount:(unsigned)arg4 ;
-(id)decryptedVoIPKeyForCiphertext:(id)arg1 withCipherType:(unsigned long long)arg2 forJid:(id)arg3 localRegistrationId:(int)arg4 retryCount:(unsigned)arg5 error:(out id*)arg6 ;
-(id)fingerprintForRemoteJID:(id)arg1 ;
-(BOOL)canVerifyFingerprintForJid:(id)arg1 ;
-(void)setRegistrationId:(unsigned)arg1 ;
-(void)setNeedPhoneRestart:(BOOL)arg1 ;
-(void)dealloc;
@end

