/*
* This header is generated by classdump-dyld 0.7
* on Monday, November 2, 2015 at 10:04:56 AM Greenwich Mean Time
* Operating System: Version 9.0.2 (Build 13A452)
* Image Source: /private/var/mobile/Containers/Bundle/Application/6EA2C334-4708-4A2A-9290-87A765CA9E42/WhatsApp.app/WhatsApp
* classdump-dyld is licensed under GPLv3, Copyright Â© 2013-2014 by Elias Limneos.
*/

#import <WhatsApp/WhatsApp-Structs.h>
#import <libobjc.A.dylib/AVCaptureVideoDataOutputSampleBufferDelegate.h>
#import <libobjc.A.dylib/AVCaptureMetadataOutputObjectsDelegate.h>
#import <WhatsApp/AVCaptureAudioDataOutputSampleBufferDelegate.h>
#import <WhatsApp/WACameraPreviewViewDelegate.h>

@protocol OS_dispatch_queue, OS_dispatch_group, WACameraControllerDelegate;
@class WACameraPreviewView, NSObject, NSMutableDictionary, AVCaptureSession, AVCaptureDeviceInput, AVCaptureStillImageOutput, AVCaptureVideoDataOutput, AVCaptureAudioDataOutput, AVCaptureMetadataOutput, AVAssetWriterInput, CIContext, AVAssetWriter, NSSet, UIView, NSArray, WACameraFilter, NSString;

@interface WACameraController : NSObject <AVCaptureVideoDataOutputSampleBufferDelegate, AVCaptureMetadataOutputObjectsDelegate, AVCaptureAudioDataOutputSampleBufferDelegate, WACameraPreviewViewDelegate> {

	WACameraPreviewView* _previewView;
	NSObject*<OS_dispatch_queue> _captureQueue;
	NSObject*<OS_dispatch_queue> _audioCaptureQueue;
	NSObject*<OS_dispatch_queue> _videoCaptureQueue;
	NSObject*<OS_dispatch_group> _cameraConfigGroup;
	NSMutableDictionary* _faceObjects;
	BOOL _isChangingCamerasInteractively;
	double _lastAutoFocusOnFaceTime;
	BOOL _startSessionOnDidEnterForeground;
	id _defaultAudioActivity;
	id _videoRecordingAudioActivity;
	long long _cameraState;
	AVCaptureSession* _captureSession;
	AVCaptureDeviceInput* _videoDeviceInput;
	AVCaptureDeviceInput* _audioDeviceInput;
	AVCaptureStillImageOutput* _stillImageOutput;
	AVCaptureVideoDataOutput* _videoDataOutput;
	AVCaptureAudioDataOutput* _audioDataOutput;
	AVCaptureMetadataOutput* _metadataOutput;
	AVAssetWriterInput* _audioWriterInput;
	AVAssetWriterInput* _videoWriterInput;
	opaqueCMFormatDescriptionRef _audioFormatDescription;
	opaqueCMFormatDescriptionRef _videoFormatDescription;
	CIContext* _ciContext;
	BOOL _lockExposureAfterAutoExposure;
	BOOL _needsReexposure;
	double _lastExposureLockTime;
	CGPoint _exposurePointOfInterest;
	opaqueCMBufferQueueRef _previewBufferQueue;
	unsigned long long _exposureLockID;
	long long _deviceOrientationForCapture;
	AVAssetWriter* _assetWriter;
	BOOL _isAssetWriterSessionStarted;
	BOOL _needsFinishAssetWriterSession;
	int _acceptSampleBuffersLock;
	BOOL _isAssetWriterAcceptingSampleBuffers;
	int _videoSampleTimeLock;
	SCD_Struct_WA3 _timeOfFirstAppendedVideoSampleBuffer;
	SCD_Struct_WA3 _timeOfLastAppendedVideoSampleBuffer;
	SCD_Struct_WA3 _maximumRecordingDuration;
	AVCaptureSession* _audioCaptureSession;
	SCD_Struct_WA60 _sampleTimingInfo;
	BOOL _needsStartAssetWriterWhenAudioFormatDescriptionIsReady;
	int _startSessionCounter;
	BOOL _useBackCamera;
	BOOL _exposurePointOfInterestSupported;
	BOOL _focusPointOfInterestSupported;
	BOOL _flashActive;
	BOOL _running;
	id<WACameraControllerDelegate> _delegate;
	long long _cameraMode;
	NSSet* _supportedFlashModes;
	long long _flashMode;
	double _maximumZoomFactor;
	double _currentZoomFactor;

}

@property (assign,nonatomic,__weak) id<WACameraControllerDelegate> delegate;              //@synthesize delegate=_delegate - In the implementation block
@property (nonatomic,readonly) UIView * previewView;                                      //@synthesize previewView=_previewView - In the implementation block
@property (assign,getter=isPreviewPaused,nonatomic) BOOL previewPaused; 
@property (nonatomic,readonly) CGSize previewImageSize; 
@property (nonatomic,readonly) BOOL useBackCamera;                                        //@synthesize useBackCamera=_useBackCamera - In the implementation block
@property (nonatomic,readonly) BOOL readyForMediaCapture; 
@property (nonatomic,readonly) long long cameraMode;                                      //@synthesize cameraMode=_cameraMode - In the implementation block
@property (nonatomic,readonly) BOOL exposurePointOfInterestSupported;                     //@synthesize exposurePointOfInterestSupported=_exposurePointOfInterestSupported - In the implementation block
@property (nonatomic,readonly) BOOL focusPointOfInterestSupported;                        //@synthesize focusPointOfInterestSupported=_focusPointOfInterestSupported - In the implementation block
@property (nonatomic,readonly) NSSet * supportedFlashModes;                               //@synthesize supportedFlashModes=_supportedFlashModes - In the implementation block
@property (nonatomic,readonly) long long flashMode;                                       //@synthesize flashMode=_flashMode - In the implementation block
@property (getter=isFlashActive,nonatomic,readonly) BOOL flashActive;                     //@synthesize flashActive=_flashActive - In the implementation block
@property (nonatomic,readonly) double maximumZoomFactor;                                  //@synthesize maximumZoomFactor=_maximumZoomFactor - In the implementation block
@property (nonatomic,readonly) double currentZoomFactor;                                  //@synthesize currentZoomFactor=_currentZoomFactor - In the implementation block
@property (getter=isRunning,nonatomic,readonly) BOOL running;                             //@synthesize running=_running - In the implementation block
@property (nonatomic,copy,readonly) NSArray * faceObjects; 
@property (nonatomic,retain) WACameraFilter * filter; 
@property (readonly) SCD_Struct_WA3 durationOfCurrentVideoRecording; 
@property (getter=isRecordingVideo,nonatomic,readonly) BOOL recordingVideo; 
@property (readonly) unsigned long long hash; 
@property (readonly) Class superclass; 
@property (copy,readonly) NSString * description; 
@property (copy,readonly) NSString * debugDescription; 
+(void)recoverUnsavedMediaIfNeeded;
+(void)requestCameraPermissionWithCompletionHandler:(/*^block*/id)arg1 ;
+(id)temporaryMediaPathWithExtension:(id)arg1 ;
+(BOOL)hasActiveInstances;
+(id)cameraMediaDirectory;
+(long long)imageOrientationForSourceVideoOrientation:(long long)arg1 targetVideoOrientation:(long long)arg2 backFacingCamera:(BOOL)arg3 ;
+(id)videoCaptureDeviceWithPreferredPosition:(long long)arg1 ;
+(long long)videoOrientationForDeviceOrientation:(long long)arg1 ;
+(int)numberOfRightAnglesForVideoOrientation:(long long)arg1 ;
-(void)setPointOfInterest:(CGPoint)arg1 ;
-(void)mediaServicesWereLost:(id)arg1 ;
-(BOOL)isRecordingVideo;
-(BOOL)readyForMediaCapture;
-(void)captureImageWithCompletion:(/*^block*/id)arg1 ;
-(id)redrawPreviewAndSnapshot;
-(BOOL)useBackCamera;
-(void)blockCurrentThreadUntilDisplay;
-(void)setUseBackCamera:(BOOL)arg1 completion:(/*^block*/id)arg2 ;
-(void)setFlashMode:(long long)arg1 completion:(/*^block*/id)arg2 ;
-(NSSet *)supportedFlashModes;
-(double)maximumZoomFactor;
-(double)currentZoomFactor;
-(void)setZoomFactor:(double)arg1 completion:(/*^block*/id)arg2 ;
-(BOOL)startVideoRecording;
-(void)stopVideoRecording;
-(void)cancelVideoRecording;
-(SCD_Struct_WA3)durationOfCurrentVideoRecording;
-(BOOL)exposurePointOfInterestSupported;
-(BOOL)focusPointOfInterestSupported;
-(NSArray *)faceObjects;
-(void)cameraPreviewViewDidChangeImageSize:(id)arg1 ;
-(void)performAnimationWithDuration:(double)arg1 key:(id)arg2 callback:(/*^block*/id)arg3 completion:(/*^block*/id)arg4 ;
-(id)initWithCameraMode:(long long)arg1 useBackCamera:(BOOL)arg2 ;
-(void)handleCaptureSessionRuntimeError:(id)arg1 ;
-(void)handleAudioSessionRouteChangeNotification:(id)arg1 ;
-(void)setUseBackCamera:(BOOL)arg1 forCameraMode:(long long)arg2 fromQueue:(id)arg3 completion:(/*^block*/id)arg4 ;
-(void)internalSetCameraMode:(long long)arg1 ;
-(double)maximumZoomFactorForCurrentSettings;
-(void)internalSetUseBackCamera:(BOOL)arg1 forCameraMode:(long long)arg2 ;
-(id)supportedFlashModesForCurrentDevice;
-(void)internalSetFlashMode:(long long)arg1 ;
-(CGAffineTransform)previewTransform;
-(void)setUpMicrophoneForCameraPosition:(BOOL)arg1 ;
-(void)captureDeviceSubjectAreaDidChange:(id)arg1 ;
-(void)setUpMetadataOutputForCameraMode:(long long)arg1 ;
-(void)resetPointOfInterest;
-(void)exposeAndFocusWithMode:(long long)arg1 atDevicePoint:(CGPoint)arg2 monitorSubjectAreaChange:(BOOL)arg3 ;
-(void)unlockExposure;
-(void)exposeAtPoint:(CGPoint)arg1 ;
-(void)drainBufferQueue:(opaqueCMBufferQueueRef)arg1 ;
-(opaqueCMSampleBufferRef)dequeueAndRetainBestSampleBufferInQueue:(opaqueCMBufferQueueRef)arg1 forPresentationTime:(SCD_Struct_WA3)arg2 ;
-(id)imageFromSampleBuffer:(opaqueCMSampleBufferRef)arg1 ;
-(void)prepareCaptureDeviceForVideoRecording:(id)arg1 ;
-(void)startAssetWriterSession;
-(SCD_Struct_WA3)preferredFrameRateForDevice:(id)arg1 ;
-(void)performStillImageCaptureAnimation;
-(void)didFailToPrepareRecording;
-(void)cleanUpAfterRecording;
-(void)resetCaptureDeviceAfterVideoRecording:(id)arg1 ;
-(void)finishAssetWriterSession;
-(id)qrCodeObjectWithMetadataObject:(id)arg1 ;
-(id)faceObjectWithMetadataObject:(id)arg1 fromConnection:(id)arg2 ;
-(void)updatePointOfInterestWithFaceMetadata;
-(BOOL)isHoldingExposureLock;
-(void)updatePreviewWithSampleBuffer:(opaqueCMSampleBufferRef)arg1 ;
-(void)appendSampleBuffer:(opaqueCMSampleBufferRef)arg1 toWriterInput:(id)arg2 ;
-(id)imageFromImageBuffer:(CVBufferRef)arg1 imageOrientation:(long long)arg2 ;
-(void)setCameraMode:(long long)arg1 fromQueue:(id)arg2 completion:(/*^block*/id)arg3 ;
-(void)lockExposure;
-(void)getZoomFactorWithCompletionBlock:(/*^block*/id)arg1 ;
-(BOOL)isPreviewPaused;
-(void)setPreviewPaused:(BOOL)arg1 ;
-(CGSize)previewImageSize;
-(WACameraFilter *)filter;
-(void)setDelegate:(id<WACameraControllerDelegate>)arg1 ;
-(void)dealloc;
-(id)init;
-(id<WACameraControllerDelegate>)delegate;
-(void)applicationDidReceiveMemoryWarning:(id)arg1 ;
-(void)applicationWillEnterForeground:(id)arg1 ;
-(void)setFilter:(WACameraFilter *)arg1 ;
-(void)observeValueForKeyPath:(id)arg1 ofObject:(id)arg2 change:(id)arg3 context:(void*)arg4 ;
-(BOOL)isRunning;
-(void)mediaServicesWereReset:(id)arg1 ;
-(void)setDeviceOrientation:(long long)arg1 ;
-(long long)flashMode;
-(UIView *)previewView;
-(BOOL)isFlashActive;
-(void)captureOutput:(id)arg1 didOutputSampleBuffer:(opaqueCMSampleBufferRef)arg2 fromConnection:(id)arg3 ;
-(void)captureOutput:(id)arg1 didOutputMetadataObjects:(id)arg2 fromConnection:(id)arg3 ;
-(void)startRunning;
-(void)stopRunning;
-(long long)cameraMode;
@end

