/*
* This header is generated by classdump-dyld 1.0
* on Saturday, December 24, 2016 at 12:50:46 AM Greenwich Mean Time
* Operating System: Version 10.1.1 (Build 14B150)
* Image Source: /var/containers/Bundle/Application/F01A5503-B253-4A30-B0BC-B7B5406FD725/WhatsApp.app/WhatsApp
* classdump-dyld is licensed under GPLv3, Copyright Â© 2013-2016 by Elias Limneos.
*/

#import <WhatsApp/WhatsApp-Structs.h>
#import <libobjc.A.dylib/NSURLSessionDataDelegate.h>

@class WAWebPageTask, NSMutableOrderedSet, NSURLSession, WAWebPageMetadata, NSOrderedSet, NSMutableSet, WAFieldStatsEventIphoneLinkMetadataFetch, NSMutableDictionary, NSURL, NSString;

@interface WAWebPageReader : NSObject <NSURLSessionDataDelegate> {

	/*^block*/id _handler;
	WAWebPageTask* _headerFetchTask;
	WAWebPageTask* _imageFetchTask;
	WAWebPageTask* _currentTask;
	long long _handlerInvocationCount;
	long long _imageFetchRetryCount;
	NSMutableOrderedSet* _stringEncodings;
	NSURLSession* _session;
	WAWebPageMetadata* _metadata;
	NSOrderedSet* _fallbackImageURLs;
	NSMutableSet* _cancelledImageURLTasks;
	WAFieldStatsEventIphoneLinkMetadataFetch* _fieldStatsEvent;
	NSMutableDictionary* _fieldStatsImageURLToImageType;
	NSURL* _webURL;
	CGSize _preferredImageSize;

}

@property (nonatomic,readonly) NSURL * webURL;                       //@synthesize webURL=_webURL - In the implementation block
@property (assign,nonatomic) CGSize preferredImageSize;              //@synthesize preferredImageSize=_preferredImageSize - In the implementation block
@property (readonly) unsigned long long hash; 
@property (readonly) Class superclass; 
@property (copy,readonly) NSString * description; 
@property (copy,readonly) NSString * debugDescription; 
+(id)URLRequestWithURL:(id)arg1 timeout:(double)arg2 contentRange:(NSRange)arg3 ;
+(BOOL)stringEncoding:(out unsigned long long*)arg1 fromByteOrderMarkingInData:(id)arg2 ;
+(id)stringFromData:(id)arg1 withSuggestedEncodings:(id)arg2 usedEncoding:(out unsigned long long*)arg3 failedSuggestedEncodings:(out id*)arg4 ;
+(id)URLRequestWithURL:(id)arg1 timeout:(double)arg2 ;
+(BOOL)imageURLSupported:(id)arg1 ;
+(id)responseMIMETypeFromContentType:(id)arg1 ;
+(long long)contentSizeFromContentRange:(id)arg1 ;
+(id)bestImageURLWithOldURL:(id)arg1 newURL:(id)arg2 ;
+(void)initialize;
-(void)recordFieldStatsUsingNumberOfBytesToEndOfHeader:(unsigned long long)arg1 ;
-(void)parseHTMLData:(id)arg1 requestUrl:(id)arg2 responseUrl:(id)arg3 encoding:(unsigned long long)arg4 authoritativeEncoding:(BOOL)arg5 ;
-(void)processFoundImageTypes:(id)arg1 ;
-(void)completeReadingWithMetadata:(id)arg1 ;
-(void)tryNextImageURLIfPossible;
-(void)doneDownloadingImage;
-(void)fetchImageInMetadata;
-(void)recordFieldStatsImageSizeLimitReached;
-(void)recordFieldStatsImageURLTypeFetched:(BOOL)arg1 ;
-(void)imageDownloadFinishedWithImage:(id)arg1 forMetadata:(id)arg2 ;
-(id)webPageTaskFromDataTask:(id)arg1 ;
-(void)handleErrorDownloadingImage:(id)arg1 ;
-(BOOL)shouldIgnoreResponseForTask:(id)arg1 ;
-(void)handleImageData:(id)arg1 ;
-(void)handleHtmlData:(id)arg1 ;
-(void)recordFieldStatsPartialResponseReceivedForWebPageTask:(id)arg1 ;
-(BOOL)shouldCancelImageFetchTaskContentTooLargeForResponse:(id)arg1 ;
-(BOOL)shouldCancelHeaderFetchTaskWithoutHTMLForResponse:(id)arg1 ;
-(void)handleNonHTMLResponse:(id)arg1 ;
-(void)failWithError:(id)arg1 forTask:(id)arg2 ;
-(void)doneDownloadingHtml;
-(void)loadMetadataWithResultHandler:(/*^block*/id)arg1 ;
-(void)recordFieldStatImageTypeAvailable:(int)arg1 withURL:(id)arg2 ;
-(void)cancel;
-(id)initWithURL:(id)arg1 ;
-(void)cleanUp;
-(void)URLSession:(id)arg1 dataTask:(id)arg2 didReceiveResponse:(id)arg3 completionHandler:(/*^block*/id)arg4 ;
-(void)URLSession:(id)arg1 dataTask:(id)arg2 didReceiveData:(id)arg3 ;
-(void)URLSession:(id)arg1 task:(id)arg2 didCompleteWithError:(id)arg3 ;
-(NSURL *)webURL;
-(CGSize)preferredImageSize;
-(void)setPreferredImageSize:(CGSize)arg1 ;
@end

