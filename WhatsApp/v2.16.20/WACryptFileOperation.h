/*
* This header is generated by classdump-dyld 1.0
* on Saturday, December 24, 2016 at 12:50:47 AM Greenwich Mean Time
* Operating System: Version 10.1.1 (Build 14B150)
* Image Source: /var/containers/Bundle/Application/F01A5503-B253-4A30-B0BC-B7B5406FD725/WhatsApp.app/WhatsApp
* classdump-dyld is licensed under GPLv3, Copyright Â© 2013-2016 by Elias Limneos.
*/

#import <WhatsApp/WhatsApp-Structs.h>
#import <WhatsApp/WATriggeredOperation.h>

@class NSData, WABackupFile, NSString, NSFileHandle, NSMutableData, WABackupKey;

@interface WACryptFileOperation : WATriggeredOperation {

	NSData* _dataHeader;
	WABackupFile* _header;
	NSString* _source;
	NSString* _destination;
	unsigned _operation;
	/*^block*/id _keyLoader;
	NSFileHandle* _inputFile;
	NSFileHandle* _outputFile;
	int _inputfd;
	int _outputfd;
	CCCryptorRef _cryptor;
	SCD_Struct_WA77 _hmac;
	SCD_Struct_WA77* _hmacPtr;
	long long _bytesToCrypt;
	NSMutableData* _readBuffer;
	NSMutableData* _outputBuffer;
	BOOL _hasEncryptionKeyError;
	BOOL _hasNoConnectionError;
	BOOL _failed;
	WABackupKey* _backupKey;

}

@property (assign) BOOL failed;                             //@synthesize failed=_failed - In the implementation block
@property (assign) BOOL hasEncryptionKeyError;              //@synthesize hasEncryptionKeyError=_hasEncryptionKeyError - In the implementation block
@property (assign) BOOL hasNoConnectionError;               //@synthesize hasNoConnectionError=_hasNoConnectionError - In the implementation block
@property (retain) WABackupKey * backupKey;                 //@synthesize backupKey=_backupKey - In the implementation block
-(id)initWithDependenciesRequired:(BOOL)arg1 ;
-(void)performTaskWithCompletionHandler:(/*^block*/id)arg1 ;
-(BOOL)hasEncryptionKeyError;
-(id)initWithSourcePath:(id)arg1 destinationPath:(id)arg2 backupKey:(id)arg3 ;
-(id)initWithSourcePath:(id)arg1 destinationPath:(id)arg2 decryptionKeyLoader:(/*^block*/id)arg3 ;
-(BOOL)hasNoConnectionError;
-(WABackupKey *)backupKey;
-(id)initWithSourcePath:(id)arg1 destinationPath:(id)arg2 backupKey:(id)arg3 initializationVector:(id)arg4 ;
-(id)initWithSourcePath:(id)arg1 destinationPath:(id)arg2 operation:(unsigned)arg3 ;
-(long long)readBytes:(void*)arg1 ofLength:(unsigned long long)arg2 ;
-(BOOL)tryToOpenInputFileAtURL:(id)arg1 ;
-(id)readFileHeader;
-(void)closeInputFile;
-(void)setHasNoConnectionError:(BOOL)arg1 ;
-(void)setHasEncryptionKeyError:(BOOL)arg1 ;
-(void)setBackupKey:(WABackupKey *)arg1 ;
-(void)runOperationWithInputURL:(id)arg1 ;
-(BOOL)tryToRunOperationWithInputURL:(id)arg1 ;
-(BOOL)tryToOpenOutputFile;
-(BOOL)prepareForCrypt;
-(BOOL)writeBytes:(const void*)arg1 ofLength:(unsigned long long)arg2 ;
-(BOOL)verifyFileHeader;
-(BOOL)tryToCrypt;
-(void)getHMACBytes:(void*)arg1 ofLength:(unsigned long long)arg2 ;
-(void)runOperation;
-(void)loadKeyWithCompletion:(/*^block*/id)arg1 ;
-(id)readDataOfLength:(unsigned long long)arg1 ;
-(void)finish;
-(BOOL)failed;
-(void)setFailed:(BOOL)arg1 ;
-(BOOL)succeeded;
@end

