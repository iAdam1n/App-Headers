/*
* This header is generated by classdump-dyld 1.0
* on Saturday, December 24, 2016 at 12:50:46 AM Greenwich Mean Time
* Operating System: Version 10.1.1 (Build 14B150)
* Image Source: /var/containers/Bundle/Application/F01A5503-B253-4A30-B0BC-B7B5406FD725/WhatsApp.app/WhatsApp
* classdump-dyld is licensed under GPLv3, Copyright Â© 2013-2016 by Elias Limneos.
*/

#import <WhatsApp/XMPPSocketDelegate.h>

@protocol XMPPStreamDelegate;
@class XMPPBinaryCoder, NSMutableData, XMPPSocket, ExecutionTimeProfiler, NSMutableArray, NSDictionary, WATimer, NoiseHandshakeManager, NoiseStreamCipher, WAECPublicKey, NSString, NSData, WAECKeyPair, NSNumber;

@interface XMPPStream : NSObject <XMPPSocketDelegate> {

	XMPPBinaryCoder* _binaryCoder;
	NSMutableData* _incomingBuffer;
	XMPPSocket* _socket;
	ExecutionTimeProfiler* _profiler;
	double _lastSocketReadTime;
	double _systemUptimeAtLastSocketRead;
	NSMutableArray* _messages;
	NSDictionary* _connectionInfo;
	BOOL _isDisconnecting;
	BOOL _isAckKick;
	WATimer* _socketIdleTimer;
	NoiseHandshakeManager* _handshakeManager;
	NoiseStreamCipher* _streamCipher;
	WAECPublicKey* _serverStaticPublicKey;
	unsigned long long _consecutiveConnectFailures;
	double _timeoutValue;
	BOOL _xmppPassiveMode;
	BOOL _opened;
	id<XMPPStreamDelegate> _delegate;
	NSString* _xmppUser;
	NSData* _xmppPassword;
	WAECKeyPair* _clientStaticKeyPair;
	double _lastOfflineStanzaTime;

}

@property (assign,nonatomic,__weak) id<XMPPStreamDelegate> delegate;                       //@synthesize delegate=_delegate - In the implementation block
@property (nonatomic,copy) NSString * xmppUser;                                            //@synthesize xmppUser=_xmppUser - In the implementation block
@property (nonatomic,copy) NSData * xmppPassword;                                          //@synthesize xmppPassword=_xmppPassword - In the implementation block
@property (nonatomic,retain) WAECKeyPair * clientStaticKeyPair;                            //@synthesize clientStaticKeyPair=_clientStaticKeyPair - In the implementation block
@property (assign,nonatomic) BOOL xmppPassiveMode;                                         //@synthesize xmppPassiveMode=_xmppPassiveMode - In the implementation block
@property (nonatomic,readonly) double elapsedTimeSinceLastReadData; 
@property (nonatomic,readonly) double lastOfflineStanzaTime;                               //@synthesize lastOfflineStanzaTime=_lastOfflineStanzaTime - In the implementation block
@property (getter=isOpened,nonatomic,readonly) BOOL opened;                                //@synthesize opened=_opened - In the implementation block
@property (nonatomic,readonly) NSObject*<OS_dispatch_queue> queue; 
@property (assign,nonatomic) BOOL bindsToCellularNetwork; 
@property (nonatomic,copy,readonly) NSString * currentIPAddress; 
@property (nonatomic,copy,readonly) NSString * currentHost; 
@property (nonatomic,readonly) NSNumber * currentPort; 
@property (nonatomic,copy) NSString * hintIPAdress; 
@property (getter=isSocketAlive,nonatomic,readonly) BOOL socketAlive; 
@property (nonatomic,retain) NSString * hostnameOverride; 
@property (nonatomic,readonly) unsigned long long consecutiveConnectFailures;              //@synthesize consecutiveConnectFailures=_consecutiveConnectFailures - In the implementation block
@property (assign,nonatomic) BOOL useDefaultPortFirst; 
@property (readonly) unsigned long long hash; 
@property (readonly) Class superclass; 
@property (copy,readonly) NSString * description; 
@property (copy,readonly) NSString * debugDescription; 
+(id)savedServerStatic;
+(id)serverStaticKeychainQuery;
+(void)storeServerStatic:(id)arg1 ;
-(id)initWithQueue:(id)arg1 defaultTimeout:(double)arg2 ;
-(void)setXmppUser:(NSString *)arg1 ;
-(void)setXmppPassiveMode:(BOOL)arg1 ;
-(void)setUseDefaultPortFirst:(BOOL)arg1 ;
-(NSString *)currentIPAddress;
-(NSNumber *)currentPort;
-(NSString *)xmppUser;
-(WAECKeyPair *)clientStaticKeyPair;
-(void)shutDownStream;
-(void)disconnectImmediately;
-(void)setHintIPAdress:(NSString *)arg1 ;
-(double)elapsedTimeSinceLastReadData;
-(BOOL)bindsToCellularNetwork;
-(void)setClientStaticKeyPair:(WAECKeyPair *)arg1 ;
-(void)setXmppPassword:(NSData *)arg1 ;
-(NSData *)xmppPassword;
-(BOOL)xmppPassiveMode;
-(void)sendStreamEndAndDisconnect;
-(void)setHostnameOverride:(NSString *)arg1 ;
-(double)lastOfflineStanzaTime;
-(BOOL)isSocketAlive;
-(void)setBindsToCellularNetwork:(BOOL)arg1 ;
-(NSString *)hintIPAdress;
-(unsigned long long)consecutiveConnectFailures;
-(unsigned long long)sendElement:(id)arg1 ;
-(unsigned long long)sendElement:(id)arg1 timeout:(double)arg2 ;
-(void)fallbackAddressesDidChange:(id)arg1 ;
-(void)invalidateBusySocketTimer;
-(void)writeNoiseFrameToSocketWithPayload:(id)arg1 encryptWithStreamCipher:(BOOL)arg2 timeout:(double)arg3 ;
-(unsigned long long)internalSendElements:(id)arg1 timeout:(double)arg2 ;
-(unsigned long long)sendElements:(id)arg1 timeout:(double)arg2 ;
-(void)outputProfilingResults;
-(void)processStanza:(id)arg1 ;
-(NSString *)hostnameOverride;
-(BOOL)useDefaultPortFirst;
-(void)startStreamWithLoginAdditions:(id)arg1 connectionInfo:(id)arg2 ;
-(void)reportIdleSocketAfterDelay;
-(id)prependNoiseFrameHeaderToPayload:(id)arg1 ;
-(id)clientPayloadWithLoginAdditions:(id)arg1 ;
-(unsigned)noiseFrameLengthFromHeader:(id)arg1 ;
-(void)processElements:(id)arg1 ;
-(void)xmppSocket:(id)arg1 willConnectToHost:(id)arg2 ;
-(void)xmppSocket:(id)arg1 didConnectToHost:(id)arg2 port:(unsigned short)arg3 ;
-(void)xmppSocket:(id)arg1 didReadData:(id)arg2 ;
-(void)xmppSocketDidWriteData:(id)arg1 ;
-(void)xmppSocketDidDisconnect:(id)arg1 ;
-(unsigned long long)sendElements:(id)arg1 ;
-(NSString *)currentHost;
-(void)setDelegate:(id<XMPPStreamDelegate>)arg1 ;
-(void)dealloc;
-(id<XMPPStreamDelegate>)delegate;
-(void)connect;
-(NSObject*<OS_dispatch_queue>)queue;
-(BOOL)isOpened;
-(void)processMessages;
@end

