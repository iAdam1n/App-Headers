/*
* This header is generated by classdump-dyld 1.0
* on Thursday, August 25, 2016 at 8:46:55 PM British Summer Time
* Operating System: Version 9.3.3 (Build 13G34)
* Image Source: /var/containers/Bundle/Application/11A60D99-01E0-433C-ADB9-36971BECDA0C/Slack.app/Slack
* classdump-dyld is licensed under GPLv3, Copyright Â© 2013-2016 by Elias Limneos.
*/

#import <Slack/Slack-Structs.h>
#import <Slack/SDWebImageManagerDelegate.h>
#import <Slack/SDWebImagePrefetcherDelegate.h>

@class SDWebImageManager, NSMutableDictionary, NSCache, SDImageCache, NSString;

@interface SLKImageManager : NSObject <SDWebImageManagerDelegate, SDWebImagePrefetcherDelegate> {

	BOOL _useFLAnimatedImage;
	BOOL _isPrefetchingGifs;
	BOOL _abortPrefetchingGifs;
	SDWebImageManager* _proxyManager;
	NSMutableDictionary* _downloadOperations;
	NSCache* _gifCache;
	SDImageCache* _hugeImageCache;

}

@property (nonatomic,retain) NSMutableDictionary * downloadOperations;              //@synthesize downloadOperations=_downloadOperations - In the implementation block
@property (nonatomic,retain) NSCache * gifCache;                                    //@synthesize gifCache=_gifCache - In the implementation block
@property (assign,nonatomic) BOOL isPrefetchingGifs;                                //@synthesize isPrefetchingGifs=_isPrefetchingGifs - In the implementation block
@property (assign,nonatomic) BOOL abortPrefetchingGifs;                             //@synthesize abortPrefetchingGifs=_abortPrefetchingGifs - In the implementation block
@property (nonatomic,retain) SDImageCache * hugeImageCache;                         //@synthesize hugeImageCache=_hugeImageCache - In the implementation block
@property (nonatomic,retain) SDWebImageManager * proxyManager;                      //@synthesize proxyManager=_proxyManager - In the implementation block
@property (assign,nonatomic) BOOL useFLAnimatedImage;                               //@synthesize useFLAnimatedImage=_useFLAnimatedImage - In the implementation block
@property (readonly) unsigned long long hash; 
@property (readonly) Class superclass; 
@property (copy,readonly) NSString * description; 
@property (copy,readonly) NSString * debugDescription; 
+(id)resizeImage:(id)arg1 toSize:(CGSize)arg2 ;
+(id)resizeImage:(id)arg1 toDimension:(double)arg2 ;
+(id)resizeImage:(id)arg1 toWidth:(double)arg2 ;
+(id)sharedManager;
-(id)downloadImageForUrl:(id)arg1 completion:(/*^block*/id)arg2 ;
-(void)cancelDownloadForUrl:(id)arg1 ;
-(void)avatarImageForUrl:(id)arg1 withCornerRadius:(double)arg2 completion:(/*^block*/id)arg3 ;
-(void)setUseFLAnimatedImage:(BOOL)arg1 ;
-(void)setProxyManager:(SDWebImageManager *)arg1 ;
-(SDWebImageManager *)proxyManager;
-(void)prefetchImageAtPaths:(id)arg1 priority:(unsigned long long)arg2 completion:(/*^block*/id)arg3 ;
-(void)cacheImageForKey:(id)arg1 forImage:(id)arg2 ;
-(BOOL)isCached:(id)arg1 ;
-(void)setHugeImageCache:(SDImageCache *)arg1 ;
-(SDImageCache *)hugeImageCache;
-(void)setDownloadOperations:(NSMutableDictionary *)arg1 ;
-(void)setGifCache:(NSCache *)arg1 ;
-(void)setIsPrefetchingGifs:(BOOL)arg1 ;
-(void)setAbortPrefetchingGifs:(BOOL)arg1 ;
-(BOOL)isGifUrlString:(id)arg1 ;
-(BOOL)useFLAnimatedImage;
-(id)cachedGifForUrl:(id)arg1 ;
-(id)cacheKeyForRescaledImage:(id)arg1 ;
-(BOOL)isBigImage:(id)arg1 ;
-(id)resizeAndSaveImage:(id)arg1 withURL:(id)arg2 ;
-(id)rescaledCachedImage:(id)arg1 ;
-(NSMutableDictionary *)downloadOperations;
-(NSCache *)gifCache;
-(id)avatarCacheKeyForUrl:(id)arg1 withCornerRadius:(double)arg2 ;
-(id)cachedAvatarImageForUrl:(id)arg1 withCornerRadius:(double)arg2 ;
-(id)downloadImageForUrl:(id)arg1 progress:(/*^block*/id)arg2 completion:(/*^block*/id)arg3 ;
-(BOOL)isHugeImage:(id)arg1 ;
-(void)removeCachedImageForUrl:(id)arg1 ;
-(void)downloadGifForUrl:(id)arg1 progress:(/*^block*/id)arg2 completion:(/*^block*/id)arg3 ;
-(void)prefetchImageURLs:(id)arg1 priority:(unsigned long long)arg2 completion:(/*^block*/id)arg3 ;
-(void)prefetchGifAtPaths:(id)arg1 completion:(/*^block*/id)arg2 ;
-(BOOL)isPrefetchingGifs;
-(BOOL)abortPrefetchingGifs;
-(id)cacheKeyForHugeImage:(id)arg1 ;
-(BOOL)imageManager:(id)arg1 shouldDownloadImageForURL:(id)arg2 ;
-(id)imageManager:(id)arg1 transformDownloadedImage:(id)arg2 withURL:(id)arg3 ;
-(void)imagePrefetcher:(id)arg1 didPrefetchURL:(id)arg2 finishedCount:(unsigned long long)arg3 totalCount:(unsigned long long)arg4 ;
-(void)imagePrefetcher:(id)arg1 didFinishWithTotalCount:(unsigned long long)arg2 skippedCount:(unsigned long long)arg3 ;
-(id)cachePathForUrl:(id)arg1 ;
-(void)rescaledCachedImage:(id)arg1 withCompletion:(/*^block*/id)arg2 ;
-(BOOL)isImageDownloadingForUrl:(id)arg1 ;
-(void)prefetchImageAtPaths:(id)arg1 completion:(/*^block*/id)arg2 ;
-(id)cachedHugeImage:(id)arg1 ;
-(id)init;
-(void)clearCache;
-(id)cachedImage:(id)arg1 ;
-(void)cancelAll;
@end

