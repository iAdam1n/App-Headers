/*
* This header is generated by classdump-dyld 1.0
* on Friday, August 26, 2016 at 12:01:47 AM British Summer Time
* Operating System: Version 9.3.3 (Build 13G34)
* Image Source: /var/containers/Bundle/Application/3822BE3B-29D4-4DEB-BFFF-FDA22D01C707/AngryBirdsClassic.app/AngryBirdsClassic
* classdump-dyld is licensed under GPLv3, Copyright Â© 2013-2016 by Elias Limneos.
*/


@class SNTWebViewController;

typedef struct _NSZone* NSZoneRef;

typedef struct __SCNetworkReachability* SCNetworkReachabilityRef;

typedef struct _darwin_sigaltstack {
	void ss_sp;
	unsigned long long ss_size;
	int ss_flags;
} darwin_sigaltstack;

typedef struct __CFUUID* CFUUIDRef;

typedef struct timeval {
	long long tv_sec;
	int tv_usec;
} timeval;

typedef struct PLCrashHostInfoVersion {
	unsigned long long major;
	unsigned long long minor;
	unsigned long long revision;
} PLCrashHostInfoVersion;

typedef struct {
	unsigned long long field1;
	id field2;
	unsigned long long field3;
	unsigned long long field4[5];
} SCD_Struct_Fl6;

typedef struct plcrash_mach_exception_port_set {
	unsigned count;
	unsigned masks[14];
	unsigned ports[14];
	int behaviors[14];
	int flavors[14];
} plcrash_mach_exception_port_set;

typedef struct dispatch_queue_s* dispatch_queue_sRef;

typedef struct {
	long long value;
	int timescale;
	unsigned flags;
	long long epoch;
} SCD_Struct_Un9;

typedef struct CGSize {
	double width;
	double height;
} CGSize;

typedef struct __SecRandom* SecRandomRef;

typedef struct {
	long long field1;
	long long field2;
	long long field3;
} SCD_Struct_FB12;

typedef struct CGPath* CGPathRef;

typedef struct CGPoint {
	double x;
	double y;
} CGPoint;

typedef struct CGRect {
	CGPoint origin;
	CGSize size;
} CGRect;

typedef struct __CFBinaryHeap* CFBinaryHeapRef;

typedef struct __CFDictionary* CFDictionaryRef;

typedef struct GADAdSize {
	CGSize size;
	unsigned long long flags;
} GADAdSize;

typedef struct CGVector {
	double dx;
	double dy;
} CGVector;

typedef struct {
	long long majorVersion;
	long long minorVersion;
	long long patchVersion;
} SCD_Struct_GA20;

typedef struct {
	void field1;
	char* field2;
	char* field3;
	unsigned field4;
	unsigned long long field5;
} SCD_Struct_BI21;

typedef struct Ptr<gr::Context> {
	Context m_ptr;
} Ptr<gr::Context>;

typedef struct Ptr<lang::Thread> {
	Thread m_ptr;
} Ptr<lang::Thread>;

typedef struct _long {
	char* __data_;
	unsigned long long __size_;
	unsigned long long __cap_;
} long;

typedef struct {
	unsigned char __size_;
} SCD_Struct_Ap25;

typedef struct _raw {
	unsigned long long __words[3];
} raw;

typedef struct _compressed_pair<gr::Context::OrientationType *, std::__1::allocator<gr::Context::OrientationType> > {
	int __first_;
} compressed_pair<gr::Context::OrientationType *, std::__1::allocator<gr::Context::OrientationType> >;

typedef struct _compressed_pair<gr::Context::PlatformType *, std::__1::allocator<gr::Context::PlatformType> > {
	int __first_;
} compressed_pair<gr::Context::PlatformType *, std::__1::allocator<gr::Context::PlatformType> >;

typedef struct vector<gr::Context::PlatformType, std::__1::allocator<gr::Context::PlatformType> > {
	int __begin_;
	int __end_;
	compressed_pair<gr::Context::PlatformType *, std::__1::allocator<gr::Context::PlatformType> > __end_cap_;
} vector<gr::Context::PlatformType, std::__1::allocator<gr::Context::PlatformType> >;

typedef struct _short {
	char __data_[23];
	SCD_Struct_Ap25 ;
} short;

typedef struct _rep {
	/*function pointer*/void* ;
	long __l;
	short __s;
	const aw) __r;
} rep;

typedef struct _compressed_pair<std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char> >::__rep, std::__1::allocator<char> > {
	const ep __first_;
} compressed_pair<std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char> >::__rep, std::__1::allocator<char> >;

typedef struct basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char> > {
	compressed_pair<std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char> >::__rep, std::__1::allocator<char> > __r_;
} basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char> >;

typedef struct vector<gr::Context::OrientationType, std::__1::allocator<gr::Context::OrientationType> > {
	int __begin_;
	int __end_;
	compressed_pair<gr::Context::OrientationType *, std::__1::allocator<gr::Context::OrientationType> > __end_cap_;
} vector<gr::Context::OrientationType, std::__1::allocator<gr::Context::OrientationType> >;

typedef struct Configuration {
	basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char> > name;
	int width;
	int height;
	int minWidth;
	int minHeight;
	int bits;
	BOOL fullscreen;
	BOOL showCursor;
	BOOL depthbuffer;
	BOOL stencilbuffer;
	BOOL captureMouse;
	BOOL updateWhenDeactivated;
	int iconResourceID;
	BOOL debugMemoryAllocs;
	int orientation;
	vector<gr::Context::OrientationType, std::__1::allocator<gr::Context::OrientationType> > autoOrientations;
	int framerate;
	basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char> > publisher;
	basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char> > product;
	basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char> > dllPath;
	vector<gr::Context::PlatformType, std::__1::allocator<gr::Context::PlatformType> > renderer;
	BOOL renderThread;
	BOOL singleton;
} Configuration;

typedef struct _compressed_pair<hockeyapp::detail::CrashLogger *, std::__1::default_delete<hockeyapp::detail::CrashLogger> > {
	CrashLogger __first_;
} compressed_pair<hockeyapp::detail::CrashLogger *, std::__1::default_delete<hockeyapp::detail::CrashLogger> >;

typedef struct unique_ptr<hockeyapp::detail::CrashLogger, std::__1::default_delete<hockeyapp::detail::CrashLogger> > {
	compressed_pair<hockeyapp::detail::CrashLogger *, std::__1::default_delete<hockeyapp::detail::CrashLogger> > __ptr_;
} unique_ptr<hockeyapp::detail::CrashLogger, std::__1::default_delete<hockeyapp::detail::CrashLogger> >;

typedef struct type {
	unsigned char __lx[24];
} type;

typedef struct function<void ()> {
	type __buf_;
	__base<void ()> __f_;
} function<void ()>;

typedef struct _compressed_pair<unsigned long, std::__1::__map_value_compare<std::__1::basic_string<char>, std::__1::__value_type<std::__1::basic_string<char>, std::__1::basic_string<char> >, std::__1::less<std::__1::basic_string<char> >, true> > {
	unsigned long long __first_;
} compressed_pair<unsigned long, std::__1::__map_value_compare<std::__1::basic_string<char>, std::__1::__value_type<std::__1::basic_string<char>, std::__1::basic_string<char> >, std::__1::less<std::__1::basic_string<char> >, true> >;

typedef struct _tree_end_node<std::__1::__tree_node_base<void *> *> {
	__tree_node_base<void *> __left_;
} tree_end_node<std::__1::__tree_node_base<void *> *>;

typedef struct _compressed_pair<std::__1::__tree_end_node<std::__1::__tree_node_base<void *> *>, std::__1::allocator<std::__1::__tree_node<std::__1::__value_type<std::__1::basic_string<char>, std::__1::basic_string<char> >, void *> > > {
	tree_end_node<std::__1::__tree_node_base<void *> *> __first_;
} compressed_pair<std::__1::__tree_end_node<std::__1::__tree_node_base<void *> *>, std::__1::allocator<std::__1::__tree_node<std::__1::__value_type<std::__1::basic_string<char>, std::__1::basic_string<char> >, void *> > >;

typedef struct _tree<std::__1::__value_type<std::__1::basic_string<char>, std::__1::basic_string<char> >, std::__1::__map_value_compare<std::__1::basic_string<char>, std::__1::__value_type<std::__1::basic_string<char>, std::__1::basic_string<char> >, std::__1::less<std::__1::basic_string<char> >, true>, std::__1::allocator<std::__1::__value_type<std::__1::basic_string<char>, std::__1::basic_string<char> > > > {
	__tree_node<std::__1::__value_type<std::__1::basic_string<char>, std::__1::basic_string<char> >, void *> __begin_node_;
	compressed_pair<std::__1::__tree_end_node<std::__1::__tree_node_base<void *> *>, std::__1::allocator<std::__1::__tree_node<std::__1::__value_type<std::__1::basic_string<char>, std::__1::basic_string<char> >, void *> > > __pair1_;
	compressed_pair<unsigned long, std::__1::__map_value_compare<std::__1::basic_string<char>, std::__1::__value_type<std::__1::basic_string<char>, std::__1::basic_string<char> >, std::__1::less<std::__1::basic_string<char> >, true> > __pair3_;
} tree<std::__1::__value_type<std::__1::basic_string<char>, std::__1::basic_string<char> >, std::__1::__map_value_compare<std::__1::basic_string<char>, std::__1::__value_type<std::__1::basic_string<char>, std::__1::basic_string<char> >, std::__1::less<std::__1::basic_string<char> >, true>, std::__1::allocator<std::__1::__value_type<std::__1::basic_string<char>, std::__1::basic_string<char> > > >;

typedef struct multimap<std::__1::basic_string<char>, std::__1::basic_string<char>, std::__1::less<std::__1::basic_string<char> >, std::__1::allocator<std::__1::pair<const std::__1::basic_string<char>, std::__1::basic_string<char> > > > {
	tree<std::__1::__value_type<std::__1::basic_string<char>, std::__1::basic_string<char> >, std::__1::__map_value_compare<std::__1::basic_string<char>, std::__1::__value_type<std::__1::basic_string<char>, std::__1::basic_string<char> >, std::__1::less<std::__1::basic_string<char> >, true>, std::__1::allocator<std::__1::__value_type<std::__1::basic_string<char>, std::__1::basic_string<char> > > > __tree_;
} multimap<std::__1::basic_string<char>, std::__1::basic_string<char>, std::__1::less<std::__1::basic_string<char> >, std::__1::allocator<std::__1::pair<const std::__1::basic_string<char>, std::__1::basic_string<char> > > >;

typedef struct {
	int state;
	int closeGravity;
	CGRect frame;
	BOOL customClose;
	BOOL secondPart;
	SNTWebViewController* controller;
} SCD_Struct_SN45;

typedef struct function<void (int, const std::__1::basic_string<char> &, const std::__1::basic_string<char> &)> {
	type __buf_;
	__base<void (int, const std::__1::basic_string<char> &, const std::__1::basic_string<char> &)> __f_;
} function<void (int, const std::__1::basic_string<char> &, const std::__1::basic_string<char> &)>;

typedef struct {
	int day;
	int month;
	int year;
} SCD_Struct_SA47;

typedef struct SharingRequest {
	/*function pointer*/void* _vptr$SharingRequest;
	int sharingType;
	basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char> > title;
	basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char> > text;
	basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char> > imageURL;
	basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char> > url;
	basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char> > twitterMention;
	basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char> > weiboMention;
} SharingRequest;

typedef struct opaqueCMSampleBuffer* opaqueCMSampleBufferRef;

typedef struct GeoCoordinate {
	double latitude;
	double longitude;
} GeoCoordinate;

typedef struct opaque_pthread_mutex_t {
	long long __sig;
	char __opaque[56];
} opaque_pthread_mutex_t;

typedef struct mutex {
	opaque_pthread_mutex_t __m_;
} mutex;

