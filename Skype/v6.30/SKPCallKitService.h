/*
* This header is generated by classdump-dyld 1.0
* on Saturday, December 24, 2016 at 12:36:38 AM Greenwich Mean Time
* Operating System: Version 10.1.1 (Build 14B150)
* Image Source: /var/containers/Bundle/Application/91AA76A0-F2FF-4AAA-BCD2-7E5978B32B63/Skype.app/Skype
* classdump-dyld is licensed under GPLv3, Copyright Â© 2013-2016 by Elias Limneos.
*/

#import <libobjc.A.dylib/CXProviderDelegate.h>

@protocol SKPCallKitServiceDelegate;
@class CXProvider, CXCallController, NSString;

@interface SKPCallKitService : NSObject <CXProviderDelegate> {

	BOOL _callProviderReady;
	id<SKPCallKitServiceDelegate> _delegate;
	CXProvider* _callProvider;
	CXCallController* _callController;

}

@property (nonatomic,retain) CXProvider * callProvider;                                  //@synthesize callProvider=_callProvider - In the implementation block
@property (nonatomic,retain) CXCallController * callController;                          //@synthesize callController=_callController - In the implementation block
@property (assign,nonatomic) BOOL callProviderReady;                                     //@synthesize callProviderReady=_callProviderReady - In the implementation block
@property (assign,nonatomic,__weak) id<SKPCallKitServiceDelegate> delegate;              //@synthesize delegate=_delegate - In the implementation block
@property (nonatomic,readonly) BOOL isCallKitCapable; 
@property (nonatomic,readonly) BOOL shouldUseCallKit; 
@property (readonly) unsigned long long hash; 
@property (readonly) Class superclass; 
@property (copy,readonly) NSString * description; 
@property (copy,readonly) NSString * debugDescription; 
-(BOOL)shouldUseCallKit;
-(BOOL)callProviderReady;
-(CXCallController *)callController;
-(void)setCallProviderReady:(BOOL)arg1 ;
-(BOOL)isCallKitCapable;
-(void)setCallController:(CXCallController *)arg1 ;
-(id)init;
-(void)setDelegate:(id<SKPCallKitServiceDelegate>)arg1 ;
-(id<SKPCallKitServiceDelegate>)delegate;
-(void)start;
-(CXProvider *)callProvider;
-(void)reportCallWithUUID:(id)arg1 updated:(id)arg2 ;
-(void)reportOutgoingCallWithUUID:(id)arg1 startedConnectingAtDate:(id)arg2 ;
-(void)reportOutgoingCallWithUUID:(id)arg1 connectedAtDate:(id)arg2 ;
-(void)reportNewIncomingCallWithUUID:(id)arg1 update:(id)arg2 completion:(/*^block*/id)arg3 ;
-(void)providerDidReset:(id)arg1 ;
-(void)providerDidBegin:(id)arg1 ;
-(void)provider:(id)arg1 performStartCallAction:(id)arg2 ;
-(void)provider:(id)arg1 performAnswerCallAction:(id)arg2 ;
-(void)provider:(id)arg1 performEndCallAction:(id)arg2 ;
-(void)provider:(id)arg1 performSetHeldCallAction:(id)arg2 ;
-(void)provider:(id)arg1 performSetMutedCallAction:(id)arg2 ;
-(void)provider:(id)arg1 performSetGroupCallAction:(id)arg2 ;
-(void)provider:(id)arg1 performPlayDTMFCallAction:(id)arg2 ;
-(void)provider:(id)arg1 timedOutPerformingAction:(id)arg2 ;
-(void)provider:(id)arg1 didActivateAudioSession:(id)arg2 ;
-(void)provider:(id)arg1 didDeactivateAudioSession:(id)arg2 ;
-(void)reportCallWithUUID:(id)arg1 endedAtDate:(id)arg2 reason:(long long)arg3 ;
-(void)requestTransaction:(id)arg1 completion:(/*^block*/id)arg2 ;
-(void)setCallProvider:(CXProvider *)arg1 ;
@end

