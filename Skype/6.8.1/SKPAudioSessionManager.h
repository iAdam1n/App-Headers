//
//     Generated by class-dump 3.5 (64 bit).
//
//     class-dump is Copyright (C) 1997-1998, 2000-2001, 2004-2013 by Steve Nygard.
//

#import "NSObject.h"

@class AVAudioSession, NSMapTable, NSOperationQueue, SKPActivityToken, SKPAudioSession, SKPMutableValue;

@interface SKPAudioSessionManager : NSObject
{
    _Bool _audioRoutedViaSpeakerPhone;
    _Bool _audiolibraryIsInitialized;
    _Bool _shouldRegisterForAudioSessionInterrupt;
    _Bool _enabled;
    _Bool _speakerPhoneRoutePreferred;
    long long _activeAudioOutput;
    long long _currentAudioSessionState;
    SKPAudioSession *_audioSessionWrapper;
    long long _applicationState;
    NSMapTable *_settingsByClient;
    SKPActivityToken *_audioSessionInterruptActivity;
    NSOperationQueue *_queue;
    SKPMutableValue *_audioSessionManagerToken;
}

@property(nonatomic) _Bool speakerPhoneRoutePreferred; // @synthesize speakerPhoneRoutePreferred=_speakerPhoneRoutePreferred;
@property(retain, nonatomic) SKPMutableValue *audioSessionManagerToken; // @synthesize audioSessionManagerToken=_audioSessionManagerToken;
@property(retain, nonatomic) NSOperationQueue *queue; // @synthesize queue=_queue;
@property(nonatomic) _Bool enabled; // @synthesize enabled=_enabled;
@property(retain, nonatomic) SKPActivityToken *audioSessionInterruptActivity; // @synthesize audioSessionInterruptActivity=_audioSessionInterruptActivity;
@property(retain, nonatomic) NSMapTable *settingsByClient; // @synthesize settingsByClient=_settingsByClient;
@property(nonatomic) long long applicationState; // @synthesize applicationState=_applicationState;
@property(nonatomic) _Bool shouldRegisterForAudioSessionInterrupt; // @synthesize shouldRegisterForAudioSessionInterrupt=_shouldRegisterForAudioSessionInterrupt;
@property(retain, nonatomic) SKPAudioSession *audioSessionWrapper; // @synthesize audioSessionWrapper=_audioSessionWrapper;
@property(nonatomic) _Bool audiolibraryIsInitialized; // @synthesize audiolibraryIsInitialized=_audiolibraryIsInitialized;
@property(nonatomic) long long currentAudioSessionState; // @synthesize currentAudioSessionState=_currentAudioSessionState;
@property(nonatomic) _Bool audioRoutedViaSpeakerPhone; // @synthesize audioRoutedViaSpeakerPhone=_audioRoutedViaSpeakerPhone;
@property(nonatomic) long long activeAudioOutput; // @synthesize activeAudioOutput=_activeAudioOutput;
- (void).cxx_destruct;
- (id)debugDescription;
- (id)logDescription;
- (void)audiolibDoneUninitializingNotification:(id)arg1;
- (void)audiolibStartUninitializingNotification:(id)arg1;
- (void)audiolibDoneInitializingNotification:(id)arg1;
- (void)audiolibStartInitializingNotification:(id)arg1;
- (void)applicationDidEnterBackgroundNotification:(id)arg1;
- (void)applicationWillResignActiveNotification:(id)arg1;
- (void)applicationDidBecomeActiveNotification:(id)arg1;
- (void)audioSessionInterruptionNotification:(id)arg1;
- (void)audioSessionRouteChangeNotification:(id)arg1;
- (long long)outputForPortName:(id)arg1;
- (long long)activeAudioOutputForCurrentAudioRoute;
- (_Bool)setAudioSessionMode:(id)arg1 error:(id *)arg2;
- (_Bool)setAudioSessionCategory:(id)arg1 withOptions:(unsigned long long)arg2 error:(id *)arg3;
@property(readonly, nonatomic) AVAudioSession *audioSession;
- (void)setInactiveStateIfNeeded;
- (_Bool)preferredSpeakerPhoneRoute:(_Bool)arg1;
- (_Bool)activateAudioSession;
- (long long)audioSessionState;
- (void)updateAudioSessionState:(long long)arg1;
- (void)addOperation:(id)arg1;
- (void)unsetPreferredSettingsForClient:(id)arg1;
- (void)unsetPreferredSettingsForClient:(id)arg1 completion:(CDUnknownBlockType)arg2;
- (void)setPreferredSettings:(id)arg1 forClient:(id)arg2 timeout:(double)arg3 completion:(CDUnknownBlockType)arg4;
- (void)setPreferredSettings:(id)arg1 forClient:(id)arg2 completion:(CDUnknownBlockType)arg3;
- (void)observeValueForKeyPath:(id)arg1 ofObject:(id)arg2 change:(id)arg3 context:(void *)arg4;
- (id)queueIdentifier;
- (void)dealloc;
- (id)init;

@end

