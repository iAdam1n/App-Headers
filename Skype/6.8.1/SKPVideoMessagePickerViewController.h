//
//     Generated by class-dump 3.5 (64 bit).
//
//     class-dump is Copyright (C) 1997-1998, 2000-2001, 2004-2013 by Steve Nygard.
//

#import "SKPViewController.h"

#import "SKPVideoMessageForwardDelegate.h"
#import "SKPVideoRecordingDelegate.h"
#import "UINavigationControllerDelegate.h"

@class MKButton, MPMoviePlayerController, NSString, NSURL, SKPActivityToken, SKPRecordButton, SKPTransformView, SKPVideoFilterPickerView, SKPVideoMessageHolidayView, SKPVideoRecording, UITapGestureRecognizer, UIView;

@interface SKPVideoMessagePickerViewController : SKPViewController <SKPVideoMessageForwardDelegate, UINavigationControllerDelegate, SKPVideoRecordingDelegate>
{
    MKButton *_cancelButton;
    MKButton *_switchCameraButton;
    SKPRecordButton *_recordButton;
    MKButton *_discardButton;
    MKButton *_sendButton;
    MKButton *_previewButton;
    MPMoviePlayerController *_moviePlayer;
    MKButton *_filterButton;
    _Bool _recording;
    _Bool _usingFrontCamera;
    _Bool _shouldHaveCameraCaptureRegistered;
    _Bool _didSetupRecordUI;
    _Bool _filtersEnabled;
    _Bool _showContactPicker;
    unsigned long long _videoMessageType;
    NSString *_defaultFilter;
    double _maxRecordingTime;
    id <SKPVideoMessagePickerViewControllerDelegate> _delegate;
    SKPTransformView *_switchCameraContainer;
    UIView *_switchCameraWrapper;
    long long _controlOrientation;
    UIView *_videoContainer;
    SKPTransformView *_mainButtonContainer;
    UIView *_mainButtonWrapper;
    SKPVideoRecording *_videoRecording;
    NSURL *_currentVideoFileURL;
    NSURL *_currentThumbnailFileURL;
    SKPActivityToken *_cameraCaptureActivity;
    CDUnknownBlockType _fetchAuxiliaryObjectBlock;
    long long _interfaceOrientationOnStart;
    SKPVideoFilterPickerView *_videoFilterPickerView;
    UITapGestureRecognizer *_tapMoviePlayerViewGestureRecognizer;
    SKPVideoMessageHolidayView *_videoMessageHolidayView;
    long long _startingInterfaceOrientation;
}

+ (void)showAlertForProblemSendingVideo;
+ (void)postAsyncVideoToConversation:(id)arg1 videoPath:(id)arg2 thumbnailPath:(id)arg3;
+ (void)postLegacyVideoToConversation:(id)arg1 videoPath:(id)arg2;
@property(nonatomic) long long startingInterfaceOrientation; // @synthesize startingInterfaceOrientation=_startingInterfaceOrientation;
@property(retain, nonatomic) SKPVideoMessageHolidayView *videoMessageHolidayView; // @synthesize videoMessageHolidayView=_videoMessageHolidayView;
@property(retain, nonatomic) UITapGestureRecognizer *tapMoviePlayerViewGestureRecognizer; // @synthesize tapMoviePlayerViewGestureRecognizer=_tapMoviePlayerViewGestureRecognizer;
@property(retain, nonatomic) SKPVideoFilterPickerView *videoFilterPickerView; // @synthesize videoFilterPickerView=_videoFilterPickerView;
@property(nonatomic) _Bool showContactPicker; // @synthesize showContactPicker=_showContactPicker;
@property(nonatomic) _Bool filtersEnabled; // @synthesize filtersEnabled=_filtersEnabled;
@property(nonatomic) _Bool didSetupRecordUI; // @synthesize didSetupRecordUI=_didSetupRecordUI;
@property(nonatomic) long long interfaceOrientationOnStart; // @synthesize interfaceOrientationOnStart=_interfaceOrientationOnStart;
@property(retain, nonatomic) MKButton *switchCameraButton; // @synthesize switchCameraButton=_switchCameraButton;
@property(copy, nonatomic) CDUnknownBlockType fetchAuxiliaryObjectBlock; // @synthesize fetchAuxiliaryObjectBlock=_fetchAuxiliaryObjectBlock;
@property(nonatomic) _Bool shouldHaveCameraCaptureRegistered; // @synthesize shouldHaveCameraCaptureRegistered=_shouldHaveCameraCaptureRegistered;
@property(retain, nonatomic) SKPActivityToken *cameraCaptureActivity; // @synthesize cameraCaptureActivity=_cameraCaptureActivity;
@property(retain, nonatomic) NSURL *currentThumbnailFileURL; // @synthesize currentThumbnailFileURL=_currentThumbnailFileURL;
@property(retain, nonatomic) NSURL *currentVideoFileURL; // @synthesize currentVideoFileURL=_currentVideoFileURL;
@property(retain, nonatomic) SKPVideoRecording *videoRecording; // @synthesize videoRecording=_videoRecording;
@property(retain, nonatomic) UIView *mainButtonWrapper; // @synthesize mainButtonWrapper=_mainButtonWrapper;
@property(retain, nonatomic) SKPTransformView *mainButtonContainer; // @synthesize mainButtonContainer=_mainButtonContainer;
@property(retain, nonatomic) UIView *videoContainer; // @synthesize videoContainer=_videoContainer;
@property(nonatomic) long long controlOrientation; // @synthesize controlOrientation=_controlOrientation;
@property(retain, nonatomic) UIView *switchCameraWrapper; // @synthesize switchCameraWrapper=_switchCameraWrapper;
@property(retain, nonatomic) SKPTransformView *switchCameraContainer; // @synthesize switchCameraContainer=_switchCameraContainer;
@property(getter=isUsingFrontCamera) _Bool usingFrontCamera; // @synthesize usingFrontCamera=_usingFrontCamera;
@property(nonatomic, getter=isRecording) _Bool recording; // @synthesize recording=_recording;
@property(nonatomic) __weak id <SKPVideoMessagePickerViewControllerDelegate> delegate; // @synthesize delegate=_delegate;
@property(nonatomic) double maxRecordingTime; // @synthesize maxRecordingTime=_maxRecordingTime;
@property(copy, nonatomic) NSString *defaultFilter; // @synthesize defaultFilter=_defaultFilter;
@property(nonatomic) unsigned long long videoMessageType; // @synthesize videoMessageType=_videoMessageType;
- (void).cxx_destruct;
- (_Bool)prefersStatusBarHidden;
- (void)discardCurrentVideo;
- (void)cancelRecordedVideoCleanup;
- (void)resetForNewRecording:(id)arg1;
- (void)cancelRecordedVideo:(id)arg1;
- (void)previewRecordedVideo:(id)arg1;
- (void)updateButtonForPlay;
- (void)updateButtonForPause;
- (void)playVideo;
- (void)stopVideo;
- (void)pauseVideo;
- (void)playPauseVideo;
- (void)moviePlayerPlaybackStateChanged:(id)arg1;
- (void)reportSentVideoMessageTelemetryForConversation:(id)arg1;
- (void)postVideo:(id)arg1;
- (void)videoMessageForwardViewControllerCancelTapped:(id)arg1;
- (void)videoMessageForwardViewControllerDoneTapped:(id)arg1;
- (void)changeCancelButtonActionToDismiss;
- (void)changeCancelButtonActionToResetForNewRecording;
- (void)didFinishActivity:(id)arg1 completed:(_Bool)arg2;
- (id)pathToPrettyFileName;
- (void)onShareTapped;
- (void)onSendToContactsTapped;
- (void)sendRecordedVideo:(id)arg1;
- (void)toggleRecording:(id)arg1;
- (void)dismiss:(id)arg1;
- (void)switchCamera:(id)arg1;
- (void)onFilterButtonTapped:(id)arg1;
- (id)flipRotationKeyPath;
- (void)viewWillDisappear:(_Bool)arg1;
- (void)showVideoMessageHolidayView:(struct CGRect)arg1;
- (void)showVideoFilterViewWithFrame:(struct CGRect)arg1;
- (void)animateInPreviewButtons;
- (void)animateInRecordButtons;
- (id)buttonPopAppearAnimation;
- (void)setUpRecordUI;
- (void)didFindNumberOfPossibleCameras:(unsigned long long)arg1;
- (void)viewWillAppear:(_Bool)arg1;
- (void)applicationDidEnterBackgroundNotification:(id)arg1;
- (_Bool)supportsMultitasking;
- (void)didRotateDevice:(id)arg1;
- (void)viewDidLoad;
- (void)viewDidDisappear:(_Bool)arg1;
- (void)viewDidAppear:(_Bool)arg1;
- (void)updateLayoutsForCurrentOrientation:(long long)arg1 view:(id)arg2;
- (void)willAnimateRotationToInterfaceOrientation:(long long)arg1 duration:(double)arg2;
- (void)rotateLargeView:(id)arg1 toOrientation:(long long)arg2;
- (void)rotateControl:(id)arg1 toOrientation:(long long)arg2;
- (void)rotateControlsToInterfaceOrientation:(long long)arg1;
- (id)rotatableControls;
- (unsigned long long)supportedInterfaceOrientations;
- (_Bool)shouldAutorotate;
- (void)didResetForNewRecording;
- (void)ranOutOfRecordingTime;
- (void)didFinishRecordingVideoWithFileURL:(id)arg1 thumbnailURL:(id)arg2;
- (void)didStartRecording;
- (void)didStartShowingVideo;
- (void)stopRecording;
- (void)startRecording;
- (_Bool)accessibilityPerformEscape;
- (_Bool)accessibilityPerformMagicTap;
- (void)dealloc;
- (void)observeValueForKeyPath:(id)arg1 ofObject:(id)arg2 change:(id)arg3 context:(void *)arg4;
- (id)initWithFetchAuxiliaryObjectBlock:(CDUnknownBlockType)arg1;
- (id)init;

// Remaining properties
@property(readonly, copy) NSString *debugDescription;
@property(readonly, copy) NSString *description;
@property(readonly) unsigned long long hash;
@property(readonly) Class superclass;

@end

