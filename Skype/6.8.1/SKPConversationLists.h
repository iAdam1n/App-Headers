//
//     Generated by class-dump 3.5 (64 bit).
//
//     class-dump is Copyright (C) 1997-1998, 2000-2001, 2004-2013 by Steve Nygard.
//

#import "SKPLazyPropertyContainer.h"

#import "ALESkyLibProtocol.h"
#import "SKPTreeDescribing.h"

@class NSArray, NSMutableArray, NSMutableSet, NSString, SKPArrayFilter;

@interface SKPConversationLists : SKPLazyPropertyContainer <SKPTreeDescribing, ALESkyLibProtocol>
{
    NSMutableSet *_keysOfListsNeedingUpdate;
    _Bool _isObserving;
    NSArray *_unreadConversations;
    unsigned long long _numberOfUnreadConversations;
    NSMutableSet *_knownInboxConversationIDs;
    NSMutableArray *_mutableInboxConversations;
    NSMutableSet *_knownLiveConversationIDs;
    NSMutableArray *_mutableLiveConversations;
    NSMutableSet *_knownFavouriteConversationIDs;
    NSMutableArray *_mutableFavouriteConversations;
    SKPArrayFilter *_unreadConversationsFilter;
}

+ (id)keyPathsForValuesAffectingInboxConversations;
+ (id)lazyLoadedPropertiesKeypaths;
@property(nonatomic) _Bool isObserving; // @synthesize isObserving=_isObserving;
@property(retain, nonatomic) SKPArrayFilter *unreadConversationsFilter; // @synthesize unreadConversationsFilter=_unreadConversationsFilter;
@property(retain, nonatomic) NSMutableArray *mutableFavouriteConversations; // @synthesize mutableFavouriteConversations=_mutableFavouriteConversations;
@property(retain, nonatomic) NSMutableSet *knownFavouriteConversationIDs; // @synthesize knownFavouriteConversationIDs=_knownFavouriteConversationIDs;
@property(retain, nonatomic) NSMutableArray *mutableLiveConversations; // @synthesize mutableLiveConversations=_mutableLiveConversations;
@property(retain, nonatomic) NSMutableSet *knownLiveConversationIDs; // @synthesize knownLiveConversationIDs=_knownLiveConversationIDs;
@property(retain, nonatomic) NSMutableArray *mutableInboxConversations; // @synthesize mutableInboxConversations=_mutableInboxConversations;
@property(retain, nonatomic) NSMutableSet *knownInboxConversationIDs; // @synthesize knownInboxConversationIDs=_knownInboxConversationIDs;
@property(nonatomic) unsigned long long numberOfUnreadConversations; // @synthesize numberOfUnreadConversations=_numberOfUnreadConversations;
@property(retain, nonatomic) NSArray *unreadConversations; // @synthesize unreadConversations=_unreadConversations;
- (void).cxx_destruct;
- (id)objectIdSetFromConversations:(id)arg1;
- (void)removeObjectFromFavouriteConversationsAtIndex:(unsigned long long)arg1;
- (void)insertObject:(id)arg1 inFavouriteConversationsAtIndex:(unsigned long long)arg2;
- (void)setFavouriteConversations:(id)arg1;
@property(readonly, nonatomic) NSArray *favouriteConversations;
- (void)removeObjectFromInboxConversationsAtIndex:(unsigned long long)arg1;
- (void)insertObject:(id)arg1 inInboxConversationsAtIndex:(unsigned long long)arg2;
- (void)setInboxConversations:(id)arg1;
@property(readonly, nonatomic) NSArray *inboxConversations;
- (void)removeObjectFromLiveConversationsAtIndex:(unsigned long long)arg1;
- (void)insertObject:(id)arg1 inLiveConversationsAtIndex:(unsigned long long)arg2;
- (void)setLiveConversations:(id)arg1;
@property(readonly, nonatomic) NSArray *liveConversations;
- (void)observeValueForKeyPath:(id)arg1 ofObject:(id)arg2 change:(id)arg3 context:(void *)arg4;
- (_Bool)flushLazyProperty:(id)arg1;
- (_Bool)hasLegacyGroupConversationNewerThan:(double)arg1;
- (id)fetchOperationForLazyProperty:(id)arg1 fetchQueueIdentifier:(id *)arg2;
- (void)updateListIfNeeded:(id)arg1;
- (void)setNeedsUpdateList:(id)arg1;
- (void)OnConversationListChange:(id)arg1 andConversationobjectid:(unsigned int)arg2 andType:(int)arg3 andAdded:(_Bool)arg4;
- (void)hideConversations:(id)arg1;
- (void)hideAll;
- (void)removeConversations:(id)arg1;
- (void)removeAll;
- (void)markConversationsAsRead:(id)arg1;
- (void)markAllAsRead;
- (void)invalidate;
- (void)dealloc;
- (id)init;

// Remaining properties
@property(readonly, copy) NSString *debugDescription;
@property(readonly, copy) NSString *description;
@property(readonly) unsigned long long hash;
@property(readonly) Class superclass;

@end

