/*
* This header is generated by classdump-dyld 1.0
* on Friday, August 26, 2016 at 5:44:42 PM British Summer Time
* Operating System: Version 9.3.3 (Build 13G34)
* Image Source: /var/containers/Bundle/Application/BCB8F06C-D639-4947-A2BF-415A0A66C023/Skype.app/Skype
* classdump-dyld is licensed under GPLv3, Copyright Â© 2013-2016 by Elias Limneos.
*/

#import <Skype/SKPITrouterConnection.h>
#import <Skype/SKPWebServiceDelegate.h>
#import <Skype/SKPSocketIOConnectionDelegate.h>

@protocol SKPTrouterConnectionDelegate, SKPITCPStreamFactory;
@class NSDate, SKPTrouterAllocation, NSString, SKPTrouterAuthentication, SKPSocketIOConnection, NSError, NSTimer, SKPDispatcher, SKPPushNotificationRegistrar, SKPPushNotificationHandler, SKPJSONWebService, NSURL, SKPTrouterLatencyInformation;

@interface SKPTrouterConnectionEx : NSObject <SKPITrouterConnection, SKPWebServiceDelegate, SKPSocketIOConnectionDelegate> {

	BOOL reactToReachabilityChanges;
	long long _connectionState;
	SKPTrouterAllocation* _trouterAllocation;
	NSString* _connectionId;
	SKPTrouterAuthentication* _trouterAuth;
	SKPSocketIOConnection* _socketIOConnection;
	NSError* _error;
	NSDate* _errorDate;
	long long _recoveryAttempts;
	double _nextDelay;
	NSTimer* _connectionSetupHealthCheckTimer;
	id<SKPTrouterConnectionDelegate> _delegate;
	NSDate* _expirationDate;
	id<SKPITCPStreamFactory> _streamFactory;
	SKPDispatcher* _dispatcher;
	SKPPushNotificationRegistrar* _pushNotificationRegistrar;
	SKPPushNotificationHandler* _pushNotificationHandler;
	SKPJSONWebService* _webservice;
	NSURL* _baseTrouterURL;
	NSURL* _baseTrouterPolicyControllerURL;
	unsigned long long _setupTaskIdentifier;
	/*^block*/id _onEstablishedBlock;
	SKPTrouterLatencyInformation* _latencyInformation;

}

@property (assign) unsigned long long setupTaskIdentifier;                                          //@synthesize setupTaskIdentifier=_setupTaskIdentifier - In the implementation block
@property (copy) id onEstablishedBlock;                                                             //@synthesize onEstablishedBlock=_onEstablishedBlock - In the implementation block
@property (retain) SKPTrouterLatencyInformation * latencyInformation;                               //@synthesize latencyInformation=_latencyInformation - In the implementation block
@property (assign,nonatomic) long long connectionState;                                             //@synthesize connectionState=_connectionState - In the implementation block
@property (nonatomic,retain) SKPTrouterAllocation * trouterAllocation;                              //@synthesize trouterAllocation=_trouterAllocation - In the implementation block
@property (nonatomic,retain) NSString * connectionId;                                               //@synthesize connectionId=_connectionId - In the implementation block
@property (nonatomic,retain) SKPTrouterAuthentication * trouterAuth;                                //@synthesize trouterAuth=_trouterAuth - In the implementation block
@property (nonatomic,retain) SKPSocketIOConnection * socketIOConnection;                            //@synthesize socketIOConnection=_socketIOConnection - In the implementation block
@property (nonatomic,retain) NSError * error;                                                       //@synthesize error=_error - In the implementation block
@property (nonatomic,retain) NSDate * errorDate;                                                    //@synthesize errorDate=_errorDate - In the implementation block
@property (assign,nonatomic) long long recoveryAttempts;                                            //@synthesize recoveryAttempts=_recoveryAttempts - In the implementation block
@property (assign,nonatomic) double nextDelay;                                                      //@synthesize nextDelay=_nextDelay - In the implementation block
@property (nonatomic,retain) NSTimer * connectionSetupHealthCheckTimer;                             //@synthesize connectionSetupHealthCheckTimer=_connectionSetupHealthCheckTimer - In the implementation block
@property (__weak) id<SKPTrouterConnectionDelegate> delegate;                                       //@synthesize delegate=_delegate - In the implementation block
@property (retain) NSDate * expirationDate;                                                         //@synthesize expirationDate=_expirationDate - In the implementation block
@property (nonatomic,retain) id<SKPITCPStreamFactory> streamFactory;                                //@synthesize streamFactory=_streamFactory - In the implementation block
@property (nonatomic,retain) SKPDispatcher * dispatcher;                                            //@synthesize dispatcher=_dispatcher - In the implementation block
@property (nonatomic,retain) SKPPushNotificationRegistrar * pushNotificationRegistrar;              //@synthesize pushNotificationRegistrar=_pushNotificationRegistrar - In the implementation block
@property (nonatomic,retain) SKPPushNotificationHandler * pushNotificationHandler;                  //@synthesize pushNotificationHandler=_pushNotificationHandler - In the implementation block
@property (nonatomic,retain) SKPJSONWebService * webservice;                                        //@synthesize webservice=_webservice - In the implementation block
@property (nonatomic,retain) NSURL * baseTrouterURL;                                                //@synthesize baseTrouterURL=_baseTrouterURL - In the implementation block
@property (nonatomic,retain) NSURL * baseTrouterPolicyControllerURL;                                //@synthesize baseTrouterPolicyControllerURL=_baseTrouterPolicyControllerURL - In the implementation block
@property (readonly) unsigned long long hash; 
@property (readonly) Class superclass; 
@property (copy,readonly) NSString * description; 
@property (copy,readonly) NSString * debugDescription; 
-(void)myRegistrationsWithCompletion:(/*^block*/id)arg1 ;
-(BOOL)isDebuggingTrouter;
-(id)registrationValidationRequestWithToken:(id)arg1 ;
-(void)logErrorRecursive:(id)arg1 depth:(long long)arg2 ;
-(SKPPushNotificationRegistrar *)pushNotificationRegistrar;
-(SKPPushNotificationHandler *)pushNotificationHandler;
-(void)setStreamFactory:(id<SKPITCPStreamFactory>)arg1 ;
-(void)setPushNotificationRegistrar:(SKPPushNotificationRegistrar *)arg1 ;
-(void)setPushNotificationHandler:(SKPPushNotificationHandler *)arg1 ;
-(void)setupWithCompletion:(/*^block*/id)arg1 ;
-(void)reconnectFromFailedStep;
-(void)sendPingWithTimeout:(double)arg1 completionBlock:(/*^block*/id)arg2 ;
-(id<SKPITCPStreamFactory>)streamFactory;
-(id)initAndInjectStreamFactory:(id)arg1 injectDispatcher:(id)arg2 injectPushNotificationRegistrar:(id)arg3 injectPushNotificationHandler:(id)arg4 ;
-(void)webService:(id)arg1 didFailWithError:(id)arg2 forRequestWithTag:(unsigned long long)arg3 ;
-(void)webService:(id)arg1 didReceiveObject:(id)arg2 forRequestWithTag:(unsigned long long)arg3 ;
-(void)setConnectionId:(NSString *)arg1 ;
-(NSString *)connectionId;
-(SKPSocketIOConnection *)socketIOConnection;
-(void)setSocketIOConnection:(SKPSocketIOConnection *)arg1 ;
-(SKPJSONWebService *)webservice;
-(void)setWebservice:(SKPJSONWebService *)arg1 ;
-(void)setOnEstablishedBlock:(id)arg1 ;
-(void)startSetupBackgroundTaskIfNeeded;
-(void)scheduleNext;
-(void)cancelNext;
-(NSURL *)baseTrouterURL;
-(SKPTrouterLatencyInformation *)latencyInformation;
-(SKPTrouterAllocation *)trouterAllocation;
-(id)authenticationRequestWithConnectionID:(id)arg1 skypeToken:(id)arg2 error:(id*)arg3 ;
-(id)connectionRequestWithError:(id*)arg1 ;
-(void)resetErrorCondition;
-(SKPTrouterAuthentication *)trouterAuth;
-(void)registerForTrouterNotifications;
-(id)onEstablishedBlock;
-(void)endSetupBackgroundTaskIfNeeded;
-(void)setErrorDate:(NSDate *)arg1 ;
-(void)setTrouterAuth:(SKPTrouterAuthentication *)arg1 ;
-(void)setTrouterAllocation:(SKPTrouterAllocation *)arg1 ;
-(void)setRecoveryAttempts:(long long)arg1 ;
-(id)friendlyStateName;
-(double)backoff:(double)arg1 ;
-(void)scheduleNextWithDelay:(double)arg1 ;
-(id)friendlyStateName:(long long)arg1 ;
-(void)setLatencyInformation:(SKPTrouterLatencyInformation *)arg1 ;
-(void)doAllocateTrouterInstance;
-(void)doAuthTrouterInstance;
-(void)doConnectTrouterInstance;
-(void)doFinalizeConnection;
-(void)recoverConnection;
-(unsigned long long)setupTaskIdentifier;
-(void)setSetupTaskIdentifier:(unsigned long long)arg1 ;
-(NSURL *)baseTrouterPolicyControllerURL;
-(id)cookieWithSkypeToken:(id)arg1 ;
-(long long)currentUnixTime;
-(void)forceFullReconnect;
-(void)connection:(id)arg1 didSocketIOConnect:(id)arg2 ;
-(void)connectionDidReceiveHeartbeat:(id)arg1 ;
-(void)connection:(id)arg1 didConnect:(long long)arg2 ;
-(void)connection:(id)arg1 didReceiveText:(id)arg2 atTime:(id)arg3 ;
-(void)connection:(id)arg1 willOpenInputStream:(id)arg2 outputStream:(id)arg3 ;
-(void)connection:(id)arg1 socketActivity:(long long)arg2 ;
-(void)connectionSetupHealthCheck;
-(NSDate *)errorDate;
-(long long)recoveryAttempts;
-(NSTimer *)connectionSetupHealthCheckTimer;
-(void)setConnectionSetupHealthCheckTimer:(NSTimer *)arg1 ;
-(void)setBaseTrouterURL:(NSURL *)arg1 ;
-(void)setBaseTrouterPolicyControllerURL:(NSURL *)arg1 ;
-(double)nextDelay;
-(void)setNextDelay:(double)arg1 ;
-(void)next;
-(void)setDelegate:(id<SKPTrouterConnectionDelegate>)arg1 ;
-(void)dealloc;
-(id<SKPTrouterConnectionDelegate>)delegate;
-(id)domain;
-(void)start;
-(void)close;
-(void)connection:(id)arg1 didFailWithError:(id)arg2 ;
-(void)setExpirationDate:(NSDate *)arg1 ;
-(NSDate *)expirationDate;
-(void)reachabilityChanged:(long long)arg1 ;
-(id)currentDate;
-(long long)connectionState;
-(void)setError:(NSError *)arg1 ;
-(NSError *)error;
-(void)failWithError:(id)arg1 ;
-(void)send:(id)arg1 ;
-(void)setConnectionState:(long long)arg1 ;
-(SKPDispatcher *)dispatcher;
-(void)setDispatcher:(SKPDispatcher *)arg1 ;
@end

