/*
* This header is generated by classdump-dyld 1.0
* on Friday, August 26, 2016 at 5:44:41 PM British Summer Time
* Operating System: Version 9.3.3 (Build 13G34)
* Image Source: /var/containers/Bundle/Application/BCB8F06C-D639-4947-A2BF-415A0A66C023/Skype.app/Skype
* classdump-dyld is licensed under GPLv3, Copyright Â© 2013-2016 by Elias Limneos.
*/

@class NSString, NSUUID;


@protocol SKPCalling <NSObject,SKPAudioSessionManagerClient>
@property (nonatomic,copy,readonly) NSString * guid; 
@property (nonatomic,copy,readonly) NSString * conversationIdentity; 
@property (nonatomic,copy,readonly) NSString * displayName; 
@property (nonatomic,copy,readonly) NSString * unescapedDisplayName; 
@property (nonatomic,readonly) BOOL currentUserIsLiveOrRinging; 
@property (nonatomic,readonly) BOOL otherConsumersAreLiveOrRinging; 
@property (nonatomic,readonly) BOOL currentUserHasBeenLive; 
@property (getter=isMuted,nonatomic,readonly) BOOL muted; 
@property (getter=isConference,nonatomic,readonly) BOOL conference; 
@property (getter=isPSTN,nonatomic,readonly) BOOL pstn; 
@property (getter=isTestCall,nonatomic,readonly) BOOL testCall; 
@property (getter=isSendingVideo,nonatomic,readonly) BOOL sendingVideo; 
@property (getter=isReceivingVideo,nonatomic,readonly) BOOL receivingVideo; 
@property (getter=isVideo,nonatomic,readonly) BOOL video; 
@property (getter=isVideoCallHint,nonatomic,readonly) BOOL videoCallHint; 
@property (getter=isRingingForMe,nonatomic,readonly) BOOL ringingForMe; 
@property (getter=isInCall,nonatomic,readonly) BOOL inCall; 
@property (getter=isHeldLocally,nonatomic,readonly) BOOL heldLocally; 
@property (getter=isHeldRemotely,nonatomic,readonly) BOOL heldRemotely; 
@property (getter=isInbound,nonatomic,readonly) BOOL inbound; 
@property (getter=isCurrentUserInProgress,nonatomic,readonly) BOOL currentUserInProgress; 
@property (getter=isInboundCallAnswered,nonatomic,readonly) BOOL inboundCallAnswered; 
@property (nonatomic,readonly) unsigned long long modelType; 
@property (nonatomic,readonly) long long userTargetState; 
@property (nonatomic,readonly) long long simpleCallState; 
@property (nonatomic,readonly) long long callState; 
@property (nonatomic,readonly) long long participantLastLeaveReason; 
@property (nonatomic,readonly) long long startupState; 
@property (nonatomic,readonly) long long answerMethod; 
@property (nonatomic,readonly) long long initialActiveAudioOutput; 
@property (nonatomic,readonly) double callEndedDuration; 
@property (nonatomic,readonly) double setupTimeout; 
@property (nonatomic,readonly) NSUUID * uuid; 
@property (assign,nonatomic) long long userInterfaceEndReasonState; 
@property (nonatomic,readonly) NSObject*<SKPPreviewVideo> previewVideo; 
@required
+(long long)endReasonStateFromSKPCallServiceErrorCode:(long long)arg1;
-(NSString *)unescapedDisplayName;
-(BOOL)isConference;
-(NSString *)conversationIdentity;
-(NSObject*<SKPPreviewVideo>)previewVideo;
-(long long)userTargetState;
-(void)startVideo:(BOOL)arg1;
-(double)callEndedDuration;
-(BOOL)isRingingForMe;
-(BOOL)isCurrentUserInProgress;
-(BOOL)isReceivingVideo;
-(long long)startupState;
-(void)answerWithVideo:(BOOL)arg1 answeringMethod:(long long)arg2 setupTimeout:(double)arg3;
-(void)setUserInterfaceEndReasonState:(long long)arg1;
-(long long)userInterfaceEndReasonState;
-(void)endWithReason:(long long)arg1;
-(BOOL)isVideoCallHint;
-(BOOL)isCallForConversationWithIdentity:(id)arg1 guid:(id)arg2;
-(BOOL)startCallWithIdentities:(id)arg1 withVideo:(BOOL)arg2;
-(void)answerWithVideo:(BOOL)arg1 answeringMethod:(long long)arg2;
-(BOOL)joinLiveSession;
-(void)holdLiveSessionWithError:(id)arg1;
-(void)resumeLiveSession;
-(void)rejectWithError:(id)arg1 andReason:(long long)arg2;
-(void)resetRejectionError;
-(BOOL)shouldShowCallQualityFeedback;
-(BOOL)shouldShowRetryCall;
-(void)fetchVideoCallHintWithCompletionBlock:(/*^block*/id)arg1;
-(BOOL)upgradeToTranslatedCall;
-(BOOL)downgradeFromTranslatedCall;
-(BOOL)muteTranslatedAudio:(BOOL)arg1;
-(BOOL)currentUserIsLiveOrRinging;
-(BOOL)otherConsumersAreLiveOrRinging;
-(BOOL)currentUserHasBeenLive;
-(BOOL)isPSTN;
-(BOOL)isTestCall;
-(BOOL)isHeldLocally;
-(BOOL)isHeldRemotely;
-(BOOL)isInbound;
-(BOOL)isInboundCallAnswered;
-(long long)simpleCallState;
-(long long)participantLastLeaveReason;
-(long long)answerMethod;
-(long long)initialActiveAudioOutput;
-(double)setupTimeout;
-(BOOL)isInCall;
-(void)invalidate;
-(void)reset;
-(NSString *)displayName;
-(NSUUID *)uuid;
-(BOOL)isVideo;
-(long long)callState;
-(NSString *)guid;
-(void)updateWithCall:(id)arg1;
-(BOOL)isSendingVideo;
-(unsigned long long)modelType;
-(BOOL)isMuted;

@end

