/*
* This header is generated by classdump-dyld 0.7
* on Friday, August 21, 2015 at 1:44:04 AM British Summer Time
* Operating System: Version 8.4 (Build 12H143)
* Image Source: /private/var/mobile/Containers/Bundle/Application/DE3331E2-1165-4E9B-8894-BDF4D69820B5/ECBCricketApp.app/ECBCricketApp
* classdump-dyld is licensed under GPLv3, Copyright Â© 2013-2014 by Elias Limneos.
*/

#import <ECBCricketApp/ECBCricketApp-Structs.h>
#import <ECBCricketApp/GCKCastSecureSocketDelegate.h>
#import <ECBCricketApp/GCKCastChannelHandler.h>
#import <ECBCricketApp/GCKDeviceAuthChannelDelegate.h>
#import <ECBCricketApp/GCKReceiverControlChannelDelegate.h>
#import <ECBCricketApp/GCKHeartbeatChannelDelegate.h>

@protocol GCKDeviceManagerDelegate, GCKDeviceManagerDelegateInternal;
@class NSString, NSMutableDictionary, NSMutableArray, GCKCastSecureSocket, GCKLaunchOptions, NSError, NSTimer, GCKDevice, GCKApplicationMetadata, GCKConnectionControlChannel, GCKDeviceAuthChannel, GCKHeartbeatChannel, GCKReceiverControlChannel;

@interface GCKDeviceManager : NSObject <GCKCastSecureSocketDelegate, GCKCastChannelHandler, GCKDeviceAuthChannelDelegate, GCKReceiverControlChannelDelegate, GCKHeartbeatChannelDelegate> {

	NSString* _sourceID;
	NSMutableDictionary* _channels;
	NSMutableArray* _internalChannels;
	GCKCastSecureSocket* _socket;
	long long _nextRequestID;
	double _inactivityTimeout;
	NSString* _connectedAppTransportID;
	NSString* _applicationIDToJoin;
	NSString* _sessionIDToJoin;
	NSString* _pausedAppID;
	NSString* _pausedSessionID;
	long long _joinAppRequestID;
	long long _stopAppRequestID;
	long long _statusRequestID;
	BOOL _isRegisteredForAppStateNotifications;
	BOOL _shouldLaunchIfJoinFails;
	BOOL _ignoreAppStateNotifications;
	GCKLaunchOptions* _launchOptionsIfJoinFails;
	NSError* _disconnectionError;
	long long _appConnectionState;
	double _reconnectStartIntervalSince1970;
	double _lastConnectAttemptIntervalSince1970;
	NSTimer* _reconnectTimer;
	BOOL _suspensionNotified;
	BOOL _wasConnected;
	BOOL _connectionSuspended;
	BOOL _reconnectAfterDisconnected;
	BOOL _isReconnecting;
	BOOL _deviceMuted;
	float _deviceVolume;
	long long _connectionState;
	double _reconnectTimeout;
	GCKDevice* _device;
	id<GCKDeviceManagerDelegate> _delegate;
	NSString* _applicationSessionID;
	GCKApplicationMetadata* _applicationMetadata;
	NSString* _applicationStatusText;
	id<GCKDeviceManagerDelegateInternal> _internalDelegate;
	long long _activeInputStatus;
	long long _standbyStatus;
	GCKConnectionControlChannel* _connectionControlChannel;
	GCKDeviceAuthChannel* _deviceAuthChannel;
	GCKHeartbeatChannel* _heartbeatChannel;
	GCKReceiverControlChannel* _receiverControlChannel;

}

@property (assign,nonatomic) long long connectionState;                                                 //@synthesize connectionState=_connectionState - In the implementation block
@property (nonatomic,readonly) BOOL isConnected; 
@property (nonatomic,readonly) BOOL isConnectedToApp; 
@property (assign,nonatomic) BOOL isReconnecting;                                                       //@synthesize isReconnecting=_isReconnecting - In the implementation block
@property (assign,nonatomic) double reconnectTimeout;                                                   //@synthesize reconnectTimeout=_reconnectTimeout - In the implementation block
@property (nonatomic,readonly) GCKDevice * device;                                                      //@synthesize device=_device - In the implementation block
@property (assign,nonatomic,__weak) id<GCKDeviceManagerDelegate> delegate;                              //@synthesize delegate=_delegate - In the implementation block
@property (assign,nonatomic) float deviceVolume;                                                        //@synthesize deviceVolume=_deviceVolume - In the implementation block
@property (assign,nonatomic) BOOL deviceMuted;                                                          //@synthesize deviceMuted=_deviceMuted - In the implementation block
@property (nonatomic,copy) NSString * applicationSessionID;                                             //@synthesize applicationSessionID=_applicationSessionID - In the implementation block
@property (nonatomic,copy) GCKApplicationMetadata * applicationMetadata;                                //@synthesize applicationMetadata=_applicationMetadata - In the implementation block
@property (nonatomic,copy) NSString * applicationStatusText;                                            //@synthesize applicationStatusText=_applicationStatusText - In the implementation block
@property (assign,nonatomic,__weak) id<GCKDeviceManagerDelegateInternal> internalDelegate;              //@synthesize internalDelegate=_internalDelegate - In the implementation block
@property (assign,nonatomic) long long activeInputStatus;                                               //@synthesize activeInputStatus=_activeInputStatus - In the implementation block
@property (assign,nonatomic) long long standbyStatus;                                                   //@synthesize standbyStatus=_standbyStatus - In the implementation block
@property (nonatomic,retain) GCKConnectionControlChannel * connectionControlChannel;                    //@synthesize connectionControlChannel=_connectionControlChannel - In the implementation block
@property (nonatomic,retain) GCKDeviceAuthChannel * deviceAuthChannel;                                  //@synthesize deviceAuthChannel=_deviceAuthChannel - In the implementation block
@property (nonatomic,retain) GCKHeartbeatChannel * heartbeatChannel;                                    //@synthesize heartbeatChannel=_heartbeatChannel - In the implementation block
@property (nonatomic,retain) GCKReceiverControlChannel * receiverControlChannel;                        //@synthesize receiverControlChannel=_receiverControlChannel - In the implementation block
-(long long)launchApplication:(id)arg1 ;
-(long long)stopApplication;
-(id)initWithDevice:(id)arg1 clientPackageName:(id)arg2 ;
-(BOOL)addChannel:(id)arg1 ;
-(BOOL)sendTextMessage:(id)arg1 withNamespace:(id)arg2 ;
-(BOOL)sendTextMessage:(id)arg1 withNamespace:(id)arg2 toDestinationID:(id)arg3 ;
-(BOOL)sendBinaryMessage:(id)arg1 withNamespace:(id)arg2 ;
-(BOOL)sendBinaryMessage:(id)arg1 withNamespace:(id)arg2 toDestinationID:(id)arg3 ;
-(long long)generateRequestID;
-(void)deviceAuthChannel:(id)arg1 didFailToAuthenticateWithError:(id)arg2 ;
-(void)deviceAuthChannelDidAuthenticate:(id)arg1 ;
-(id)initWithDevice:(id)arg1 clientPackageName:(id)arg2 ignoreAppStateNotifications:(BOOL)arg3 ;
-(void)unregisterForAppStateNotifications;
-(void)disconnectWithError:(id)arg1 isExplicit:(BOOL)arg2 ;
-(void)registerForAppStateNotifications;
-(void)connectInternalUnchecked;
-(void)connectChannel:(id)arg1 ;
-(void)disconnectChannel:(id)arg1 ;
-(long long)requestDeviceStatus;
-(long long)requestAvailabilityForAppIDs:(id)arg1 ;
-(void)appDidEnterBackground;
-(void)appWillEnterForeground;
-(BOOL)isReconnecting;
-(void)clearReconnectState;
-(void)setIsReconnecting:(BOOL)arg1 ;
-(void)notifyConnectionSuspendedWithReason:(long long)arg1 ;
-(void)disconnectInternalUncheckedWithExplicitFlag:(BOOL)arg1 ;
-(BOOL)clearJoinState;
-(GCKConnectionControlChannel *)connectionControlChannel;
-(BOOL)updateApplicationMetadata:(id)arg1 ;
-(void)notifyDidReceiveApplicationMetadata;
-(BOOL)connectToApplication:(id)arg1 ;
-(void)notifyDidConnectToApplication:(id)arg1 withSessionID:(id)arg2 launchedApplication:(BOOL)arg3 ;
-(void)notifyDidFailToConnectToApplicationWithError:(id)arg1 ;
-(void)notifyDidDisconnectFromApplicationWithError:(id)arg1 ;
-(void)setApplicationMetadata:(GCKApplicationMetadata *)arg1 ;
-(void)setApplicationStatusText:(NSString *)arg1 ;
-(void)setDeviceVolume:(float)arg1 ;
-(void)setDeviceMuted:(BOOL)arg1 ;
-(void)setActiveInputStatus:(long long)arg1 ;
-(double)reconnectTimeout;
-(long long)launchApplication:(id)arg1 withLaunchOptions:(id)arg2 ;
-(GCKReceiverControlChannel *)receiverControlChannel;
-(long long)joinApplicationInternalUnchecked:(id)arg1 sessionID:(id)arg2 ;
-(long long)joinApplication:(id)arg1 sessionID:(id)arg2 ;
-(BOOL)isConnectedToApp;
-(void)disconnectFromApplicationAndNotifyWithError:(id)arg1 ;
-(long long)stopApplicationWithSessionID:(id)arg1 ;
-(BOOL)clearStopState;
-(BOOL)sendMessageWithNamespace:(id)arg1 toDestinationID:(id)arg2 stringPayload:(id)arg3 binaryPayload:(id)arg4 ;
-(void)notifyConnectionResumedWithJoinedState:(BOOL)arg1 ;
-(void)notifyDidConnect;
-(void)handleConnectionError:(id)arg1 ;
-(GCKHeartbeatChannel *)heartbeatChannel;
-(BOOL)isInForeground;
-(void)notifyDidDisconnectWithError:(id)arg1 ;
-(void)notifyDidFailToConnectWithError:(id)arg1 ;
-(void)connectAndNotifyDidConnectToApplication:(id)arg1 launchedApplication:(BOOL)arg2 ;
-(NSString *)applicationStatusText;
-(float)deviceVolume;
-(BOOL)deviceMuted;
-(long long)activeInputStatus;
-(long long)standbyStatus;
-(void)setStandbyStatus:(long long)arg1 ;
-(void)notifyDidFailToStopAppWithError:(id)arg1 ;
-(void)notifyRequest:(long long)arg1 failedWithError:(id)arg2 ;
-(void)connectToReceiverChannel;
-(void)clearDeviceState;
-(GCKApplicationMetadata *)applicationMetadata;
-(void)castSocket:(id)arg1 didConnectWithPeerSecTrust:(SecTrustRef)arg2 ;
-(void)castSocket:(id)arg1 didFailToConnectWithError:(id)arg2 ;
-(void)castSocket:(id)arg1 didReceiveMessage:(id)arg2 ;
-(void)castSocket:(id)arg1 didDisconnectWithError:(id)arg2 ;
-(void)receiverControlChannel:(id)arg1 didLaunchCastApplication:(id)arg2 ;
-(void)receiverControlChannel:(id)arg1 didFailToLaunchCastApplicationWithError:(id)arg2 ;
-(void)receiverControlChannel:(id)arg1 requestDidFailWithID:(long long)arg2 error:(id)arg3 ;
-(void)receiverControlChannel:(id)arg1 didReplaceRequestWithID:(long long)arg2 ;
-(void)receiverControlChannel:(id)arg1 didReceiveReceiverStatus:(id)arg2 applicationStatus:(id)arg3 requestID:(long long)arg4 ;
-(void)receiverControlChannel:(id)arg1 didReceiveAppAvailability:(id)arg2 ;
-(void)heartbeatChannelDidTimeout:(id)arg1 ;
-(void)disconnectWithLeave:(BOOL)arg1 ;
-(BOOL)removeChannel:(id)arg1 ;
-(void)connectWithInactivityTimeout:(double)arg1 ;
-(long long)launchApplication:(id)arg1 relaunchIfRunning:(BOOL)arg2 ;
-(long long)joinApplication:(id)arg1 ;
-(BOOL)leaveApplication;
-(void)receiverControlChannel:(id)arg1 volumeDidChangeToLevel:(float)arg2 isMuted:(BOOL)arg3 ;
-(void)receiverControlChannel:(id)arg1 didReceiveActiveInputStatus:(long long)arg2 ;
-(void)setReconnectTimeout:(double)arg1 ;
-(NSString *)applicationSessionID;
-(void)setApplicationSessionID:(NSString *)arg1 ;
-(void)setConnectionControlChannel:(GCKConnectionControlChannel *)arg1 ;
-(GCKDeviceAuthChannel *)deviceAuthChannel;
-(void)setDeviceAuthChannel:(GCKDeviceAuthChannel *)arg1 ;
-(void)setHeartbeatChannel:(GCKHeartbeatChannel *)arg1 ;
-(void)setReceiverControlChannel:(GCKReceiverControlChannel *)arg1 ;
-(BOOL)isInBackground;
-(long long)setMuted:(BOOL)arg1 ;
-(long long)connectionState;
-(void)dealloc;
-(void)setDelegate:(id<GCKDeviceManagerDelegate>)arg1 ;
-(id)init;
-(id<GCKDeviceManagerDelegate>)delegate;
-(void)connect;
-(void)disconnect;
-(void)reconnectTimerDidFire:(id)arg1 ;
-(void)setInternalDelegate:(id<GCKDeviceManagerDelegateInternal>)arg1 ;
-(id<GCKDeviceManagerDelegateInternal>)internalDelegate;
-(void)setConnectionState:(long long)arg1 ;
-(BOOL)isConnecting;
-(BOOL)isConnected;
-(BOOL)scheduleReconnect;
-(GCKDevice *)device;
-(long long)setVolume:(float)arg1 ;
@end

