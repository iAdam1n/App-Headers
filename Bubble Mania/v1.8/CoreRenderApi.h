/*
* This header is generated by classdump-dyld 1.0
* on Thursday, August 25, 2016 at 11:58:14 PM British Summer Time
* Operating System: Version 9.3.3 (Build 13G34)
* Image Source: /var/containers/Bundle/Application/0CF72264-5488-4FD5-B700-EF786D177983/BubbleMania.app/BubbleMania
* classdump-dyld is licensed under GPLv3, Copyright Â© 2013-2016 by Elias Limneos.
*/


#import <BubbleMania/BubbleMania-Structs.h>
@interface CoreRenderApi : NSObject
+(void)swapBuffers;
+(void)removeTexture:(int)arg1 ;
+(void)loadEffect:(int)arg1 withEffectFile:(EffectPB*)arg2 passFileMap:(unordered_map<unsigned long, const char *, std::__1::hash<unsigned long>, std::__1::equal_to<unsigned long>, std::__1::allocator<std::__1::pair<const unsigned long, const char *> > >Ref)arg3 ;
+(int)generateEffect;
+(void)addGLClearToRenderList:(unsigned)arg1 ;
+(void)removeCamera:(int)arg1 ;
+(int)generateMesh:(int)arg1 ;
+(void)clearFrameBuffer;
+(void)clearRenderList;
+(int)generateCamera;
+(void)addCameraToRenderList:(int)arg1 ;
+(void)setCamera:(int)arg1 properties:(CRCameraProperties*)arg2 ;
+(int)generateLight:(int)arg1 ;
+(void)removeLight:(int)arg1 ;
+(void)addLightToRenderList:(int)arg1 ;
+(void)setLight:(int)arg1 properties:(CRLightProperties*)arg2 ;
+(int)generateMesh;
+(void)removeMesh:(int)arg1 ;
+(void)copyMesh:(int)arg1 from:(int)arg2 ;
+(void)addMesh:(int)arg1 vertices:(CRVertexBuffer*)arg2 ;
+(void)addMesh:(int)arg1 vertices:(CRVertexBuffer*)arg2 toFrame:(int)arg3 ;
+(int)generateEmitter;
+(void)removeEmitter:(int)arg1 ;
+(void)setEmitterGroupProperties:(int)arg1 properties:(CRParticle2EmitterGroupProperties*)arg2 ;
+(void)addEmitterGroupToRenderList:(int)arg1 ;
+(BOOL)getEmitterGroupEnded:(int)arg1 ;
+(BOOL)schemeExistsForFile:(id)arg1 ;
+(void)addScheme:(CRParticle2Scheme*)arg1 atIndex:(long long)arg2 totalSchemeCount:(long long)arg3 forFile:(id)arg4 loadedSchemeCount:(int*)arg5 ;
+(void)removeSchemesForFile:(id)arg1 ;
+(void)setSchemeGroup:(const vector<CRParticle2Scheme *, std::__1::allocator<CRParticle2Scheme *> >*)arg1 forFile:(id)arg2 ;
+(void)getSchemeGroup:(vector<CRParticle2Scheme *, std::__1::allocator<CRParticle2Scheme *> >*)arg1 forFile:(id)arg2 ;
+(void)clearEmitterGroupEmitters:(int)arg1 ;
+(int)generateDrawObject;
+(void)removeDrawObject:(int)arg1 ;
+(void)setDrawObject:(int)arg1 vertices:(CRVertexBuffer*)arg2 drawMode:(int)arg3 ;
+(void)setDrawObject:(int)arg1 directVertexBuffer:(CRAbstractVertexBuffer*)arg2 ;
+(void)setDrawObject:(int)arg1 properties:(CRDrawPropertyProxy*)arg2 ;
+(void)addDrawObjectToRenderList:(int)arg1 ;
+(void)lineIntersectsWithDrawObject:(int)arg1 line:(const Line*)arg2 stopAtFirstCollision:(BOOL)arg3 useAlphaTest:(BOOL)arg4 collisionResult:(CRCollisionResult*)arg5 ;
+(void)lineIntersectsWithDrawObject:(int)arg1 transformedLine:(CRLine*)arg2 stopAtFirstCollision:(BOOL)arg3 useAlphaTest:(BOOL)arg4 collisionResult:(CRCollisionResult*)arg5 ;
+(void)getDrawObjectVertex:(int)arg1 index:(int)arg2 vertex:(CRVertex*)arg3 ;
+(int)generateTexture;
+(void)loadTexture:(int)arg1 withPath:(id)arg2 success:(BOOL*)arg3 ;
+(void)getTextureDimensions:(int)arg1 width:(unsigned*)arg2 height:(unsigned*)arg3 ;
+(void)loadTexture:(int)arg1 usingS8i:(id)arg2 ;
+(void)changeTexture:(int)arg1 shouldBeGarbageCollected:(BOOL)arg2 ;
+(void)garbageCollect:(int)arg1 ;
+(void)resetGarbageCollectClocks;
+(void)setClearColorWithR:(float)arg1 g:(float)arg2 b:(float)arg3 a:(float)arg4 ;
+(void)init;
+(void)render;
@end

