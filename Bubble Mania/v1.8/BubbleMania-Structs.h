/*
* This header is generated by classdump-dyld 1.0
* on Thursday, August 25, 2016 at 11:58:14 PM British Summer Time
* Operating System: Version 9.3.3 (Build 13G34)
* Image Source: /var/containers/Bundle/Application/0CF72264-5488-4FD5-B700-EF786D177983/BubbleMania.app/BubbleMania
* classdump-dyld is licensed under GPLv3, Copyright Â© 2013-2016 by Elias Limneos.
*/

typedef struct _NSZone* NSZoneRef;

typedef struct CGPoint {
	double x;
	double y;
} CGPoint;

typedef struct CGSize {
	double width;
	double height;
} CGSize;

typedef struct CGRect {
	CGPoint origin;
	CGSize size;
} CGRect;

typedef struct CGAffineTransform {
	double a;
	double b;
	double c;
	double d;
	double tx;
	double ty;
} CGAffineTransform;

typedef struct {
	float field1;
	float field2;
	float field3;
	unsigned char field4;
	unsigned char field5;
	unsigned char field6;
	unsigned char field7;
	float field8;
	float field9;
} SCD_Struct_Gr5;

typedef struct CGImage* CGImageRef;

typedef struct Color {
	unsigned char r;
	unsigned char g;
	unsigned char b;
	unsigned char a;
} Color;

typedef struct Vertex {
	float x;
	float y;
	float z;
} Vertex;

typedef struct Margin {
	float top;
	float left;
	float right;
	float bottom;
} Margin;

typedef struct {
	unsigned size;
	int width;
	int height;
} SCD_Struct_S810;

typedef struct ARect {
	float x;
	float y;
	float width;
	float height;
} ARect;

typedef struct {
	unsigned char fileFormat;
	unsigned size;
	int deprecated2;
	int componentFormat;
	ARect bounds;
} SCD_Struct_S812;

typedef struct {
	unsigned char field1;
	unsigned field2;
	int field3;
	int field4;
	ARect field5;
} SCD_Struct_S813;

typedef struct _compressed_pair<Vertex *, std::__1::allocator<Vertex> > {
	Vertex __first_;
} compressed_pair<Vertex *, std::__1::allocator<Vertex> >;

typedef struct vector<Vertex, std::__1::allocator<Vertex> > {
	Vertex __begin_;
	Vertex __end_;
	compressed_pair<Vertex *, std::__1::allocator<Vertex> > __end_cap_;
} vector<Vertex, std::__1::allocator<Vertex> >;

typedef struct _compressed_pair<unsigned long, std::__1::allocator<std::__1::__hash_node<std::__1::__hash_value_type<unsigned int, MetaModelInfo *>, void *> *> > {
	unsigned long long __first_;
} compressed_pair<unsigned long, std::__1::allocator<std::__1::__hash_node<std::__1::__hash_value_type<unsigned int, MetaModelInfo *>, void *> *> >;

typedef struct _compressed_pair<unsigned long, std::__1::__unordered_map_hasher<unsigned int, std::__1::__hash_value_type<unsigned int, MetaModelInfo *>, std::__1::hash<unsigned int>, true> > {
	unsigned long long __first_;
} compressed_pair<unsigned long, std::__1::__unordered_map_hasher<unsigned int, std::__1::__hash_value_type<unsigned int, MetaModelInfo *>, std::__1::hash<unsigned int>, true> >;

typedef struct _compressed_pair<float, std::__1::__unordered_map_equal<unsigned int, std::__1::__hash_value_type<unsigned int, MetaModelInfo *>, std::__1::equal_to<unsigned int>, true> > {
	float __first_;
} compressed_pair<float, std::__1::__unordered_map_equal<unsigned int, std::__1::__hash_value_type<unsigned int, MetaModelInfo *>, std::__1::equal_to<unsigned int>, true> >;

typedef struct _hash_node_base<std::__1::__hash_node<std::__1::__hash_value_type<unsigned int, MetaModelInfo *>, void *> *> {
	__hash_node<std::__1::__hash_value_type<unsigned int, MetaModelInfo *>, void *> __next_;
} hash_node_base<std::__1::__hash_node<std::__1::__hash_value_type<unsigned int, MetaModelInfo *>, void *> *>;

typedef struct _compressed_pair<std::__1::__hash_node_base<std::__1::__hash_node<std::__1::__hash_value_type<unsigned int, MetaModelInfo *>, void *> *>, std::__1::allocator<std::__1::__hash_node<std::__1::__hash_value_type<unsigned int, MetaModelInfo *>, void *> > > {
	hash_node_base<std::__1::__hash_node<std::__1::__hash_value_type<unsigned int, MetaModelInfo *>, void *> *> __first_;
} compressed_pair<std::__1::__hash_node_base<std::__1::__hash_node<std::__1::__hash_value_type<unsigned int, MetaModelInfo *>, void *> *>, std::__1::allocator<std::__1::__hash_node<std::__1::__hash_value_type<unsigned int, MetaModelInfo *>, void *> > >;

typedef struct _bucket_list_deallocator<std::__1::allocator<std::__1::__hash_node<std::__1::__hash_value_type<unsigned int, MetaModelInfo *>, void *> *> > {
	compressed_pair<unsigned long, std::__1::allocator<std::__1::__hash_node<std::__1::__hash_value_type<unsigned int, MetaModelInfo *>, void *> *> > __data_;
} bucket_list_deallocator<std::__1::allocator<std::__1::__hash_node<std::__1::__hash_value_type<unsigned int, MetaModelInfo *>, void *> *> >;

typedef struct _compressed_pair<std::__1::__hash_node<std::__1::__hash_value_type<unsigned int, MetaModelInfo *>, void *> **, std::__1::__bucket_list_deallocator<std::__1::allocator<std::__1::__hash_node<std::__1::__hash_value_type<unsigned int, MetaModelInfo *>, void *> *> > > {
	__hash_node<std::__1::__hash_value_type<unsigned int, MetaModelInfo *>, void *> __first_;
	bucket_list_deallocator<std::__1::allocator<std::__1::__hash_node<std::__1::__hash_value_type<unsigned int, MetaModelInfo *>, void *> *> > __second_;
} compressed_pair<std::__1::__hash_node<std::__1::__hash_value_type<unsigned int, MetaModelInfo *>, void *> **, std::__1::__bucket_list_deallocator<std::__1::allocator<std::__1::__hash_node<std::__1::__hash_value_type<unsigned int, MetaModelInfo *>, void *> *> > >;

typedef struct unique_ptr<std::__1::__hash_node<std::__1::__hash_value_type<unsigned int, MetaModelInfo *>, void *> *[], std::__1::__bucket_list_deallocator<std::__1::allocator<std::__1::__hash_node<std::__1::__hash_value_type<unsigned int, MetaModelInfo *>, void *> *> > > {
	compressed_pair<std::__1::__hash_node<std::__1::__hash_value_type<unsigned int, MetaModelInfo *>, void *> **, std::__1::__bucket_list_deallocator<std::__1::allocator<std::__1::__hash_node<std::__1::__hash_value_type<unsigned int, MetaModelInfo *>, void *> *> > > __ptr_;
} unique_ptr<std::__1::__hash_node<std::__1::__hash_value_type<unsigned int, MetaModelInfo *>, void *> *[], std::__1::__bucket_list_deallocator<std::__1::allocator<std::__1::__hash_node<std::__1::__hash_value_type<unsigned int, MetaModelInfo *>, void *> *> > >;

typedef struct _hash_table<std::__1::__hash_value_type<unsigned int, MetaModelInfo *>, std::__1::__unordered_map_hasher<unsigned int, std::__1::__hash_value_type<unsigned int, MetaModelInfo *>, std::__1::hash<unsigned int>, true>, std::__1::__unordered_map_equal<unsigned int, std::__1::__hash_value_type<unsigned int, MetaModelInfo *>, std::__1::equal_to<unsigned int>, true>, std::__1::allocator<std::__1::__hash_value_type<unsigned int, MetaModelInfo *> > > {
	unique_ptr<std::__1::__hash_node<std::__1::__hash_value_type<unsigned int, MetaModelInfo *>, void *> *[], std::__1::__bucket_list_deallocator<std::__1::allocator<std::__1::__hash_node<std::__1::__hash_value_type<unsigned int, MetaModelInfo *>, void *> *> > > __bucket_list_;
	compressed_pair<std::__1::__hash_node_base<std::__1::__hash_node<std::__1::__hash_value_type<unsigned int, MetaModelInfo *>, void *> *>, std::__1::allocator<std::__1::__hash_node<std::__1::__hash_value_type<unsigned int, MetaModelInfo *>, void *> > > __p1_;
	compressed_pair<unsigned long, std::__1::__unordered_map_hasher<unsigned int, std::__1::__hash_value_type<unsigned int, MetaModelInfo *>, std::__1::hash<unsigned int>, true> > __p2_;
	compressed_pair<float, std::__1::__unordered_map_equal<unsigned int, std::__1::__hash_value_type<unsigned int, MetaModelInfo *>, std::__1::equal_to<unsigned int>, true> > __p3_;
} hash_table<std::__1::__hash_value_type<unsigned int, MetaModelInfo *>, std::__1::__unordered_map_hasher<unsigned int, std::__1::__hash_value_type<unsigned int, MetaModelInfo *>, std::__1::hash<unsigned int>, true>, std::__1::__unordered_map_equal<unsigned int, std::__1::__hash_value_type<unsigned int, MetaModelInfo *>, std::__1::equal_to<unsigned int>, true>, std::__1::allocator<std::__1::__hash_value_type<unsigned int, MetaModelInfo *> > >;

typedef struct S8CXXHashMap<unsigned int, MetaModelInfo *, std::__1::hash<unsigned int> > {
	/*function pointer*/void* _vptr$S8CXXHashMap;
	hash_table<std::__1::__hash_value_type<unsigned int, MetaModelInfo *>, std::__1::__unordered_map_hasher<unsigned int, std::__1::__hash_value_type<unsigned int, MetaModelInfo *>, std::__1::hash<unsigned int>, true>, std::__1::__unordered_map_equal<unsigned int, std::__1::__hash_value_type<unsigned int, MetaModelInfo *>, std::__1::equal_to<unsigned int>, true>, std::__1::allocator<std::__1::__hash_value_type<unsigned int, MetaModelInfo *> > > __table_;
} S8CXXHashMap<unsigned int, MetaModelInfo *, std::__1::hash<unsigned int> >;

typedef struct ESOptimizedList<ESComponent *> {
	vector<ESComponent *, std::__1::allocator<ESComponent *> > list;
} ESOptimizedList<ESComponent *>;

typedef struct lua_State* lua_StateRef;

typedef struct _compressed_pair<unsigned long, std::__1::allocator<std::__1::__list_node<Particle *, void *> > > {
	unsigned long long __first_;
} compressed_pair<unsigned long, std::__1::allocator<std::__1::__list_node<Particle *, void *> > >;

typedef struct _list_node_base<Particle *, void *> {
	__list_node<Particle *, void *> __prev_;
	__list_node<Particle *, void *> __next_;
} list_node_base<Particle *, void *>;

typedef struct list<Particle *, std::__1::allocator<Particle *> > {
	list_node_base<Particle *, void *> __end_;
	compressed_pair<unsigned long, std::__1::allocator<std::__1::__list_node<Particle *, void *> > > __size_alloc_;
} list<Particle *, std::__1::allocator<Particle *> >;

typedef struct ALCdevice_struct* ALCdevice_structRef;

typedef struct ALCcontext_struct* ALCcontext_structRef;

typedef struct OpaqueAudioFileID* OpaqueAudioFileIDRef;

typedef struct ChainState {
	float animationDelay;
	int numChains;
	BOOL unlocking;
	BOOL hasPreviousLink;
} ChainState;

typedef struct _compressed_pair<Bubble **, std::__1::allocator<Bubble *> > {
	id __first_;
} compressed_pair<Bubble **, std::__1::allocator<Bubble *> >;

typedef struct vector<Bubble *, std::__1::allocator<Bubble *> > {
	id __begin_;
	id __end_;
	compressed_pair<Bubble **, std::__1::allocator<Bubble *> > __end_cap_;
} vector<Bubble *, std::__1::allocator<Bubble *> >;

typedef struct {
	float m0;
	float m1;
	float m2;
	float m3;
	float m4;
	float m5;
	float m6;
	float m7;
	float m8;
	float m9;
	float m10;
	float m11;
	float m12;
	float m13;
	float m14;
	float m15;
} SCD_Struct_ES37;

typedef struct CRMatrix4 {
	/*function pointer*/void* ;
	float m[16];
	SCD_Struct_ES37) ;
} CRMatrix4;

typedef struct _compressed_pair<unsigned long, std::__1::less<id> > {
	unsigned long long __first_;
} compressed_pair<unsigned long, std::__1::less<id> >;

typedef struct _tree_end_node<std::__1::__tree_node_base<void *> *> {
	__tree_node_base<void *> __left_;
} tree_end_node<std::__1::__tree_node_base<void *> *>;

typedef struct _compressed_pair<std::__1::__tree_end_node<std::__1::__tree_node_base<void *> *>, std::__1::allocator<std::__1::__tree_node<id, void *> > > {
	tree_end_node<std::__1::__tree_node_base<void *> *> __first_;
} compressed_pair<std::__1::__tree_end_node<std::__1::__tree_node_base<void *> *>, std::__1::allocator<std::__1::__tree_node<id, void *> > >;

typedef struct _tree<id, std::__1::less<id>, std::__1::allocator<id> > {
	__tree_node<id, void *> __begin_node_;
	compressed_pair<std::__1::__tree_end_node<std::__1::__tree_node_base<void *> *>, std::__1::allocator<std::__1::__tree_node<id, void *> > > __pair1_;
	compressed_pair<unsigned long, std::__1::less<id> > __pair3_;
} tree<id, std::__1::less<id>, std::__1::allocator<id> >;

typedef struct set<id, std::__1::less<id>, std::__1::allocator<id> > {
	tree<id, std::__1::less<id>, std::__1::allocator<id> > __tree_;
} set<id, std::__1::less<id>, std::__1::allocator<id> >;

typedef struct NSRange {
	unsigned long long location;
	unsigned long long length;
} NSRange;

typedef struct _compressed_pair<unsigned long, std::__1::allocator<std::__1::__hash_node<std::__1::__hash_value_type<unsigned long, Model3DLayer *>, void *> *> > {
	unsigned long long __first_;
} compressed_pair<unsigned long, std::__1::allocator<std::__1::__hash_node<std::__1::__hash_value_type<unsigned long, Model3DLayer *>, void *> *> >;

typedef struct _compressed_pair<unsigned long, std::__1::__unordered_map_hasher<unsigned long, std::__1::__hash_value_type<unsigned long, Model3DLayer *>, std::__1::hash<unsigned long>, true> > {
	unsigned long long __first_;
} compressed_pair<unsigned long, std::__1::__unordered_map_hasher<unsigned long, std::__1::__hash_value_type<unsigned long, Model3DLayer *>, std::__1::hash<unsigned long>, true> >;

typedef struct _compressed_pair<float, std::__1::__unordered_map_equal<unsigned long, std::__1::__hash_value_type<unsigned long, Model3DLayer *>, std::__1::equal_to<unsigned long>, true> > {
	float __first_;
} compressed_pair<float, std::__1::__unordered_map_equal<unsigned long, std::__1::__hash_value_type<unsigned long, Model3DLayer *>, std::__1::equal_to<unsigned long>, true> >;

typedef struct _hash_node_base<std::__1::__hash_node<std::__1::__hash_value_type<unsigned long, Model3DLayer *>, void *> *> {
	__hash_node<std::__1::__hash_value_type<unsigned long, Model3DLayer *>, void *> __next_;
} hash_node_base<std::__1::__hash_node<std::__1::__hash_value_type<unsigned long, Model3DLayer *>, void *> *>;

typedef struct _compressed_pair<std::__1::__hash_node_base<std::__1::__hash_node<std::__1::__hash_value_type<unsigned long, Model3DLayer *>, void *> *>, std::__1::allocator<std::__1::__hash_node<std::__1::__hash_value_type<unsigned long, Model3DLayer *>, void *> > > {
	hash_node_base<std::__1::__hash_node<std::__1::__hash_value_type<unsigned long, Model3DLayer *>, void *> *> __first_;
} compressed_pair<std::__1::__hash_node_base<std::__1::__hash_node<std::__1::__hash_value_type<unsigned long, Model3DLayer *>, void *> *>, std::__1::allocator<std::__1::__hash_node<std::__1::__hash_value_type<unsigned long, Model3DLayer *>, void *> > >;

typedef struct _bucket_list_deallocator<std::__1::allocator<std::__1::__hash_node<std::__1::__hash_value_type<unsigned long, Model3DLayer *>, void *> *> > {
	compressed_pair<unsigned long, std::__1::allocator<std::__1::__hash_node<std::__1::__hash_value_type<unsigned long, Model3DLayer *>, void *> *> > __data_;
} bucket_list_deallocator<std::__1::allocator<std::__1::__hash_node<std::__1::__hash_value_type<unsigned long, Model3DLayer *>, void *> *> >;

typedef struct _compressed_pair<std::__1::__hash_node<std::__1::__hash_value_type<unsigned long, Model3DLayer *>, void *> **, std::__1::__bucket_list_deallocator<std::__1::allocator<std::__1::__hash_node<std::__1::__hash_value_type<unsigned long, Model3DLayer *>, void *> *> > > {
	__hash_node<std::__1::__hash_value_type<unsigned long, Model3DLayer *>, void *> __first_;
	bucket_list_deallocator<std::__1::allocator<std::__1::__hash_node<std::__1::__hash_value_type<unsigned long, Model3DLayer *>, void *> *> > __second_;
} compressed_pair<std::__1::__hash_node<std::__1::__hash_value_type<unsigned long, Model3DLayer *>, void *> **, std::__1::__bucket_list_deallocator<std::__1::allocator<std::__1::__hash_node<std::__1::__hash_value_type<unsigned long, Model3DLayer *>, void *> *> > >;

typedef struct unique_ptr<std::__1::__hash_node<std::__1::__hash_value_type<unsigned long, Model3DLayer *>, void *> *[], std::__1::__bucket_list_deallocator<std::__1::allocator<std::__1::__hash_node<std::__1::__hash_value_type<unsigned long, Model3DLayer *>, void *> *> > > {
	compressed_pair<std::__1::__hash_node<std::__1::__hash_value_type<unsigned long, Model3DLayer *>, void *> **, std::__1::__bucket_list_deallocator<std::__1::allocator<std::__1::__hash_node<std::__1::__hash_value_type<unsigned long, Model3DLayer *>, void *> *> > > __ptr_;
} unique_ptr<std::__1::__hash_node<std::__1::__hash_value_type<unsigned long, Model3DLayer *>, void *> *[], std::__1::__bucket_list_deallocator<std::__1::allocator<std::__1::__hash_node<std::__1::__hash_value_type<unsigned long, Model3DLayer *>, void *> *> > >;

typedef struct _hash_table<std::__1::__hash_value_type<unsigned long, Model3DLayer *>, std::__1::__unordered_map_hasher<unsigned long, std::__1::__hash_value_type<unsigned long, Model3DLayer *>, std::__1::hash<unsigned long>, true>, std::__1::__unordered_map_equal<unsigned long, std::__1::__hash_value_type<unsigned long, Model3DLayer *>, std::__1::equal_to<unsigned long>, true>, std::__1::allocator<std::__1::__hash_value_type<unsigned long, Model3DLayer *> > > {
	unique_ptr<std::__1::__hash_node<std::__1::__hash_value_type<unsigned long, Model3DLayer *>, void *> *[], std::__1::__bucket_list_deallocator<std::__1::allocator<std::__1::__hash_node<std::__1::__hash_value_type<unsigned long, Model3DLayer *>, void *> *> > > __bucket_list_;
	compressed_pair<std::__1::__hash_node_base<std::__1::__hash_node<std::__1::__hash_value_type<unsigned long, Model3DLayer *>, void *> *>, std::__1::allocator<std::__1::__hash_node<std::__1::__hash_value_type<unsigned long, Model3DLayer *>, void *> > > __p1_;
	compressed_pair<unsigned long, std::__1::__unordered_map_hasher<unsigned long, std::__1::__hash_value_type<unsigned long, Model3DLayer *>, std::__1::hash<unsigned long>, true> > __p2_;
	compressed_pair<float, std::__1::__unordered_map_equal<unsigned long, std::__1::__hash_value_type<unsigned long, Model3DLayer *>, std::__1::equal_to<unsigned long>, true> > __p3_;
} hash_table<std::__1::__hash_value_type<unsigned long, Model3DLayer *>, std::__1::__unordered_map_hasher<unsigned long, std::__1::__hash_value_type<unsigned long, Model3DLayer *>, std::__1::hash<unsigned long>, true>, std::__1::__unordered_map_equal<unsigned long, std::__1::__hash_value_type<unsigned long, Model3DLayer *>, std::__1::equal_to<unsigned long>, true>, std::__1::allocator<std::__1::__hash_value_type<unsigned long, Model3DLayer *> > >;

typedef struct unordered_map<unsigned long, Model3DLayer *, std::__1::hash<unsigned long>, std::__1::equal_to<unsigned long>, std::__1::allocator<std::__1::pair<const unsigned long, Model3DLayer *> > > {
	hash_table<std::__1::__hash_value_type<unsigned long, Model3DLayer *>, std::__1::__unordered_map_hasher<unsigned long, std::__1::__hash_value_type<unsigned long, Model3DLayer *>, std::__1::hash<unsigned long>, true>, std::__1::__unordered_map_equal<unsigned long, std::__1::__hash_value_type<unsigned long, Model3DLayer *>, std::__1::equal_to<unsigned long>, true>, std::__1::allocator<std::__1::__hash_value_type<unsigned long, Model3DLayer *> > > __table_;
} unordered_map<unsigned long, Model3DLayer *, std::__1::hash<unsigned long>, std::__1::equal_to<unsigned long>, std::__1::allocator<std::__1::pair<const unsigned long, Model3DLayer *> > >;

typedef struct _compressed_pair<BillboardPrimitive **, std::__1::allocator<BillboardPrimitive *> > {
	id __first_;
} compressed_pair<BillboardPrimitive **, std::__1::allocator<BillboardPrimitive *> >;

typedef struct vector<BillboardPrimitive *, std::__1::allocator<BillboardPrimitive *> > {
	id __begin_;
	id __end_;
	compressed_pair<BillboardPrimitive **, std::__1::allocator<BillboardPrimitive *> > __end_cap_;
} vector<BillboardPrimitive *, std::__1::allocator<BillboardPrimitive *> >;

typedef struct TrailVertexPair {
	Vertex upVert;
	Vertex downVert;
	Vertex position;
	Vertex normal;
} TrailVertexPair;

typedef struct _compressed_pair<InterleavedVertex *, std::__1::allocator<InterleavedVertex> > {
	/*function pointer*/void* __first_;
} compressed_pair<InterleavedVertex *, std::__1::allocator<InterleavedVertex> >;

typedef struct vector<InterleavedVertex, std::__1::allocator<InterleavedVertex> > {
	/*function pointer*/void* __begin_;
	/*function pointer*/void* __end_;
	compressed_pair<InterleavedVertex *, std::__1::allocator<InterleavedVertex> > __end_cap_;
} vector<InterleavedVertex, std::__1::allocator<InterleavedVertex> >;

typedef struct _compressed_pair<unsigned short *, std::__1::allocator<unsigned short> > {
	unsigned short __first_;
} compressed_pair<unsigned short *, std::__1::allocator<unsigned short> >;

typedef struct vector<unsigned short, std::__1::allocator<unsigned short> > {
	unsigned short __begin_;
	unsigned short __end_;
	compressed_pair<unsigned short *, std::__1::allocator<unsigned short> > __end_cap_;
} vector<unsigned short, std::__1::allocator<unsigned short> >;

typedef struct _compressed_pair<unsigned long, std::__1::allocator<std::__1::__hash_node<std::__1::__hash_value_type<unsigned long, const char *>, void *> *> > {
	unsigned long long __first_;
} compressed_pair<unsigned long, std::__1::allocator<std::__1::__hash_node<std::__1::__hash_value_type<unsigned long, const char *>, void *> *> >;

typedef struct _compressed_pair<unsigned long, std::__1::__unordered_map_hasher<unsigned long, std::__1::__hash_value_type<unsigned long, const char *>, std::__1::hash<unsigned long>, true> > {
	unsigned long long __first_;
} compressed_pair<unsigned long, std::__1::__unordered_map_hasher<unsigned long, std::__1::__hash_value_type<unsigned long, const char *>, std::__1::hash<unsigned long>, true> >;

typedef struct _compressed_pair<float, std::__1::__unordered_map_equal<unsigned long, std::__1::__hash_value_type<unsigned long, const char *>, std::__1::equal_to<unsigned long>, true> > {
	float __first_;
} compressed_pair<float, std::__1::__unordered_map_equal<unsigned long, std::__1::__hash_value_type<unsigned long, const char *>, std::__1::equal_to<unsigned long>, true> >;

typedef struct _hash_node_base<std::__1::__hash_node<std::__1::__hash_value_type<unsigned long, const char *>, void *> *> {
	__hash_node<std::__1::__hash_value_type<unsigned long, const char *>, void *> __next_;
} hash_node_base<std::__1::__hash_node<std::__1::__hash_value_type<unsigned long, const char *>, void *> *>;

typedef struct _compressed_pair<std::__1::__hash_node_base<std::__1::__hash_node<std::__1::__hash_value_type<unsigned long, const char *>, void *> *>, std::__1::allocator<std::__1::__hash_node<std::__1::__hash_value_type<unsigned long, const char *>, void *> > > {
	hash_node_base<std::__1::__hash_node<std::__1::__hash_value_type<unsigned long, const char *>, void *> *> __first_;
} compressed_pair<std::__1::__hash_node_base<std::__1::__hash_node<std::__1::__hash_value_type<unsigned long, const char *>, void *> *>, std::__1::allocator<std::__1::__hash_node<std::__1::__hash_value_type<unsigned long, const char *>, void *> > >;

typedef struct _bucket_list_deallocator<std::__1::allocator<std::__1::__hash_node<std::__1::__hash_value_type<unsigned long, const char *>, void *> *> > {
	compressed_pair<unsigned long, std::__1::allocator<std::__1::__hash_node<std::__1::__hash_value_type<unsigned long, const char *>, void *> *> > __data_;
} bucket_list_deallocator<std::__1::allocator<std::__1::__hash_node<std::__1::__hash_value_type<unsigned long, const char *>, void *> *> >;

typedef struct _compressed_pair<std::__1::__hash_node<std::__1::__hash_value_type<unsigned long, const char *>, void *> **, std::__1::__bucket_list_deallocator<std::__1::allocator<std::__1::__hash_node<std::__1::__hash_value_type<unsigned long, const char *>, void *> *> > > {
	__hash_node<std::__1::__hash_value_type<unsigned long, const char *>, void *> __first_;
	bucket_list_deallocator<std::__1::allocator<std::__1::__hash_node<std::__1::__hash_value_type<unsigned long, const char *>, void *> *> > __second_;
} compressed_pair<std::__1::__hash_node<std::__1::__hash_value_type<unsigned long, const char *>, void *> **, std::__1::__bucket_list_deallocator<std::__1::allocator<std::__1::__hash_node<std::__1::__hash_value_type<unsigned long, const char *>, void *> *> > >;

typedef struct unique_ptr<std::__1::__hash_node<std::__1::__hash_value_type<unsigned long, const char *>, void *> *[], std::__1::__bucket_list_deallocator<std::__1::allocator<std::__1::__hash_node<std::__1::__hash_value_type<unsigned long, const char *>, void *> *> > > {
	compressed_pair<std::__1::__hash_node<std::__1::__hash_value_type<unsigned long, const char *>, void *> **, std::__1::__bucket_list_deallocator<std::__1::allocator<std::__1::__hash_node<std::__1::__hash_value_type<unsigned long, const char *>, void *> *> > > __ptr_;
} unique_ptr<std::__1::__hash_node<std::__1::__hash_value_type<unsigned long, const char *>, void *> *[], std::__1::__bucket_list_deallocator<std::__1::allocator<std::__1::__hash_node<std::__1::__hash_value_type<unsigned long, const char *>, void *> *> > >;

typedef struct _hash_table<std::__1::__hash_value_type<unsigned long, const char *>, std::__1::__unordered_map_hasher<unsigned long, std::__1::__hash_value_type<unsigned long, const char *>, std::__1::hash<unsigned long>, true>, std::__1::__unordered_map_equal<unsigned long, std::__1::__hash_value_type<unsigned long, const char *>, std::__1::equal_to<unsigned long>, true>, std::__1::allocator<std::__1::__hash_value_type<unsigned long, const char *> > > {
	unique_ptr<std::__1::__hash_node<std::__1::__hash_value_type<unsigned long, const char *>, void *> *[], std::__1::__bucket_list_deallocator<std::__1::allocator<std::__1::__hash_node<std::__1::__hash_value_type<unsigned long, const char *>, void *> *> > > __bucket_list_;
	compressed_pair<std::__1::__hash_node_base<std::__1::__hash_node<std::__1::__hash_value_type<unsigned long, const char *>, void *> *>, std::__1::allocator<std::__1::__hash_node<std::__1::__hash_value_type<unsigned long, const char *>, void *> > > __p1_;
	compressed_pair<unsigned long, std::__1::__unordered_map_hasher<unsigned long, std::__1::__hash_value_type<unsigned long, const char *>, std::__1::hash<unsigned long>, true> > __p2_;
	compressed_pair<float, std::__1::__unordered_map_equal<unsigned long, std::__1::__hash_value_type<unsigned long, const char *>, std::__1::equal_to<unsigned long>, true> > __p3_;
} hash_table<std::__1::__hash_value_type<unsigned long, const char *>, std::__1::__unordered_map_hasher<unsigned long, std::__1::__hash_value_type<unsigned long, const char *>, std::__1::hash<unsigned long>, true>, std::__1::__unordered_map_equal<unsigned long, std::__1::__hash_value_type<unsigned long, const char *>, std::__1::equal_to<unsigned long>, true>, std::__1::allocator<std::__1::__hash_value_type<unsigned long, const char *> > >;

typedef struct unordered_map<unsigned long, const char *, std::__1::hash<unsigned long>, std::__1::equal_to<unsigned long>, std::__1::allocator<std::__1::pair<const unsigned long, const char *> > > {
	hash_table<std::__1::__hash_value_type<unsigned long, const char *>, std::__1::__unordered_map_hasher<unsigned long, std::__1::__hash_value_type<unsigned long, const char *>, std::__1::hash<unsigned long>, true>, std::__1::__unordered_map_equal<unsigned long, std::__1::__hash_value_type<unsigned long, const char *>, std::__1::equal_to<unsigned long>, true>, std::__1::allocator<std::__1::__hash_value_type<unsigned long, const char *> > > __table_;
} unordered_map<unsigned long, const char *, std::__1::hash<unsigned long>, std::__1::equal_to<unsigned long>, std::__1::allocator<std::__1::pair<const unsigned long, const char *> > >;

typedef struct _compressed_pair<MotionBillboardPrimitive **, std::__1::allocator<MotionBillboardPrimitive *> > {
	id __first_;
} compressed_pair<MotionBillboardPrimitive **, std::__1::allocator<MotionBillboardPrimitive *> >;

typedef struct S8CXXArrayList<MotionBillboardPrimitive *> {
	/*function pointer*/void* _vptr$S8CXXArrayList;
	id __begin_;
	id __end_;
	compressed_pair<MotionBillboardPrimitive **, std::__1::allocator<MotionBillboardPrimitive *> > __end_cap_;
} S8CXXArrayList<MotionBillboardPrimitive *>;

typedef struct _compressed_pair<unsigned long, std::__1::allocator<std::__1::__hash_node<std::__1::__hash_value_type<unsigned long, CachedCompInfo *>, void *> *> > {
	unsigned long long __first_;
} compressed_pair<unsigned long, std::__1::allocator<std::__1::__hash_node<std::__1::__hash_value_type<unsigned long, CachedCompInfo *>, void *> *> >;

typedef struct _compressed_pair<unsigned long, std::__1::__unordered_map_hasher<unsigned long, std::__1::__hash_value_type<unsigned long, CachedCompInfo *>, std::__1::hash<unsigned long>, true> > {
	unsigned long long __first_;
} compressed_pair<unsigned long, std::__1::__unordered_map_hasher<unsigned long, std::__1::__hash_value_type<unsigned long, CachedCompInfo *>, std::__1::hash<unsigned long>, true> >;

typedef struct _compressed_pair<float, std::__1::__unordered_map_equal<unsigned long, std::__1::__hash_value_type<unsigned long, CachedCompInfo *>, std::__1::equal_to<unsigned long>, true> > {
	float __first_;
} compressed_pair<float, std::__1::__unordered_map_equal<unsigned long, std::__1::__hash_value_type<unsigned long, CachedCompInfo *>, std::__1::equal_to<unsigned long>, true> >;

typedef struct _hash_node_base<std::__1::__hash_node<std::__1::__hash_value_type<unsigned long, CachedCompInfo *>, void *> *> {
	__hash_node<std::__1::__hash_value_type<unsigned long, CachedCompInfo *>, void *> __next_;
} hash_node_base<std::__1::__hash_node<std::__1::__hash_value_type<unsigned long, CachedCompInfo *>, void *> *>;

typedef struct _compressed_pair<std::__1::__hash_node_base<std::__1::__hash_node<std::__1::__hash_value_type<unsigned long, CachedCompInfo *>, void *> *>, std::__1::allocator<std::__1::__hash_node<std::__1::__hash_value_type<unsigned long, CachedCompInfo *>, void *> > > {
	hash_node_base<std::__1::__hash_node<std::__1::__hash_value_type<unsigned long, CachedCompInfo *>, void *> *> __first_;
} compressed_pair<std::__1::__hash_node_base<std::__1::__hash_node<std::__1::__hash_value_type<unsigned long, CachedCompInfo *>, void *> *>, std::__1::allocator<std::__1::__hash_node<std::__1::__hash_value_type<unsigned long, CachedCompInfo *>, void *> > >;

typedef struct _bucket_list_deallocator<std::__1::allocator<std::__1::__hash_node<std::__1::__hash_value_type<unsigned long, CachedCompInfo *>, void *> *> > {
	compressed_pair<unsigned long, std::__1::allocator<std::__1::__hash_node<std::__1::__hash_value_type<unsigned long, CachedCompInfo *>, void *> *> > __data_;
} bucket_list_deallocator<std::__1::allocator<std::__1::__hash_node<std::__1::__hash_value_type<unsigned long, CachedCompInfo *>, void *> *> >;

typedef struct _compressed_pair<std::__1::__hash_node<std::__1::__hash_value_type<unsigned long, CachedCompInfo *>, void *> **, std::__1::__bucket_list_deallocator<std::__1::allocator<std::__1::__hash_node<std::__1::__hash_value_type<unsigned long, CachedCompInfo *>, void *> *> > > {
	__hash_node<std::__1::__hash_value_type<unsigned long, CachedCompInfo *>, void *> __first_;
	bucket_list_deallocator<std::__1::allocator<std::__1::__hash_node<std::__1::__hash_value_type<unsigned long, CachedCompInfo *>, void *> *> > __second_;
} compressed_pair<std::__1::__hash_node<std::__1::__hash_value_type<unsigned long, CachedCompInfo *>, void *> **, std::__1::__bucket_list_deallocator<std::__1::allocator<std::__1::__hash_node<std::__1::__hash_value_type<unsigned long, CachedCompInfo *>, void *> *> > >;

typedef struct unique_ptr<std::__1::__hash_node<std::__1::__hash_value_type<unsigned long, CachedCompInfo *>, void *> *[], std::__1::__bucket_list_deallocator<std::__1::allocator<std::__1::__hash_node<std::__1::__hash_value_type<unsigned long, CachedCompInfo *>, void *> *> > > {
	compressed_pair<std::__1::__hash_node<std::__1::__hash_value_type<unsigned long, CachedCompInfo *>, void *> **, std::__1::__bucket_list_deallocator<std::__1::allocator<std::__1::__hash_node<std::__1::__hash_value_type<unsigned long, CachedCompInfo *>, void *> *> > > __ptr_;
} unique_ptr<std::__1::__hash_node<std::__1::__hash_value_type<unsigned long, CachedCompInfo *>, void *> *[], std::__1::__bucket_list_deallocator<std::__1::allocator<std::__1::__hash_node<std::__1::__hash_value_type<unsigned long, CachedCompInfo *>, void *> *> > >;

typedef struct _hash_table<std::__1::__hash_value_type<unsigned long, CachedCompInfo *>, std::__1::__unordered_map_hasher<unsigned long, std::__1::__hash_value_type<unsigned long, CachedCompInfo *>, std::__1::hash<unsigned long>, true>, std::__1::__unordered_map_equal<unsigned long, std::__1::__hash_value_type<unsigned long, CachedCompInfo *>, std::__1::equal_to<unsigned long>, true>, std::__1::allocator<std::__1::__hash_value_type<unsigned long, CachedCompInfo *> > > {
	unique_ptr<std::__1::__hash_node<std::__1::__hash_value_type<unsigned long, CachedCompInfo *>, void *> *[], std::__1::__bucket_list_deallocator<std::__1::allocator<std::__1::__hash_node<std::__1::__hash_value_type<unsigned long, CachedCompInfo *>, void *> *> > > __bucket_list_;
	compressed_pair<std::__1::__hash_node_base<std::__1::__hash_node<std::__1::__hash_value_type<unsigned long, CachedCompInfo *>, void *> *>, std::__1::allocator<std::__1::__hash_node<std::__1::__hash_value_type<unsigned long, CachedCompInfo *>, void *> > > __p1_;
	compressed_pair<unsigned long, std::__1::__unordered_map_hasher<unsigned long, std::__1::__hash_value_type<unsigned long, CachedCompInfo *>, std::__1::hash<unsigned long>, true> > __p2_;
	compressed_pair<float, std::__1::__unordered_map_equal<unsigned long, std::__1::__hash_value_type<unsigned long, CachedCompInfo *>, std::__1::equal_to<unsigned long>, true> > __p3_;
} hash_table<std::__1::__hash_value_type<unsigned long, CachedCompInfo *>, std::__1::__unordered_map_hasher<unsigned long, std::__1::__hash_value_type<unsigned long, CachedCompInfo *>, std::__1::hash<unsigned long>, true>, std::__1::__unordered_map_equal<unsigned long, std::__1::__hash_value_type<unsigned long, CachedCompInfo *>, std::__1::equal_to<unsigned long>, true>, std::__1::allocator<std::__1::__hash_value_type<unsigned long, CachedCompInfo *> > >;

typedef struct unordered_map<unsigned long, CachedCompInfo *, std::__1::hash<unsigned long>, std::__1::equal_to<unsigned long>, std::__1::allocator<std::__1::pair<const unsigned long, CachedCompInfo *> > > {
	hash_table<std::__1::__hash_value_type<unsigned long, CachedCompInfo *>, std::__1::__unordered_map_hasher<unsigned long, std::__1::__hash_value_type<unsigned long, CachedCompInfo *>, std::__1::hash<unsigned long>, true>, std::__1::__unordered_map_equal<unsigned long, std::__1::__hash_value_type<unsigned long, CachedCompInfo *>, std::__1::equal_to<unsigned long>, true>, std::__1::allocator<std::__1::__hash_value_type<unsigned long, CachedCompInfo *> > > __table_;
} unordered_map<unsigned long, CachedCompInfo *, std::__1::hash<unsigned long>, std::__1::equal_to<unsigned long>, std::__1::allocator<std::__1::pair<const unsigned long, CachedCompInfo *> > >;

typedef struct _compressed_pair<unsigned long, std::__1::allocator<std::__1::__hash_node<std::__1::__hash_value_type<unsigned long, std::__1::set<id, std::__1::less<id>, std::__1::allocator<id> > >, void *> *> > {
	unsigned long long __first_;
} compressed_pair<unsigned long, std::__1::allocator<std::__1::__hash_node<std::__1::__hash_value_type<unsigned long, std::__1::set<id, std::__1::less<id>, std::__1::allocator<id> > >, void *> *> >;

typedef struct _compressed_pair<unsigned long, std::__1::__unordered_map_hasher<unsigned long, std::__1::__hash_value_type<unsigned long, std::__1::set<id, std::__1::less<id>, std::__1::allocator<id> > >, std::__1::hash<unsigned long>, true> > {
	unsigned long long __first_;
} compressed_pair<unsigned long, std::__1::__unordered_map_hasher<unsigned long, std::__1::__hash_value_type<unsigned long, std::__1::set<id, std::__1::less<id>, std::__1::allocator<id> > >, std::__1::hash<unsigned long>, true> >;

typedef struct _compressed_pair<float, std::__1::__unordered_map_equal<unsigned long, std::__1::__hash_value_type<unsigned long, std::__1::set<id, std::__1::less<id>, std::__1::allocator<id> > >, std::__1::equal_to<unsigned long>, true> > {
	float __first_;
} compressed_pair<float, std::__1::__unordered_map_equal<unsigned long, std::__1::__hash_value_type<unsigned long, std::__1::set<id, std::__1::less<id>, std::__1::allocator<id> > >, std::__1::equal_to<unsigned long>, true> >;

typedef struct _hash_node_base<std::__1::__hash_node<std::__1::__hash_value_type<unsigned long, std::__1::set<id, std::__1::less<id>, std::__1::allocator<id> > >, void *> *> {
	__hash_node<std::__1::__hash_value_type<unsigned long, std::__1::set<id, std::__1::less<id>, std::__1::allocator<id> > >, void *> __next_;
} hash_node_base<std::__1::__hash_node<std::__1::__hash_value_type<unsigned long, std::__1::set<id, std::__1::less<id>, std::__1::allocator<id> > >, void *> *>;

typedef struct _compressed_pair<std::__1::__hash_node_base<std::__1::__hash_node<std::__1::__hash_value_type<unsigned long, std::__1::set<id, std::__1::less<id>, std::__1::allocator<id> > >, void *> *>, std::__1::allocator<std::__1::__hash_node<std::__1::__hash_value_type<unsigned long, std::__1::set<id, std::__1::less<id>, std::__1::allocator<id> > >, void *> > > {
	hash_node_base<std::__1::__hash_node<std::__1::__hash_value_type<unsigned long, std::__1::set<id, std::__1::less<id>, std::__1::allocator<id> > >, void *> *> __first_;
} compressed_pair<std::__1::__hash_node_base<std::__1::__hash_node<std::__1::__hash_value_type<unsigned long, std::__1::set<id, std::__1::less<id>, std::__1::allocator<id> > >, void *> *>, std::__1::allocator<std::__1::__hash_node<std::__1::__hash_value_type<unsigned long, std::__1::set<id, std::__1::less<id>, std::__1::allocator<id> > >, void *> > >;

typedef struct _bucket_list_deallocator<std::__1::allocator<std::__1::__hash_node<std::__1::__hash_value_type<unsigned long, std::__1::set<id, std::__1::less<id>, std::__1::allocator<id> > >, void *> *> > {
	compressed_pair<unsigned long, std::__1::allocator<std::__1::__hash_node<std::__1::__hash_value_type<unsigned long, std::__1::set<id, std::__1::less<id>, std::__1::allocator<id> > >, void *> *> > __data_;
} bucket_list_deallocator<std::__1::allocator<std::__1::__hash_node<std::__1::__hash_value_type<unsigned long, std::__1::set<id, std::__1::less<id>, std::__1::allocator<id> > >, void *> *> >;

typedef struct _compressed_pair<std::__1::__hash_node<std::__1::__hash_value_type<unsigned long, std::__1::set<id, std::__1::less<id>, std::__1::allocator<id> > >, void *> **, std::__1::__bucket_list_deallocator<std::__1::allocator<std::__1::__hash_node<std::__1::__hash_value_type<unsigned long, std::__1::set<id, std::__1::less<id>, std::__1::allocator<id> > >, void *> *> > > {
	__hash_node<std::__1::__hash_value_type<unsigned long, std::__1::set<id, std::__1::less<id>, std::__1::allocator<id> > >, void *> __first_;
	bucket_list_deallocator<std::__1::allocator<std::__1::__hash_node<std::__1::__hash_value_type<unsigned long, std::__1::set<id, std::__1::less<id>, std::__1::allocator<id> > >, void *> *> > __second_;
} compressed_pair<std::__1::__hash_node<std::__1::__hash_value_type<unsigned long, std::__1::set<id, std::__1::less<id>, std::__1::allocator<id> > >, void *> **, std::__1::__bucket_list_deallocator<std::__1::allocator<std::__1::__hash_node<std::__1::__hash_value_type<unsigned long, std::__1::set<id, std::__1::less<id>, std::__1::allocator<id> > >, void *> *> > >;

typedef struct unique_ptr<std::__1::__hash_node<std::__1::__hash_value_type<unsigned long, std::__1::set<id, std::__1::less<id>, std::__1::allocator<id> > >, void *> *[], std::__1::__bucket_list_deallocator<std::__1::allocator<std::__1::__hash_node<std::__1::__hash_value_type<unsigned long, std::__1::set<id, std::__1::less<id>, std::__1::allocator<id> > >, void *> *> > > {
	compressed_pair<std::__1::__hash_node<std::__1::__hash_value_type<unsigned long, std::__1::set<id, std::__1::less<id>, std::__1::allocator<id> > >, void *> **, std::__1::__bucket_list_deallocator<std::__1::allocator<std::__1::__hash_node<std::__1::__hash_value_type<unsigned long, std::__1::set<id, std::__1::less<id>, std::__1::allocator<id> > >, void *> *> > > __ptr_;
} unique_ptr<std::__1::__hash_node<std::__1::__hash_value_type<unsigned long, std::__1::set<id, std::__1::less<id>, std::__1::allocator<id> > >, void *> *[], std::__1::__bucket_list_deallocator<std::__1::allocator<std::__1::__hash_node<std::__1::__hash_value_type<unsigned long, std::__1::set<id, std::__1::less<id>, std::__1::allocator<id> > >, void *> *> > >;

typedef struct _hash_table<std::__1::__hash_value_type<unsigned long, std::__1::set<id, std::__1::less<id>, std::__1::allocator<id> > >, std::__1::__unordered_map_hasher<unsigned long, std::__1::__hash_value_type<unsigned long, std::__1::set<id, std::__1::less<id>, std::__1::allocator<id> > >, std::__1::hash<unsigned long>, true>, std::__1::__unordered_map_equal<unsigned long, std::__1::__hash_value_type<unsigned long, std::__1::set<id, std::__1::less<id>, std::__1::allocator<id> > >, std::__1::equal_to<unsigned long>, true>, std::__1::allocator<std::__1::__hash_value_type<unsigned long, std::__1::set<id, std::__1::less<id>, std::__1::allocator<id> > > > > {
	unique_ptr<std::__1::__hash_node<std::__1::__hash_value_type<unsigned long, std::__1::set<id, std::__1::less<id>, std::__1::allocator<id> > >, void *> *[], std::__1::__bucket_list_deallocator<std::__1::allocator<std::__1::__hash_node<std::__1::__hash_value_type<unsigned long, std::__1::set<id, std::__1::less<id>, std::__1::allocator<id> > >, void *> *> > > __bucket_list_;
	compressed_pair<std::__1::__hash_node_base<std::__1::__hash_node<std::__1::__hash_value_type<unsigned long, std::__1::set<id, std::__1::less<id>, std::__1::allocator<id> > >, void *> *>, std::__1::allocator<std::__1::__hash_node<std::__1::__hash_value_type<unsigned long, std::__1::set<id, std::__1::less<id>, std::__1::allocator<id> > >, void *> > > __p1_;
	compressed_pair<unsigned long, std::__1::__unordered_map_hasher<unsigned long, std::__1::__hash_value_type<unsigned long, std::__1::set<id, std::__1::less<id>, std::__1::allocator<id> > >, std::__1::hash<unsigned long>, true> > __p2_;
	compressed_pair<float, std::__1::__unordered_map_equal<unsigned long, std::__1::__hash_value_type<unsigned long, std::__1::set<id, std::__1::less<id>, std::__1::allocator<id> > >, std::__1::equal_to<unsigned long>, true> > __p3_;
} hash_table<std::__1::__hash_value_type<unsigned long, std::__1::set<id, std::__1::less<id>, std::__1::allocator<id> > >, std::__1::__unordered_map_hasher<unsigned long, std::__1::__hash_value_type<unsigned long, std::__1::set<id, std::__1::less<id>, std::__1::allocator<id> > >, std::__1::hash<unsigned long>, true>, std::__1::__unordered_map_equal<unsigned long, std::__1::__hash_value_type<unsigned long, std::__1::set<id, std::__1::less<id>, std::__1::allocator<id> > >, std::__1::equal_to<unsigned long>, true>, std::__1::allocator<std::__1::__hash_value_type<unsigned long, std::__1::set<id, std::__1::less<id>, std::__1::allocator<id> > > > >;

typedef struct unordered_map<unsigned long, std::__1::set<id, std::__1::less<id>, std::__1::allocator<id> >, std::__1::hash<unsigned long>, std::__1::equal_to<unsigned long>, std::__1::allocator<std::__1::pair<const unsigned long, std::__1::set<id, std::__1::less<id>, std::__1::allocator<id> > > > > {
	hash_table<std::__1::__hash_value_type<unsigned long, std::__1::set<id, std::__1::less<id>, std::__1::allocator<id> > >, std::__1::__unordered_map_hasher<unsigned long, std::__1::__hash_value_type<unsigned long, std::__1::set<id, std::__1::less<id>, std::__1::allocator<id> > >, std::__1::hash<unsigned long>, true>, std::__1::__unordered_map_equal<unsigned long, std::__1::__hash_value_type<unsigned long, std::__1::set<id, std::__1::less<id>, std::__1::allocator<id> > >, std::__1::equal_to<unsigned long>, true>, std::__1::allocator<std::__1::__hash_value_type<unsigned long, std::__1::set<id, std::__1::less<id>, std::__1::allocator<id> > > > > __table_;
} unordered_map<unsigned long, std::__1::set<id, std::__1::less<id>, std::__1::allocator<id> >, std::__1::hash<unsigned long>, std::__1::equal_to<unsigned long>, std::__1::allocator<std::__1::pair<const unsigned long, std::__1::set<id, std::__1::less<id>, std::__1::allocator<id> > > > >;

typedef struct UIEdgeInsets {
	double top;
	double left;
	double bottom;
	double right;
} UIEdgeInsets;

typedef struct CGColor* CGColorRef;

typedef struct _compressed_pair<unsigned long, std::__1::allocator<std::__1::__hash_node<std::__1::__hash_value_type<unsigned long, id>, void *> *> > {
	unsigned long long __first_;
} compressed_pair<unsigned long, std::__1::allocator<std::__1::__hash_node<std::__1::__hash_value_type<unsigned long, id>, void *> *> >;

typedef struct _compressed_pair<unsigned long, std::__1::__unordered_map_hasher<unsigned long, std::__1::__hash_value_type<unsigned long, id>, std::__1::hash<unsigned long>, true> > {
	unsigned long long __first_;
} compressed_pair<unsigned long, std::__1::__unordered_map_hasher<unsigned long, std::__1::__hash_value_type<unsigned long, id>, std::__1::hash<unsigned long>, true> >;

typedef struct _compressed_pair<float, std::__1::__unordered_map_equal<unsigned long, std::__1::__hash_value_type<unsigned long, id>, std::__1::equal_to<unsigned long>, true> > {
	float __first_;
} compressed_pair<float, std::__1::__unordered_map_equal<unsigned long, std::__1::__hash_value_type<unsigned long, id>, std::__1::equal_to<unsigned long>, true> >;

typedef struct _hash_node_base<std::__1::__hash_node<std::__1::__hash_value_type<unsigned long, id>, void *> *> {
	__hash_node<std::__1::__hash_value_type<unsigned long, id>, void *> __next_;
} hash_node_base<std::__1::__hash_node<std::__1::__hash_value_type<unsigned long, id>, void *> *>;

typedef struct _compressed_pair<std::__1::__hash_node_base<std::__1::__hash_node<std::__1::__hash_value_type<unsigned long, id>, void *> *>, std::__1::allocator<std::__1::__hash_node<std::__1::__hash_value_type<unsigned long, id>, void *> > > {
	hash_node_base<std::__1::__hash_node<std::__1::__hash_value_type<unsigned long, id>, void *> *> __first_;
} compressed_pair<std::__1::__hash_node_base<std::__1::__hash_node<std::__1::__hash_value_type<unsigned long, id>, void *> *>, std::__1::allocator<std::__1::__hash_node<std::__1::__hash_value_type<unsigned long, id>, void *> > >;

typedef struct _bucket_list_deallocator<std::__1::allocator<std::__1::__hash_node<std::__1::__hash_value_type<unsigned long, id>, void *> *> > {
	compressed_pair<unsigned long, std::__1::allocator<std::__1::__hash_node<std::__1::__hash_value_type<unsigned long, id>, void *> *> > __data_;
} bucket_list_deallocator<std::__1::allocator<std::__1::__hash_node<std::__1::__hash_value_type<unsigned long, id>, void *> *> >;

typedef struct _compressed_pair<std::__1::__hash_node<std::__1::__hash_value_type<unsigned long, id>, void *> **, std::__1::__bucket_list_deallocator<std::__1::allocator<std::__1::__hash_node<std::__1::__hash_value_type<unsigned long, id>, void *> *> > > {
	__hash_node<std::__1::__hash_value_type<unsigned long, id>, void *> __first_;
	bucket_list_deallocator<std::__1::allocator<std::__1::__hash_node<std::__1::__hash_value_type<unsigned long, id>, void *> *> > __second_;
} compressed_pair<std::__1::__hash_node<std::__1::__hash_value_type<unsigned long, id>, void *> **, std::__1::__bucket_list_deallocator<std::__1::allocator<std::__1::__hash_node<std::__1::__hash_value_type<unsigned long, id>, void *> *> > >;

typedef struct unique_ptr<std::__1::__hash_node<std::__1::__hash_value_type<unsigned long, id>, void *> *[], std::__1::__bucket_list_deallocator<std::__1::allocator<std::__1::__hash_node<std::__1::__hash_value_type<unsigned long, id>, void *> *> > > {
	compressed_pair<std::__1::__hash_node<std::__1::__hash_value_type<unsigned long, id>, void *> **, std::__1::__bucket_list_deallocator<std::__1::allocator<std::__1::__hash_node<std::__1::__hash_value_type<unsigned long, id>, void *> *> > > __ptr_;
} unique_ptr<std::__1::__hash_node<std::__1::__hash_value_type<unsigned long, id>, void *> *[], std::__1::__bucket_list_deallocator<std::__1::allocator<std::__1::__hash_node<std::__1::__hash_value_type<unsigned long, id>, void *> *> > >;

typedef struct _hash_table<std::__1::__hash_value_type<unsigned long, id>, std::__1::__unordered_map_hasher<unsigned long, std::__1::__hash_value_type<unsigned long, id>, std::__1::hash<unsigned long>, true>, std::__1::__unordered_map_equal<unsigned long, std::__1::__hash_value_type<unsigned long, id>, std::__1::equal_to<unsigned long>, true>, std::__1::allocator<std::__1::__hash_value_type<unsigned long, id> > > {
	unique_ptr<std::__1::__hash_node<std::__1::__hash_value_type<unsigned long, id>, void *> *[], std::__1::__bucket_list_deallocator<std::__1::allocator<std::__1::__hash_node<std::__1::__hash_value_type<unsigned long, id>, void *> *> > > __bucket_list_;
	compressed_pair<std::__1::__hash_node_base<std::__1::__hash_node<std::__1::__hash_value_type<unsigned long, id>, void *> *>, std::__1::allocator<std::__1::__hash_node<std::__1::__hash_value_type<unsigned long, id>, void *> > > __p1_;
	compressed_pair<unsigned long, std::__1::__unordered_map_hasher<unsigned long, std::__1::__hash_value_type<unsigned long, id>, std::__1::hash<unsigned long>, true> > __p2_;
	compressed_pair<float, std::__1::__unordered_map_equal<unsigned long, std::__1::__hash_value_type<unsigned long, id>, std::__1::equal_to<unsigned long>, true> > __p3_;
} hash_table<std::__1::__hash_value_type<unsigned long, id>, std::__1::__unordered_map_hasher<unsigned long, std::__1::__hash_value_type<unsigned long, id>, std::__1::hash<unsigned long>, true>, std::__1::__unordered_map_equal<unsigned long, std::__1::__hash_value_type<unsigned long, id>, std::__1::equal_to<unsigned long>, true>, std::__1::allocator<std::__1::__hash_value_type<unsigned long, id> > >;

typedef struct unordered_map<unsigned long, id, std::__1::hash<unsigned long>, std::__1::equal_to<unsigned long>, std::__1::allocator<std::__1::pair<const unsigned long, id> > > {
	hash_table<std::__1::__hash_value_type<unsigned long, id>, std::__1::__unordered_map_hasher<unsigned long, std::__1::__hash_value_type<unsigned long, id>, std::__1::hash<unsigned long>, true>, std::__1::__unordered_map_equal<unsigned long, std::__1::__hash_value_type<unsigned long, id>, std::__1::equal_to<unsigned long>, true>, std::__1::allocator<std::__1::__hash_value_type<unsigned long, id> > > __table_;
} unordered_map<unsigned long, id, std::__1::hash<unsigned long>, std::__1::equal_to<unsigned long>, std::__1::allocator<std::__1::pair<const unsigned long, id> > >;

typedef struct _compressed_pair<CGRect *, std::__1::allocator<CGRect> > {
	CGRect __first_;
} compressed_pair<CGRect *, std::__1::allocator<CGRect> >;

typedef struct vector<CGRect, std::__1::allocator<CGRect> > {
	CGRect __begin_;
	CGRect __end_;
	compressed_pair<CGRect *, std::__1::allocator<CGRect> > __end_cap_;
} vector<CGRect, std::__1::allocator<CGRect> >;

typedef struct _compressed_pair<Primitive **, std::__1::allocator<Primitive *> > {
	id __first_;
} compressed_pair<Primitive **, std::__1::allocator<Primitive *> >;

typedef struct S8CXXArrayList<Primitive *> {
	/*function pointer*/void* _vptr$S8CXXArrayList;
	id __begin_;
	id __end_;
	compressed_pair<Primitive **, std::__1::allocator<Primitive *> > __end_cap_;
} S8CXXArrayList<Primitive *>;

typedef struct _compressed_pair<CameraBase **, std::__1::allocator<CameraBase *> > {
	id __first_;
} compressed_pair<CameraBase **, std::__1::allocator<CameraBase *> >;

typedef struct S8CXXArrayList<CameraBase *> {
	/*function pointer*/void* _vptr$S8CXXArrayList;
	id __begin_;
	id __end_;
	compressed_pair<CameraBase **, std::__1::allocator<CameraBase *> > __end_cap_;
} S8CXXArrayList<CameraBase *>;

typedef struct _compressed_pair<unsigned long *, std::__1::allocator<unsigned long> > {
	unsigned long long __first_;
} compressed_pair<unsigned long *, std::__1::allocator<unsigned long> >;

typedef struct vector<unsigned long, std::__1::allocator<unsigned long> > {
	unsigned long long __begin_;
	unsigned long long __end_;
	compressed_pair<unsigned long *, std::__1::allocator<unsigned long> > __end_cap_;
} vector<unsigned long, std::__1::allocator<unsigned long> >;

typedef struct _compressed_pair<unsigned long, std::__1::allocator<std::__1::__hash_node<std::__1::__hash_value_type<unsigned long, std::__1::unordered_map<unsigned long, ESStateTransition *, std::__1::hash<unsigned long>, std::__1::equal_to<unsigned long>, std::__1::allocator<std::__1::pair<const unsigned long, ESStateTransition *> > > >, void *> *> > {
	unsigned long long __first_;
} compressed_pair<unsigned long, std::__1::allocator<std::__1::__hash_node<std::__1::__hash_value_type<unsigned long, std::__1::unordered_map<unsigned long, ESStateTransition *, std::__1::hash<unsigned long>, std::__1::equal_to<unsigned long>, std::__1::allocator<std::__1::pair<const unsigned long, ESStateTransition *> > > >, void *> *> >;

typedef struct _compressed_pair<unsigned long, std::__1::__unordered_map_hasher<unsigned long, std::__1::__hash_value_type<unsigned long, std::__1::unordered_map<unsigned long, ESStateTransition *, std::__1::hash<unsigned long>, std::__1::equal_to<unsigned long>, std::__1::allocator<std::__1::pair<const unsigned long, ESStateTransition *> > > >, std::__1::hash<unsigned long>, true> > {
	unsigned long long __first_;
} compressed_pair<unsigned long, std::__1::__unordered_map_hasher<unsigned long, std::__1::__hash_value_type<unsigned long, std::__1::unordered_map<unsigned long, ESStateTransition *, std::__1::hash<unsigned long>, std::__1::equal_to<unsigned long>, std::__1::allocator<std::__1::pair<const unsigned long, ESStateTransition *> > > >, std::__1::hash<unsigned long>, true> >;

typedef struct _compressed_pair<float, std::__1::__unordered_map_equal<unsigned long, std::__1::__hash_value_type<unsigned long, std::__1::unordered_map<unsigned long, ESStateTransition *, std::__1::hash<unsigned long>, std::__1::equal_to<unsigned long>, std::__1::allocator<std::__1::pair<const unsigned long, ESStateTransition *> > > >, std::__1::equal_to<unsigned long>, true> > {
	float __first_;
} compressed_pair<float, std::__1::__unordered_map_equal<unsigned long, std::__1::__hash_value_type<unsigned long, std::__1::unordered_map<unsigned long, ESStateTransition *, std::__1::hash<unsigned long>, std::__1::equal_to<unsigned long>, std::__1::allocator<std::__1::pair<const unsigned long, ESStateTransition *> > > >, std::__1::equal_to<unsigned long>, true> >;

typedef struct _hash_node_base<std::__1::__hash_node<std::__1::__hash_value_type<unsigned long, std::__1::unordered_map<unsigned long, ESStateTransition *, std::__1::hash<unsigned long>, std::__1::equal_to<unsigned long>, std::__1::allocator<std::__1::pair<const unsigned long, ESStateTransition *> > > >, void *> *> {
	__hash_node<std::__1::__hash_value_type<unsigned long, std::__1::unordered_map<unsigned long, ESStateTransition *, std::__1::hash<unsigned long>, std::__1::equal_to<unsigned long>, std::__1::allocator<std::__1::pair<const unsigned long, ESStateTransition *> > > >, void *> __next_;
} hash_node_base<std::__1::__hash_node<std::__1::__hash_value_type<unsigned long, std::__1::unordered_map<unsigned long, ESStateTransition *, std::__1::hash<unsigned long>, std::__1::equal_to<unsigned long>, std::__1::allocator<std::__1::pair<const unsigned long, ESStateTransition *> > > >, void *> *>;

typedef struct _compressed_pair<std::__1::__hash_node_base<std::__1::__hash_node<std::__1::__hash_value_type<unsigned long, std::__1::unordered_map<unsigned long, ESStateTransition *, std::__1::hash<unsigned long>, std::__1::equal_to<unsigned long>, std::__1::allocator<std::__1::pair<const unsigned long, ESStateTransition *> > > >, void *> *>, std::__1::allocator<std::__1::__hash_node<std::__1::__hash_value_type<unsigned long, std::__1::unordered_map<unsigned long, ESStateTransition *, std::__1::hash<unsigned long>, std::__1::equal_to<unsigned long>, std::__1::allocator<std::__1::pair<const unsigned long, ESStateTransition *> > > >, void *> > > {
	hash_node_base<std::__1::__hash_node<std::__1::__hash_value_type<unsigned long, std::__1::unordered_map<unsigned long, ESStateTransition *, std::__1::hash<unsigned long>, std::__1::equal_to<unsigned long>, std::__1::allocator<std::__1::pair<const unsigned long, ESStateTransition *> > > >, void *> *> __first_;
} compressed_pair<std::__1::__hash_node_base<std::__1::__hash_node<std::__1::__hash_value_type<unsigned long, std::__1::unordered_map<unsigned long, ESStateTransition *, std::__1::hash<unsigned long>, std::__1::equal_to<unsigned long>, std::__1::allocator<std::__1::pair<const unsigned long, ESStateTransition *> > > >, void *> *>, std::__1::allocator<std::__1::__hash_node<std::__1::__hash_value_type<unsigned long, std::__1::unordered_map<unsigned long, ESStateTransition *, std::__1::hash<unsigned long>, std::__1::equal_to<unsigned long>, std::__1::allocator<std::__1::pair<const unsigned long, ESStateTransition *> > > >, void *> > >;

typedef struct _bucket_list_deallocator<std::__1::allocator<std::__1::__hash_node<std::__1::__hash_value_type<unsigned long, std::__1::unordered_map<unsigned long, ESStateTransition *, std::__1::hash<unsigned long>, std::__1::equal_to<unsigned long>, std::__1::allocator<std::__1::pair<const unsigned long, ESStateTransition *> > > >, void *> *> > {
	compressed_pair<unsigned long, std::__1::allocator<std::__1::__hash_node<std::__1::__hash_value_type<unsigned long, std::__1::unordered_map<unsigned long, ESStateTransition *, std::__1::hash<unsigned long>, std::__1::equal_to<unsigned long>, std::__1::allocator<std::__1::pair<const unsigned long, ESStateTransition *> > > >, void *> *> > __data_;
} bucket_list_deallocator<std::__1::allocator<std::__1::__hash_node<std::__1::__hash_value_type<unsigned long, std::__1::unordered_map<unsigned long, ESStateTransition *, std::__1::hash<unsigned long>, std::__1::equal_to<unsigned long>, std::__1::allocator<std::__1::pair<const unsigned long, ESStateTransition *> > > >, void *> *> >;

typedef struct _compressed_pair<std::__1::__hash_node<std::__1::__hash_value_type<unsigned long, std::__1::unordered_map<unsigned long, ESStateTransition *, std::__1::hash<unsigned long>, std::__1::equal_to<unsigned long>, std::__1::allocator<std::__1::pair<const unsigned long, ESStateTransition *> > > >, void *> **, std::__1::__bucket_list_deallocator<std::__1::allocator<std::__1::__hash_node<std::__1::__hash_value_type<unsigned long, std::__1::unordered_map<unsigned long, ESStateTransition *, std::__1::hash<unsigned long>, std::__1::equal_to<unsigned long>, std::__1::allocator<std::__1::pair<const unsigned long, ESStateTransition *> > > >, void *> *> > > {
	__hash_node<std::__1::__hash_value_type<unsigned long, std::__1::unordered_map<unsigned long, ESStateTransition *, std::__1::hash<unsigned long>, std::__1::equal_to<unsigned long>, std::__1::allocator<std::__1::pair<const unsigned long, ESStateTransition *> > > >, void *> __first_;
	bucket_list_deallocator<std::__1::allocator<std::__1::__hash_node<std::__1::__hash_value_type<unsigned long, std::__1::unordered_map<unsigned long, ESStateTransition *, std::__1::hash<unsigned long>, std::__1::equal_to<unsigned long>, std::__1::allocator<std::__1::pair<const unsigned long, ESStateTransition *> > > >, void *> *> > __second_;
} compressed_pair<std::__1::__hash_node<std::__1::__hash_value_type<unsigned long, std::__1::unordered_map<unsigned long, ESStateTransition *, std::__1::hash<unsigned long>, std::__1::equal_to<unsigned long>, std::__1::allocator<std::__1::pair<const unsigned long, ESStateTransition *> > > >, void *> **, std::__1::__bucket_list_deallocator<std::__1::allocator<std::__1::__hash_node<std::__1::__hash_value_type<unsigned long, std::__1::unordered_map<unsigned long, ESStateTransition *, std::__1::hash<unsigned long>, std::__1::equal_to<unsigned long>, std::__1::allocator<std::__1::pair<const unsigned long, ESStateTransition *> > > >, void *> *> > >;

typedef struct unique_ptr<std::__1::__hash_node<std::__1::__hash_value_type<unsigned long, std::__1::unordered_map<unsigned long, ESStateTransition *, std::__1::hash<unsigned long>, std::__1::equal_to<unsigned long>, std::__1::allocator<std::__1::pair<const unsigned long, ESStateTransition *> > > >, void *> *[], std::__1::__bucket_list_deallocator<std::__1::allocator<std::__1::__hash_node<std::__1::__hash_value_type<unsigned long, std::__1::unordered_map<unsigned long, ESStateTransition *, std::__1::hash<unsigned long>, std::__1::equal_to<unsigned long>, std::__1::allocator<std::__1::pair<const unsigned long, ESStateTransition *> > > >, void *> *> > > {
	compressed_pair<std::__1::__hash_node<std::__1::__hash_value_type<unsigned long, std::__1::unordered_map<unsigned long, ESStateTransition *, std::__1::hash<unsigned long>, std::__1::equal_to<unsigned long>, std::__1::allocator<std::__1::pair<const unsigned long, ESStateTransition *> > > >, void *> **, std::__1::__bucket_list_deallocator<std::__1::allocator<std::__1::__hash_node<std::__1::__hash_value_type<unsigned long, std::__1::unordered_map<unsigned long, ESStateTransition *, std::__1::hash<unsigned long>, std::__1::equal_to<unsigned long>, std::__1::allocator<std::__1::pair<const unsigned long, ESStateTransition *> > > >, void *> *> > > __ptr_;
} unique_ptr<std::__1::__hash_node<std::__1::__hash_value_type<unsigned long, std::__1::unordered_map<unsigned long, ESStateTransition *, std::__1::hash<unsigned long>, std::__1::equal_to<unsigned long>, std::__1::allocator<std::__1::pair<const unsigned long, ESStateTransition *> > > >, void *> *[], std::__1::__bucket_list_deallocator<std::__1::allocator<std::__1::__hash_node<std::__1::__hash_value_type<unsigned long, std::__1::unordered_map<unsigned long, ESStateTransition *, std::__1::hash<unsigned long>, std::__1::equal_to<unsigned long>, std::__1::allocator<std::__1::pair<const unsigned long, ESStateTransition *> > > >, void *> *> > >;

typedef struct _hash_table<std::__1::__hash_value_type<unsigned long, std::__1::unordered_map<unsigned long, ESStateTransition *, std::__1::hash<unsigned long>, std::__1::equal_to<unsigned long>, std::__1::allocator<std::__1::pair<const unsigned long, ESStateTransition *> > > >, std::__1::__unordered_map_hasher<unsigned long, std::__1::__hash_value_type<unsigned long, std::__1::unordered_map<unsigned long, ESStateTransition *, std::__1::hash<unsigned long>, std::__1::equal_to<unsigned long>, std::__1::allocator<std::__1::pair<const unsigned long, ESStateTransition *> > > >, std::__1::hash<unsigned long>, true>, std::__1::__unordered_map_equal<unsigned long, std::__1::__hash_value_type<unsigned long, std::__1::unordered_map<unsigned long, ESStateTransition *, std::__1::hash<unsigned long>, std::__1::equal_to<unsigned long>, std::__1::allocator<std::__1::pair<const unsigned long, ESStateTransition *> > > >, std::__1::equal_to<unsigned long>, true>, std::__1::allocator<std::__1::__hash_value_type<unsigned long, std::__1::unordered_map<unsigned long, ESStateTransition *, std::__1::hash<unsigned long>, std::__1::equal_to<unsigned long>, std::__1::allocator<std::__1::pair<const unsigned long, ESStateTransition *> > > > > > {
	unique_ptr<std::__1::__hash_node<std::__1::__hash_value_type<unsigned long, std::__1::unordered_map<unsigned long, ESStateTransition *, std::__1::hash<unsigned long>, std::__1::equal_to<unsigned long>, std::__1::allocator<std::__1::pair<const unsigned long, ESStateTransition *> > > >, void *> *[], std::__1::__bucket_list_deallocator<std::__1::allocator<std::__1::__hash_node<std::__1::__hash_value_type<unsigned long, std::__1::unordered_map<unsigned long, ESStateTransition *, std::__1::hash<unsigned long>, std::__1::equal_to<unsigned long>, std::__1::allocator<std::__1::pair<const unsigned long, ESStateTransition *> > > >, void *> *> > > __bucket_list_;
	compressed_pair<std::__1::__hash_node_base<std::__1::__hash_node<std::__1::__hash_value_type<unsigned long, std::__1::unordered_map<unsigned long, ESStateTransition *, std::__1::hash<unsigned long>, std::__1::equal_to<unsigned long>, std::__1::allocator<std::__1::pair<const unsigned long, ESStateTransition *> > > >, void *> *>, std::__1::allocator<std::__1::__hash_node<std::__1::__hash_value_type<unsigned long, std::__1::unordered_map<unsigned long, ESStateTransition *, std::__1::hash<unsigned long>, std::__1::equal_to<unsigned long>, std::__1::allocator<std::__1::pair<const unsigned long, ESStateTransition *> > > >, void *> > > __p1_;
	compressed_pair<unsigned long, std::__1::__unordered_map_hasher<unsigned long, std::__1::__hash_value_type<unsigned long, std::__1::unordered_map<unsigned long, ESStateTransition *, std::__1::hash<unsigned long>, std::__1::equal_to<unsigned long>, std::__1::allocator<std::__1::pair<const unsigned long, ESStateTransition *> > > >, std::__1::hash<unsigned long>, true> > __p2_;
	compressed_pair<float, std::__1::__unordered_map_equal<unsigned long, std::__1::__hash_value_type<unsigned long, std::__1::unordered_map<unsigned long, ESStateTransition *, std::__1::hash<unsigned long>, std::__1::equal_to<unsigned long>, std::__1::allocator<std::__1::pair<const unsigned long, ESStateTransition *> > > >, std::__1::equal_to<unsigned long>, true> > __p3_;
} hash_table<std::__1::__hash_value_type<unsigned long, std::__1::unordered_map<unsigned long, ESStateTransition *, std::__1::hash<unsigned long>, std::__1::equal_to<unsigned long>, std::__1::allocator<std::__1::pair<const unsigned long, ESStateTransition *> > > >, std::__1::__unordered_map_hasher<unsigned long, std::__1::__hash_value_type<unsigned long, std::__1::unordered_map<unsigned long, ESStateTransition *, std::__1::hash<unsigned long>, std::__1::equal_to<unsigned long>, std::__1::allocator<std::__1::pair<const unsigned long, ESStateTransition *> > > >, std::__1::hash<unsigned long>, true>, std::__1::__unordered_map_equal<unsigned long, std::__1::__hash_value_type<unsigned long, std::__1::unordered_map<unsigned long, ESStateTransition *, std::__1::hash<unsigned long>, std::__1::equal_to<unsigned long>, std::__1::allocator<std::__1::pair<const unsigned long, ESStateTransition *> > > >, std::__1::equal_to<unsigned long>, true>, std::__1::allocator<std::__1::__hash_value_type<unsigned long, std::__1::unordered_map<unsigned long, ESStateTransition *, std::__1::hash<unsigned long>, std::__1::equal_to<unsigned long>, std::__1::allocator<std::__1::pair<const unsigned long, ESStateTransition *> > > > > >;

typedef struct unordered_map<unsigned long, std::__1::unordered_map<unsigned long, ESStateTransition *, std::__1::hash<unsigned long>, std::__1::equal_to<unsigned long>, std::__1::allocator<std::__1::pair<const unsigned long, ESStateTransition *> > >, std::__1::hash<unsigned long>, std::__1::equal_to<unsigned long>, std::__1::allocator<std::__1::pair<const unsigned long, std::__1::unordered_map<unsigned long, ESStateTransition *, std::__1::hash<unsigned long>, std::__1::equal_to<unsigned long>, std::__1::allocator<std::__1::pair<const unsigned long, ESStateTransition *> > > > > > {
	hash_table<std::__1::__hash_value_type<unsigned long, std::__1::unordered_map<unsigned long, ESStateTransition *, std::__1::hash<unsigned long>, std::__1::equal_to<unsigned long>, std::__1::allocator<std::__1::pair<const unsigned long, ESStateTransition *> > > >, std::__1::__unordered_map_hasher<unsigned long, std::__1::__hash_value_type<unsigned long, std::__1::unordered_map<unsigned long, ESStateTransition *, std::__1::hash<unsigned long>, std::__1::equal_to<unsigned long>, std::__1::allocator<std::__1::pair<const unsigned long, ESStateTransition *> > > >, std::__1::hash<unsigned long>, true>, std::__1::__unordered_map_equal<unsigned long, std::__1::__hash_value_type<unsigned long, std::__1::unordered_map<unsigned long, ESStateTransition *, std::__1::hash<unsigned long>, std::__1::equal_to<unsigned long>, std::__1::allocator<std::__1::pair<const unsigned long, ESStateTransition *> > > >, std::__1::equal_to<unsigned long>, true>, std::__1::allocator<std::__1::__hash_value_type<unsigned long, std::__1::unordered_map<unsigned long, ESStateTransition *, std::__1::hash<unsigned long>, std::__1::equal_to<unsigned long>, std::__1::allocator<std::__1::pair<const unsigned long, ESStateTransition *> > > > > > __table_;
} unordered_map<unsigned long, std::__1::unordered_map<unsigned long, ESStateTransition *, std::__1::hash<unsigned long>, std::__1::equal_to<unsigned long>, std::__1::allocator<std::__1::pair<const unsigned long, ESStateTransition *> > >, std::__1::hash<unsigned long>, std::__1::equal_to<unsigned long>, std::__1::allocator<std::__1::pair<const unsigned long, std::__1::unordered_map<unsigned long, ESStateTransition *, std::__1::hash<unsigned long>, std::__1::equal_to<unsigned long>, std::__1::allocator<std::__1::pair<const unsigned long, ESStateTransition *> > > > > >;

typedef struct GLFrameStats {
	int textureSwaps;
	int textureSwapsAvoided;
	long long textureMemorySwapped;
	int trianglesDrawn;
	int billboardsDrawn;
	int particlesDrawn;
	int drawCalls;
	int meshes;
	int backgroundSceneBillboards;
	int backgroundSceneMeshes;
	int backgroundSceneTriangles;
	double drawTime;
	double betweenDrawTime;
	double betweenFramesTime;
} GLFrameStats;

typedef struct _compressed_pair<unsigned long, std::__1::allocator<std::__1::__hash_node<std::__1::__hash_value_type<unsigned long, ESAnimationTiming *>, void *> *> > {
	unsigned long long __first_;
} compressed_pair<unsigned long, std::__1::allocator<std::__1::__hash_node<std::__1::__hash_value_type<unsigned long, ESAnimationTiming *>, void *> *> >;

typedef struct _compressed_pair<unsigned long, std::__1::__unordered_map_hasher<unsigned long, std::__1::__hash_value_type<unsigned long, ESAnimationTiming *>, std::__1::hash<unsigned long>, true> > {
	unsigned long long __first_;
} compressed_pair<unsigned long, std::__1::__unordered_map_hasher<unsigned long, std::__1::__hash_value_type<unsigned long, ESAnimationTiming *>, std::__1::hash<unsigned long>, true> >;

typedef struct _compressed_pair<float, std::__1::__unordered_map_equal<unsigned long, std::__1::__hash_value_type<unsigned long, ESAnimationTiming *>, std::__1::equal_to<unsigned long>, true> > {
	float __first_;
} compressed_pair<float, std::__1::__unordered_map_equal<unsigned long, std::__1::__hash_value_type<unsigned long, ESAnimationTiming *>, std::__1::equal_to<unsigned long>, true> >;

typedef struct _hash_node_base<std::__1::__hash_node<std::__1::__hash_value_type<unsigned long, ESAnimationTiming *>, void *> *> {
	__hash_node<std::__1::__hash_value_type<unsigned long, ESAnimationTiming *>, void *> __next_;
} hash_node_base<std::__1::__hash_node<std::__1::__hash_value_type<unsigned long, ESAnimationTiming *>, void *> *>;

typedef struct _compressed_pair<std::__1::__hash_node_base<std::__1::__hash_node<std::__1::__hash_value_type<unsigned long, ESAnimationTiming *>, void *> *>, std::__1::allocator<std::__1::__hash_node<std::__1::__hash_value_type<unsigned long, ESAnimationTiming *>, void *> > > {
	hash_node_base<std::__1::__hash_node<std::__1::__hash_value_type<unsigned long, ESAnimationTiming *>, void *> *> __first_;
} compressed_pair<std::__1::__hash_node_base<std::__1::__hash_node<std::__1::__hash_value_type<unsigned long, ESAnimationTiming *>, void *> *>, std::__1::allocator<std::__1::__hash_node<std::__1::__hash_value_type<unsigned long, ESAnimationTiming *>, void *> > >;

typedef struct _bucket_list_deallocator<std::__1::allocator<std::__1::__hash_node<std::__1::__hash_value_type<unsigned long, ESAnimationTiming *>, void *> *> > {
	compressed_pair<unsigned long, std::__1::allocator<std::__1::__hash_node<std::__1::__hash_value_type<unsigned long, ESAnimationTiming *>, void *> *> > __data_;
} bucket_list_deallocator<std::__1::allocator<std::__1::__hash_node<std::__1::__hash_value_type<unsigned long, ESAnimationTiming *>, void *> *> >;

typedef struct _compressed_pair<std::__1::__hash_node<std::__1::__hash_value_type<unsigned long, ESAnimationTiming *>, void *> **, std::__1::__bucket_list_deallocator<std::__1::allocator<std::__1::__hash_node<std::__1::__hash_value_type<unsigned long, ESAnimationTiming *>, void *> *> > > {
	__hash_node<std::__1::__hash_value_type<unsigned long, ESAnimationTiming *>, void *> __first_;
	bucket_list_deallocator<std::__1::allocator<std::__1::__hash_node<std::__1::__hash_value_type<unsigned long, ESAnimationTiming *>, void *> *> > __second_;
} compressed_pair<std::__1::__hash_node<std::__1::__hash_value_type<unsigned long, ESAnimationTiming *>, void *> **, std::__1::__bucket_list_deallocator<std::__1::allocator<std::__1::__hash_node<std::__1::__hash_value_type<unsigned long, ESAnimationTiming *>, void *> *> > >;

typedef struct unique_ptr<std::__1::__hash_node<std::__1::__hash_value_type<unsigned long, ESAnimationTiming *>, void *> *[], std::__1::__bucket_list_deallocator<std::__1::allocator<std::__1::__hash_node<std::__1::__hash_value_type<unsigned long, ESAnimationTiming *>, void *> *> > > {
	compressed_pair<std::__1::__hash_node<std::__1::__hash_value_type<unsigned long, ESAnimationTiming *>, void *> **, std::__1::__bucket_list_deallocator<std::__1::allocator<std::__1::__hash_node<std::__1::__hash_value_type<unsigned long, ESAnimationTiming *>, void *> *> > > __ptr_;
} unique_ptr<std::__1::__hash_node<std::__1::__hash_value_type<unsigned long, ESAnimationTiming *>, void *> *[], std::__1::__bucket_list_deallocator<std::__1::allocator<std::__1::__hash_node<std::__1::__hash_value_type<unsigned long, ESAnimationTiming *>, void *> *> > >;

typedef struct _hash_table<std::__1::__hash_value_type<unsigned long, ESAnimationTiming *>, std::__1::__unordered_map_hasher<unsigned long, std::__1::__hash_value_type<unsigned long, ESAnimationTiming *>, std::__1::hash<unsigned long>, true>, std::__1::__unordered_map_equal<unsigned long, std::__1::__hash_value_type<unsigned long, ESAnimationTiming *>, std::__1::equal_to<unsigned long>, true>, std::__1::allocator<std::__1::__hash_value_type<unsigned long, ESAnimationTiming *> > > {
	unique_ptr<std::__1::__hash_node<std::__1::__hash_value_type<unsigned long, ESAnimationTiming *>, void *> *[], std::__1::__bucket_list_deallocator<std::__1::allocator<std::__1::__hash_node<std::__1::__hash_value_type<unsigned long, ESAnimationTiming *>, void *> *> > > __bucket_list_;
	compressed_pair<std::__1::__hash_node_base<std::__1::__hash_node<std::__1::__hash_value_type<unsigned long, ESAnimationTiming *>, void *> *>, std::__1::allocator<std::__1::__hash_node<std::__1::__hash_value_type<unsigned long, ESAnimationTiming *>, void *> > > __p1_;
	compressed_pair<unsigned long, std::__1::__unordered_map_hasher<unsigned long, std::__1::__hash_value_type<unsigned long, ESAnimationTiming *>, std::__1::hash<unsigned long>, true> > __p2_;
	compressed_pair<float, std::__1::__unordered_map_equal<unsigned long, std::__1::__hash_value_type<unsigned long, ESAnimationTiming *>, std::__1::equal_to<unsigned long>, true> > __p3_;
} hash_table<std::__1::__hash_value_type<unsigned long, ESAnimationTiming *>, std::__1::__unordered_map_hasher<unsigned long, std::__1::__hash_value_type<unsigned long, ESAnimationTiming *>, std::__1::hash<unsigned long>, true>, std::__1::__unordered_map_equal<unsigned long, std::__1::__hash_value_type<unsigned long, ESAnimationTiming *>, std::__1::equal_to<unsigned long>, true>, std::__1::allocator<std::__1::__hash_value_type<unsigned long, ESAnimationTiming *> > >;

typedef struct unordered_map<unsigned long, ESAnimationTiming *, std::__1::hash<unsigned long>, std::__1::equal_to<unsigned long>, std::__1::allocator<std::__1::pair<const unsigned long, ESAnimationTiming *> > > {
	hash_table<std::__1::__hash_value_type<unsigned long, ESAnimationTiming *>, std::__1::__unordered_map_hasher<unsigned long, std::__1::__hash_value_type<unsigned long, ESAnimationTiming *>, std::__1::hash<unsigned long>, true>, std::__1::__unordered_map_equal<unsigned long, std::__1::__hash_value_type<unsigned long, ESAnimationTiming *>, std::__1::equal_to<unsigned long>, true>, std::__1::allocator<std::__1::__hash_value_type<unsigned long, ESAnimationTiming *> > > __table_;
} unordered_map<unsigned long, ESAnimationTiming *, std::__1::hash<unsigned long>, std::__1::equal_to<unsigned long>, std::__1::allocator<std::__1::pair<const unsigned long, ESAnimationTiming *> > >;

typedef struct _compressed_pair<unsigned long, std::__1::allocator<std::__1::__hash_node<std::__1::__hash_value_type<unsigned long, ESParticleDescription *>, void *> *> > {
	unsigned long long __first_;
} compressed_pair<unsigned long, std::__1::allocator<std::__1::__hash_node<std::__1::__hash_value_type<unsigned long, ESParticleDescription *>, void *> *> >;

typedef struct _compressed_pair<unsigned long, std::__1::__unordered_map_hasher<unsigned long, std::__1::__hash_value_type<unsigned long, ESParticleDescription *>, std::__1::hash<unsigned long>, true> > {
	unsigned long long __first_;
} compressed_pair<unsigned long, std::__1::__unordered_map_hasher<unsigned long, std::__1::__hash_value_type<unsigned long, ESParticleDescription *>, std::__1::hash<unsigned long>, true> >;

typedef struct _compressed_pair<float, std::__1::__unordered_map_equal<unsigned long, std::__1::__hash_value_type<unsigned long, ESParticleDescription *>, std::__1::equal_to<unsigned long>, true> > {
	float __first_;
} compressed_pair<float, std::__1::__unordered_map_equal<unsigned long, std::__1::__hash_value_type<unsigned long, ESParticleDescription *>, std::__1::equal_to<unsigned long>, true> >;

typedef struct _hash_node_base<std::__1::__hash_node<std::__1::__hash_value_type<unsigned long, ESParticleDescription *>, void *> *> {
	__hash_node<std::__1::__hash_value_type<unsigned long, ESParticleDescription *>, void *> __next_;
} hash_node_base<std::__1::__hash_node<std::__1::__hash_value_type<unsigned long, ESParticleDescription *>, void *> *>;

typedef struct _compressed_pair<std::__1::__hash_node_base<std::__1::__hash_node<std::__1::__hash_value_type<unsigned long, ESParticleDescription *>, void *> *>, std::__1::allocator<std::__1::__hash_node<std::__1::__hash_value_type<unsigned long, ESParticleDescription *>, void *> > > {
	hash_node_base<std::__1::__hash_node<std::__1::__hash_value_type<unsigned long, ESParticleDescription *>, void *> *> __first_;
} compressed_pair<std::__1::__hash_node_base<std::__1::__hash_node<std::__1::__hash_value_type<unsigned long, ESParticleDescription *>, void *> *>, std::__1::allocator<std::__1::__hash_node<std::__1::__hash_value_type<unsigned long, ESParticleDescription *>, void *> > >;

typedef struct _bucket_list_deallocator<std::__1::allocator<std::__1::__hash_node<std::__1::__hash_value_type<unsigned long, ESParticleDescription *>, void *> *> > {
	compressed_pair<unsigned long, std::__1::allocator<std::__1::__hash_node<std::__1::__hash_value_type<unsigned long, ESParticleDescription *>, void *> *> > __data_;
} bucket_list_deallocator<std::__1::allocator<std::__1::__hash_node<std::__1::__hash_value_type<unsigned long, ESParticleDescription *>, void *> *> >;

typedef struct _compressed_pair<std::__1::__hash_node<std::__1::__hash_value_type<unsigned long, ESParticleDescription *>, void *> **, std::__1::__bucket_list_deallocator<std::__1::allocator<std::__1::__hash_node<std::__1::__hash_value_type<unsigned long, ESParticleDescription *>, void *> *> > > {
	__hash_node<std::__1::__hash_value_type<unsigned long, ESParticleDescription *>, void *> __first_;
	bucket_list_deallocator<std::__1::allocator<std::__1::__hash_node<std::__1::__hash_value_type<unsigned long, ESParticleDescription *>, void *> *> > __second_;
} compressed_pair<std::__1::__hash_node<std::__1::__hash_value_type<unsigned long, ESParticleDescription *>, void *> **, std::__1::__bucket_list_deallocator<std::__1::allocator<std::__1::__hash_node<std::__1::__hash_value_type<unsigned long, ESParticleDescription *>, void *> *> > >;

typedef struct unique_ptr<std::__1::__hash_node<std::__1::__hash_value_type<unsigned long, ESParticleDescription *>, void *> *[], std::__1::__bucket_list_deallocator<std::__1::allocator<std::__1::__hash_node<std::__1::__hash_value_type<unsigned long, ESParticleDescription *>, void *> *> > > {
	compressed_pair<std::__1::__hash_node<std::__1::__hash_value_type<unsigned long, ESParticleDescription *>, void *> **, std::__1::__bucket_list_deallocator<std::__1::allocator<std::__1::__hash_node<std::__1::__hash_value_type<unsigned long, ESParticleDescription *>, void *> *> > > __ptr_;
} unique_ptr<std::__1::__hash_node<std::__1::__hash_value_type<unsigned long, ESParticleDescription *>, void *> *[], std::__1::__bucket_list_deallocator<std::__1::allocator<std::__1::__hash_node<std::__1::__hash_value_type<unsigned long, ESParticleDescription *>, void *> *> > >;

typedef struct _hash_table<std::__1::__hash_value_type<unsigned long, ESParticleDescription *>, std::__1::__unordered_map_hasher<unsigned long, std::__1::__hash_value_type<unsigned long, ESParticleDescription *>, std::__1::hash<unsigned long>, true>, std::__1::__unordered_map_equal<unsigned long, std::__1::__hash_value_type<unsigned long, ESParticleDescription *>, std::__1::equal_to<unsigned long>, true>, std::__1::allocator<std::__1::__hash_value_type<unsigned long, ESParticleDescription *> > > {
	unique_ptr<std::__1::__hash_node<std::__1::__hash_value_type<unsigned long, ESParticleDescription *>, void *> *[], std::__1::__bucket_list_deallocator<std::__1::allocator<std::__1::__hash_node<std::__1::__hash_value_type<unsigned long, ESParticleDescription *>, void *> *> > > __bucket_list_;
	compressed_pair<std::__1::__hash_node_base<std::__1::__hash_node<std::__1::__hash_value_type<unsigned long, ESParticleDescription *>, void *> *>, std::__1::allocator<std::__1::__hash_node<std::__1::__hash_value_type<unsigned long, ESParticleDescription *>, void *> > > __p1_;
	compressed_pair<unsigned long, std::__1::__unordered_map_hasher<unsigned long, std::__1::__hash_value_type<unsigned long, ESParticleDescription *>, std::__1::hash<unsigned long>, true> > __p2_;
	compressed_pair<float, std::__1::__unordered_map_equal<unsigned long, std::__1::__hash_value_type<unsigned long, ESParticleDescription *>, std::__1::equal_to<unsigned long>, true> > __p3_;
} hash_table<std::__1::__hash_value_type<unsigned long, ESParticleDescription *>, std::__1::__unordered_map_hasher<unsigned long, std::__1::__hash_value_type<unsigned long, ESParticleDescription *>, std::__1::hash<unsigned long>, true>, std::__1::__unordered_map_equal<unsigned long, std::__1::__hash_value_type<unsigned long, ESParticleDescription *>, std::__1::equal_to<unsigned long>, true>, std::__1::allocator<std::__1::__hash_value_type<unsigned long, ESParticleDescription *> > >;

typedef struct unordered_map<unsigned long, ESParticleDescription *, std::__1::hash<unsigned long>, std::__1::equal_to<unsigned long>, std::__1::allocator<std::__1::pair<const unsigned long, ESParticleDescription *> > > {
	hash_table<std::__1::__hash_value_type<unsigned long, ESParticleDescription *>, std::__1::__unordered_map_hasher<unsigned long, std::__1::__hash_value_type<unsigned long, ESParticleDescription *>, std::__1::hash<unsigned long>, true>, std::__1::__unordered_map_equal<unsigned long, std::__1::__hash_value_type<unsigned long, ESParticleDescription *>, std::__1::equal_to<unsigned long>, true>, std::__1::allocator<std::__1::__hash_value_type<unsigned long, ESParticleDescription *> > > __table_;
} unordered_map<unsigned long, ESParticleDescription *, std::__1::hash<unsigned long>, std::__1::equal_to<unsigned long>, std::__1::allocator<std::__1::pair<const unsigned long, ESParticleDescription *> > >;

typedef struct Quad {
	Vertex vertex[4];
	float u[4];
	float v[4];
	float alpha;
} Quad;

typedef struct dispatch_queue_s* dispatch_queue_sRef;

typedef struct CGContext* CGContextRef;

typedef struct Matrix4x4 {
	float data[16];
} Matrix4x4;

typedef struct Frustum {
	float data[6][4];
	float nearPlane;
	float farPlane;
	float fovD;
} Frustum;

typedef struct Quaternion {
	float x;
	float y;
	float z;
	float w;
} Quaternion;

typedef struct Axis {
	Vertex xAxis;
	Vertex yAxis;
	Vertex zAxis;
	Matrix4x4 orthogonalMatrix;
	Matrix4x4 inverseOrthogonalMatrix;
} Axis;

typedef struct Sequence<int>* Sequence<int>Ref;

typedef struct _compressed_pair<unsigned long, std::__1::allocator<std::__1::__hash_node<std::__1::__hash_value_type<unsigned long, FrameAnimationComp *>, void *> *> > {
	unsigned long long __first_;
} compressed_pair<unsigned long, std::__1::allocator<std::__1::__hash_node<std::__1::__hash_value_type<unsigned long, FrameAnimationComp *>, void *> *> >;

typedef struct _compressed_pair<unsigned long, std::__1::__unordered_map_hasher<unsigned long, std::__1::__hash_value_type<unsigned long, FrameAnimationComp *>, std::__1::hash<unsigned long>, true> > {
	unsigned long long __first_;
} compressed_pair<unsigned long, std::__1::__unordered_map_hasher<unsigned long, std::__1::__hash_value_type<unsigned long, FrameAnimationComp *>, std::__1::hash<unsigned long>, true> >;

typedef struct _compressed_pair<float, std::__1::__unordered_map_equal<unsigned long, std::__1::__hash_value_type<unsigned long, FrameAnimationComp *>, std::__1::equal_to<unsigned long>, true> > {
	float __first_;
} compressed_pair<float, std::__1::__unordered_map_equal<unsigned long, std::__1::__hash_value_type<unsigned long, FrameAnimationComp *>, std::__1::equal_to<unsigned long>, true> >;

typedef struct _hash_node_base<std::__1::__hash_node<std::__1::__hash_value_type<unsigned long, FrameAnimationComp *>, void *> *> {
	__hash_node<std::__1::__hash_value_type<unsigned long, FrameAnimationComp *>, void *> __next_;
} hash_node_base<std::__1::__hash_node<std::__1::__hash_value_type<unsigned long, FrameAnimationComp *>, void *> *>;

typedef struct _compressed_pair<std::__1::__hash_node_base<std::__1::__hash_node<std::__1::__hash_value_type<unsigned long, FrameAnimationComp *>, void *> *>, std::__1::allocator<std::__1::__hash_node<std::__1::__hash_value_type<unsigned long, FrameAnimationComp *>, void *> > > {
	hash_node_base<std::__1::__hash_node<std::__1::__hash_value_type<unsigned long, FrameAnimationComp *>, void *> *> __first_;
} compressed_pair<std::__1::__hash_node_base<std::__1::__hash_node<std::__1::__hash_value_type<unsigned long, FrameAnimationComp *>, void *> *>, std::__1::allocator<std::__1::__hash_node<std::__1::__hash_value_type<unsigned long, FrameAnimationComp *>, void *> > >;

typedef struct _bucket_list_deallocator<std::__1::allocator<std::__1::__hash_node<std::__1::__hash_value_type<unsigned long, FrameAnimationComp *>, void *> *> > {
	compressed_pair<unsigned long, std::__1::allocator<std::__1::__hash_node<std::__1::__hash_value_type<unsigned long, FrameAnimationComp *>, void *> *> > __data_;
} bucket_list_deallocator<std::__1::allocator<std::__1::__hash_node<std::__1::__hash_value_type<unsigned long, FrameAnimationComp *>, void *> *> >;

typedef struct _compressed_pair<std::__1::__hash_node<std::__1::__hash_value_type<unsigned long, FrameAnimationComp *>, void *> **, std::__1::__bucket_list_deallocator<std::__1::allocator<std::__1::__hash_node<std::__1::__hash_value_type<unsigned long, FrameAnimationComp *>, void *> *> > > {
	__hash_node<std::__1::__hash_value_type<unsigned long, FrameAnimationComp *>, void *> __first_;
	bucket_list_deallocator<std::__1::allocator<std::__1::__hash_node<std::__1::__hash_value_type<unsigned long, FrameAnimationComp *>, void *> *> > __second_;
} compressed_pair<std::__1::__hash_node<std::__1::__hash_value_type<unsigned long, FrameAnimationComp *>, void *> **, std::__1::__bucket_list_deallocator<std::__1::allocator<std::__1::__hash_node<std::__1::__hash_value_type<unsigned long, FrameAnimationComp *>, void *> *> > >;

typedef struct unique_ptr<std::__1::__hash_node<std::__1::__hash_value_type<unsigned long, FrameAnimationComp *>, void *> *[], std::__1::__bucket_list_deallocator<std::__1::allocator<std::__1::__hash_node<std::__1::__hash_value_type<unsigned long, FrameAnimationComp *>, void *> *> > > {
	compressed_pair<std::__1::__hash_node<std::__1::__hash_value_type<unsigned long, FrameAnimationComp *>, void *> **, std::__1::__bucket_list_deallocator<std::__1::allocator<std::__1::__hash_node<std::__1::__hash_value_type<unsigned long, FrameAnimationComp *>, void *> *> > > __ptr_;
} unique_ptr<std::__1::__hash_node<std::__1::__hash_value_type<unsigned long, FrameAnimationComp *>, void *> *[], std::__1::__bucket_list_deallocator<std::__1::allocator<std::__1::__hash_node<std::__1::__hash_value_type<unsigned long, FrameAnimationComp *>, void *> *> > >;

typedef struct _hash_table<std::__1::__hash_value_type<unsigned long, FrameAnimationComp *>, std::__1::__unordered_map_hasher<unsigned long, std::__1::__hash_value_type<unsigned long, FrameAnimationComp *>, std::__1::hash<unsigned long>, true>, std::__1::__unordered_map_equal<unsigned long, std::__1::__hash_value_type<unsigned long, FrameAnimationComp *>, std::__1::equal_to<unsigned long>, true>, std::__1::allocator<std::__1::__hash_value_type<unsigned long, FrameAnimationComp *> > > {
	unique_ptr<std::__1::__hash_node<std::__1::__hash_value_type<unsigned long, FrameAnimationComp *>, void *> *[], std::__1::__bucket_list_deallocator<std::__1::allocator<std::__1::__hash_node<std::__1::__hash_value_type<unsigned long, FrameAnimationComp *>, void *> *> > > __bucket_list_;
	compressed_pair<std::__1::__hash_node_base<std::__1::__hash_node<std::__1::__hash_value_type<unsigned long, FrameAnimationComp *>, void *> *>, std::__1::allocator<std::__1::__hash_node<std::__1::__hash_value_type<unsigned long, FrameAnimationComp *>, void *> > > __p1_;
	compressed_pair<unsigned long, std::__1::__unordered_map_hasher<unsigned long, std::__1::__hash_value_type<unsigned long, FrameAnimationComp *>, std::__1::hash<unsigned long>, true> > __p2_;
	compressed_pair<float, std::__1::__unordered_map_equal<unsigned long, std::__1::__hash_value_type<unsigned long, FrameAnimationComp *>, std::__1::equal_to<unsigned long>, true> > __p3_;
} hash_table<std::__1::__hash_value_type<unsigned long, FrameAnimationComp *>, std::__1::__unordered_map_hasher<unsigned long, std::__1::__hash_value_type<unsigned long, FrameAnimationComp *>, std::__1::hash<unsigned long>, true>, std::__1::__unordered_map_equal<unsigned long, std::__1::__hash_value_type<unsigned long, FrameAnimationComp *>, std::__1::equal_to<unsigned long>, true>, std::__1::allocator<std::__1::__hash_value_type<unsigned long, FrameAnimationComp *> > >;

typedef struct unordered_map<unsigned long, FrameAnimationComp *, std::__1::hash<unsigned long>, std::__1::equal_to<unsigned long>, std::__1::allocator<std::__1::pair<const unsigned long, FrameAnimationComp *> > > {
	hash_table<std::__1::__hash_value_type<unsigned long, FrameAnimationComp *>, std::__1::__unordered_map_hasher<unsigned long, std::__1::__hash_value_type<unsigned long, FrameAnimationComp *>, std::__1::hash<unsigned long>, true>, std::__1::__unordered_map_equal<unsigned long, std::__1::__hash_value_type<unsigned long, FrameAnimationComp *>, std::__1::equal_to<unsigned long>, true>, std::__1::allocator<std::__1::__hash_value_type<unsigned long, FrameAnimationComp *> > > __table_;
} unordered_map<unsigned long, FrameAnimationComp *, std::__1::hash<unsigned long>, std::__1::equal_to<unsigned long>, std::__1::allocator<std::__1::pair<const unsigned long, FrameAnimationComp *> > >;

typedef struct _compressed_pair<FrameAnimatedBillboardPrimitive **, std::__1::allocator<FrameAnimatedBillboardPrimitive *> > {
	id __first_;
} compressed_pair<FrameAnimatedBillboardPrimitive **, std::__1::allocator<FrameAnimatedBillboardPrimitive *> >;

typedef struct vector<FrameAnimatedBillboardPrimitive *, std::__1::allocator<FrameAnimatedBillboardPrimitive *> > {
	id __begin_;
	id __end_;
	compressed_pair<FrameAnimatedBillboardPrimitive **, std::__1::allocator<FrameAnimatedBillboardPrimitive *> > __end_cap_;
} vector<FrameAnimatedBillboardPrimitive *, std::__1::allocator<FrameAnimatedBillboardPrimitive *> >;

typedef struct _compressed_pair<unsigned long, std::__1::allocator<std::__1::__hash_node<DriveStar *, void *> *> > {
	unsigned long long __first_;
} compressed_pair<unsigned long, std::__1::allocator<std::__1::__hash_node<DriveStar *, void *> *> >;

typedef struct _compressed_pair<unsigned long, VoidHashFunctor> {
	unsigned long long __first_;
} compressed_pair<unsigned long, VoidHashFunctor>;

typedef struct _compressed_pair<float, std::__1::equal_to<DriveStar *> > {
	float __first_;
} compressed_pair<float, std::__1::equal_to<DriveStar *> >;

typedef struct _hash_node_base<std::__1::__hash_node<DriveStar *, void *> *> {
	__hash_node<DriveStar *, void *> __next_;
} hash_node_base<std::__1::__hash_node<DriveStar *, void *> *>;

typedef struct _compressed_pair<std::__1::__hash_node_base<std::__1::__hash_node<DriveStar *, void *> *>, std::__1::allocator<std::__1::__hash_node<DriveStar *, void *> > > {
	hash_node_base<std::__1::__hash_node<DriveStar *, void *> *> __first_;
} compressed_pair<std::__1::__hash_node_base<std::__1::__hash_node<DriveStar *, void *> *>, std::__1::allocator<std::__1::__hash_node<DriveStar *, void *> > >;

typedef struct _bucket_list_deallocator<std::__1::allocator<std::__1::__hash_node<DriveStar *, void *> *> > {
	compressed_pair<unsigned long, std::__1::allocator<std::__1::__hash_node<DriveStar *, void *> *> > __data_;
} bucket_list_deallocator<std::__1::allocator<std::__1::__hash_node<DriveStar *, void *> *> >;

typedef struct _compressed_pair<std::__1::__hash_node<DriveStar *, void *> **, std::__1::__bucket_list_deallocator<std::__1::allocator<std::__1::__hash_node<DriveStar *, void *> *> > > {
	__hash_node<DriveStar *, void *> __first_;
	bucket_list_deallocator<std::__1::allocator<std::__1::__hash_node<DriveStar *, void *> *> > __second_;
} compressed_pair<std::__1::__hash_node<DriveStar *, void *> **, std::__1::__bucket_list_deallocator<std::__1::allocator<std::__1::__hash_node<DriveStar *, void *> *> > >;

typedef struct unique_ptr<std::__1::__hash_node<DriveStar *, void *> *[], std::__1::__bucket_list_deallocator<std::__1::allocator<std::__1::__hash_node<DriveStar *, void *> *> > > {
	compressed_pair<std::__1::__hash_node<DriveStar *, void *> **, std::__1::__bucket_list_deallocator<std::__1::allocator<std::__1::__hash_node<DriveStar *, void *> *> > > __ptr_;
} unique_ptr<std::__1::__hash_node<DriveStar *, void *> *[], std::__1::__bucket_list_deallocator<std::__1::allocator<std::__1::__hash_node<DriveStar *, void *> *> > >;

typedef struct _hash_table<DriveStar *, VoidHashFunctor, std::__1::equal_to<DriveStar *>, std::__1::allocator<DriveStar *> > {
	unique_ptr<std::__1::__hash_node<DriveStar *, void *> *[], std::__1::__bucket_list_deallocator<std::__1::allocator<std::__1::__hash_node<DriveStar *, void *> *> > > __bucket_list_;
	compressed_pair<std::__1::__hash_node_base<std::__1::__hash_node<DriveStar *, void *> *>, std::__1::allocator<std::__1::__hash_node<DriveStar *, void *> > > __p1_;
	compressed_pair<unsigned long, VoidHashFunctor> __p2_;
	compressed_pair<float, std::__1::equal_to<DriveStar *> > __p3_;
} hash_table<DriveStar *, VoidHashFunctor, std::__1::equal_to<DriveStar *>, std::__1::allocator<DriveStar *> >;

typedef struct S8CXXHashSet<DriveStar *> {
	/*function pointer*/void* _vptr$S8CXXHashSet;
	hash_table<DriveStar *, VoidHashFunctor, std::__1::equal_to<DriveStar *>, std::__1::allocator<DriveStar *> > __table_;
} S8CXXHashSet<DriveStar *>;

typedef struct _compressed_pair<float *, std::__1::allocator<float> > {
	float __first_;
} compressed_pair<float *, std::__1::allocator<float> >;

typedef struct S8CXXArrayList<float> {
	/*function pointer*/void* _vptr$S8CXXArrayList;
	float __begin_;
	float __end_;
	compressed_pair<float *, std::__1::allocator<float> > __end_cap_;
} S8CXXArrayList<float>;

typedef struct _compressed_pair<SRDSContainer *, std::__1::allocator<SRDSContainer> > {
	/*function pointer*/void* __first_;
} compressed_pair<SRDSContainer *, std::__1::allocator<SRDSContainer> >;

typedef struct S8CXXArrayList<SRDSContainer> {
	/*function pointer*/void* _vptr$S8CXXArrayList;
	/*function pointer*/void* __begin_;
	/*function pointer*/void* __end_;
	compressed_pair<SRDSContainer *, std::__1::allocator<SRDSContainer> > __end_cap_;
} S8CXXArrayList<SRDSContainer>;

typedef struct _compressed_pair<unsigned long, std::__1::allocator<std::__1::__hash_node<std::__1::__hash_value_type<void *, void *>, void *> *> > {
	unsigned long long __first_;
} compressed_pair<unsigned long, std::__1::allocator<std::__1::__hash_node<std::__1::__hash_value_type<void *, void *>, void *> *> >;

typedef struct _compressed_pair<unsigned long, std::__1::__unordered_map_hasher<void *, std::__1::__hash_value_type<void *, void *>, VoidHashFunctor, true> > {
	unsigned long long __first_;
} compressed_pair<unsigned long, std::__1::__unordered_map_hasher<void *, std::__1::__hash_value_type<void *, void *>, VoidHashFunctor, true> >;

typedef struct _compressed_pair<float, std::__1::__unordered_map_equal<void *, std::__1::__hash_value_type<void *, void *>, std::__1::equal_to<void *>, true> > {
	float __first_;
} compressed_pair<float, std::__1::__unordered_map_equal<void *, std::__1::__hash_value_type<void *, void *>, std::__1::equal_to<void *>, true> >;

typedef struct _hash_node_base<std::__1::__hash_node<std::__1::__hash_value_type<void *, void *>, void *> *> {
	__hash_node<std::__1::__hash_value_type<void *, void *>, void *> __next_;
} hash_node_base<std::__1::__hash_node<std::__1::__hash_value_type<void *, void *>, void *> *>;

typedef struct _compressed_pair<std::__1::__hash_node_base<std::__1::__hash_node<std::__1::__hash_value_type<void *, void *>, void *> *>, std::__1::allocator<std::__1::__hash_node<std::__1::__hash_value_type<void *, void *>, void *> > > {
	hash_node_base<std::__1::__hash_node<std::__1::__hash_value_type<void *, void *>, void *> *> __first_;
} compressed_pair<std::__1::__hash_node_base<std::__1::__hash_node<std::__1::__hash_value_type<void *, void *>, void *> *>, std::__1::allocator<std::__1::__hash_node<std::__1::__hash_value_type<void *, void *>, void *> > >;

typedef struct _bucket_list_deallocator<std::__1::allocator<std::__1::__hash_node<std::__1::__hash_value_type<void *, void *>, void *> *> > {
	compressed_pair<unsigned long, std::__1::allocator<std::__1::__hash_node<std::__1::__hash_value_type<void *, void *>, void *> *> > __data_;
} bucket_list_deallocator<std::__1::allocator<std::__1::__hash_node<std::__1::__hash_value_type<void *, void *>, void *> *> >;

typedef struct _compressed_pair<std::__1::__hash_node<std::__1::__hash_value_type<void *, void *>, void *> **, std::__1::__bucket_list_deallocator<std::__1::allocator<std::__1::__hash_node<std::__1::__hash_value_type<void *, void *>, void *> *> > > {
	__hash_node<std::__1::__hash_value_type<void *, void *>, void *> __first_;
	bucket_list_deallocator<std::__1::allocator<std::__1::__hash_node<std::__1::__hash_value_type<void *, void *>, void *> *> > __second_;
} compressed_pair<std::__1::__hash_node<std::__1::__hash_value_type<void *, void *>, void *> **, std::__1::__bucket_list_deallocator<std::__1::allocator<std::__1::__hash_node<std::__1::__hash_value_type<void *, void *>, void *> *> > >;

typedef struct unique_ptr<std::__1::__hash_node<std::__1::__hash_value_type<void *, void *>, void *> *[], std::__1::__bucket_list_deallocator<std::__1::allocator<std::__1::__hash_node<std::__1::__hash_value_type<void *, void *>, void *> *> > > {
	compressed_pair<std::__1::__hash_node<std::__1::__hash_value_type<void *, void *>, void *> **, std::__1::__bucket_list_deallocator<std::__1::allocator<std::__1::__hash_node<std::__1::__hash_value_type<void *, void *>, void *> *> > > __ptr_;
} unique_ptr<std::__1::__hash_node<std::__1::__hash_value_type<void *, void *>, void *> *[], std::__1::__bucket_list_deallocator<std::__1::allocator<std::__1::__hash_node<std::__1::__hash_value_type<void *, void *>, void *> *> > >;

typedef struct _hash_table<std::__1::__hash_value_type<void *, void *>, std::__1::__unordered_map_hasher<void *, std::__1::__hash_value_type<void *, void *>, VoidHashFunctor, true>, std::__1::__unordered_map_equal<void *, std::__1::__hash_value_type<void *, void *>, std::__1::equal_to<void *>, true>, std::__1::allocator<std::__1::__hash_value_type<void *, void *> > > {
	unique_ptr<std::__1::__hash_node<std::__1::__hash_value_type<void *, void *>, void *> *[], std::__1::__bucket_list_deallocator<std::__1::allocator<std::__1::__hash_node<std::__1::__hash_value_type<void *, void *>, void *> *> > > __bucket_list_;
	compressed_pair<std::__1::__hash_node_base<std::__1::__hash_node<std::__1::__hash_value_type<void *, void *>, void *> *>, std::__1::allocator<std::__1::__hash_node<std::__1::__hash_value_type<void *, void *>, void *> > > __p1_;
	compressed_pair<unsigned long, std::__1::__unordered_map_hasher<void *, std::__1::__hash_value_type<void *, void *>, VoidHashFunctor, true> > __p2_;
	compressed_pair<float, std::__1::__unordered_map_equal<void *, std::__1::__hash_value_type<void *, void *>, std::__1::equal_to<void *>, true> > __p3_;
} hash_table<std::__1::__hash_value_type<void *, void *>, std::__1::__unordered_map_hasher<void *, std::__1::__hash_value_type<void *, void *>, VoidHashFunctor, true>, std::__1::__unordered_map_equal<void *, std::__1::__hash_value_type<void *, void *>, std::__1::equal_to<void *>, true>, std::__1::allocator<std::__1::__hash_value_type<void *, void *> > >;

typedef struct S8CXXHashMap<void *, void *, std::__1::hash<void *> > {
	/*function pointer*/void* _vptr$S8CXXHashMap;
	hash_table<std::__1::__hash_value_type<void *, void *>, std::__1::__unordered_map_hasher<void *, std::__1::__hash_value_type<void *, void *>, VoidHashFunctor, true>, std::__1::__unordered_map_equal<void *, std::__1::__hash_value_type<void *, void *>, std::__1::equal_to<void *>, true>, std::__1::allocator<std::__1::__hash_value_type<void *, void *> > > __table_;
} S8CXXHashMap<void *, void *, std::__1::hash<void *> >;

typedef struct _compressed_pair<unsigned long, std::__1::allocator<std::__1::__hash_node<std::__1::__hash_value_type<void *, double>, void *> *> > {
	unsigned long long __first_;
} compressed_pair<unsigned long, std::__1::allocator<std::__1::__hash_node<std::__1::__hash_value_type<void *, double>, void *> *> >;

typedef struct _compressed_pair<unsigned long, std::__1::__unordered_map_hasher<void *, std::__1::__hash_value_type<void *, double>, VoidHashFunctor, true> > {
	unsigned long long __first_;
} compressed_pair<unsigned long, std::__1::__unordered_map_hasher<void *, std::__1::__hash_value_type<void *, double>, VoidHashFunctor, true> >;

typedef struct _compressed_pair<float, std::__1::__unordered_map_equal<void *, std::__1::__hash_value_type<void *, double>, std::__1::equal_to<void *>, true> > {
	float __first_;
} compressed_pair<float, std::__1::__unordered_map_equal<void *, std::__1::__hash_value_type<void *, double>, std::__1::equal_to<void *>, true> >;

typedef struct _hash_node_base<std::__1::__hash_node<std::__1::__hash_value_type<void *, double>, void *> *> {
	__hash_node<std::__1::__hash_value_type<void *, double>, void *> __next_;
} hash_node_base<std::__1::__hash_node<std::__1::__hash_value_type<void *, double>, void *> *>;

typedef struct _compressed_pair<std::__1::__hash_node_base<std::__1::__hash_node<std::__1::__hash_value_type<void *, double>, void *> *>, std::__1::allocator<std::__1::__hash_node<std::__1::__hash_value_type<void *, double>, void *> > > {
	hash_node_base<std::__1::__hash_node<std::__1::__hash_value_type<void *, double>, void *> *> __first_;
} compressed_pair<std::__1::__hash_node_base<std::__1::__hash_node<std::__1::__hash_value_type<void *, double>, void *> *>, std::__1::allocator<std::__1::__hash_node<std::__1::__hash_value_type<void *, double>, void *> > >;

typedef struct _bucket_list_deallocator<std::__1::allocator<std::__1::__hash_node<std::__1::__hash_value_type<void *, double>, void *> *> > {
	compressed_pair<unsigned long, std::__1::allocator<std::__1::__hash_node<std::__1::__hash_value_type<void *, double>, void *> *> > __data_;
} bucket_list_deallocator<std::__1::allocator<std::__1::__hash_node<std::__1::__hash_value_type<void *, double>, void *> *> >;

typedef struct _compressed_pair<std::__1::__hash_node<std::__1::__hash_value_type<void *, double>, void *> **, std::__1::__bucket_list_deallocator<std::__1::allocator<std::__1::__hash_node<std::__1::__hash_value_type<void *, double>, void *> *> > > {
	__hash_node<std::__1::__hash_value_type<void *, double>, void *> __first_;
	bucket_list_deallocator<std::__1::allocator<std::__1::__hash_node<std::__1::__hash_value_type<void *, double>, void *> *> > __second_;
} compressed_pair<std::__1::__hash_node<std::__1::__hash_value_type<void *, double>, void *> **, std::__1::__bucket_list_deallocator<std::__1::allocator<std::__1::__hash_node<std::__1::__hash_value_type<void *, double>, void *> *> > >;

typedef struct unique_ptr<std::__1::__hash_node<std::__1::__hash_value_type<void *, double>, void *> *[], std::__1::__bucket_list_deallocator<std::__1::allocator<std::__1::__hash_node<std::__1::__hash_value_type<void *, double>, void *> *> > > {
	compressed_pair<std::__1::__hash_node<std::__1::__hash_value_type<void *, double>, void *> **, std::__1::__bucket_list_deallocator<std::__1::allocator<std::__1::__hash_node<std::__1::__hash_value_type<void *, double>, void *> *> > > __ptr_;
} unique_ptr<std::__1::__hash_node<std::__1::__hash_value_type<void *, double>, void *> *[], std::__1::__bucket_list_deallocator<std::__1::allocator<std::__1::__hash_node<std::__1::__hash_value_type<void *, double>, void *> *> > >;

typedef struct _hash_table<std::__1::__hash_value_type<void *, double>, std::__1::__unordered_map_hasher<void *, std::__1::__hash_value_type<void *, double>, VoidHashFunctor, true>, std::__1::__unordered_map_equal<void *, std::__1::__hash_value_type<void *, double>, std::__1::equal_to<void *>, true>, std::__1::allocator<std::__1::__hash_value_type<void *, double> > > {
	unique_ptr<std::__1::__hash_node<std::__1::__hash_value_type<void *, double>, void *> *[], std::__1::__bucket_list_deallocator<std::__1::allocator<std::__1::__hash_node<std::__1::__hash_value_type<void *, double>, void *> *> > > __bucket_list_;
	compressed_pair<std::__1::__hash_node_base<std::__1::__hash_node<std::__1::__hash_value_type<void *, double>, void *> *>, std::__1::allocator<std::__1::__hash_node<std::__1::__hash_value_type<void *, double>, void *> > > __p1_;
	compressed_pair<unsigned long, std::__1::__unordered_map_hasher<void *, std::__1::__hash_value_type<void *, double>, VoidHashFunctor, true> > __p2_;
	compressed_pair<float, std::__1::__unordered_map_equal<void *, std::__1::__hash_value_type<void *, double>, std::__1::equal_to<void *>, true> > __p3_;
} hash_table<std::__1::__hash_value_type<void *, double>, std::__1::__unordered_map_hasher<void *, std::__1::__hash_value_type<void *, double>, VoidHashFunctor, true>, std::__1::__unordered_map_equal<void *, std::__1::__hash_value_type<void *, double>, std::__1::equal_to<void *>, true>, std::__1::allocator<std::__1::__hash_value_type<void *, double> > >;

typedef struct S8CXXHashMap<void *, double, std::__1::hash<void *> > {
	/*function pointer*/void* _vptr$S8CXXHashMap;
	hash_table<std::__1::__hash_value_type<void *, double>, std::__1::__unordered_map_hasher<void *, std::__1::__hash_value_type<void *, double>, VoidHashFunctor, true>, std::__1::__unordered_map_equal<void *, std::__1::__hash_value_type<void *, double>, std::__1::equal_to<void *>, true>, std::__1::allocator<std::__1::__hash_value_type<void *, double> > > __table_;
} S8CXXHashMap<void *, double, std::__1::hash<void *> >;

typedef struct {
	double field1;
	id field2;
} SCD_Struct_Se199;

typedef struct {
	int field1;
	char field2[32];
	char field3[32];
	char field4[32];
	int field5;
} SCD_Struct_Al200;

typedef struct {
	unsigned char version[4];
	int numberOfBlocks;
	int imageFormat;
	int componentFormat;
	int width;
	int height;
} SCD_Struct_Im201;

typedef struct _compressed_pair<unsigned long, std::__1::allocator<std::__1::__hash_node<std::__1::__hash_value_type<int, int>, void *> *> > {
	unsigned long long __first_;
} compressed_pair<unsigned long, std::__1::allocator<std::__1::__hash_node<std::__1::__hash_value_type<int, int>, void *> *> >;

typedef struct _compressed_pair<unsigned long, std::__1::__unordered_map_hasher<int, std::__1::__hash_value_type<int, int>, std::__1::hash<int>, true> > {
	unsigned long long __first_;
} compressed_pair<unsigned long, std::__1::__unordered_map_hasher<int, std::__1::__hash_value_type<int, int>, std::__1::hash<int>, true> >;

typedef struct _compressed_pair<float, std::__1::__unordered_map_equal<int, std::__1::__hash_value_type<int, int>, std::__1::equal_to<int>, true> > {
	float __first_;
} compressed_pair<float, std::__1::__unordered_map_equal<int, std::__1::__hash_value_type<int, int>, std::__1::equal_to<int>, true> >;

typedef struct _hash_node_base<std::__1::__hash_node<std::__1::__hash_value_type<int, int>, void *> *> {
	__hash_node<std::__1::__hash_value_type<int, int>, void *> __next_;
} hash_node_base<std::__1::__hash_node<std::__1::__hash_value_type<int, int>, void *> *>;

typedef struct _compressed_pair<std::__1::__hash_node_base<std::__1::__hash_node<std::__1::__hash_value_type<int, int>, void *> *>, std::__1::allocator<std::__1::__hash_node<std::__1::__hash_value_type<int, int>, void *> > > {
	hash_node_base<std::__1::__hash_node<std::__1::__hash_value_type<int, int>, void *> *> __first_;
} compressed_pair<std::__1::__hash_node_base<std::__1::__hash_node<std::__1::__hash_value_type<int, int>, void *> *>, std::__1::allocator<std::__1::__hash_node<std::__1::__hash_value_type<int, int>, void *> > >;

typedef struct _bucket_list_deallocator<std::__1::allocator<std::__1::__hash_node<std::__1::__hash_value_type<int, int>, void *> *> > {
	compressed_pair<unsigned long, std::__1::allocator<std::__1::__hash_node<std::__1::__hash_value_type<int, int>, void *> *> > __data_;
} bucket_list_deallocator<std::__1::allocator<std::__1::__hash_node<std::__1::__hash_value_type<int, int>, void *> *> >;

typedef struct _compressed_pair<std::__1::__hash_node<std::__1::__hash_value_type<int, int>, void *> **, std::__1::__bucket_list_deallocator<std::__1::allocator<std::__1::__hash_node<std::__1::__hash_value_type<int, int>, void *> *> > > {
	__hash_node<std::__1::__hash_value_type<int, int>, void *> __first_;
	bucket_list_deallocator<std::__1::allocator<std::__1::__hash_node<std::__1::__hash_value_type<int, int>, void *> *> > __second_;
} compressed_pair<std::__1::__hash_node<std::__1::__hash_value_type<int, int>, void *> **, std::__1::__bucket_list_deallocator<std::__1::allocator<std::__1::__hash_node<std::__1::__hash_value_type<int, int>, void *> *> > >;

typedef struct unique_ptr<std::__1::__hash_node<std::__1::__hash_value_type<int, int>, void *> *[], std::__1::__bucket_list_deallocator<std::__1::allocator<std::__1::__hash_node<std::__1::__hash_value_type<int, int>, void *> *> > > {
	compressed_pair<std::__1::__hash_node<std::__1::__hash_value_type<int, int>, void *> **, std::__1::__bucket_list_deallocator<std::__1::allocator<std::__1::__hash_node<std::__1::__hash_value_type<int, int>, void *> *> > > __ptr_;
} unique_ptr<std::__1::__hash_node<std::__1::__hash_value_type<int, int>, void *> *[], std::__1::__bucket_list_deallocator<std::__1::allocator<std::__1::__hash_node<std::__1::__hash_value_type<int, int>, void *> *> > >;

typedef struct _hash_table<std::__1::__hash_value_type<int, int>, std::__1::__unordered_map_hasher<int, std::__1::__hash_value_type<int, int>, std::__1::hash<int>, true>, std::__1::__unordered_map_equal<int, std::__1::__hash_value_type<int, int>, std::__1::equal_to<int>, true>, std::__1::allocator<std::__1::__hash_value_type<int, int> > > {
	unique_ptr<std::__1::__hash_node<std::__1::__hash_value_type<int, int>, void *> *[], std::__1::__bucket_list_deallocator<std::__1::allocator<std::__1::__hash_node<std::__1::__hash_value_type<int, int>, void *> *> > > __bucket_list_;
	compressed_pair<std::__1::__hash_node_base<std::__1::__hash_node<std::__1::__hash_value_type<int, int>, void *> *>, std::__1::allocator<std::__1::__hash_node<std::__1::__hash_value_type<int, int>, void *> > > __p1_;
	compressed_pair<unsigned long, std::__1::__unordered_map_hasher<int, std::__1::__hash_value_type<int, int>, std::__1::hash<int>, true> > __p2_;
	compressed_pair<float, std::__1::__unordered_map_equal<int, std::__1::__hash_value_type<int, int>, std::__1::equal_to<int>, true> > __p3_;
} hash_table<std::__1::__hash_value_type<int, int>, std::__1::__unordered_map_hasher<int, std::__1::__hash_value_type<int, int>, std::__1::hash<int>, true>, std::__1::__unordered_map_equal<int, std::__1::__hash_value_type<int, int>, std::__1::equal_to<int>, true>, std::__1::allocator<std::__1::__hash_value_type<int, int> > >;

typedef struct unordered_map<int, int, std::__1::hash<int>, std::__1::equal_to<int>, std::__1::allocator<std::__1::pair<const int, int> > > {
	hash_table<std::__1::__hash_value_type<int, int>, std::__1::__unordered_map_hasher<int, std::__1::__hash_value_type<int, int>, std::__1::hash<int>, true>, std::__1::__unordered_map_equal<int, std::__1::__hash_value_type<int, int>, std::__1::equal_to<int>, true>, std::__1::allocator<std::__1::__hash_value_type<int, int> > > __table_;
} unordered_map<int, int, std::__1::hash<int>, std::__1::equal_to<int>, std::__1::allocator<std::__1::pair<const int, int> > >;

typedef struct _compressed_pair<unsigned long, std::__1::__map_value_compare<std::__1::pair<int, int>, std::__1::__value_type<std::__1::pair<int, int>, id>, std::__1::less<std::__1::pair<int, int> >, true> > {
	unsigned long long __first_;
} compressed_pair<unsigned long, std::__1::__map_value_compare<std::__1::pair<int, int>, std::__1::__value_type<std::__1::pair<int, int>, id>, std::__1::less<std::__1::pair<int, int> >, true> >;

typedef struct _compressed_pair<std::__1::__tree_end_node<std::__1::__tree_node_base<void *> *>, std::__1::allocator<std::__1::__tree_node<std::__1::__value_type<std::__1::pair<int, int>, id>, void *> > > {
	tree_end_node<std::__1::__tree_node_base<void *> *> __first_;
} compressed_pair<std::__1::__tree_end_node<std::__1::__tree_node_base<void *> *>, std::__1::allocator<std::__1::__tree_node<std::__1::__value_type<std::__1::pair<int, int>, id>, void *> > >;

typedef struct _tree<std::__1::__value_type<std::__1::pair<int, int>, id>, std::__1::__map_value_compare<std::__1::pair<int, int>, std::__1::__value_type<std::__1::pair<int, int>, id>, std::__1::less<std::__1::pair<int, int> >, true>, std::__1::allocator<std::__1::__value_type<std::__1::pair<int, int>, id> > > {
	__tree_node<std::__1::__value_type<std::__1::pair<int, int>, id>, void *> __begin_node_;
	compressed_pair<std::__1::__tree_end_node<std::__1::__tree_node_base<void *> *>, std::__1::allocator<std::__1::__tree_node<std::__1::__value_type<std::__1::pair<int, int>, id>, void *> > > __pair1_;
	compressed_pair<unsigned long, std::__1::__map_value_compare<std::__1::pair<int, int>, std::__1::__value_type<std::__1::pair<int, int>, id>, std::__1::less<std::__1::pair<int, int> >, true> > __pair3_;
} tree<std::__1::__value_type<std::__1::pair<int, int>, id>, std::__1::__map_value_compare<std::__1::pair<int, int>, std::__1::__value_type<std::__1::pair<int, int>, id>, std::__1::less<std::__1::pair<int, int> >, true>, std::__1::allocator<std::__1::__value_type<std::__1::pair<int, int>, id> > >;

typedef struct map<std::__1::pair<int, int>, id, std::__1::less<std::__1::pair<int, int> >, std::__1::allocator<std::__1::pair<const std::__1::pair<int, int>, id> > > {
	tree<std::__1::__value_type<std::__1::pair<int, int>, id>, std::__1::__map_value_compare<std::__1::pair<int, int>, std::__1::__value_type<std::__1::pair<int, int>, id>, std::__1::less<std::__1::pair<int, int> >, true>, std::__1::allocator<std::__1::__value_type<std::__1::pair<int, int>, id> > > __tree_;
} map<std::__1::pair<int, int>, id, std::__1::less<std::__1::pair<int, int> >, std::__1::allocator<std::__1::pair<const std::__1::pair<int, int>, id> > >;

typedef struct _compressed_pair<unsigned long, std::__1::allocator<std::__1::__hash_node<std::__1::__hash_value_type<long, ItemBase *>, void *> *> > {
	unsigned long long __first_;
} compressed_pair<unsigned long, std::__1::allocator<std::__1::__hash_node<std::__1::__hash_value_type<long, ItemBase *>, void *> *> >;

typedef struct _compressed_pair<unsigned long, std::__1::__unordered_map_hasher<long, std::__1::__hash_value_type<long, ItemBase *>, std::__1::hash<long>, true> > {
	unsigned long long __first_;
} compressed_pair<unsigned long, std::__1::__unordered_map_hasher<long, std::__1::__hash_value_type<long, ItemBase *>, std::__1::hash<long>, true> >;

typedef struct _compressed_pair<float, std::__1::__unordered_map_equal<long, std::__1::__hash_value_type<long, ItemBase *>, std::__1::equal_to<long>, true> > {
	float __first_;
} compressed_pair<float, std::__1::__unordered_map_equal<long, std::__1::__hash_value_type<long, ItemBase *>, std::__1::equal_to<long>, true> >;

typedef struct _hash_node_base<std::__1::__hash_node<std::__1::__hash_value_type<long, ItemBase *>, void *> *> {
	__hash_node<std::__1::__hash_value_type<long, ItemBase *>, void *> __next_;
} hash_node_base<std::__1::__hash_node<std::__1::__hash_value_type<long, ItemBase *>, void *> *>;

typedef struct _compressed_pair<std::__1::__hash_node_base<std::__1::__hash_node<std::__1::__hash_value_type<long, ItemBase *>, void *> *>, std::__1::allocator<std::__1::__hash_node<std::__1::__hash_value_type<long, ItemBase *>, void *> > > {
	hash_node_base<std::__1::__hash_node<std::__1::__hash_value_type<long, ItemBase *>, void *> *> __first_;
} compressed_pair<std::__1::__hash_node_base<std::__1::__hash_node<std::__1::__hash_value_type<long, ItemBase *>, void *> *>, std::__1::allocator<std::__1::__hash_node<std::__1::__hash_value_type<long, ItemBase *>, void *> > >;

typedef struct _bucket_list_deallocator<std::__1::allocator<std::__1::__hash_node<std::__1::__hash_value_type<long, ItemBase *>, void *> *> > {
	compressed_pair<unsigned long, std::__1::allocator<std::__1::__hash_node<std::__1::__hash_value_type<long, ItemBase *>, void *> *> > __data_;
} bucket_list_deallocator<std::__1::allocator<std::__1::__hash_node<std::__1::__hash_value_type<long, ItemBase *>, void *> *> >;

typedef struct _compressed_pair<std::__1::__hash_node<std::__1::__hash_value_type<long, ItemBase *>, void *> **, std::__1::__bucket_list_deallocator<std::__1::allocator<std::__1::__hash_node<std::__1::__hash_value_type<long, ItemBase *>, void *> *> > > {
	__hash_node<std::__1::__hash_value_type<long, ItemBase *>, void *> __first_;
	bucket_list_deallocator<std::__1::allocator<std::__1::__hash_node<std::__1::__hash_value_type<long, ItemBase *>, void *> *> > __second_;
} compressed_pair<std::__1::__hash_node<std::__1::__hash_value_type<long, ItemBase *>, void *> **, std::__1::__bucket_list_deallocator<std::__1::allocator<std::__1::__hash_node<std::__1::__hash_value_type<long, ItemBase *>, void *> *> > >;

typedef struct unique_ptr<std::__1::__hash_node<std::__1::__hash_value_type<long, ItemBase *>, void *> *[], std::__1::__bucket_list_deallocator<std::__1::allocator<std::__1::__hash_node<std::__1::__hash_value_type<long, ItemBase *>, void *> *> > > {
	compressed_pair<std::__1::__hash_node<std::__1::__hash_value_type<long, ItemBase *>, void *> **, std::__1::__bucket_list_deallocator<std::__1::allocator<std::__1::__hash_node<std::__1::__hash_value_type<long, ItemBase *>, void *> *> > > __ptr_;
} unique_ptr<std::__1::__hash_node<std::__1::__hash_value_type<long, ItemBase *>, void *> *[], std::__1::__bucket_list_deallocator<std::__1::allocator<std::__1::__hash_node<std::__1::__hash_value_type<long, ItemBase *>, void *> *> > >;

typedef struct _hash_table<std::__1::__hash_value_type<long, ItemBase *>, std::__1::__unordered_map_hasher<long, std::__1::__hash_value_type<long, ItemBase *>, std::__1::hash<long>, true>, std::__1::__unordered_map_equal<long, std::__1::__hash_value_type<long, ItemBase *>, std::__1::equal_to<long>, true>, std::__1::allocator<std::__1::__hash_value_type<long, ItemBase *> > > {
	unique_ptr<std::__1::__hash_node<std::__1::__hash_value_type<long, ItemBase *>, void *> *[], std::__1::__bucket_list_deallocator<std::__1::allocator<std::__1::__hash_node<std::__1::__hash_value_type<long, ItemBase *>, void *> *> > > __bucket_list_;
	compressed_pair<std::__1::__hash_node_base<std::__1::__hash_node<std::__1::__hash_value_type<long, ItemBase *>, void *> *>, std::__1::allocator<std::__1::__hash_node<std::__1::__hash_value_type<long, ItemBase *>, void *> > > __p1_;
	compressed_pair<unsigned long, std::__1::__unordered_map_hasher<long, std::__1::__hash_value_type<long, ItemBase *>, std::__1::hash<long>, true> > __p2_;
	compressed_pair<float, std::__1::__unordered_map_equal<long, std::__1::__hash_value_type<long, ItemBase *>, std::__1::equal_to<long>, true> > __p3_;
} hash_table<std::__1::__hash_value_type<long, ItemBase *>, std::__1::__unordered_map_hasher<long, std::__1::__hash_value_type<long, ItemBase *>, std::__1::hash<long>, true>, std::__1::__unordered_map_equal<long, std::__1::__hash_value_type<long, ItemBase *>, std::__1::equal_to<long>, true>, std::__1::allocator<std::__1::__hash_value_type<long, ItemBase *> > >;

typedef struct unordered_map<long, ItemBase *, std::__1::hash<long>, std::__1::equal_to<long>, std::__1::allocator<std::__1::pair<const long, ItemBase *> > > {
	hash_table<std::__1::__hash_value_type<long, ItemBase *>, std::__1::__unordered_map_hasher<long, std::__1::__hash_value_type<long, ItemBase *>, std::__1::hash<long>, true>, std::__1::__unordered_map_equal<long, std::__1::__hash_value_type<long, ItemBase *>, std::__1::equal_to<long>, true>, std::__1::allocator<std::__1::__hash_value_type<long, ItemBase *> > > __table_;
} unordered_map<long, ItemBase *, std::__1::hash<long>, std::__1::equal_to<long>, std::__1::allocator<std::__1::pair<const long, ItemBase *> > >;

typedef struct _compressed_pair<int *, std::__1::allocator<int> > {
	int __first_;
} compressed_pair<int *, std::__1::allocator<int> >;

typedef struct vector<int, std::__1::allocator<int> > {
	int __begin_;
	int __end_;
	compressed_pair<int *, std::__1::allocator<int> > __end_cap_;
} vector<int, std::__1::allocator<int> >;

typedef struct _compressed_pair<PoolingObject **, std::__1::allocator<PoolingObject *> > {
	id __first_;
} compressed_pair<PoolingObject **, std::__1::allocator<PoolingObject *> >;

typedef struct S8CXXArrayList<PoolingObject *> {
	/*function pointer*/void* _vptr$S8CXXArrayList;
	id __begin_;
	id __end_;
	compressed_pair<PoolingObject **, std::__1::allocator<PoolingObject *> > __end_cap_;
} S8CXXArrayList<PoolingObject *>;

typedef struct _compressed_pair<ESSystem **, std::__1::allocator<ESSystem *> > {
	id __first_;
} compressed_pair<ESSystem **, std::__1::allocator<ESSystem *> >;

typedef struct vector<ESSystem *, std::__1::allocator<ESSystem *> > {
	id __begin_;
	id __end_;
	compressed_pair<ESSystem **, std::__1::allocator<ESSystem *> > __end_cap_;
} vector<ESSystem *, std::__1::allocator<ESSystem *> >;

typedef struct sqlite3* sqlite3Ref;

typedef struct sqlite3_stmt* sqlite3_stmtRef;

typedef struct CRColorF {
	float r;
	float g;
	float b;
	float a;
} CRColorF;

typedef struct __SecRandom* SecRandomRef;

typedef struct __SCNetworkReachability* SCNetworkReachabilityRef;

typedef struct dispatch_semaphore_s* dispatch_semaphore_sRef;

typedef struct dispatch_source_s* dispatch_source_sRef;

typedef struct _darwin_sigaltstack {
	void ss_sp;
	unsigned long long ss_size;
	int ss_flags;
} darwin_sigaltstack;

typedef struct __CFUUID* CFUUIDRef;

typedef struct timeval {
	long long tv_sec;
	int tv_usec;
} timeval;

typedef struct PLCrashHostInfoVersion {
	unsigned long long major;
	unsigned long long minor;
	unsigned long long revision;
} PLCrashHostInfoVersion;

typedef struct {
	unsigned long long field1;
	id field2;
	unsigned long long field3;
	unsigned long long field4[5];
} SCD_Struct_PL243;

typedef struct plcrash_mach_exception_port_set {
	unsigned count;
	unsigned masks[13];
	unsigned ports[13];
	int behaviors[13];
	int flavors[13];
} plcrash_mach_exception_port_set;

