/*
* This header is generated by classdump-dyld 1.0
* on Saturday, December 24, 2016 at 12:46:35 AM Greenwich Mean Time
* Operating System: Version 10.1.1 (Build 14B150)
* Image Source: /var/containers/Bundle/Application/D20B482D-7A4B-420E-BEFA-D4B2B5C94752/Telegram.app/Telegram
* classdump-dyld is licensed under GPLv3, Copyright Â© 2013-2016 by Elias Limneos.
*/

#import <Telegram/MTTransport.h>
#import <Telegram/MTTcpConnectionDelegate.h>
#import <Telegram/MTTcpConnectionBehaviourDelegate.h>

@class MTTcpTransportContext, MTContext, NSString;

@interface MTTcpTransport : MTTransport <MTTcpConnectionDelegate, MTTcpConnectionBehaviourDelegate> {

	MTTcpTransportContext* _transportContext;
	MTContext* _context;
	long long _datacenterId;

}

@property (readonly) unsigned long long hash; 
@property (readonly) Class superclass; 
@property (copy,readonly) NSString * description; 
@property (copy,readonly) NSString * debugDescription; 
+(id)tcpTransportQueue;
-(void)mtProtoDidChangeSession:(id)arg1 ;
-(void)mtProtoServerDidChangeSession:(id)arg1 firstValidMessageId:(long long)arg2 otherValidMessageIds:(id)arg3 ;
-(void)mtProto:(id)arg1 receivedMessage:(id)arg2 ;
-(void)mtProto:(id)arg1 messageDeliveryFailed:(long long)arg2 ;
-(void)_networkAvailabilityChanged:(BOOL)arg1 ;
-(id)initWithDelegate:(id)arg1 context:(id)arg2 datacenterId:(long long)arg3 address:(id)arg4 ;
-(BOOL)needsParityCorrection;
-(void)setDelegateNeedsTransaction;
-(void)activeTransactionIds:(/*^block*/id)arg1 ;
-(void)_requestTransactionFromDelegate;
-(void)startConnectionWatchdogTimer;
-(void)startSleepWatchdogTimer;
-(void)stopConnectionWatchdogTimer;
-(void)stopSleepWatchdogTimer;
-(void)connectionWatchdogTimeout;
-(void)resendActualizationPing;
-(void)stopActualizationPingResendTimer;
-(void)restartSleepWatchdogTimer;
-(void)startActualizationPingResendTimer;
-(void)connectionIsValid:(id)arg1 ;
-(void)connectionIsInvalid;
-(void)tcpConnectionOpened:(id)arg1 ;
-(void)tcpConnectionClosed:(id)arg1 ;
-(void)tcpConnectionReceivedData:(id)arg1 data:(id)arg2 ;
-(void)tcpConnectionReceivedQuickAck:(id)arg1 quickAck:(int)arg2 ;
-(void)tcpConnectionDecodePacketProgressToken:(id)arg1 data:(id)arg2 token:(long long)arg3 completion:(/*^block*/id)arg4 ;
-(void)tcpConnectionProgressUpdated:(id)arg1 packetProgressToken:(id)arg2 packetLength:(unsigned long long)arg3 progress:(float)arg4 ;
-(void)tcpConnectionBehaviourRequestsReconnection:(id)arg1 ;
-(void)dealloc;
-(void)reset;
-(void)stop;
-(void)updateConnectionState;
-(void)startIfNeeded;
@end

