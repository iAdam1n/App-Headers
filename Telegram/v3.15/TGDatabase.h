/*
* This header is generated by classdump-dyld 1.0
* on Saturday, December 24, 2016 at 12:46:32 AM Greenwich Mean Time
* Operating System: Version 10.1.1 (Build 14B150)
* Image Source: /var/containers/Bundle/Application/D20B482D-7A4B-420E-BEFA-D4B2B5C94752/Telegram.app/Telegram
* classdump-dyld is licensed under GPLv3, Copyright Â© 2013-2016 by Elias Limneos.
*/


@protocol SDisposable;
#import <Telegram/Telegram-Structs.h>
@class ATQueue, NSString, SBag, SMulticastSignalManager, SPipe, TGChannelList, NSMutableDictionary, SVariable, TGRemoteRecentPeerCategories, TGSpotlightIndexData, FMDatabase, TGNotificationPrivacyAccountSetting, TGTimer;

@interface TGDatabase : NSObject {

	ATQueue* _fileDeletionQueue;
	ATQueue* _backgroundFileIndexingQueue;
	opaque_pthread_mutex_t _TG_SYNCHRONIZED__userByUid;
	opaque_pthread_mutex_t _TG_SYNCHRONIZED__contactsByPhoneId;
	opaque_pthread_mutex_t _TG_SYNCHRONIZED__phonebookContacts;
	opaque_pthread_mutex_t _TG_SYNCHRONIZED__mutedPeers;
	opaque_pthread_mutex_t _TG_SYNCHRONIZED__nextLocalMid;
	opaque_pthread_mutex_t _TG_SYNCHRONIZED__userLinks;
	opaque_pthread_mutex_t _TG_SYNCHRONIZED__cachedUnreadCount;
	opaque_pthread_mutex_t _TG_SYNCHRONIZED__unreadCountByConversation;
	opaque_pthread_mutex_t _TG_SYNCHRONIZED__minAutosaveMessageIdForConversations;
	opaque_pthread_mutex_t _TG_SYNCHRONIZED__containsConversation;
	opaque_pthread_mutex_t _TG_SYNCHRONIZED__remoteContactUids;
	opaque_pthread_mutex_t _TG_SYNCHRONIZED__peerCustomSettings;
	opaque_pthread_mutex_t _TG_SYNCHRONIZED__encryptedConversationIds;
	opaque_pthread_mutex_t _TG_SYNCHRONIZED__conversationEncryptionKeys;
	opaque_pthread_mutex_t _TG_SYNCHRONIZED__encryptedParticipantIds;
	opaque_pthread_mutex_t _TG_SYNCHRONIZED__encryptedConversationIsCreator;
	opaque_pthread_mutex_t _TG_SYNCHRONIZED__encryptedConversationAccessHash;
	opaque_pthread_mutex_t _TG_SYNCHRONIZED__messageLifetimeByPeerId;
	opaque_pthread_mutex_t _TG_SYNCHRONIZED__cachedConversations;
	opaque_pthread_mutex_t _TG_SYNCHRONIZED__conversationInputStates;
	unordered_map<int, TGUser *, std::tr1::hash<int>, std::equal_to<int>, std::allocator<std::pair<const int, TGUser *> >, false>* _userByUid;
	map<int, TGContactBinding *, std::less<int>, std::allocator<std::pair<const int, TGContactBinding *> > >* _contactsByPhoneId;
	map<int, int, std::less<int>, std::allocator<std::pair<const int, int> > >* _phoneIdByUid;
	set<int, std::less<int>, std::allocator<int> >* _remoteContactUids;
	map<int, TGPhonebookContact *, std::less<int>, std::allocator<std::pair<const int, TGPhonebookContact *> > >* _phonebookContacts;
	map<int, int, std::less<int>, std::allocator<std::pair<const int, int> > >* _phoneIdToNativeId;
	map<long long, int, std::less<long long>, std::allocator<std::pair<const long long, int> > >* _mutedPeers;
	map<long long, int, std::less<long long>, std::allocator<std::pair<const long long, int> > >* _minAutosaveMessageIdForConversations;
	map<int, std::pair<int, int>, std::less<int>, std::allocator<std::pair<const int, std::pair<int, int> > > >* _userLinks;
	map<long long, int, std::less<long long>, std::allocator<std::pair<const long long, int> > >* _unreadCountByConversation;
	set<long long, std::less<long long>, std::allocator<long long> >* _containsConversation;
	int _cachedUnreadCount;
	map<long long, TGConversation *, std::less<long long>, std::allocator<std::pair<const long long, TGConversation *> > >* _cachedConversations;
	map<long long, TGPeerCustomSettings, std::less<long long>, std::allocator<std::pair<const long long, TGPeerCustomSettings> > >* _peerCustomSettings;
	map<long long, long long, std::less<long long>, std::allocator<std::pair<const long long, long long> > >* _encryptedConversationIds;
	map<long long, long long, std::less<long long>, std::allocator<std::pair<const long long, long long> > >* _peerIdsForEncryptedConversationIds;
	map<long long, std::vector<TGEncryptionKeyData *, std::allocator<TGEncryptionKeyData *> >, std::less<long long>, std::allocator<std::pair<const long long, std::vector<TGEncryptionKeyData *, std::allocator<TGEncryptionKeyData *> > > > >* _conversationEncryptionKeys;
	map<long long, int, std::less<long long>, std::allocator<std::pair<const long long, int> > >* _encryptedParticipantIds;
	map<long long, bool, std::less<long long>, std::allocator<std::pair<const long long, bool> > >* _encryptedConversationIsCreator;
	map<long long, long long, std::less<long long>, std::allocator<std::pair<const long long, long long> > >* _encryptedConversationAccessHash;
	map<long long, int, std::less<long long>, std::allocator<std::pair<const long long, int> > >* _messageLifetimeByPeerId;
	map<long long, NSDictionary *, std::less<long long>, std::allocator<std::pair<const long long, NSDictionary *> > >* _conversationInputStates;
	map<long long, unsigned long, std::less<long long>, std::allocator<std::pair<const long long, unsigned long> > >* _peerLayers;
	opaque_pthread_mutex_t _TG_SYNCHRONIZED__peerLayers;
	map<long long, unsigned long, std::less<long long>, std::allocator<std::pair<const long long, unsigned long> > >* _lastReportedToPeerLayers;
	opaque_pthread_mutex_t _TG_SYNCHRONIZED__lastReportedToPeerLayers;
	NSString* _password;
	opaque_pthread_mutex_t _TG_SYNCHRONIZED__ptsWatchers;
	SBag* _ptsWatchers;
	SMulticastSignalManager* _multicastManager;
	SPipe* _channelListPipe;
	TGChannelList* _storedChannelList;
	NSMutableDictionary* _existingChannelPipes;
	NSMutableDictionary* _channelPtsPipes;
	SPipe* _queuedDeleteChannelMessages;
	SPipe* _queuedReadChannelMessages;
	SPipe* _queuedLeaveChannels;
	SPipe* _queuedDismissReportPeerSpam;
	NSMutableDictionary* _cachedChannelDataPipes;
	NSMutableDictionary* _userChannelDataVariables;
	NSMutableDictionary* _cachedPeerSettingsVariables;
	SVariable* _cachedRecentPeerCategoriesVariable;
	TGRemoteRecentPeerCategories* _cachedRecentPeerCategories;
	TGSpotlightIndexData* _spotlightIndexData;
	SPipe* _spotlightIndexPipe;
	id<SDisposable> _spotlightIndexDisposable;
	opaque_pthread_mutex_t _TG_SYNCHRONIZED__channelShouldNotifyMembersVariables;
	NSMutableDictionary* _channelShouldNotifyMembersVariables;
	SPipe* _invalidatedPeerReadStatesPipe;
	NSMutableDictionary* _peerMessageDrafts;
	NSMutableDictionary* _pinnedConversationDates;
	SPipe* _synchronizePeerMessageDraftsPeerIds;
	SPipe* _shouldSynchronizePinnedConversations;
	BOOL _contactListPreloaded;
	BOOL _deletionInProgress;
	int _schemaVersion;
	int _serviceLastCleanTimeKey;
	int _serviceLastMidKey;
	int _servicePtsKey;
	int _serviceContactListStateKey;
	int _serviceLatestSynchronizedMidKey;
	int _serviceLatestSynchronizedQtsKey;
	int _serviceEncryptedConversationCount;
	int _nextLocalMid;
	int _localUserId;
	int _userLinksVersion;
	/*^block*/id _messageCleanupBlock;
	/*^block*/id _cleanupEverythingBlock;
	double _timeDifferenceFromUTC;
	NSString* _databasePath;
	NSString* _indexDatabasePath;
	FMDatabase* _database;
	FMDatabase* _indexDatabase;
	FMDatabase* _filesDatabase;
	NSString* _serviceTableName;
	NSString* _usersTableName;
	NSString* _conversationListTableName;
	NSString* _channelListTableName;
	NSString* _channelCachedDataTableName;
	NSString* _userCachedDataTableName;
	NSString* _cachedPeerSettingsTableName;
	NSString* _channelPendingMessagesTableName;
	NSString* _channelMessagesTableName;
	NSString* _channelMessageTagsTableName;
	NSString* _channelMessagesRandomIdTableName;
	NSString* _channelMessageHolesTableName;
	NSString* _channelMessageUnimportantHolesTableName;
	NSString* _channelMessageUnimportantGroupsTableName;
	NSString* _channelDeleteMessagesTableName;
	NSString* _channelLeaveTableName;
	NSString* _channelReadHistoryTableName;
	NSString* _dismissReportPeerSpamTableName;
	NSString* _channelHistoryPtsTableName;
	NSString* _messagesTableName;
	NSString* _conversationMediaTableName;
	NSString* _contactListTableName;
	NSString* _actionQueueTableName;
	NSString* _peerPropertiesTableName;
	NSString* _peerProfilePhotosTableName;
	NSString* _outgoingMessagesTableName;
	NSString* _futureActionsTableName;
	NSString* _peerHistoryHolesTableName;
	NSString* _validateReadStateTableName;
	NSString* _peerMessageDraftsTable;
	NSString* _synchronizePeerMessageDraftsTable;
	NSString* _pinnedConversationsTable;
	NSString* _assetsTableName;
	NSString* _videosTableName;
	NSString* _storedFilesTableName;
	NSString* _localFilesTableName;
	NSString* _serverAssetsTableName;
	NSString* _blockedUsersTableName;
	NSString* _userLinksTableName;
	NSString* _temporaryMessageIdsTableName;
	NSString* _randomIdsTableName;
	NSString* _selfDestructTableName;
	NSString* _encryptedConversationIdsTableName;
	NSString* _messageIndexTableName;
	NSString* _secretMediaAttributesTableName;
	NSString* _mediaCacheInvalidationTableName;
	NSString* _fileDeletionTableName;
	NSString* _secretPeerOutgoingTableName;
	NSString* _secretPeerOutgoingResendTableName;
	NSString* _secretPeerIncomingTableName;
	NSString* _secretPeerIncomingEncryptedTableName;
	NSString* _sharedMediaCacheTableName;
	NSString* _sharedMediaIndexBuiltTableName;
	NSString* _sharedMediaIndexDownloadedTableName;
	NSString* _peerRatingTableName;
	NSString* _botInfoTableName;
	NSString* _webpagesTableName;
	NSString* _botCallbackCacheTableName;
	TGNotificationPrivacyAccountSetting* _privacySettings;
	TGTimer* _selfDestructTimer;
	TGTimer* _mediaCleanupTimer;
	TGTimer* _deletionTickTimer;
	TGTimer* _updateMuteTimer;
	TGTimer* _syncRemoteContactUidsTimer;
	SCD_Struct_TG72 _cachedDatabaseState;

}

@property (nonatomic,retain) NSString * databasePath;                                            //@synthesize databasePath=_databasePath - In the implementation block
@property (nonatomic,retain) NSString * indexDatabasePath;                                       //@synthesize indexDatabasePath=_indexDatabasePath - In the implementation block
@property (nonatomic,retain) FMDatabase * database;                                              //@synthesize database=_database - In the implementation block
@property (nonatomic,retain) FMDatabase * indexDatabase;                                         //@synthesize indexDatabase=_indexDatabase - In the implementation block
@property (nonatomic,retain) FMDatabase * filesDatabase;                                         //@synthesize filesDatabase=_filesDatabase - In the implementation block
@property (assign,nonatomic) SCD_Struct_TG72 cachedDatabaseState;                                //@synthesize cachedDatabaseState=_cachedDatabaseState - In the implementation block
@property (assign,nonatomic) int schemaVersion;                                                  //@synthesize schemaVersion=_schemaVersion - In the implementation block
@property (nonatomic,retain) NSString * serviceTableName;                                        //@synthesize serviceTableName=_serviceTableName - In the implementation block
@property (nonatomic,retain) NSString * usersTableName;                                          //@synthesize usersTableName=_usersTableName - In the implementation block
@property (nonatomic,retain) NSString * conversationListTableName;                               //@synthesize conversationListTableName=_conversationListTableName - In the implementation block
@property (nonatomic,retain) NSString * channelListTableName;                                    //@synthesize channelListTableName=_channelListTableName - In the implementation block
@property (nonatomic,retain) NSString * channelCachedDataTableName;                              //@synthesize channelCachedDataTableName=_channelCachedDataTableName - In the implementation block
@property (nonatomic,retain) NSString * userCachedDataTableName;                                 //@synthesize userCachedDataTableName=_userCachedDataTableName - In the implementation block
@property (nonatomic,retain) NSString * cachedPeerSettingsTableName;                             //@synthesize cachedPeerSettingsTableName=_cachedPeerSettingsTableName - In the implementation block
@property (nonatomic,retain) NSString * channelPendingMessagesTableName;                         //@synthesize channelPendingMessagesTableName=_channelPendingMessagesTableName - In the implementation block
@property (nonatomic,retain) NSString * channelMessagesTableName;                                //@synthesize channelMessagesTableName=_channelMessagesTableName - In the implementation block
@property (nonatomic,retain) NSString * channelMessageTagsTableName;                             //@synthesize channelMessageTagsTableName=_channelMessageTagsTableName - In the implementation block
@property (nonatomic,retain) NSString * channelMessagesRandomIdTableName;                        //@synthesize channelMessagesRandomIdTableName=_channelMessagesRandomIdTableName - In the implementation block
@property (nonatomic,retain) NSString * channelMessageHolesTableName;                            //@synthesize channelMessageHolesTableName=_channelMessageHolesTableName - In the implementation block
@property (nonatomic,retain) NSString * channelMessageUnimportantHolesTableName;                 //@synthesize channelMessageUnimportantHolesTableName=_channelMessageUnimportantHolesTableName - In the implementation block
@property (nonatomic,retain) NSString * channelMessageUnimportantGroupsTableName;                //@synthesize channelMessageUnimportantGroupsTableName=_channelMessageUnimportantGroupsTableName - In the implementation block
@property (nonatomic,retain) NSString * channelDeleteMessagesTableName;                          //@synthesize channelDeleteMessagesTableName=_channelDeleteMessagesTableName - In the implementation block
@property (nonatomic,retain) NSString * channelLeaveTableName;                                   //@synthesize channelLeaveTableName=_channelLeaveTableName - In the implementation block
@property (nonatomic,retain) NSString * channelReadHistoryTableName;                             //@synthesize channelReadHistoryTableName=_channelReadHistoryTableName - In the implementation block
@property (nonatomic,retain) NSString * dismissReportPeerSpamTableName;                          //@synthesize dismissReportPeerSpamTableName=_dismissReportPeerSpamTableName - In the implementation block
@property (nonatomic,retain) NSString * channelHistoryPtsTableName;                              //@synthesize channelHistoryPtsTableName=_channelHistoryPtsTableName - In the implementation block
@property (nonatomic,retain) NSString * messagesTableName;                                       //@synthesize messagesTableName=_messagesTableName - In the implementation block
@property (nonatomic,retain) NSString * conversationMediaTableName;                              //@synthesize conversationMediaTableName=_conversationMediaTableName - In the implementation block
@property (nonatomic,retain) NSString * contactListTableName;                                    //@synthesize contactListTableName=_contactListTableName - In the implementation block
@property (nonatomic,retain) NSString * actionQueueTableName;                                    //@synthesize actionQueueTableName=_actionQueueTableName - In the implementation block
@property (nonatomic,retain) NSString * peerPropertiesTableName;                                 //@synthesize peerPropertiesTableName=_peerPropertiesTableName - In the implementation block
@property (nonatomic,retain) NSString * peerProfilePhotosTableName;                              //@synthesize peerProfilePhotosTableName=_peerProfilePhotosTableName - In the implementation block
@property (nonatomic,retain) NSString * outgoingMessagesTableName;                               //@synthesize outgoingMessagesTableName=_outgoingMessagesTableName - In the implementation block
@property (nonatomic,retain) NSString * futureActionsTableName;                                  //@synthesize futureActionsTableName=_futureActionsTableName - In the implementation block
@property (nonatomic,retain) NSString * peerHistoryHolesTableName;                               //@synthesize peerHistoryHolesTableName=_peerHistoryHolesTableName - In the implementation block
@property (nonatomic,retain) NSString * validateReadStateTableName;                              //@synthesize validateReadStateTableName=_validateReadStateTableName - In the implementation block
@property (nonatomic,retain) NSString * peerMessageDraftsTable;                                  //@synthesize peerMessageDraftsTable=_peerMessageDraftsTable - In the implementation block
@property (nonatomic,retain) NSString * synchronizePeerMessageDraftsTable;                       //@synthesize synchronizePeerMessageDraftsTable=_synchronizePeerMessageDraftsTable - In the implementation block
@property (nonatomic,retain) NSString * pinnedConversationsTable;                                //@synthesize pinnedConversationsTable=_pinnedConversationsTable - In the implementation block
@property (nonatomic,retain) NSString * assetsTableName;                                         //@synthesize assetsTableName=_assetsTableName - In the implementation block
@property (nonatomic,retain) NSString * videosTableName;                                         //@synthesize videosTableName=_videosTableName - In the implementation block
@property (nonatomic,retain) NSString * storedFilesTableName;                                    //@synthesize storedFilesTableName=_storedFilesTableName - In the implementation block
@property (nonatomic,retain) NSString * localFilesTableName;                                     //@synthesize localFilesTableName=_localFilesTableName - In the implementation block
@property (nonatomic,retain) NSString * serverAssetsTableName;                                   //@synthesize serverAssetsTableName=_serverAssetsTableName - In the implementation block
@property (nonatomic,retain) NSString * blockedUsersTableName;                                   //@synthesize blockedUsersTableName=_blockedUsersTableName - In the implementation block
@property (nonatomic,retain) NSString * userLinksTableName;                                      //@synthesize userLinksTableName=_userLinksTableName - In the implementation block
@property (nonatomic,retain) NSString * temporaryMessageIdsTableName;                            //@synthesize temporaryMessageIdsTableName=_temporaryMessageIdsTableName - In the implementation block
@property (nonatomic,retain) NSString * randomIdsTableName;                                      //@synthesize randomIdsTableName=_randomIdsTableName - In the implementation block
@property (nonatomic,retain) NSString * selfDestructTableName;                                   //@synthesize selfDestructTableName=_selfDestructTableName - In the implementation block
@property (nonatomic,retain) NSString * encryptedConversationIdsTableName;                       //@synthesize encryptedConversationIdsTableName=_encryptedConversationIdsTableName - In the implementation block
@property (nonatomic,retain) NSString * messageIndexTableName;                                   //@synthesize messageIndexTableName=_messageIndexTableName - In the implementation block
@property (nonatomic,retain) NSString * secretMediaAttributesTableName;                          //@synthesize secretMediaAttributesTableName=_secretMediaAttributesTableName - In the implementation block
@property (nonatomic,retain) NSString * mediaCacheInvalidationTableName;                         //@synthesize mediaCacheInvalidationTableName=_mediaCacheInvalidationTableName - In the implementation block
@property (nonatomic,retain) NSString * fileDeletionTableName;                                   //@synthesize fileDeletionTableName=_fileDeletionTableName - In the implementation block
@property (nonatomic,retain) NSString * secretPeerOutgoingTableName;                             //@synthesize secretPeerOutgoingTableName=_secretPeerOutgoingTableName - In the implementation block
@property (nonatomic,retain) NSString * secretPeerOutgoingResendTableName;                       //@synthesize secretPeerOutgoingResendTableName=_secretPeerOutgoingResendTableName - In the implementation block
@property (nonatomic,retain) NSString * secretPeerIncomingTableName;                             //@synthesize secretPeerIncomingTableName=_secretPeerIncomingTableName - In the implementation block
@property (nonatomic,retain) NSString * secretPeerIncomingEncryptedTableName;                    //@synthesize secretPeerIncomingEncryptedTableName=_secretPeerIncomingEncryptedTableName - In the implementation block
@property (nonatomic,retain) NSString * sharedMediaCacheTableName;                               //@synthesize sharedMediaCacheTableName=_sharedMediaCacheTableName - In the implementation block
@property (nonatomic,retain) NSString * sharedMediaIndexBuiltTableName;                          //@synthesize sharedMediaIndexBuiltTableName=_sharedMediaIndexBuiltTableName - In the implementation block
@property (nonatomic,retain) NSString * sharedMediaIndexDownloadedTableName;                     //@synthesize sharedMediaIndexDownloadedTableName=_sharedMediaIndexDownloadedTableName - In the implementation block
@property (nonatomic,retain) NSString * peerRatingTableName;                                     //@synthesize peerRatingTableName=_peerRatingTableName - In the implementation block
@property (nonatomic,retain) NSString * botInfoTableName;                                        //@synthesize botInfoTableName=_botInfoTableName - In the implementation block
@property (nonatomic,retain) NSString * webpagesTableName;                                       //@synthesize webpagesTableName=_webpagesTableName - In the implementation block
@property (nonatomic,retain) NSString * botCallbackCacheTableName;                               //@synthesize botCallbackCacheTableName=_botCallbackCacheTableName - In the implementation block
@property (assign,nonatomic) int serviceLastCleanTimeKey;                                        //@synthesize serviceLastCleanTimeKey=_serviceLastCleanTimeKey - In the implementation block
@property (assign,nonatomic) int serviceLastMidKey;                                              //@synthesize serviceLastMidKey=_serviceLastMidKey - In the implementation block
@property (assign,nonatomic) int servicePtsKey;                                                  //@synthesize servicePtsKey=_servicePtsKey - In the implementation block
@property (assign,nonatomic) int serviceContactListStateKey;                                     //@synthesize serviceContactListStateKey=_serviceContactListStateKey - In the implementation block
@property (assign,nonatomic) int serviceLatestSynchronizedMidKey;                                //@synthesize serviceLatestSynchronizedMidKey=_serviceLatestSynchronizedMidKey - In the implementation block
@property (assign,nonatomic) int serviceLatestSynchronizedQtsKey;                                //@synthesize serviceLatestSynchronizedQtsKey=_serviceLatestSynchronizedQtsKey - In the implementation block
@property (assign,nonatomic) int serviceEncryptedConversationCount;                              //@synthesize serviceEncryptedConversationCount=_serviceEncryptedConversationCount - In the implementation block
@property (assign,nonatomic) int nextLocalMid;                                                   //@synthesize nextLocalMid=_nextLocalMid - In the implementation block
@property (assign,nonatomic) int localUserId;                                                    //@synthesize localUserId=_localUserId - In the implementation block
@property (nonatomic,retain) TGNotificationPrivacyAccountSetting * privacySettings;              //@synthesize privacySettings=_privacySettings - In the implementation block
@property (assign,nonatomic) BOOL contactListPreloaded;                                          //@synthesize contactListPreloaded=_contactListPreloaded - In the implementation block
@property (assign,nonatomic) int userLinksVersion;                                               //@synthesize userLinksVersion=_userLinksVersion - In the implementation block
@property (nonatomic,retain) TGTimer * selfDestructTimer;                                        //@synthesize selfDestructTimer=_selfDestructTimer - In the implementation block
@property (nonatomic,retain) TGTimer * mediaCleanupTimer;                                        //@synthesize mediaCleanupTimer=_mediaCleanupTimer - In the implementation block
@property (nonatomic,retain) TGTimer * deletionTickTimer;                                        //@synthesize deletionTickTimer=_deletionTickTimer - In the implementation block
@property (nonatomic,retain) TGTimer * updateMuteTimer;                                          //@synthesize updateMuteTimer=_updateMuteTimer - In the implementation block
@property (assign,nonatomic) BOOL deletionInProgress;                                            //@synthesize deletionInProgress=_deletionInProgress - In the implementation block
@property (nonatomic,retain) TGTimer * syncRemoteContactUidsTimer;                               //@synthesize syncRemoteContactUidsTimer=_syncRemoteContactUidsTimer - In the implementation block
@property (nonatomic,copy) id messageCleanupBlock;                                               //@synthesize messageCleanupBlock=_messageCleanupBlock - In the implementation block
@property (nonatomic,copy) id cleanupEverythingBlock;                                            //@synthesize cleanupEverythingBlock=_cleanupEverythingBlock - In the implementation block
@property (assign,nonatomic) double timeDifferenceFromUTC;                                       //@synthesize timeDifferenceFromUTC=_timeDifferenceFromUTC - In the implementation block
+(void)setDatabaseName:(id)arg1 ;
+(void)setPasswordRequiredBlock:(/*^block*/id)arg1 ;
+(void)setUpgradingBlock:(/*^block*/id)arg1 ;
+(void)setLiveMessagesDispatchPath:(id)arg1 ;
+(void)setLiveUnreadCountDispatchPath:(id)arg1 ;
+(id)instance;
-(id)loadChannels:(id)arg1 ;
-(id)loadUser:(int)arg1 ;
-(id)loadMediaInConversation:(long long)arg1 maxMid:(int)arg2 maxLocalMid:(int)arg3 maxDate:(int)arg4 limit:(int)arg5 count:(int*)arg6 important:(BOOL)arg7 ;
-(id)loadMediaInConversation:(long long)arg1 atMessageId:(int)arg2 limitAfter:(int)arg3 count:(int*)arg4 important:(BOOL)arg5 ;
-(id)loadMessageWithMid:(int)arg1 peerId:(long long)arg2 ;
-(id)loadMediaMessageWithMid:(int)arg1 ;
-(void)markAllPendingMessagesAsFailed;
-(BOOL)isEncryptionEnabled;
-(BOOL)isPasswordSet:(BOOL*)arg1 ;
-(id)customProperty:(id)arg1 ;
-(void)dropDatabase;
-(void)loadConversationListFromDate:(int)arg1 limit:(int)arg2 excludeConversationIds:(id)arg3 completion:(/*^block*/id)arg4 ;
-(void)dispatchOnDatabaseThreadDebug:(const char*)arg1 line:(int)arg2 block:(/*^block*/id)arg3 synchronous:(BOOL)arg4 ;
-(SCD_Struct_TG72)databaseState;
-(BOOL)verifyPassword:(id)arg1 ;
-(void)processAndScheduleSelfDestruct;
-(void)processAndScheduleMediaCleanup;
-(void)processAndScheduleMute;
-(id)generateLocalMids:(int)arg1 ;
-(void)transactionAddMessages:(id)arg1 updateConversationDatas:(id)arg2 notifyAdded:(BOOL)arg3 ;
-(void)loadRemoteContactUidsContactIds:(map<int, int, std::less<int>, std::allocator<std::pair<const int, int> > >=_Rb_tree<int, std::pair<const int, int>, std::_Select1st<std::pair<const int, int> >, std::less<int>, std::allocator<std::pair<const int, int> > >=_Rb_tree_impl<std::less<int>, false>=less<int>_Rb_tree_node_base=i_Rb_tree_node_base}_Rb_tree_node_base}_Rb_tree_node_base}}Q}}}Ref)arg1 ;
-(id)contactUsersMatchingPhone:(id)arg1 ;
-(id)loadConversationWithId:(long long)arg1 ;
-(void)loadPeerNotificationSettings:(long long)arg1 soundId:(int*)arg2 muteUntil:(int*)arg3 previewText:(BOOL*)arg4 messagesMuted:(BOOL*)arg5 notFound:(BOOL*)arg6 ;
-(id)existingChannel:(long long)arg1 ;
-(void)setMessageCleanupBlock:(id)arg1 ;
-(void)setCleanupEverythingBlock:(id)arg1 ;
-(void)clearSpotlightIndex:(/*^block*/id)arg1 ;
-(void)setLocalUserId:(int)arg1 ;
-(void)storeUsers:(id)arg1 ;
-(id)conversationsForReadStateValidation;
-(id)synchronizePeerMessageDraftPeers;
-(void)updateSpotlightIndex;
-(void)setTimeDifferenceFromUTC:(double)arg1 ;
-(void)dropDatabase:(BOOL)arg1 ;
-(id)currentPassword;
-(void)buildTransliterationCache;
-(id)searchPhonebookContacts:(id)arg1 contacts:(id)arg2 ;
-(id)loadContactUsers;
-(id)loadPhonebookContacts:(BOOL)arg1 ;
-(long long)peerIdForEncryptedConversationId:(long long)arg1 ;
-(id)encryptionKeySignatureForConversationId:(long long)arg1 additionalSignature:(id*)arg2 ;
-(int)loadConversationListRemoteOffsetDate;
-(void)storePeerNotificationSettings:(long long)arg1 soundId:(int)arg2 muteUntil:(int)arg3 previewText:(BOOL)arg4 messagesMuted:(BOOL)arg5 writeToActionQueue:(BOOL)arg6 completion:(/*^block*/id)arg7 ;
-(void)storeConversationList:(id)arg1 replace:(BOOL)arg2 ;
-(void)storeSynchronizedChannels:(id)arg1 ;
-(void)setCustomProperty:(id)arg1 value:(id)arg2 ;
-(void)addMessagesToChannel:(long long)arg1 messages:(id)arg2 deleteMessages:(id)arg3 unimportantGroups:(id)arg4 addedHoles:(id)arg5 removedHoles:(id)arg6 removedUnimportantHoles:(id)arg7 updatedMessageSortKeys:(id)arg8 returnGroups:(BOOL)arg9 keepUnreadCounters:(BOOL)arg10 changedMessages:(/*^block*/id)arg11 ;
-(void)fillConversationHistoryHole:(long long)arg1 indexSet:(id)arg2 ;
-(void)transactionAddMessages:(id)arg1 notifyAddedMessages:(BOOL)arg2 removeMessages:(id)arg3 updateMessages:(id)arg4 updatePeerDrafts:(id)arg5 removeMessagesInteractive:(id)arg6 keepDates:(BOOL)arg7 updateConversationDatas:(id)arg8 applyMaxIncomingReadIds:(id)arg9 applyMaxOutgoingReadIds:(id)arg10 applyMaxOutgoingReadDates:(id)arg11 readHistoryForPeerIds:(id)arg12 resetPeerReadStates:(id)arg13 clearConversationsWithPeerIds:(id)arg14 removeConversationsWithPeerIds:(id)arg15 updatePinnedConversations:(id)arg16 synchronizePinnedConversations:(BOOL)arg17 forceReplacePinnedConversations:(BOOL)arg18 ;
-(int)loadUserLink:(int)arg1 outdated:(BOOL*)arg2 ;
-(void)storeUserLink:(int)arg1 link:(int)arg2 ;
-(BOOL)uidIsRemoteContact:(int)arg1 ;
-(id)phonebookContactByPhoneId:(int)arg1 ;
-(int)unreadCountForConversation:(long long)arg1 ;
-(int)cachedUnreadCount;
-(long long)encryptedConversationIdForPeerId:(long long)arg1 ;
-(long long)encryptedConversationAccessHash:(long long)arg1 ;
-(int)encryptedParticipantIdForConversationId:(long long)arg1 ;
-(BOOL)conversationContainsHole:(long long)arg1 minMessageId:(int)arg2 maxMessageId:(int)arg3 ;
-(void)loadMessagesFromConversationDownwards:(long long)arg1 minMid:(int)arg2 minLocalMid:(int)arg3 minDate:(int)arg4 limit:(int)arg5 completion:(/*^block*/id)arg6 ;
-(int)loadPeerMinMid:(long long)arg1 ;
-(void)loadMessagesFromConversation:(long long)arg1 maxMid:(int)arg2 maxDate:(int)arg3 maxLocalMid:(int)arg4 atMessageId:(int)arg5 limit:(int)arg6 extraUnread:(BOOL)arg7 completion:(/*^block*/id)arg8 ;
-(BOOL)haveRemoteContactUids;
-(id)_channelCachedDataSync:(long long)arg1 ;
-(void)cachedMediaForPeerId:(long long)arg1 itemType:(int)arg2 limit:(unsigned long long)arg3 important:(BOOL)arg4 completion:(/*^block*/id)arg5 buildIndex:(BOOL)arg6 isCancelled:(/*^block*/id)arg7 ;
-(id)botInfoForUserId:(int)arg1 ;
-(id)userCachedData:(long long)arg1 ;
-(id)cachedPeerSettings:(long long)arg1 ;
-(void)updateCachedPeerSettings:(long long)arg1 block:(/*^block*/id)arg2 ;
-(id)modify:(/*^block*/id)arg1 ;
-(void)updateCachedUserData:(long long)arg1 block:(/*^block*/id)arg2 ;
-(void)setPassword:(id)arg1 isStrong:(BOOL)arg2 completion:(/*^block*/id)arg3 ;
-(void)setEncryptionEnabled:(BOOL)arg1 completion:(/*^block*/id)arg2 ;
-(void)storeFutureActions:(id)arg1 ;
-(void)clearPeerProfilePhotos:(long long)arg1 ;
-(id)loadFutureActionsWithType:(int)arg1 ;
-(void)removeFutureAction:(long long)arg1 type:(int)arg2 randomId:(int)arg3 ;
-(unsigned long long)peerLayer:(long long)arg1 ;
-(BOOL)currentPeerResendSeqIn:(long long)arg1 seqIn:(int*)arg2 ;
-(void)setCurrentPeerResendSeqIn:(long long)arg1 seqIn:(int)arg2 ;
-(BOOL)encryptedConversationIsCreator:(long long)arg1 ;
-(void)deletePeerIncomingActions:(long long)arg1 actionIds:(id)arg2 ;
-(void)deletePeerIncomingEncryptedActions:(long long)arg1 actionIds:(id)arg2 ;
-(void)applyPeerSeqIn:(long long)arg1 seqIn:(int)arg2 ;
-(void)confirmPeerSeqOut:(long long)arg1 seqOut:(int)arg2 ;
-(void)discardEncryptionKeysForConversationId:(long long)arg1 beforeSeqOut:(int)arg2 ;
-(void)raiseSecretMessageFlagsByRandomId:(long long)arg1 flagsToRise:(int)arg2 ;
-(void)messageIdsForRandomIds:(id)arg1 mapping:(map<long long, int, std::less<long long>, std::allocator<std::pair<const long long, int> > >=_Rb_tree<long long, std::pair<const long long, int>, std::_Select1st<std::pair<const long long, int> >, std::less<long long>, std::allocator<std::pair<const long long, int> > >=_Rb_tree_impl<std::less<long long>, false>=less<long long>_Rb_tree_node_base=i_Rb_tree_node_base}_Rb_tree_node_base}_Rb_tree_node_base}}Q}}}Ref)arg2 ;
-(id)messageIdsInConversation:(long long)arg1 ;
-(void)storeEncryptionKeyForConversationId:(long long)arg1 key:(id)arg2 keyFingerprint:(long long)arg3 firstSeqOut:(int)arg4 ;
-(int)peerNextSeqOut:(long long)arg1 ;
-(void)filterExistingRandomIds:(set<long long, std::less<long long>, std::allocator<long long> >=_Rb_tree<long long, long long, std::_Identity<long long>, std::less<long long>, std::allocator<long long> >=_Rb_tree_impl<std::less<long long>, false>=less<long long>_Rb_tree_node_base=i_Rb_tree_node_base}_Rb_tree_node_base}_Rb_tree_node_base}}Q}}}Ref)arg1 ;
-(void)setPeerLayer:(long long)arg1 layer:(unsigned long long)arg2 ;
-(void)maybeCreateAdditionalEncryptedHashForPeer:(long long)arg1 ;
-(void)transactionRemoveMessages:(id)arg1 updateConversationDatas:(id)arg2 ;
-(void)initiateSelfDestructForMessageIds:(id)arg1 ;
-(int)messageIdForRandomId:(long long)arg1 ;
-(void)dequeuePeerIncomingActions:(long long)arg1 completion:(/*^block*/id)arg2 ;
-(BOOL)isPeerMuted:(long long)arg1 ;
-(void)clearServerAssetData;
-(void)clearPeerProfilePhotos;
-(void)_dropChannels;
-(void)clearCachedMedia;
-(id)backedUpDatabasePaths;
-(id)peerRatingUpdatesFromOutgoingMessageEvents:(id)arg1 ;
-(void)updatePeerRatings:(id)arg1 ;
-(void)dispatchOnIndexThread:(/*^block*/id)arg1 synchronous:(BOOL)arg2 ;
-(int)messageLifetimeForPeerId:(long long)arg1 ;
-(void)setMessageLifetimeForPeerId:(long long)arg1 encryptedConversationId:(long long)arg2 messageLifetime:(int)arg3 writeToActionQueue:(BOOL)arg4 ;
-(void)updateChannels:(id)arg1 ;
-(void)updateLatestMessageId:(int)arg1 applied:(BOOL)arg2 completion:(/*^block*/id)arg3 ;
-(void)upgradeUserLinks;
-(void)readDeactivatedConversations;
-(void)customProperty:(id)arg1 completion:(/*^block*/id)arg2 ;
-(long long)peerIdForEncryptedConversationId:(long long)arg1 createIfNecessary:(BOOL)arg2 ;
-(id)messagesWithDateInConversation:(long long)arg1 date:(int)arg2 ;
-(void)setConversationCustomProperty:(long long)arg1 name:(int)arg2 value:(id)arg3 ;
-(id)conversationCustomPropertySync:(long long)arg1 name:(int)arg2 ;
-(void)setPeerIsBlocked:(long long)arg1 blocked:(BOOL)arg2 writeToActionQueue:(BOOL)arg3 ;
-(set<int, std::less<int>, std::allocator<int> >=_Rb_tree<int, int, std::_Identity<int>, std::less<int>, std::allocator<int> >=_Rb_tree_impl<std::less<int>, false>=less<int>_Rb_tree_node_base=i_Rb_tree_node_base}_Rb_tree_node_base}_Rb_tree_node_base}}Q}}}Ref)filterPeerPhotoNotificationsEnabled:(const vector<int, std::allocator<int> >*)arg1 ;
-(void)messageIdsForTempIds:(id)arg1 mapping:(map<long long, int, std::less<long long>, std::allocator<std::pair<const long long, int> > >=_Rb_tree<long long, std::pair<const long long, int>, std::_Select1st<std::pair<const long long, int> >, std::less<long long>, std::allocator<std::pair<const long long, int> > >=_Rb_tree_impl<std::less<long long>, false>=less<long long>_Rb_tree_node_base=i_Rb_tree_node_base}_Rb_tree_node_base}_Rb_tree_node_base}}Q}}}Ref)arg2 ;
-(void)setTempIdForMessageId:(int)arg1 peerId:(long long)arg2 tempId:(long long)arg3 ;
-(void)updateMessageViews:(long long)arg1 messageIdToViews:(id)arg2 ;
-(void)updateWebpages:(id)arg1 ;
-(void)storeConversationParticipantData:(long long)arg1 participantData:(id)arg2 ;
-(void)loadPeerProfilePhotos:(long long)arg1 completion:(/*^block*/id)arg2 ;
-(void)loadBlockedList:(/*^block*/id)arg1 ;
-(BOOL)containsConversationWithId:(long long)arg1 ;
-(void)transactionUpdatePinnedConversations:(id)arg1 synchronizePinnedConversations:(BOOL)arg2 forceReplacePinnedConversations:(BOOL)arg3 ;
-(id)_getPinnedConversations;
-(void)updateLatestQts:(int)arg1 applied:(BOOL)arg2 completion:(/*^block*/id)arg3 ;
-(long long)secretUnreadCount;
-(void)removeTempIds:(id)arg1 ;
-(void)transactionUpdateMessages:(id)arg1 updateConversationDatas:(id)arg2 ;
-(void)tempIdsForLocalMessages:(/*^block*/id)arg1 ;
-(id)encryptionKeyForConversationId:(long long)arg1 requestedKeyFingerprint:(long long)arg2 outKeyFingerprint:(long long*)arg3 ;
-(void)searchDialogs:(id)arg1 ignoreUid:(int)arg2 partial:(BOOL)arg3 completion:(/*^block*/id)arg4 isCancelled:(/*^block*/id)arg5 ;
-(/*^block*/id)searchMessages:(id)arg1 peerId:(long long)arg2 completion:(/*^block*/id)arg3 ;
-(void)initDatabase;
-(BOOL)isCurrentQueueDatabaseQueue;
-(BOOL)isCurrentQueueDatabaseIndexQueue;
-(id)databaseIndexQueue;
-(BOOL)isCurrentDatabaseEncrypted;
-(void)migrateDatabasePlaintext:(/*^block*/id)arg1 ;
-(void)rekeyDatabase:(id)arg1 ;
-(BOOL)table:(id)arg1 containsField:(id)arg2 ;
-(void)_beginBackgroundIndexing;
-(NSString *)indexDatabasePath;
-(void)migrateDatabaseEncrypted:(/*^block*/id)arg1 ;
-(BOOL)checkPassword:(id)arg1 isLegacy:(BOOL*)arg2 ;
-(id)_hexKey:(BOOL*)arg1 ;
-(BOOL)isCurrentIndexDatabaseEncrypted;
-(BOOL)checkIndexPassword:(id)arg1 isLegacy:(BOOL*)arg2 ;
-(void)_reopenDatabase;
-(void)_reopenIndexDatabase;
-(void)upgradeTables;
-(void)clearCachedUserLinks;
-(id)updateSpotlightPeersSignal:(id)arg1 createIfNotExist:(BOOL)arg2 ;
-(id)contactBindingWithId:(int)arg1 ;
-(void)transactionReadHistoryForPeerIds:(id)arg1 ;
-(id)_getPinnedConversationDates;
-(id)_loadChannelsWithLowerBound:(SCD_Struct_TG76)arg1 upperBound:(SCD_Struct_TG76)arg2 count:(unsigned long long)arg3 ;
-(void)_renderConversations:(id)arg1 ;
-(id)_loadChannelConversation:(long long)arg1 ;
-(id)_listTableNameForConversationId:(long long)arg1 ;
-(id)botReplyMarkupForPeerId:(long long)arg1 ;
-(void)storeBotReplyMarkup:(id)arg1 hideMarkupAuthorId:(int)arg2 forPeerId:(long long)arg3 messageId:(int)arg4 ;
-(void)actualizeConversation:(long long)arg1 dispatch:(BOOL)arg2 conversation:(id)arg3 forceUpdate:(BOOL)arg4 addUnreadCount:(int)arg5 addServiceUnreadCount:(int)arg6 keepDate:(BOOL)arg7 ;
-(shared_ptr<std::map<int, TGUser *, std::less<int>, std::allocator<std::pair<const int, TGUser *> > > >*)loadUsers:(const vector<int, std::allocator<int> >*)arg1 ;
-(/*^block*/id)searchContacts:(id)arg1 ignoreUid:(int)arg2 searchPhonebook:(BOOL)arg3 completion:(/*^block*/id)arg4 internalIsCancelled:(/*^block*/id)arg5 ;
-(void)deleteMessagesFromIndex:(id)arg1 ;
-(void)_updateChannelConversationSortKeys:(long long)arg1 importantMessage:(id)arg2 unimportantMessage:(id)arg3 addImportantUnread:(int)arg4 addUnimportantUnread:(int)arg5 ;
-(void)actualizeConversation:(long long)arg1 dispatch:(BOOL)arg2 ;
-(void)setPts:(int)arg1 date:(int)arg2 seq:(int)arg3 qts:(int)arg4 unreadCount:(int)arg5 ;
-(void)loadRemoteContactUids:(vector<int, std::allocator<int> >*)arg1 ;
-(id)_cachedMediaMessageForId:(int)arg1 ;
-(id)_loadChannelMessage:(long long)arg1 messageId:(int)arg2 ;
-(void)_updateMessagesWithActualizedWebpages:(id)arg1 ;
-(id)_filterClearMessages:(id)arg1 ;
-(BOOL)loadPeerMessagesMuted:(long long)arg1 ;
-(SCD_Struct_TG77)loadPeerCustomSettings:(long long)arg1 ;
-(void)storePeerCustomSettings:(long long)arg1 customSettings:(SCD_Struct_TG77)arg2 ;
-(BOOL)loadPeerPhotoNotificationsEnabled:(long long)arg1 ;
-(void)_filterPeersAreBlockedSync:(set<int, std::less<int>, std::allocator<int> >=_Rb_tree<int, int, std::_Identity<int>, std::less<int>, std::allocator<int> >=_Rb_tree_impl<std::less<int>, false>=less<int>_Rb_tree_node_base=i_Rb_tree_node_base}_Rb_tree_node_base}_Rb_tree_node_base}}Q}}}Ref)arg1 ;
-(void)setPeerMessagesMuted:(long long)arg1 messagesMuted:(BOOL)arg2 ;
-(void)notifyChannelShouldMuteMembers:(long long)arg1 value:(BOOL)arg2 ;
-(id)_historyHolesInConversation:(long long)arg1 ;
-(void)addConversationHistoryHole:(long long)arg1 minMessageId:(int)arg2 maxMessageId:(int)arg3 ;
-(void)transactionRemoveMessagesInteractive:(id)arg1 keepDates:(BOOL)arg2 updateConversationDatas:(id)arg3 ;
-(void)raiseSecretMessageFlagsByMessageId:(int)arg1 flagsToRise:(int)arg2 ;
-(long long)randomIdForMessageId:(int)arg1 ;
-(int)secretMessageFlags:(int)arg1 ;
-(void)_updateLastUseDateRecords:(const vector<TGUpdateLastUseRecord, std::allocator<TGUpdateLastUseRecord> >*)arg1 ;
-(id)_filePathForDeletionOfMedia:(id)arg1 ;
-(void)_enqueueFilesToDelete:(id)arg1 ;
-(void)_processDeletionQueue;
-(id)filePathForVideoId:(long long)arg1 local:(BOOL)arg2 ;
-(id)filePathForAudio:(id)arg1 ;
-(id)filePathForDocument:(id)arg1 ;
-(void)setChannelShouldMuteMembers:(long long)arg1 value:(BOOL)arg2 dispatch:(BOOL)arg3 ;
-(id)_dequeuePeerOutgoingResendActions:(long long)arg1 ;
-(int)currentPeerSentSeqOut:(long long)arg1 ;
-(void)_enqueuePeerOutgoingResendActions:(long long)arg1 actions:(id)arg2 ;
-(id)_dequeuePeerIncomingEncryptedActions:(long long)arg1 ;
-(void)cacheMediaForPeerId:(long long)arg1 messages:(id)arg2 ;
-(BOOL)_cacheBuiltForPeerId:(long long)arg1 ;
-(void)_buildCacheForPeerId:(long long)arg1 isCancelled:(/*^block*/id)arg2 ;
-(BOOL)_indexDownloadedForPeerId:(long long)arg1 itemType:(int)arg2 ;
-(BOOL)_storeBotReplyMarkup:(id)arg1 hideMarkupAuthorId:(int)arg2 forPeerId:(long long)arg3 messageId:(int)arg4 ;
-(id)_topChannelMessage:(long long)arg1 important:(BOOL)arg2 ;
-(id)_channelList;
-(id)_updateChannelConversation:(long long)arg1 conversation:(id)arg2 mergeReadState:(BOOL)arg3 ;
-(void)_updateChannelConversation:(long long)arg1 ;
-(SCD_Struct_TG78)_knownChannelEarlierRemoteMessageSortKey:(long long)arg1 important:(BOOL)arg2 ;
-(void)_removeChannelHole:(long long)arg1 hole:(id)arg2 unimportant:(BOOL)arg3 addedMessages:(id)arg4 removedMessages:(id)arg5 ;
-(void)_addChannelHole:(long long)arg1 hole:(id)arg2 unimportant:(BOOL)arg3 addedMessages:(id)arg4 removedMessages:(id)arg5 ;
-(SCD_Struct_TG78)_knownChannelEarlierMessageSortKey:(long long)arg1 maxId:(int)arg2 ;
-(void)addMessagesToChannelAndDispatch:(long long)arg1 messages:(id)arg2 deletedMessages:(id)arg3 holes:(id)arg4 pts:(int)arg5 ;
-(void)updateChannelReadState:(long long)arg1 maxReadId:(int)arg2 unreadImportantCount:(int)arg3 unreadUnimportantCount:(int)arg4 ;
-(void)updateChannelPinnedMessageId:(long long)arg1 pinnedMessageId:(int)arg2 hidden:(id)arg3 ;
-(id)channelMessageIds:(long long)arg1 withAuthorId:(long long)arg2 ;
-(id)_holesTableName:(BOOL)arg1 ;
-(id)_intersectingHoles:(long long)arg1 hole:(id)arg2 unimportant:(BOOL)arg3 ;
-(id)_messagesFromHoles:(id)arg1 peerId:(long long)arg2 ;
-(id)_messageIdsFromHoles:(id)arg1 ;
-(id)_messageIdsFromGroups:(id)arg1 ;
-(id)_messagesFromGroups:(id)arg1 peerId:(long long)arg2 ;
-(id)_loadChannelList;
-(id)_loadChannelImportantMessagesWithMinSortKey:(SCD_Struct_TG78)arg1 maxSortKey:(SCD_Struct_TG78)arg2 count:(unsigned long long)arg3 ;
-(id)_loadChannelMessagesWithMinSortKey:(SCD_Struct_TG78)arg1 maxSortKey:(SCD_Struct_TG78)arg2 count:(unsigned long long)arg3 ;
-(id)_loadChannelHolesWithMinSortKey:(SCD_Struct_TG78)arg1 maxTransparentSortKey:(SCD_Struct_TG78)arg2 unimportant:(BOOL)arg3 count:(unsigned long long)arg4 ;
-(void)confirmChannelMessagesDeleted:(id)arg1 ;
-(void)filterBotReplyMarkups:(long long)arg1 allowedAuthorIds:(id)arg2 ;
-(id)clearSpotlightIndexSignal;
-(id)spotlightIndexDomain;
-(int)_channelHistoryPtsForPeerId:(long long)arg1 ;
-(void)processMessageMediaForIndex:(id)arg1 messageId:(int)arg2 peerId:(long long)arg3 dataByPeerId:(id)arg4 indexHolder:(id)arg5 ;
-(id)genericMediaWithMaxMessageId:(int)arg1 limit:(int)arg2 indexHolder:(id)arg3 ;
-(id)genericAdvancedMediaWithMaxMessageId:(int)arg1 limit:(int)arg2 indexHolder:(id)arg3 ;
-(id)channelMediaWithMaxTagSortKey:(id)arg1 limit:(int)arg2 indexHolder:(id)arg3 ;
-(id)genericMediaIndex:(id)arg1 ;
-(id)advancedMediaIndex:(id)arg1 ;
-(id)channelMediaIndex:(id)arg1 ;
-(id)mergePeerData:(id)arg1 rhs:(id)arg2 ;
-(id)diskCacheStats:(id)arg1 ;
-(id)_loadCachedRecentPeerCategories;
-(void)_replaceCachedRecentPeerCategories:(id)arg1 ;
-(void)_scheduleSelfDestruct:(vector<std::pair<int, int>, std::allocator<std::pair<int, int> > >*)arg1 referenceDate:(int)arg2 ;
-(void)removeMediaFromCacheForPeerId:(long long)arg1 messageIds:(id)arg2 ;
-(int)_incomingMessageCountForPeerId:(long long)arg1 minId:(int)arg2 maxId:(int)arg3 ;
-(id)_messagesForPeerId:(long long)arg1 minDate:(int)arg2 maxDate:(int)arg3 ;
-(void)_messagesRead:(id)arg1 referenceDate:(int)arg2 ;
-(void)_updateMessageMediaBindingsForPeerId:(long long)arg1 fromId:(int)arg2 fromMedia:(id)arg3 toId:(int)arg4 toMedia:(id)arg5 ;
-(void)updateChannelMessageSortKeyAndDispatch:(long long)arg1 previousSortKey:(SCD_Struct_TG78)arg2 updatedSortKey:(SCD_Struct_TG78)arg3 updatedMessage:(id)arg4 ;
-(void)_updateMessage:(id)arg1 toMessage:(id)arg2 ;
-(void)storeQueuedActions:(id)arg1 ;
-(id)_peerDraft:(long long)arg1 ;
-(void)_storeMessageDraft:(long long)arg1 draft:(id)arg2 ;
-(void)removeMediaFromCacheForPeerId:(long long)arg1 ;
-(id)_topMessageIdsForPeerIds:(id)arg1 ;
-(void)_removeMessagesFromConversationsWithPeerIds:(id)arg1 peers:(id)arg2 modifiedPeerIds:(id)arg3 ;
-(id)deleteSpotlightPeerIds:(id)arg1 ;
-(void)_prepareTransactionWithMessages:(id)arg1 removeMessages:(id)arg2 updateMessages:(id)arg3 updatePeerDrafts:(id)arg4 removeMessagesInteractive:(id)arg5 updateConversationDatas:(id)arg6 applyMaxIncomingReadIds:(id)arg7 applyMaxOutgoingReadIds:(id)arg8 applyMaxOutgoingReadDates:(id)arg9 readHistoryForPeerIds:(id)arg10 outPeers:(id)arg11 outAddMessagesByPeerId:(id)arg12 outRemoveMessages:(id)arg13 outRemoveMessagesInteractive:(id)arg14 outRemoveEmptyConversations:(id)arg15 resetPeerReadStates:(id)arg16 clearConversationsWithPeerIds:(id)arg17 removeConversationsWithPeerIds:(id)arg18 updatePinnedConversations:(id)arg19 ;
-(void)_resetPeerReadStates:(id)arg1 peers:(id)arg2 modifiedPeerIds:(id)arg3 ;
-(void)_readPeersHistories:(id)arg1 peers:(id)arg2 modifiedPeerIds:(id)arg3 outLegacyEnqueuedReadActions:(BOOL*)arg4 ;
-(void)_addMessages:(id)arg1 peers:(id)arg2 modifiedPeerIds:(id)arg3 invalidatedPeerReadStates:(id)arg4 updatedBotReplyMarkups:(id)arg5 ;
-(void)_removeMessages:(id)arg1 peers:(id)arg2 modifiedPeerIds:(id)arg3 invalidatedPeerReadStates:(id)arg4 keepDates:(BOOL)arg5 peersKeepMaxDates:(id)arg6 ;
-(void)_updateMessages:(id)arg1 peers:(id)arg2 modifiedPeerIds:(id)arg3 dispatchMessagesEditedByPeerId:(id)arg4 changedMessageIds:(id)arg5 ;
-(void)_applyMaxIncomingReadIds:(id)arg1 peers:(id)arg2 modifiedPeerIds:(id)arg3 invalidatedPeerReadStates:(id)arg4 ;
-(void)_applyMaxOutgoingReadIds:(id)arg1 peers:(id)arg2 modifiedPeerIds:(id)arg3 ;
-(void)_applyMaxOutgoingReadDates:(id)arg1 peers:(id)arg2 modifiedPeerIds:(id)arg3 ;
-(void)_clearConversationsWithPeerIds:(id)arg1 peers:(id)arg2 modifiedPeerIds:(id)arg3 outLegacyEnqueuedActions:(BOOL*)arg4 ;
-(void)_removeConversationsWithPeerIds:(id)arg1 peers:(id)arg2 modifiedPeerIds:(id)arg3 outLegacyEnqueuedActions:(BOOL*)arg4 ;
-(void)_updateConversationDatas:(id)arg1 peers:(id)arg2 modifiedPeerIds:(id)arg3 ;
-(void)_updatePeerDrafts:(id)arg1 modifiedPeerIds:(id)arg2 dispatchPeerDrafts:(id)arg3 ;
-(void)_replacePinnedConversationDates:(id)arg1 ;
-(id)_conversationForDispatch:(long long)arg1 peers:(id)arg2 maxDates:(id)arg3 outIsEmpty:(BOOL*)arg4 ;
-(id)_enqueueValidatePeersReadStates:(id)arg1 ;
-(void)_addedNewMessages:(id)arg1 ;
-(void)schedulePushPinnedConversations;
-(id)_peersWithInvalidatedReadStates;
-(BOOL)_enqueueSynchronizePeerMessageDraft:(long long)arg1 ;
-(id)currentSynchronizePinnedConversationsAction;
-(void)_setCurrentSynchronizePinnedConversationsAction:(id)arg1 ;
-(int)_peerPinnedDate:(long long)arg1 ;
-(id)_webpageWithId:(long long)arg1 ;
-(id)appliedPts;
-(void)explainQuery:(id)arg1 ;
-(void)storeUsersPresences:(map<int, TGUserPresence, std::less<int>, std::allocator<std::pair<const int, TGUserPresence> > >=_Rb_tree<int, std::pair<const int, TGUserPresence>, std::_Select1st<std::pair<const int, TGUserPresence> >, std::less<int>, std::allocator<std::pair<const int, TGUserPresence> > >=_Rb_tree_impl<std::less<int>, false>=less<int>_Rb_tree_node_base=i_Rb_tree_node_base}_Rb_tree_node_base}_Rb_tree_node_base}}Q}}}Ref)arg1 ;
-(void)setLocalUserStatusPrivacyRules:(id)arg1 changedLoadedUsers:(/*^block*/id)arg2 ;
-(int)loadCachedPhoneIdByUid:(int)arg1 ;
-(void)loadCachedUsersWithContactIds:(const set<int, std::less<int>, std::allocator<int> >=_Rb_tree<int, int, std::_Identity<int>, std::less<int>, std::allocator<int> >=_Rb_tree_impl<std::less<int>, false>=less<int>_Rb_tree_node_base=i_Rb_tree_node_base}_Rb_tree_node_base}_Rb_tree_node_base}}Q}}}Ref)arg1 resultMap:(map<int, TGUser *, std::less<int>, std::allocator<std::pair<const int, TGUser *> > >=_Rb_tree<int, std::pair<const int, TGUser *>, std::_Select1st<std::pair<const int, TGUser *> >, std::less<int>, std::allocator<std::pair<const int, TGUser *> > >=_Rb_tree_impl<std::less<int>, false>=less<int>_Rb_tree_node_base=i_Rb_tree_node_base}_Rb_tree_node_base}_Rb_tree_node_base}}Q}}}Ref)arg2 ;
-(int)loadUsersOnlineCount:(id)arg1 alwaysOnlineUid:(int)arg2 ;
-(id)loadConversationWithIdCached:(long long)arg1 ;
-(/*^block*/id)searchContacts:(id)arg1 ignoreUid:(int)arg2 searchPhonebook:(BOOL)arg3 completion:(/*^block*/id)arg4 ;
-(void)applyPts:(int)arg1 date:(int)arg2 seq:(int)arg3 qts:(int)arg4 unreadCount:(int)arg5 ;
-(void)replaceRemoteContactUids:(id)arg1 ;
-(void)addRemoteContactUids:(id)arg1 ;
-(void)deleteRemoteContactUids:(id)arg1 ;
-(void)addContactBindings:(id)arg1 ;
-(void)deleteContactBinding:(int)arg1 ;
-(void)replaceContactBindings:(id)arg1 ;
-(id)contactBindings;
-(void)replacePhonebookContacts:(id)arg1 ;
-(id)phonebookContactByNativeId:(int)arg1 ;
-(void)replacePhonebookContact:(int)arg1 phonebookContact:(id)arg2 generateContactBindings:(BOOL)arg3 ;
-(void)loadUnreadMessagesHeadFromConversation:(long long)arg1 limit:(int)arg2 completion:(/*^block*/id)arg3 ;
-(void)replaceContentPropertiesInMessageWithId:(int)arg1 contentProperties:(id)arg2 ;
-(void)randomIdsForMessageIds:(id)arg1 mapping:(map<int, long long, std::less<int>, std::allocator<std::pair<const int, long long> > >=_Rb_tree<int, std::pair<const int, long long>, std::_Select1st<std::pair<const int, long long> >, std::less<int>, std::allocator<std::pair<const int, long long> > >=_Rb_tree_impl<std::less<int>, false>=less<int>_Rb_tree_node_base=i_Rb_tree_node_base}_Rb_tree_node_base}_Rb_tree_node_base}}Q}}}Ref)arg2 ;
-(void)updateMessageRangesPts:(long long)arg1 messageRanges:(id)arg2 pts:(int)arg3 ;
-(void)loadConversationState:(long long)arg1 forwardMessageDescs:(id*)arg2 messageEditingContext:(id*)arg3 scrollState:(id*)arg4 ;
-(void)storeConversationState:(long long)arg1 messageEditingContext:(id)arg2 forwardMessageDescs:(id)arg3 scrollState:(id)arg4 ;
-(void)loadMediaPositionInConversation:(long long)arg1 messageId:(int)arg2 completion:(/*^block*/id)arg3 ;
-(void)addMediaToConversation:(long long)arg1 messages:(id)arg2 completion:(/*^block*/id)arg3 ;
-(void)loadLastRemoteMediaMessageIdInConversation:(long long)arg1 completion:(/*^block*/id)arg2 ;
-(int)mediaCountInConversation:(long long)arg1 ;
-(void)confirmQueuedActions:(id)arg1 requireFullMatch:(BOOL)arg2 ;
-(void)loadQueuedActions:(id)arg1 completion:(/*^block*/id)arg2 ;
-(void)removeFutureActionsWithType:(int)arg1 uniqueIds:(id)arg2 ;
-(id)loadOneFutureAction;
-(id)loadFutureAction:(long long)arg1 type:(int)arg2 ;
-(int)loadPeerMinMediaMid:(long long)arg1 ;
-(void)setPeerPhotoNotificationsEnabled:(long long)arg1 photoNotificationsEnabled:(BOOL)arg2 ;
-(int)minAutosaveMessageIdForConversation:(long long)arg1 ;
-(void)storeMinAutosaveMessageIdForConversation:(long long)arg1 mid:(int)arg2 ;
-(void)storePeerMinMid:(long long)arg1 minMid:(int)arg2 ;
-(void)storePeerMinMediaMid:(long long)arg1 minMediaMid:(int)arg2 ;
-(void)conversationCustomProperty:(long long)arg1 name:(int)arg2 completion:(/*^block*/id)arg3 ;
-(void)clearPeerNotificationSettings:(BOOL)arg1 ;
-(void)addConversationHistoryHoleToLoadedLaterMessages:(long long)arg1 maxMessageId:(int)arg2 ;
-(id)excludeMessagesWithHolesFromArray:(id)arg1 peerId:(long long)arg2 aroundMessageId:(int)arg3 ;
-(void)setAssetIsStored:(id)arg1 ;
-(void)checkIfAssetIsStored:(id)arg1 completion:(/*^block*/id)arg2 ;
-(void)loadPeerIsBlocked:(long long)arg1 completion:(/*^block*/id)arg2 ;
-(void)replaceBlockedList:(id)arg1 ;
-(int)loadBlockedDate:(long long)arg1 ;
-(void)storePeerProfilePhotos:(long long)arg1 photosArray:(id)arg2 append:(BOOL)arg3 ;
-(id)addPeerProfilePhotos:(long long)arg1 photosArray:(id)arg2 ;
-(void)deletePeerProfilePhotos:(long long)arg1 imageIds:(id)arg2 ;
-(void)checkIfLatestMessageIdIsNotApplied:(/*^block*/id)arg1 ;
-(void)checkIfLatestQtsIsNotApplied:(/*^block*/id)arg1 ;
-(id)loadServerAssetData:(id)arg1 ;
-(void)storeServerAssetData:(id)arg1 attachment:(id)arg2 ;
-(int)currentEncryptionKeyUseCount:(long long)arg1 ;
-(long long)activeEncryptedPeerIdForUserId:(int)arg1 ;
-(void)_filterConversationIdsByMessageLifetime:(map<long long, int, std::less<long long>, std::allocator<std::pair<const long long, int> > >=_Rb_tree<long long, std::pair<const long long, int>, std::_Select1st<std::pair<const long long, int> >, std::less<long long>, std::allocator<std::pair<const long long, int> > >=_Rb_tree_impl<std::less<long long>, false>=less<long long>_Rb_tree_node_base=i_Rb_tree_node_base}_Rb_tree_node_base}_Rb_tree_node_base}}Q}}}Ref)arg1 ;
-(double)messageCountdownLocalTime:(int)arg1 enqueueIfNotQueued:(BOOL)arg2 initiatedCountdown:(BOOL*)arg3 ;
-(void)findAllMediaMessages:(/*^block*/id)arg1 isCancelled:(/*^block*/id)arg2 ;
-(void)updateLastUseDateForMediaType:(int)arg1 mediaId:(long long)arg2 messageId:(int)arg3 ;
-(void)setLastReportedToPeerLayer:(long long)arg1 layer:(unsigned long long)arg2 ;
-(unsigned long long)lastReportedToPeerLayer:(long long)arg1 ;
-(void)loadAllSercretChatPeerIds:(/*^block*/id)arg1 ;
-(id)channelShouldMuteMembers:(long long)arg1 ;
-(void)setChannelShouldMuteMembers:(long long)arg1 value:(BOOL)arg2 ;
-(void)peersWithOutgoingAndIncomingActions:(/*^block*/id)arg1 ;
-(void)enqueuePeerOutgoingAction:(long long)arg1 action:(id)arg2 useSeq:(BOOL)arg3 seqOut:(int*)arg4 seqIn:(int*)arg5 actionId:(int*)arg6 ;
-(void)dequeuePeerOutgoingActions:(long long)arg1 completion:(/*^block*/id)arg2 ;
-(void)deletePeerOutgoingResendActions:(long long)arg1 actionIds:(id)arg2 ;
-(void)enqueuePeerOutgoingResendActions:(long long)arg1 fromSeq:(int)arg2 toSeq:(int)arg3 completion:(/*^block*/id)arg4 ;
-(void)deletePeerOutgoingActions:(long long)arg1 actionIds:(id)arg2 ;
-(void)enqueuePeerIncomingActions:(long long)arg1 actions:(id)arg2 ;
-(void)enqueuePeerIncomingEncryptedActions:(long long)arg1 actions:(id)arg2 ;
-(void)applyPeerSeqOut:(long long)arg1 seqOut:(int)arg2 ;
-(void)setSharedMediaIndexDownloadedForPeerId:(long long)arg1 itemType:(int)arg2 ;
-(void)storeBotInfo:(id)arg1 forUserId:(int)arg2 ;
-(id)signalBotReplyMarkupForPeerId:(long long)arg1 ;
-(void)storeBotReplyMarkupActivated:(id)arg1 forPeerId:(long long)arg2 ;
-(void)storeBotReplyMarkupManuallyHidden:(id)arg1 forPeerId:(long long)arg2 manuallyHidden:(BOOL)arg3 ;
-(void)initializeChannel:(id)arg1 ;
-(void)updateChannelDisplayVariant:(long long)arg1 displayVariant:(int)arg2 ;
-(void)updateChannelDisplayExpanded:(long long)arg1 displayExpanded:(BOOL)arg2 ;
-(void)updateChannelPostAsChannel:(long long)arg1 postAsChannel:(BOOL)arg2 ;
-(void)updateChannelAbout:(long long)arg1 about:(id)arg2 ;
-(void)updateChannelUsername:(long long)arg1 username:(id)arg2 ;
-(void)updateChannelRead:(long long)arg1 maxReadId:(int)arg2 maxReadOutgoingId:(int)arg3 ;
-(void)addTrailingHoleToChannelAndDispatch:(long long)arg1 messages:(id)arg2 pts:(int)arg3 importantUnreadCount:(int)arg4 unimportantUnreadCount:(int)arg5 maxReadId:(int)arg6 ;
-(id)deleteMessagesInChannel:(long long)arg1 fromUserId:(int)arg2 ;
-(void)channelPts:(long long)arg1 completion:(/*^block*/id)arg2 ;
-(void)_addChannelUnimportantMessageGroup:(long long)arg1 maxId:(int)arg2 maxTimestamp:(int)arg3 minId:(int)arg4 minTimestamp:(int)arg5 count:(int)arg6 filled:(BOOL)arg7 addedMessages:(id)arg8 removedMessages:(id)arg9 addedUnimportantHoles:(id)arg10 removedUnimportantHoles:(id)arg11 updatedMessages:(id)arg12 ;
-(void)_deleteMessageFromUnimportantMessageGroup:(long long)arg1 messageId:(int)arg2 removedMessages:(id)arg3 updatedMessages:(id)arg4 ;
-(id)_loadChannelUnimportantGroupsWithMinSortKey:(SCD_Struct_TG78)arg1 maxTransparentSortKey:(SCD_Struct_TG78)arg2 count:(unsigned long long)arg3 ;
-(void)channelMessages:(long long)arg1 maxTransparentSortKey:(SCD_Struct_TG78)arg2 count:(unsigned long long)arg3 important:(BOOL)arg4 mode:(int)arg5 completion:(/*^block*/id)arg6 ;
-(void)channelMessageExists:(long long)arg1 messageId:(int)arg2 completion:(/*^block*/id)arg3 ;
-(void)closestChannelMessageKey:(long long)arg1 messageId:(int)arg2 completion:(/*^block*/id)arg3 ;
-(void)nextChannelIncomingMessageKey:(long long)arg1 messageId:(int)arg2 completion:(/*^block*/id)arg3 ;
-(void)channelEarlierMessage:(long long)arg1 messageId:(int)arg2 timestamp:(int)arg3 important:(BOOL)arg4 completion:(/*^block*/id)arg5 ;
-(BOOL)_channelExists:(long long)arg1 ;
-(id)areChannelsSynchronized;
-(id)channelList;
-(void)enqueueDeleteChannelMessages:(long long)arg1 messageIds:(id)arg2 ;
-(void)enqueueReadChannelHistory:(long long)arg1 ;
-(void)confirmChannelHistoryRead:(id)arg1 ;
-(id)enqueuedReadChannelMessages;
-(id)enqueuedDeleteChannelMessages;
-(void)enqueueLeaveChannel:(long long)arg1 ;
-(void)confirmChannelLeaved:(id)arg1 ;
-(id)enqueuedLeaveChannels;
-(void)updateChannelCachedData:(long long)arg1 block:(/*^block*/id)arg2 ;
-(id)channelCachedData:(long long)arg1 ;
-(id)_userCachedDataSync:(long long)arg1 ;
-(id)modifyChannel:(long long)arg1 block:(/*^block*/id)arg2 ;
-(void)updateHistoryPtsForPeerId:(long long)arg1 pts:(int)arg2 ;
-(id)channelHistoryPtsForPeerId:(long long)arg1 ;
-(id)evaluatedDiskCacheStats;
-(id)evaluatePeerCacheStats:(long long)arg1 ;
-(id)shouldReportSpamForPeerId:(long long)arg1 ;
-(void)hideReportSpamForPeerId:(long long)arg1 ;
-(id)enqueuedDismissReportPeerSpamPeerIds;
-(void)commitDismissReportPeerSpam:(long long)arg1 ;
-(id)cachedRecentPeers;
-(id)_syncCachedRecentInlineBots;
-(void)replaceCachedRecentPeers:(id)arg1 ;
-(void)resetPeerRating:(long long)arg1 category:(int)arg2 ;
-(void)transactionResetPeerReadStates:(id)arg1 ;
-(void)transactionApplyMaxOutgoingReadIds:(id)arg1 ;
-(void)transactionClearConversationsWithPeerIds:(id)arg1 ;
-(void)transactionRemoveConversationsWithPeerIds:(id)arg1 ;
-(void)updatePeerDraftInteractive:(long long)arg1 draft:(id)arg2 ;
-(id)verifySynchronizedDraft:(long long)arg1 draft:(id)arg2 ;
-(id)synchronizePinnedConversationsActionUpdated;
-(void)schedulePullPinnedConversations;
-(void)cacheBotCallbackResponse:(id)arg1 response:(id)arg2 ;
-(id)_cachedBotCallbackResponse:(id)arg1 ;
-(id)messageCleanupBlock;
-(id)cleanupEverythingBlock;
-(double)timeDifferenceFromUTC;
-(void)setIndexDatabasePath:(NSString *)arg1 ;
-(FMDatabase *)indexDatabase;
-(void)setIndexDatabase:(FMDatabase *)arg1 ;
-(FMDatabase *)filesDatabase;
-(void)setFilesDatabase:(FMDatabase *)arg1 ;
-(SCD_Struct_TG72)cachedDatabaseState;
-(void)setCachedDatabaseState:(SCD_Struct_TG72)arg1 ;
-(NSString *)serviceTableName;
-(void)setServiceTableName:(NSString *)arg1 ;
-(NSString *)usersTableName;
-(void)setUsersTableName:(NSString *)arg1 ;
-(NSString *)conversationListTableName;
-(void)setConversationListTableName:(NSString *)arg1 ;
-(NSString *)channelListTableName;
-(void)setChannelListTableName:(NSString *)arg1 ;
-(NSString *)channelCachedDataTableName;
-(void)setChannelCachedDataTableName:(NSString *)arg1 ;
-(NSString *)userCachedDataTableName;
-(void)setUserCachedDataTableName:(NSString *)arg1 ;
-(NSString *)cachedPeerSettingsTableName;
-(void)setCachedPeerSettingsTableName:(NSString *)arg1 ;
-(NSString *)channelPendingMessagesTableName;
-(void)setChannelPendingMessagesTableName:(NSString *)arg1 ;
-(NSString *)channelMessagesTableName;
-(void)setChannelMessagesTableName:(NSString *)arg1 ;
-(NSString *)channelMessageTagsTableName;
-(void)setChannelMessageTagsTableName:(NSString *)arg1 ;
-(NSString *)channelMessagesRandomIdTableName;
-(void)setChannelMessagesRandomIdTableName:(NSString *)arg1 ;
-(NSString *)channelMessageHolesTableName;
-(void)setChannelMessageHolesTableName:(NSString *)arg1 ;
-(NSString *)channelMessageUnimportantHolesTableName;
-(void)setChannelMessageUnimportantHolesTableName:(NSString *)arg1 ;
-(NSString *)channelMessageUnimportantGroupsTableName;
-(void)setChannelMessageUnimportantGroupsTableName:(NSString *)arg1 ;
-(NSString *)channelDeleteMessagesTableName;
-(void)setChannelDeleteMessagesTableName:(NSString *)arg1 ;
-(NSString *)channelLeaveTableName;
-(void)setChannelLeaveTableName:(NSString *)arg1 ;
-(NSString *)channelReadHistoryTableName;
-(void)setChannelReadHistoryTableName:(NSString *)arg1 ;
-(NSString *)dismissReportPeerSpamTableName;
-(void)setDismissReportPeerSpamTableName:(NSString *)arg1 ;
-(NSString *)channelHistoryPtsTableName;
-(void)setChannelHistoryPtsTableName:(NSString *)arg1 ;
-(NSString *)messagesTableName;
-(void)setMessagesTableName:(NSString *)arg1 ;
-(NSString *)conversationMediaTableName;
-(void)setConversationMediaTableName:(NSString *)arg1 ;
-(NSString *)contactListTableName;
-(void)setContactListTableName:(NSString *)arg1 ;
-(NSString *)actionQueueTableName;
-(void)setActionQueueTableName:(NSString *)arg1 ;
-(NSString *)peerPropertiesTableName;
-(void)setPeerPropertiesTableName:(NSString *)arg1 ;
-(NSString *)peerProfilePhotosTableName;
-(void)setPeerProfilePhotosTableName:(NSString *)arg1 ;
-(NSString *)outgoingMessagesTableName;
-(void)setOutgoingMessagesTableName:(NSString *)arg1 ;
-(NSString *)futureActionsTableName;
-(void)setFutureActionsTableName:(NSString *)arg1 ;
-(NSString *)peerHistoryHolesTableName;
-(void)setPeerHistoryHolesTableName:(NSString *)arg1 ;
-(NSString *)validateReadStateTableName;
-(void)setValidateReadStateTableName:(NSString *)arg1 ;
-(NSString *)peerMessageDraftsTable;
-(void)setPeerMessageDraftsTable:(NSString *)arg1 ;
-(NSString *)synchronizePeerMessageDraftsTable;
-(void)setSynchronizePeerMessageDraftsTable:(NSString *)arg1 ;
-(NSString *)pinnedConversationsTable;
-(void)setPinnedConversationsTable:(NSString *)arg1 ;
-(NSString *)assetsTableName;
-(void)setAssetsTableName:(NSString *)arg1 ;
-(NSString *)videosTableName;
-(void)setVideosTableName:(NSString *)arg1 ;
-(NSString *)storedFilesTableName;
-(void)setStoredFilesTableName:(NSString *)arg1 ;
-(NSString *)localFilesTableName;
-(void)setLocalFilesTableName:(NSString *)arg1 ;
-(NSString *)serverAssetsTableName;
-(void)setServerAssetsTableName:(NSString *)arg1 ;
-(NSString *)blockedUsersTableName;
-(void)setBlockedUsersTableName:(NSString *)arg1 ;
-(NSString *)userLinksTableName;
-(void)setUserLinksTableName:(NSString *)arg1 ;
-(NSString *)temporaryMessageIdsTableName;
-(void)setTemporaryMessageIdsTableName:(NSString *)arg1 ;
-(NSString *)randomIdsTableName;
-(void)setRandomIdsTableName:(NSString *)arg1 ;
-(NSString *)selfDestructTableName;
-(void)setSelfDestructTableName:(NSString *)arg1 ;
-(NSString *)encryptedConversationIdsTableName;
-(void)setEncryptedConversationIdsTableName:(NSString *)arg1 ;
-(NSString *)messageIndexTableName;
-(void)setMessageIndexTableName:(NSString *)arg1 ;
-(NSString *)secretMediaAttributesTableName;
-(void)setSecretMediaAttributesTableName:(NSString *)arg1 ;
-(NSString *)mediaCacheInvalidationTableName;
-(void)setMediaCacheInvalidationTableName:(NSString *)arg1 ;
-(NSString *)fileDeletionTableName;
-(void)setFileDeletionTableName:(NSString *)arg1 ;
-(NSString *)secretPeerOutgoingTableName;
-(void)setSecretPeerOutgoingTableName:(NSString *)arg1 ;
-(NSString *)secretPeerOutgoingResendTableName;
-(void)setSecretPeerOutgoingResendTableName:(NSString *)arg1 ;
-(NSString *)secretPeerIncomingTableName;
-(void)setSecretPeerIncomingTableName:(NSString *)arg1 ;
-(NSString *)secretPeerIncomingEncryptedTableName;
-(void)setSecretPeerIncomingEncryptedTableName:(NSString *)arg1 ;
-(NSString *)sharedMediaCacheTableName;
-(void)setSharedMediaCacheTableName:(NSString *)arg1 ;
-(NSString *)sharedMediaIndexBuiltTableName;
-(void)setSharedMediaIndexBuiltTableName:(NSString *)arg1 ;
-(NSString *)sharedMediaIndexDownloadedTableName;
-(void)setSharedMediaIndexDownloadedTableName:(NSString *)arg1 ;
-(NSString *)peerRatingTableName;
-(void)setPeerRatingTableName:(NSString *)arg1 ;
-(NSString *)botInfoTableName;
-(void)setBotInfoTableName:(NSString *)arg1 ;
-(NSString *)webpagesTableName;
-(void)setWebpagesTableName:(NSString *)arg1 ;
-(NSString *)botCallbackCacheTableName;
-(void)setBotCallbackCacheTableName:(NSString *)arg1 ;
-(int)serviceLastCleanTimeKey;
-(void)setServiceLastCleanTimeKey:(int)arg1 ;
-(int)serviceLastMidKey;
-(void)setServiceLastMidKey:(int)arg1 ;
-(int)servicePtsKey;
-(void)setServicePtsKey:(int)arg1 ;
-(int)serviceContactListStateKey;
-(void)setServiceContactListStateKey:(int)arg1 ;
-(int)serviceLatestSynchronizedMidKey;
-(void)setServiceLatestSynchronizedMidKey:(int)arg1 ;
-(int)serviceLatestSynchronizedQtsKey;
-(void)setServiceLatestSynchronizedQtsKey:(int)arg1 ;
-(int)serviceEncryptedConversationCount;
-(void)setServiceEncryptedConversationCount:(int)arg1 ;
-(int)nextLocalMid;
-(void)setNextLocalMid:(int)arg1 ;
-(int)localUserId;
-(BOOL)contactListPreloaded;
-(void)setContactListPreloaded:(BOOL)arg1 ;
-(int)userLinksVersion;
-(void)setUserLinksVersion:(int)arg1 ;
-(TGTimer *)selfDestructTimer;
-(void)setSelfDestructTimer:(TGTimer *)arg1 ;
-(TGTimer *)mediaCleanupTimer;
-(void)setMediaCleanupTimer:(TGTimer *)arg1 ;
-(TGTimer *)deletionTickTimer;
-(void)setDeletionTickTimer:(TGTimer *)arg1 ;
-(TGTimer *)updateMuteTimer;
-(void)setUpdateMuteTimer:(TGTimer *)arg1 ;
-(BOOL)deletionInProgress;
-(void)setDeletionInProgress:(BOOL)arg1 ;
-(TGTimer *)syncRemoteContactUidsTimer;
-(void)setSyncRemoteContactUidsTimer:(TGTimer *)arg1 ;
-(id)init;
-(void)closeDatabase;
-(void)setDatabasePath:(NSString *)arg1 ;
-(void)setPrivacySettings:(TGNotificationPrivacyAccountSetting *)arg1 ;
-(NSString *)databasePath;
-(FMDatabase *)database;
-(void)setUnreadCount:(int)arg1 ;
-(id)databaseQueue;
-(id)documentsPath;
-(void)setDatabase:(FMDatabase *)arg1 ;
-(int)schemaVersion;
-(void)setSchemaVersion:(int)arg1 ;
-(TGNotificationPrivacyAccountSetting *)privacySettings;
@end

