/*
* This header is generated by classdump-dyld 1.0
* on Saturday, December 24, 2016 at 12:46:35 AM Greenwich Mean Time
* Operating System: Version 10.1.1 (Build 14B150)
* Image Source: /var/containers/Bundle/Application/D20B482D-7A4B-420E-BEFA-D4B2B5C94752/Telegram.app/Telegram
* classdump-dyld is licensed under GPLv3, Copyright Â© 2013-2016 by Elias Limneos.
*/

#import <Telegram/MTDiscoverDatacenterAddressActionDelegate.h>
#import <Telegram/MTDatacenterAuthActionDelegate.h>
#import <Telegram/MTDatacenterTransferAuthActionDelegate.h>

@protocol MTKeychain, MTSerialization;
@class NSMutableDictionary, NSMutableArray, MTApiEnvironment, NSString;

@interface MTContext : NSObject <MTDiscoverDatacenterAddressActionDelegate, MTDatacenterAuthActionDelegate, MTDatacenterTransferAuthActionDelegate> {

	long long _uniqueId;
	double _globalTimeDifference;
	NSMutableDictionary* _datacenterSeedAddressSetById;
	NSMutableDictionary* _datacenterAddressSetById;
	NSMutableDictionary* _datacenterGenericTransportSchemeById;
	NSMutableDictionary* _datacenterMediaTransportSchemeById;
	NSMutableDictionary* _datacenterAuthInfoById;
	NSMutableDictionary* _authTokenById;
	NSMutableArray* _changeListeners;
	NSMutableDictionary* _discoverDatacenterAddressActions;
	NSMutableDictionary* _datacenterAuthActions;
	NSMutableDictionary* _datacenterTransferAuthActions;
	NSMutableDictionary* _cleanupSessionIdsByAuthKeyId;
	NSMutableArray* _currentSessionInfos;
	NSMutableDictionary* _periodicTasksTimerByDatacenterId;
	int _passwordEntryRequiredLock;
	NSMutableDictionary* _passwordRequiredByDatacenterId;
	NSMutableDictionary* _transportSchemeDisposableByDatacenterId;
	id<MTKeychain> _keychain;
	id<MTSerialization> _serialization;
	MTApiEnvironment* _apiEnvironment;

}

@property (nonatomic,retain) id<MTKeychain> keychain;                          //@synthesize keychain=_keychain - In the implementation block
@property (nonatomic,readonly) id<MTSerialization> serialization;              //@synthesize serialization=_serialization - In the implementation block
@property (nonatomic,readonly) MTApiEnvironment * apiEnvironment;              //@synthesize apiEnvironment=_apiEnvironment - In the implementation block
@property (readonly) unsigned long long hash; 
@property (readonly) Class superclass; 
@property (copy,readonly) NSString * description; 
@property (copy,readonly) NSString * debugDescription; 
+(id)contextQueue;
-(double)globalTime;
-(void)updateAuthTokenForDatacenterWithId:(long long)arg1 authToken:(id)arg2 ;
-(id)initWithSerialization:(id)arg1 apiEnvironment:(id)arg2 ;
-(void)addChangeListener:(id)arg1 ;
-(void)setSeedAddressSetForDatacenterWithId:(long long)arg1 seedAddressSet:(id)arg2 ;
-(void)setKeychain:(id<MTKeychain>)arg1 ;
-(id)authInfoForDatacenterWithId:(long long)arg1 ;
-(void)authInfoForDatacenterWithIdRequired:(long long)arg1 ;
-(void)transportSchemeForDatacenterWithIdRequired:(long long)arg1 media:(BOOL)arg2 ;
-(double)globalTimeOffsetFromUTC;
-(void)removeAllAuthTokens;
-(id)knownDatacenterIds;
-(void)addAddressForDatacenterWithId:(long long)arg1 address:(id)arg2 ;
-(id)transportSchemeForDatacenterWithid:(long long)arg1 media:(BOOL)arg2 ;
-(void)updateTransportSchemeForDatacenterWithId:(long long)arg1 transportScheme:(id)arg2 media:(BOOL)arg3 ;
-(BOOL)isPasswordInputRequiredForDatacenterWithId:(long long)arg1 ;
-(void)authTokenForDatacenterWithIdRequired:(long long)arg1 authToken:(id)arg2 masterDatacenterId:(long long)arg3 ;
-(BOOL)updatePasswordInputRequiredForDatacenterWithId:(long long)arg1 required:(BOOL)arg2 ;
-(id)addressSetForDatacenterWithId:(long long)arg1 ;
-(void)updateAddressSetForDatacenterWithId:(long long)arg1 addressSet:(id)arg2 ;
-(id<MTKeychain>)keychain;
-(void)updateAuthInfoForDatacenterWithId:(long long)arg1 authInfo:(id)arg2 ;
-(void)datacenterAuthActionCompleted:(id)arg1 ;
-(MTApiEnvironment *)apiEnvironment;
-(id<MTSerialization>)serialization;
-(void)removeChangeListener:(id)arg1 ;
-(id)authTokenForDatacenterWithId:(long long)arg1 ;
-(void)datacenterTransferAuthActionCompleted:(id)arg1 ;
-(void)updatePeriodicTasks;
-(double)globalTimeDifference;
-(id)defaultTransportSchemeForDatacenterWithId:(long long)arg1 media:(BOOL)arg2 ;
-(void)transportSchemeForDatacenterWithIdRequired:(long long)arg1 moreOptimalThan:(id)arg2 beginWithHttp:(BOOL)arg3 media:(BOOL)arg4 ;
-(void)addressSetForDatacenterWithIdRequired:(long long)arg1 ;
-(void)discoverDatacenterAddressActionCompleted:(id)arg1 ;
-(void)setGlobalTimeDifference:(double)arg1 ;
-(void)scheduleSessionCleanupForAuthKeyId:(long long)arg1 sessionInfo:(id)arg2 ;
-(void)collectSessionIdsForCleanupWithAuthKeyId:(long long)arg1 completion:(/*^block*/id)arg2 ;
-(void)sessionIdsDeletedForAuthKeyId:(long long)arg1 sessionIds:(id)arg2 ;
-(void)enumerateAddressSetsForDatacenters:(/*^block*/id)arg1 ;
-(void)invalidateTransportSchemeForDatacenterId:(long long)arg1 transportScheme:(id)arg2 isProbablyHttp:(BOOL)arg3 media:(BOOL)arg4 ;
-(void)revalidateTransportSchemeForDatacenterId:(long long)arg1 transportScheme:(id)arg2 media:(BOOL)arg3 ;
-(void)reportProblemsWithDatacenterAddressForId:(long long)arg1 address:(id)arg2 ;
-(id)init;
-(void)dealloc;
-(void)cleanup;
-(void)performBatchUpdates:(/*^block*/id)arg1 ;
@end

