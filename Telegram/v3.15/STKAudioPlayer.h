/*
* This header is generated by classdump-dyld 1.0
* on Saturday, December 24, 2016 at 12:46:32 AM Greenwich Mean Time
* Operating System: Version 10.1.1 (Build 14B150)
* Image Source: /var/containers/Bundle/Application/D20B482D-7A4B-420E-BEFA-D4B2B5C94752/Telegram.app/Telegram
* classdump-dyld is licensed under GPLv3, Copyright Â© 2013-2016 by Elias Limneos.
*/

#import <Telegram/Telegram-Structs.h>
#import <Telegram/STKDataSourceDelegate.h>

@protocol STKAudioPlayerDelegate;
@class NSMutableArray, STKQueueEntry, NSArray, NSThread, NSRunLoop, NSConditionLock, NSObject, NSString;

@interface STKAudioPlayer : NSObject <STKDataSourceDelegate> {

	BOOL muted;
	char* readBuffer;
	int readBufferSize;
	int internalState;
	float volume;
	float peakPowerDb[2];
	float averagePowerDb[2];
	BOOL meteringEnabled;
	BOOL equalizerOn;
	BOOL equalizerEnabled;
	SCD_Struct_ST25 options;
	NSMutableArray* converterNodes;
	OpaqueAUGraphRef audioGraph;
	int eqNode;
	int mixerNode;
	int outputNode;
	int eqInputNode;
	int eqOutputNode;
	int mixerInputNode;
	int mixerOutputNode;
	OpaqueAudioComponentInstanceRef eqUnit;
	OpaqueAudioComponentInstanceRef mixerUnit;
	OpaqueAudioComponentInstanceRef outputUnit;
	unsigned eqBandCount;
	int waitingForDataAfterSeekFrameCount;
	unsigned framesRequiredToStartPlaying;
	unsigned framesRequiredToPlayAfterRebuffering;
	unsigned framesRequiredBeforeWaitingForDataAfterSeekBecomesPlaying;
	STKQueueEntry* currentlyPlayingEntry;
	STKQueueEntry* currentlyReadingEntry;
	NSMutableArray* upcomingQueue;
	NSMutableArray* bufferingQueue;
	int pcmBufferSpinLock;
	int internalStateLock;
	unsigned pcmBufferTotalFrameCount;
	unsigned pcmBufferFrameStartIndex;
	unsigned pcmBufferUsedFrameCount;
	unsigned pcmBufferFrameSizeInBytes;
	AudioBuffer* pcmAudioBuffer;
	AudioBufferList* pcmAudioBufferList;
	OpaqueAudioConverterRef audioConverterRef;
	AudioStreamBasicDescription audioConverterAudioStreamBasicDescription;
	BOOL deallocating;
	BOOL discontinuous;
	NSArray* frameFilters;
	NSThread* playbackThread;
	NSRunLoop* playbackThreadRunLoop;
	OpaqueAudioFileStreamIDRef audioFileStream;
	NSConditionLock* threadStartedLock;
	NSConditionLock* threadFinishedCondLock;
	/*^block*/id stopBackBackgroundTaskBlock;
	int seekVersion;
	int seekLock;
	int currentEntryReferencesLock;
	opaque_pthread_mutex_t playerMutex;
	opaque_pthread_cond_t playerThreadReadyCondition;
	opaque_pthread_mutex_t mainThreadSyncCallMutex;
	opaque_pthread_cond_t mainThreadSyncCallReadyCondition;
	BOOL waiting;
	double requestedSeekTime;
	BOOL disposeWasRequested;
	BOOL seekToTimeWasRequested;
	int stopReason;
	int _state;
	int _stateBeforePaused;
	id<STKAudioPlayerDelegate> _delegate;

}

@property (assign) int internalState; 
@property (assign) int stateBeforePaused;                                        //@synthesize stateBeforePaused=_stateBeforePaused - In the implementation block
@property (assign) float volume; 
@property (assign) BOOL muted; 
@property (readonly) double duration; 
@property (readonly) double progress; 
@property (assign) BOOL meteringEnabled; 
@property (assign) BOOL equalizerEnabled; 
@property (readonly) NSArray * frameFilters; 
@property (readonly) NSArray * pendingQueue; 
@property (readonly) unsigned long long pendingQueueCount; 
@property (readonly) NSObject * mostRecentlyQueuedStillPendingItem; 
@property (assign) int state;                                                    //@synthesize state=_state - In the implementation block
@property (readonly) SCD_Struct_ST25 options; 
@property (readonly) int stopReason; 
@property (assign) id<STKAudioPlayerDelegate> delegate;                          //@synthesize delegate=_delegate - In the implementation block
@property (readonly) unsigned long long hash; 
@property (readonly) Class superclass; 
@property (copy,readonly) NSString * description; 
@property (copy,readonly) NSString * debugDescription; 
+(id)dataSourceFromURL:(id)arg1 ;
+(void)initialize;
-(void)setInternalState:(int)arg1 ifInState:(/*^block*/id)arg2 ;
-(void)setInternalState:(int)arg1 ;
-(void)resetPcmBuffers;
-(void)createAudioGraph;
-(void)createPlaybackThread;
-(void)stopAudioUnitWithReason:(int)arg1 ;
-(void)destroyAudioResources;
-(void)playbackThreadQueueMainThreadSyncBlock:(/*^block*/id)arg1 ;
-(void)play:(id)arg1 withQueueItemID:(id)arg2 ;
-(void)setDataSource:(id)arg1 withQueueItemId:(id)arg2 ;
-(void)playURL:(id)arg1 withQueueItemID:(id)arg2 ;
-(void)playDataSource:(id)arg1 withQueueItemID:(id)arg2 ;
-(BOOL)audioGraphIsRunning;
-(void)startSystemBackgroundTask;
-(void)wakeupPlaybackThread;
-(void)queueURL:(id)arg1 withQueueItemId:(id)arg2 ;
-(void)queueDataSource:(id)arg1 withQueueItemId:(id)arg2 ;
-(void)createAudioConverter:(AudioStreamBasicDescription*)arg1 ;
-(int)internalState;
-(BOOL)processRunloop;
-(BOOL)invokeOnPlaybackThread:(/*^block*/id)arg1 ;
-(void)processFinishPlayingIfAnyAndPlayingNext:(id)arg1 withNext:(id)arg2 ;
-(void)setCurrentlyReadingEntry:(id)arg1 andStartPlaying:(BOOL)arg2 clearQueue:(BOOL)arg3 ;
-(BOOL)startAudioGraph;
-(void)dispatchSyncOnMainThread:(/*^block*/id)arg1 ;
-(void)setCurrentlyReadingEntry:(id)arg1 andStartPlaying:(BOOL)arg2 ;
-(void)requeueBufferingEntries;
-(void)processSeekToTime;
-(void)unexpectedError:(int)arg1 ;
-(void)setStateBeforePaused:(int)arg1 ;
-(int)stateBeforePaused;
-(void)stopThread;
-(void)destroyAudioConverter;
-(int)createConverterNode:(AudioStreamBasicDescription)arg1 desFormat:(AudioStreamBasicDescription)arg2 ;
-(void)createEqUnit;
-(void)createMixerUnit;
-(void)createOutputUnit;
-(void)connectGraph;
-(void)setOutputCallbackForFirstNode:(int)arg1 firstUnit:(OpaqueAudioComponentInstanceRef)arg2 ;
-(void)connectNodes:(int)arg1 desNode:(int)arg2 srcUnit:(OpaqueAudioComponentInstanceRef)arg3 desUnit:(OpaqueAudioComponentInstanceRef)arg4 ;
-(void)stopSystemBackgroundTask;
-(void)removeFrameFilterWithName:(id)arg1 ;
-(void)appendFrameFilterWithName:(id)arg1 block:(/*^block*/id)arg2 ;
-(void)addFrameFilterWithName:(id)arg1 afterFilterWithName:(id)arg2 block:(/*^block*/id)arg3 ;
-(void)dataSourceDataAvailable:(id)arg1 ;
-(void)dataSourceErrorOccured:(id)arg1 ;
-(void)dataSourceEof:(id)arg1 ;
-(int)stopReason;
-(void)playURL:(id)arg1 ;
-(void)playDataSource:(id)arg1 ;
-(void)queue:(id)arg1 ;
-(void)queue:(id)arg1 withQueueItemId:(id)arg2 ;
-(void)queueURL:(id)arg1 ;
-(void)handlePropertyChangeForFileStream:(OpaqueAudioFileStreamIDRef)arg1 fileStreamPropertyID:(unsigned)arg2 ioFlags:(unsigned*)arg3 ;
-(double)currentTimeInFrames;
-(void)audioQueueFinishedPlaying:(id)arg1 ;
-(id)currentlyPlayingQueueItemId;
-(void)setGain:(float)arg1 forEqualizerBand:(int)arg2 ;
-(void)handleAudioPackets:(const void*)arg1 numberBytes:(unsigned)arg2 numberPackets:(unsigned)arg3 packetDescriptions:(AudioStreamPacketDescription*)arg4 ;
-(unsigned long long)pendingQueueCount;
-(NSObject *)mostRecentlyQueuedStillPendingItem;
-(float)peakPowerInDecibelsForChannel:(unsigned long long)arg1 ;
-(float)averagePowerInDecibelsForChannel:(unsigned long long)arg1 ;
-(BOOL)meteringEnabled;
-(NSArray *)frameFilters;
-(void)addFrameFilter:(/*^block*/id)arg1 withName:(id)arg2 afterFilterWithName:(id)arg3 ;
-(BOOL)equalizerEnabled;
-(void)setEqualizerEnabled:(BOOL)arg1 ;
-(id)init;
-(void)setDelegate:(id<STKAudioPlayerDelegate>)arg1 ;
-(void)dealloc;
-(id<STKAudioPlayerDelegate>)delegate;
-(int)state;
-(double)duration;
-(void)setState:(int)arg1 ;
-(void)stop;
-(SCD_Struct_ST25)options;
-(float)volume;
-(void)setVolume:(float)arg1 ;
-(id)initWithOptions:(SCD_Struct_ST25)arg1 ;
-(void)resume;
-(double)progress;
-(void)pause;
-(BOOL)muted;
-(void)startInternal;
-(NSArray *)pendingQueue;
-(void)setMuted:(BOOL)arg1 ;
-(void)dispose;
-(void)unmute;
-(void)setMeteringEnabled:(BOOL)arg1 ;
-(void)seekToTime:(double)arg1 ;
-(void)clearQueue;
-(void)logInfo:(id)arg1 ;
-(void)mute;
-(void)play:(id)arg1 ;
@end

