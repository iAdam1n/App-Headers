/*
* This header is generated by classdump-dyld 1.0
* on Friday, August 26, 2016 at 5:53:39 PM British Summer Time
* Operating System: Version 9.3.3 (Build 13G34)
* Image Source: /var/containers/Bundle/Application/D5AA3D7F-F68B-43D8-8CC1-85DAFE886350/Telegram.app/Telegram
* classdump-dyld is licensed under GPLv3, Copyright Â© 2013-2016 by Elias Limneos.
*/

#import <Telegram/Telegram-Structs.h>
#import <Telegram/GPUImageOutput.h>
#import <Telegram/GPUImageInput.h>

@protocol OS_dispatch_semaphore;
@class GPUImageFramebuffer, GLProgram, NSMutableDictionary, NSObject, NSString;

@interface GPUImageFilter : GPUImageOutput <GPUImageInput> {

	GPUImageFramebuffer* firstInputFramebuffer;
	GLProgram* filterProgram;
	int filterPositionAttribute;
	int filterTextureCoordinateAttribute;
	int filterInputTextureUniform;
	float backgroundColorRed;
	float backgroundColorGreen;
	float backgroundColorBlue;
	float backgroundColorAlpha;
	BOOL isEndProcessing;
	CGSize currentFilterSize;
	int inputRotation;
	BOOL currentlyReceivingMonochromeInput;
	NSMutableDictionary* uniformStateRestorationBlocks;
	NSObject*<OS_dispatch_semaphore> imageCaptureSemaphore;
	BOOL _preventRendering;
	CVBufferRef _renderTarget;

}

@property (nonatomic,readonly) GLProgram * program; 
@property (nonatomic,readonly) CVBufferRef renderTarget;                          //@synthesize renderTarget=_renderTarget - In the implementation block
@property (assign,nonatomic) BOOL preventRendering;                               //@synthesize preventRendering=_preventRendering - In the implementation block
@property (assign,nonatomic) BOOL currentlyReceivingMonochromeInput; 
@property (readonly) unsigned long long hash; 
@property (readonly) Class superclass; 
@property (copy,readonly) NSString * description; 
@property (copy,readonly) NSString * debugDescription; 
+(const float*)textureCoordinatesForRotation:(int)arg1 ;
-(void)newFrameReadyAtTime:(SCD_Struct_PG102)arg1 atIndex:(long long)arg2 ;
-(void)setInputFramebuffer:(id)arg1 atIndex:(long long)arg2 ;
-(long long)nextAvailableTextureIndex;
-(void)setInputSize:(CGSize)arg1 atIndex:(long long)arg2 ;
-(void)setInputRotation:(int)arg1 atIndex:(long long)arg2 ;
-(CGSize)maximumOutputSize;
-(void)endProcessing;
-(BOOL)wantsMonochromeInput;
-(void)setCurrentlyReceivingMonochromeInput:(BOOL)arg1 ;
-(void)setBackgroundColorRed:(float)arg1 green:(float)arg2 blue:(float)arg3 alpha:(float)arg4 ;
-(void)setFloat:(float)arg1 forUniform:(int)arg2 program:(id)arg3 ;
-(void)setFloatArray:(float*)arg1 length:(int)arg2 forUniform:(int)arg3 program:(id)arg4 ;
-(void)setVec3:(GPUVector3)arg1 forUniform:(int)arg2 program:(id)arg3 ;
-(void)useNextFrameForImageCapture;
-(id)initWithFragmentShaderFromString:(id)arg1 ;
-(int)uniformIndexForName:(id)arg1 ;
-(id)initWithVertexShaderFromString:(id)arg1 fragmentShaderFromString:(id)arg2 ;
-(CGSize)sizeOfFBO;
-(void)setupFilterForSize:(CGSize)arg1 ;
-(void)initializeAttributes;
-(BOOL)preventRendering;
-(void)setUniformsForProgramAtIndex:(unsigned long long)arg1 ;
-(void)renderToTextureWithVertices:(const float*)arg1 textureCoordinates:(const float*)arg2 ;
-(void)setAndExecuteUniformStateCallbackAtIndex:(int)arg1 forProgram:(id)arg2 toBlock:(/*^block*/id)arg3 ;
-(CGImageRef)newCGImageFromCurrentlyProcessedOutput;
-(void)forceProcessingAtSize:(CGSize)arg1 ;
-(void)forceProcessingAtSizeRespectingAspectRatio:(CGSize)arg1 ;
-(void)setFloat:(float)arg1 forUniformName:(id)arg2 ;
-(void)setPoint:(CGPoint)arg1 forUniformName:(id)arg2 ;
-(CGSize)rotatedSize:(CGSize)arg1 forIndex:(long long)arg2 ;
-(CGSize)outputFrameSize;
-(void)setInteger:(int)arg1 forUniform:(int)arg2 program:(id)arg3 ;
-(void)setSize:(CGSize)arg1 forUniform:(int)arg2 program:(id)arg3 ;
-(void)setPoint:(CGPoint)arg1 forUniform:(int)arg2 program:(id)arg3 ;
-(void)setVec4:(GPUVector4)arg1 forUniform:(int)arg2 program:(id)arg3 ;
-(void)informTargetsAboutNewFrameAtTime:(SCD_Struct_PG102)arg1 ;
-(id)initWithFragmentShaderFromFile:(id)arg1 ;
-(void)setInteger:(int)arg1 forUniformName:(id)arg2 ;
-(void)setSize:(CGSize)arg1 forUniformName:(id)arg2 ;
-(void)setFloatVec3:(GPUVector3)arg1 forUniformName:(id)arg2 ;
-(void)setFloatVec4:(GPUVector4)arg1 forUniform:(id)arg2 ;
-(void)setFloatArray:(float*)arg1 length:(int)arg2 forUniform:(id)arg3 ;
-(void)setMatrix3f:(GPUMatrix3x3)arg1 forUniform:(int)arg2 program:(id)arg3 ;
-(void)setMatrix4f:(GPUMatrix4x4)arg1 forUniform:(int)arg2 program:(id)arg3 ;
-(CGPoint)rotatedPoint:(CGPoint)arg1 forRotation:(int)arg2 ;
-(void)setPreventRendering:(BOOL)arg1 ;
-(BOOL)currentlyReceivingMonochromeInput;
-(void)dealloc;
-(id)init;
-(CVBufferRef)renderTarget;
-(GLProgram *)program;
@end

