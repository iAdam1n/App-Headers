/*
* This header is generated by classdump-dyld 1.0
* on Friday, August 26, 2016 at 5:53:39 PM British Summer Time
* Operating System: Version 9.3.3 (Build 13G34)
* Image Source: /var/containers/Bundle/Application/D5AA3D7F-F68B-43D8-8CC1-85DAFE886350/Telegram.app/Telegram
* classdump-dyld is licensed under GPLv3, Copyright Â© 2013-2016 by Elias Limneos.
*/

#import <Telegram/MTContextChangeListener.h>
#import <Telegram/MTTransportDelegate.h>
#import <Telegram/MTTimeSyncMessageServiceDelegate.h>
#import <Telegram/MTResendMessageServiceDelegate.h>

@protocol MTProtoDelegate;
@class NSMutableArray, MTDatacenterAuthInfo, MTSessionInfo, MTTimeFixContext, MTTransportScheme, MTTransport, MTContext, NSString;

@interface MTProto : NSObject <MTContextChangeListener, MTTransportDelegate, MTTimeSyncMessageServiceDelegate, MTResendMessageServiceDelegate> {

	NSMutableArray* _messageServices;
	MTDatacenterAuthInfo* _authInfo;
	MTSessionInfo* _sessionInfo;
	MTTimeFixContext* _timeFixContext;
	MTTransportScheme* _transportScheme;
	MTTransport* _transport;
	int _mtState;
	BOOL _willRequestTransactionOnNextQueuePass;
	BOOL _shouldStayConnected;
	BOOL _useUnauthorizedMode;
	BOOL _media;
	id<MTProtoDelegate> _delegate;
	MTContext* _context;
	long long _datacenterId;
	id _requiredAuthToken;
	long long _authTokenMasterDatacenterId;

}

@property (assign,nonatomic,__weak) id<MTProtoDelegate> delegate;                //@synthesize delegate=_delegate - In the implementation block
@property (nonatomic,retain) MTContext * context;                                //@synthesize context=_context - In the implementation block
@property (assign,nonatomic) long long datacenterId;                             //@synthesize datacenterId=_datacenterId - In the implementation block
@property (assign,nonatomic) BOOL shouldStayConnected;                           //@synthesize shouldStayConnected=_shouldStayConnected - In the implementation block
@property (assign,nonatomic) BOOL useUnauthorizedMode;                           //@synthesize useUnauthorizedMode=_useUnauthorizedMode - In the implementation block
@property (assign,nonatomic) BOOL media;                                         //@synthesize media=_media - In the implementation block
@property (nonatomic,retain) id requiredAuthToken;                               //@synthesize requiredAuthToken=_requiredAuthToken - In the implementation block
@property (assign,nonatomic) long long authTokenMasterDatacenterId;              //@synthesize authTokenMasterDatacenterId=_authTokenMasterDatacenterId - In the implementation block
@property (readonly) unsigned long long hash; 
@property (readonly) Class superclass; 
@property (copy,readonly) NSString * description; 
@property (copy,readonly) NSString * debugDescription; 
+(id)managerQueue;
-(long long)datacenterId;
-(void)removeMessageService:(id)arg1 ;
-(id)initWithContext:(id)arg1 datacenterId:(long long)arg2 ;
-(void)addMessageService:(id)arg1 ;
-(void)resetSessionInfo;
-(void)contextDatacenterAuthInfoUpdated:(id)arg1 datacenterId:(long long)arg2 authInfo:(id)arg3 ;
-(void)contextDatacenterAuthTokenUpdated:(id)arg1 datacenterId:(long long)arg2 authToken:(id)arg3 ;
-(void)contextDatacenterTransportSchemeUpdated:(id)arg1 datacenterId:(long long)arg2 transportScheme:(id)arg3 media:(BOOL)arg4 ;
-(void)setDatacenterId:(long long)arg1 ;
-(void)setRequiredAuthToken:(id)arg1 ;
-(void)setAuthTokenMasterDatacenterId:(long long)arg1 ;
-(void)requestTransportTransaction;
-(id)requiredAuthToken;
-(long long)authTokenMasterDatacenterId;
-(void)requestTimeResync;
-(id)messageServiceQueue;
-(id)parseMessage:(id)arg1 ;
-(void)requestSecureTransportReset;
-(void)transportHasIncomingData:(id)arg1 data:(id)arg2 transactionId:(id)arg3 requestTransactionAfterProcessing:(BOOL)arg4 decodeResult:(/*^block*/id)arg5 ;
-(void)transportNetworkAvailabilityChanged:(id)arg1 isNetworkAvailable:(BOOL)arg2 ;
-(void)transportConnectionStateChanged:(id)arg1 isConnected:(BOOL)arg2 ;
-(void)transportConnectionContextUpdateStateChanged:(id)arg1 isUpdatingConnectionContext:(BOOL)arg2 ;
-(void)transportTransactionsMayHaveFailed:(id)arg1 transactionIds:(id)arg2 ;
-(void)transportConnectionProblemsStatusChanged:(id)arg1 hasConnectionProblems:(BOOL)arg2 isProbablyHttp:(BOOL)arg3 ;
-(void)transportReceivedQuickAck:(id)arg1 quickAckId:(int)arg2 ;
-(void)transportDecodeProgressToken:(id)arg1 data:(id)arg2 token:(long long)arg3 completion:(/*^block*/id)arg4 ;
-(void)transportUpdatedDataReceiveProgress:(id)arg1 progressToken:(id)arg2 packetLength:(long long)arg3 progress:(float)arg4 ;
-(void)transportReadyForTransaction:(id)arg1 transportSpecificTransaction:(id)arg2 forceConfirmations:(BOOL)arg3 transactionReady:(/*^block*/id)arg4 ;
-(void)setUseUnauthorizedMode:(BOOL)arg1 ;
-(void)timeSyncServiceCompleted:(id)arg1 timeDifference:(double)arg2 saltList:(id)arg3 ;
-(void)setMtState:(int)arg1 ;
-(void)resetTransport;
-(void)allTransactionsMayHaveFailed;
-(BOOL)canAskForTransactions;
-(id)outgoingMessageDescription:(id)arg1 messageId:(long long)arg2 messageSeqNo:(int)arg3 ;
-(void)initiateTimeSync;
-(id)_dataForEncryptedMessage:(id)arg1 sessionInfo:(id)arg2 quickAckId:(int*)arg3 ;
-(id)_dataForEncryptedContainerWithMessages:(id)arg1 sessionInfo:(id)arg2 quickAckId:(int*)arg3 ;
-(id)_dataForPlainMessage:(id)arg1 ;
-(BOOL)timeFixOrSaltsMissing;
-(BOOL)canAskForServiceTransactions;
-(void)findReqMsgId:(id)arg1 signature:(int)arg2 reqMsgId:(long long*)arg3 failed:(BOOL*)arg4 ;
-(id)_decryptIncomingTransportData:(id)arg1 ;
-(id)_parseIncomingMessages:(id)arg1 dataMessageId:(out long long*)arg2 parseError:(out BOOL*)arg3 ;
-(void)transportTransactionsSucceeded:(id)arg1 ;
-(void)_processIncomingMessage:(id)arg1 withTransactionId:(id)arg2 ;
-(id)incomingMessageDescription:(id)arg1 ;
-(void)completeTimeSync;
-(void)timeSyncInfoChanged:(double)arg1 saltList:(id)arg2 ;
-(void)requestMessageWithId:(long long)arg1 ;
-(BOOL)shouldStayConnected;
-(void)setShouldStayConnected:(BOOL)arg1 ;
-(BOOL)useUnauthorizedMode;
-(void)resendMessageServiceCompleted:(id)arg1 ;
-(void)_messageResendRequestFailed:(long long)arg1 ;
-(BOOL)isStopped;
-(void)setDelegate:(id<MTProtoDelegate>)arg1 ;
-(void)dealloc;
-(id<MTProtoDelegate>)delegate;
-(void)stop;
-(MTContext *)context;
-(void)resume;
-(void)setContext:(MTContext *)arg1 ;
-(void)pause;
-(BOOL)isPaused;
-(BOOL)media;
-(void)setMedia:(BOOL)arg1 ;
-(void)setTransport:(id)arg1 ;
-(void)updateConnectionState;
@end

