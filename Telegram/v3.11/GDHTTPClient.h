/*
* This header is generated by classdump-dyld 1.0
* on Friday, August 26, 2016 at 5:53:39 PM British Summer Time
* Operating System: Version 9.3.3 (Build 13G34)
* Image Source: /var/containers/Bundle/Application/D5AA3D7F-F68B-43D8-8CC1-85DAFE886350/Telegram.app/Telegram
* classdump-dyld is licensed under GPLv3, Copyright Â© 2013-2016 by Elias Limneos.
*/

#import <Telegram/AFHTTPClient.h>
#import <Telegram/GDClient.h>

@protocol OS_dispatch_queue;
@class GDClientManager, GDClientCredential, NSObject, NSString, GDAPIToken;

@interface GDHTTPClient : AFHTTPClient <GDClient> {

	BOOL available;
	BOOL _requestsIgnoreCacheByDefault;
	GDClientManager* _clientManager;
	GDClientCredential* _credential;
	NSObject*<OS_dispatch_queue> _isolationQueue;
	NSObject*<OS_dispatch_queue> _workQueue;

}

@property (nonatomic,retain) NSObject*<OS_dispatch_queue> isolationQueue;              //@synthesize isolationQueue=_isolationQueue - In the implementation block
@property (nonatomic,retain) NSObject*<OS_dispatch_queue> workQueue;                   //@synthesize workQueue=_workQueue - In the implementation block
@property (nonatomic,readonly) GDClientManager * clientManager;                        //@synthesize clientManager=_clientManager - In the implementation block
@property (nonatomic,copy,readonly) NSString * userID; 
@property (retain) GDClientCredential * credential;                                    //@synthesize credential=_credential - In the implementation block
@property (nonatomic,readonly) GDAPIToken * apiToken; 
@property (assign,nonatomic) BOOL requestsIgnoreCacheByDefault;                        //@synthesize requestsIgnoreCacheByDefault=_requestsIgnoreCacheByDefault - In the implementation block
@property (readonly) unsigned long long hash; 
@property (readonly) Class superclass; 
@property (copy,readonly) NSString * description; 
@property (copy,readonly) NSString * debugDescription; 
@property (getter=isAvailable,nonatomic,readonly) BOOL available; 
-(id)requestWithMethod:(id)arg1 path:(id)arg2 parameters:(id)arg3 ;
-(void)enqueueHTTPRequestOperation:(id)arg1 ;
-(void)getAccessTokenWithSuccess:(/*^block*/id)arg1 failure:(/*^block*/id)arg2 ;
-(BOOL)authorizeRequest:(id)arg1 ;
-(GDClientManager *)clientManager;
-(id)httpErrorWithErrorDomain:(id)arg1 fromAFNetworkingError:(id)arg2 errorDetails:(id)arg3 ;
-(BOOL)isAuthenticationFailureError:(id)arg1 ;
-(id)initWithClientManager:(id)arg1 ;
-(id)initWithClientManager:(id)arg1 credential:(id)arg2 ;
-(id)initWithClientManager:(id)arg1 credential:(id)arg2 baseURL:(id)arg3 ;
-(id)initWithClientManager:(id)arg1 userID:(id)arg2 ;
-(void)setRequestsIgnoreCacheByDefault:(BOOL)arg1 ;
-(BOOL)requestsIgnoreCacheByDefault;
-(id)enqueueOperationWithURLRequest:(id)arg1 requiresAuthentication:(BOOL)arg2 shouldRetryBlock:(/*^block*/id)arg3 success:(/*^block*/id)arg4 failure:(/*^block*/id)arg5 configureOperationBlock:(/*^block*/id)arg6 ;
-(id)enqueueOperationWithURLRequest:(id)arg1 requiresAuthentication:(BOOL)arg2 success:(/*^block*/id)arg3 failure:(/*^block*/id)arg4 ;
-(id)httpErrorWithErrorDomain:(id)arg1 fromAFNetworkingError:(id)arg2 ;
-(GDClientCredential *)credential;
-(void)setIsolationQueue:(NSObject*<OS_dispatch_queue>)arg1 ;
-(NSObject*<OS_dispatch_queue>)isolationQueue;
-(BOOL)isAvailable;
-(id)initWithBaseURL:(id)arg1 ;
-(void)setCredential:(GDClientCredential *)arg1 ;
-(GDAPIToken *)apiToken;
-(void)setWorkQueue:(NSObject*<OS_dispatch_queue>)arg1 ;
-(NSObject*<OS_dispatch_queue>)workQueue;
-(NSString *)userID;
@end

