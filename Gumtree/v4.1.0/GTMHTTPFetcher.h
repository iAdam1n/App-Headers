/*
* This header is generated by classdump-dyld 0.7
* on Thursday, November 19, 2015 at 5:05:13 PM Greenwich Mean Time
* Operating System: Version 9.0.2 (Build 13A452)
* Image Source: /private/var/mobile/Containers/Bundle/Application/BE5DA1E5-E5C1-4952-A4BE-28BA22319130/Gumtree.app/Gumtree
* classdump-dyld is licensed under GPLv3, Copyright Â© 2013-2014 by Elias Limneos.
*/


@protocol GTMHTTPFetchHistoryProtocol, GTMCookieStorageProtocol, GTMFetcherAuthorizationProtocol, GTMHTTPFetcherServiceProtocol;
#import <Gumtree/Gumtree-Structs.h>
@class NSMutableURLRequest, NSURLConnection, NSMutableData, NSString, NSFileHandle, NSArray, NSURLCredential, NSData, NSInputStream, NSURLResponse, NSMutableDictionary, NSOperationQueue, NSThread, NSTimer, NSDate, NSURL, NSDictionary;

@interface GTMHTTPFetcher : NSObject {

	NSMutableURLRequest* request_;
	NSURLConnection* connection_;
	NSMutableData* downloadedData_;
	NSString* downloadPath_;
	NSString* temporaryDownloadPath_;
	NSFileHandle* downloadFileHandle_;
	unsigned long long downloadedLength_;
	NSArray* allowedInsecureSchemes_;
	BOOL allowLocalhostRequest_;
	NSURLCredential* credential_;
	NSURLCredential* proxyCredential_;
	NSData* postData_;
	NSInputStream* postStream_;
	NSMutableData* loggedStreamData_;
	NSURLResponse* response_;
	id delegate_;
	SEL finishedSel_;
	SEL sentDataSel_;
	SEL receivedDataSel_;
	/*^block*/id completionBlock_;
	/*^block*/id receivedDataBlock_;
	/*^block*/id sentDataBlock_;
	/*^block*/id retryBlock_;
	BOOL hasConnectionEnded_;
	BOOL isCancellingChallenge_;
	BOOL isStopNotificationNeeded_;
	BOOL shouldFetchInBackground_;
	unsigned long long backgroundTaskIdentifer_;
	id userData_;
	NSMutableDictionary* properties_;
	NSArray* runLoopModes_;
	NSOperationQueue* delegateQueue_;
	id<GTMHTTPFetchHistoryProtocol> fetchHistory_;
	long long cookieStorageMethod_;
	id<GTMCookieStorageProtocol> cookieStorage_;
	id<GTMFetcherAuthorizationProtocol> authorizer_;
	id<GTMHTTPFetcherServiceProtocol> service_;
	NSString* serviceHost_;
	long long servicePriority_;
	NSThread* thread_;
	BOOL isRetryEnabled_;
	SEL retrySel_;
	NSTimer* retryTimer_;
	unsigned long long retryCount_;
	double maxRetryInterval_;
	double minRetryInterval_;
	double retryFactor_;
	double lastRetryInterval_;
	NSDate* initialRequestDate_;
	BOOL hasAttemptedAuthRefresh_;
	NSString* comment_;
	NSString* log_;
	NSURL* redirectedFromURL_;
	NSString* logRequestBody_;
	NSString* logResponseBody_;
	BOOL hasLoggedError_;
	BOOL shouldDeferResponseBodyLogging_;

}

@property (retain) NSMutableURLRequest * mutableRequest; 
@property (copy) NSArray * allowedInsecureSchemes; 
@property (assign) BOOL allowLocalhostRequest; 
@property (retain) NSURLCredential * credential; 
@property (retain) NSURLCredential * proxyCredential; 
@property (retain) NSData * postData; 
@property (retain) NSInputStream * postStream; 
@property (assign) long long cookieStorageMethod; 
@property (retain) id<GTMFetcherAuthorizationProtocol> authorizer; 
@property (retain) id<GTMHTTPFetcherServiceProtocol> service; 
@property (copy) NSString * serviceHost; 
@property (assign) long long servicePriority; 
@property (retain) NSThread * thread; 
@property (retain) id delegate; 
@property (assign) BOOL shouldFetchInBackground; 
@property (assign) SEL sentDataSelector; 
@property (assign) SEL receivedDataSelector; 
@property (copy) id sentDataBlock; 
@property (copy) id receivedDataBlock; 
@property (getter=isRetryEnabled) BOOL retryEnabled; 
@property (assign) SEL retrySelector; 
@property (copy) id retryBlock; 
@property (assign) double maxRetryInterval; 
@property (assign) double minRetryInterval; 
@property (assign) double retryFactor; 
@property (readonly) unsigned long long retryCount; 
@property (readonly) double nextRetryInterval; 
@property (readonly) long long statusCode; 
@property (retain,readonly) NSDictionary * responseHeaders; 
@property (retain) NSURLResponse * response; 
@property (readonly) unsigned long long downloadedLength; 
@property (retain) NSData * downloadedData; 
@property (copy) NSString * downloadPath; 
@property (retain) NSFileHandle * downloadFileHandle; 
@property (retain) id<GTMHTTPFetchHistoryProtocol> fetchHistory; 
@property (retain) id userData; 
@property (copy) NSMutableDictionary * properties; 
@property (copy) NSString * comment; 
@property (copy) NSString * log; 
@property (retain) NSOperationQueue * delegateQueue; 
@property (retain) NSArray * runLoopModes; 
@property (retain) NSData * bodyData; 
@property (copy) NSString * temporaryDownloadPath; 
@property (retain) id<GTMCookieStorageProtocol> cookieStorage; 
@property (copy) id completionBlock; 
+(id)gpp_sharedCache;
+(BOOL)removeItemAtPath:(id)arg1 ;
+(BOOL)fileOrDirExistsAtPath:(id)arg1 ;
+(BOOL)makeDirectoryUpToPath:(id)arg1 ;
+(id)JSONObjectWithData:(id)arg1 ;
+(id)stringWithJSONObject:(id)arg1 ;
+(id)snipSubstringOfString:(id)arg1 betweenStartString:(id)arg2 endString:(id)arg3 ;
+(id)headersStringForDictionary:(id)arg1 ;
+(BOOL)createSymbolicLinkAtPath:(id)arg1 withDestinationPath:(id)arg2 ;
+(id)loggingProcessName;
+(id)loggingDirectory;
+(id)loggingDateStamp;
+(id)processNameLogPrefix;
+(id)htmlFileName;
+(id)symlinkNameSuffix;
+(void)setLoggingDirectory:(id)arg1 ;
+(void)setLoggingToFileEnabled:(BOOL)arg1 ;
+(BOOL)isLoggingToFileEnabled;
+(void)setLoggingProcessName:(id)arg1 ;
+(void)setLoggingDateStamp:(id)arg1 ;
+(BOOL)isLoggingEnabled;
+(void)setLoggingEnabled:(BOOL)arg1 ;
+(id)fetcherWithRequest:(id)arg1 ;
+(BOOL)doesSupportSentDataCallback;
+(id)fetcherWithURL:(id)arg1 ;
+(id)fetcherWithURLString:(id)arg1 ;
+(id)staticCookieStorage;
+(void)setConnectionClass:(Class)arg1 ;
+(void)initialize;
+(Class)connectionClass;
-(void)gpp_fetchFromCache:(/*^block*/id)arg1 ;
-(void)inputStream:(id)arg1 readIntoBuffer:(void*)arg2 length:(unsigned long long)arg3 ;
-(void)setupStreamLogging;
-(void)logFetchWithError:(id)arg1 ;
-(BOOL)logCapturePostStream;
-(id)formattedStringFromData:(id)arg1 contentType:(id)arg2 JSON:(id*)arg3 ;
-(id)stringFromStreamData:(id)arg1 contentType:(id)arg2 ;
-(void)setLogRequestBody:(id)arg1 ;
-(id)logRequestBody;
-(void)setLogResponseBody:(id)arg1 ;
-(id)logResponseBody;
-(void)setShouldDeferResponseBodyLogging:(BOOL)arg1 ;
-(BOOL)shouldDeferResponseBodyLogging;
-(id)ticket;
-(SEL)retrySelector;
-(void)setAllowLocalhostRequest:(BOOL)arg1 ;
-(void)setAllowedInsecureSchemes:(NSArray *)arg1 ;
-(long long)cookieStorageMethod;
-(void)setCookieStorageMethod:(long long)arg1 ;
-(void)setAuthorizer:(id<GTMFetcherAuthorizationProtocol>)arg1 ;
-(BOOL)isRetryEnabled;
-(void)setRetryEnabled:(BOOL)arg1 ;
-(double)maxRetryInterval;
-(void)setMaxRetryInterval:(double)arg1 ;
-(id)retryBlock;
-(void)setRetrySelector:(SEL)arg1 ;
-(BOOL)beginFetchWithDelegate:(id)arg1 didFinishSelector:(SEL)arg2 ;
-(NSMutableURLRequest *)mutableRequest;
-(void)setCommentWithFormat:(id)arg1 ;
-(NSData *)downloadedData;
-(void)setRetryBlock:(id)arg1 ;
-(void)setShouldFetchInBackground:(BOOL)arg1 ;
-(BOOL)shouldFetchInBackground;
-(id<GTMFetcherAuthorizationProtocol>)authorizer;
-(void)stopFetching;
-(void)setSentDataSelector:(SEL)arg1 ;
-(BOOL)beginFetchMayDelay:(BOOL)arg1 mayAuthorize:(BOOL)arg2 ;
-(BOOL)authorizeRequest;
-(void)addCookiesToRequest:(id)arg1 ;
-(id)createTempDownloadFilePathForPath:(id)arg1 ;
-(void)setTemporaryDownloadPath:(NSString *)arg1 ;
-(void)setDownloadFileHandle:(NSFileHandle *)arg1 ;
-(void)backgroundFetchExpired;
-(void)failToBeginFetchDeferWithError:(id)arg1 ;
-(void)failToBeginFetchWithError:(id)arg1 ;
-(void)invokeFetchCallbacksOnDelegateQueueWithData:(id)arg1 error:(id)arg2 ;
-(void)releaseCallbacks;
-(void)stopFetchReleasingCallbacks:(BOOL)arg1 ;
-(void)authorizer:(id)arg1 request:(id)arg2 finishedWithError:(id)arg3 ;
-(void)setSentDataBlock:(id)arg1 ;
-(void)setReceivedDataBlock:(id)arg1 ;
-(void)destroyRetryTimer;
-(void)sendStopNotificationIfNeeded;
-(void)handleCookiesForResponse:(id)arg1 ;
-(void)logNowWithError:(id)arg1 ;
-(void)setMutableRequest:(NSMutableURLRequest *)arg1 ;
-(void)invokeFetchCallbacksWithTarget:(id)arg1 selector:(SEL)arg2 block:(id)arg3 data:(id)arg4 error:(id)arg5 ;
-(void)invokeFetchCallback:(SEL)arg1 target:(id)arg2 data:(id)arg3 error:(id)arg4 ;
-(void)invokeFetchCallbacksWithData:(id)arg1 error:(id)arg2 ;
-(void)invokeOnQueueWithDictionary:(id)arg1 ;
-(SEL)sentDataSelector;
-(void)invokeSentDataCallback:(SEL)arg1 target:(id)arg2 didSendBodyData:(long long)arg3 totalBytesWritten:(long long)arg4 totalBytesExpectedToWrite:(long long)arg5 ;
-(id)cachedDataForStatus;
-(long long)statusAfterHandlingNotModifiedError;
-(BOOL)shouldRetryNowForStatus:(long long)arg1 error:(id)arg2 ;
-(void)beginRetryTimer;
-(BOOL)shouldReleaseCallbacksUponCompletion;
-(double)nextRetryInterval;
-(BOOL)isRetryError:(id)arg1 ;
-(BOOL)invokeRetryCallback:(SEL)arg1 target:(id)arg2 willRetry:(BOOL)arg3 error:(id)arg4 ;
-(void)primeRetryTimerWithNewTimeInterval:(double)arg1 ;
-(void)retryTimerFired:(id)arg1 ;
-(void)retryFetch;
-(void)setMinRetryInterval:(double)arg1 ;
-(void)setRetryFactor:(double)arg1 ;
-(id<GTMCookieStorageProtocol>)cookieStorage;
-(BOOL)beginFetchWithCompletionHandler:(/*^block*/id)arg1 ;
-(void)waitForCompletionWithTimeout:(double)arg1 ;
-(double)minRetryInterval;
-(id<GTMHTTPFetchHistoryProtocol>)fetchHistory;
-(void)setFetchHistory:(id<GTMHTTPFetchHistoryProtocol>)arg1 ;
-(void)addPropertiesFromDictionary:(id)arg1 ;
-(NSArray *)allowedInsecureSchemes;
-(BOOL)allowLocalhostRequest;
-(NSURLCredential *)proxyCredential;
-(void)setProxyCredential:(NSURLCredential *)arg1 ;
-(NSInputStream *)postStream;
-(void)setPostStream:(NSInputStream *)arg1 ;
-(void)setServiceHost:(NSString *)arg1 ;
-(long long)servicePriority;
-(void)setServicePriority:(long long)arg1 ;
-(SEL)receivedDataSelector;
-(void)setReceivedDataSelector:(SEL)arg1 ;
-(double)retryFactor;
-(unsigned long long)downloadedLength;
-(void)setDownloadPath:(NSString *)arg1 ;
-(NSString *)temporaryDownloadPath;
-(NSFileHandle *)downloadFileHandle;
-(id)sentDataBlock;
-(id)receivedDataBlock;
-(NSOperationQueue *)delegateQueue;
-(id)propertyForKey:(id)arg1 ;
-(void)setProperty:(id)arg1 forKey:(id)arg2 ;
-(NSArray *)runLoopModes;
-(void)setRunLoopModes:(NSArray *)arg1 ;
-(void)setCredential:(NSURLCredential *)arg1 ;
-(void)setComment:(NSString *)arg1 ;
-(void)setDelegate:(id)arg1 ;
-(void)dealloc;
-(id)init;
-(id)description;
-(id)delegate;
-(id)completionBlock;
-(void)setCompletionBlock:(id)arg1 ;
-(id)copyWithZone:(NSZone*)arg1 ;
-(NSString *)log;
-(NSURLResponse *)response;
-(long long)statusCode;
-(void)connection:(id)arg1 didFailWithError:(id)arg2 ;
-(void)connection:(id)arg1 didReceiveData:(id)arg2 ;
-(void)connectionDidFinishLoading:(id)arg1 ;
-(void)connection:(id)arg1 didReceiveResponse:(id)arg2 ;
-(id)initWithRequest:(id)arg1 ;
-(id)userData;
-(void)setUserData:(id)arg1 ;
-(NSMutableDictionary *)properties;
-(void)setProperties:(NSMutableDictionary *)arg1 ;
-(id<GTMHTTPFetcherServiceProtocol>)service;
-(void)setCookieStorage:(id<GTMCookieStorageProtocol>)arg1 ;
-(NSDictionary *)responseHeaders;
-(void)setDelegateQueue:(NSOperationQueue *)arg1 ;
-(void)setDownloadedData:(NSData *)arg1 ;
-(void)connection:(id)arg1 didReceiveAuthenticationChallenge:(id)arg2 ;
-(void)setThread:(NSThread *)arg1 ;
-(NSThread *)thread;
-(unsigned long long)retryCount;
-(NSURLCredential *)credential;
-(void)connection:(id)arg1 didSendBodyData:(long long)arg2 totalBytesWritten:(long long)arg3 totalBytesExpectedToWrite:(long long)arg4 ;
-(id)connection:(id)arg1 willSendRequest:(id)arg2 redirectResponse:(id)arg3 ;
-(void)setResponse:(NSURLResponse *)arg1 ;
-(void)setBodyData:(NSData *)arg1 ;
-(BOOL)isFetching;
-(NSString *)comment;
-(NSData *)bodyData;
-(NSString *)downloadPath;
-(NSString *)serviceHost;
-(void)setPostData:(NSData *)arg1 ;
-(NSData *)postData;
-(void)endBackgroundTask;
-(void)setService:(id<GTMHTTPFetcherServiceProtocol>)arg1 ;
-(void)setLog:(NSString *)arg1 ;
@end

