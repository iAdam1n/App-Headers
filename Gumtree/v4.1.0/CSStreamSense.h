/*
* This header is generated by classdump-dyld 0.7
* on Thursday, November 19, 2015 at 5:05:22 PM Greenwich Mean Time
* Operating System: Version 9.0.2 (Build 13A452)
* Image Source: /private/var/mobile/Containers/Bundle/Application/BE5DA1E5-E5C1-4952-A4BE-28BA22319130/Gumtree.app/Gumtree
* classdump-dyld is licensed under GPLv3, Copyright Â© 2013-2014 by Elias Limneos.
*/


@class NSMutableDictionary, NSString, CSCore, CSStreamSensePlaylist, NSMutableArray;

@interface CSStreamSense : NSObject {

	NSMutableDictionary* _persistentLabels;
	NSString* _pixelURL;
	CSCore* _core;
	CSStreamSensePlaylist* _playlist;
	int _currentState;
	int _prevState;
	int _lastStateWithMeasurement;
	NSString* _keepAliveTimerId;
	NSString* _heartbeatTimerId;
	NSString* _pausedOnBufferingTimerId;
	NSString* _delayedTransitionTimerId;
	int _heartbeatCount;
	double _nextHeartbeatInterval;
	double _nextHeartbeatTimestamp;
	double _previousStateTime;
	double _keepAliveInterval;
	double _pauseOnBufferingInterval;
	NSMutableArray* _delegates;
	NSString* _mediaPlayerName;
	NSString* _mediaPlayerVersion;
	NSMutableDictionary* _measurementSnapshot;
	NSMutableArray* _heartbeatIntervals;
	long long _lastKnownPosition;
	int _nextEventCount;
	BOOL sendPauseOnRebuffering;
	BOOL pausePlaySwitchDelayEnabled;

}

@property (assign) BOOL sendPauseOnRebuffering; 
@property (assign) BOOL pausePlaySwitchDelayEnabled; 
+(int)eventToState:(int)arg1 ;
+(int)stateToEvent:(int)arg1 ;
-(void)reset:(id)arg1 ;
-(id)createLabels:(int)arg1 initialLabels:(id)arg2 ;
-(id)label:(id)arg1 ;
-(BOOL)isNotProperlyInitialized;
-(id)pixelURL;
-(BOOL)notify:(int)arg1 position:(long long)arg2 labels:(id)arg3 ;
-(BOOL)setClip:(id)arg1 playlistLoop:(BOOL)arg2 ;
-(void)setPausePlaySwitchDelayEnabled:(BOOL)arg1 ;
-(void)setSendPauseOnRebuffering:(BOOL)arg1 ;
-(id)newDefaultHeartbeatIntervals;
-(id)setPixelURL:(id)arg1 ;
-(void)stopKeepAliveTimer;
-(void)pauseHeartbeatTimer;
-(void)cancelTransitionTimer;
-(void)resetHeartbeatTimer;
-(void)stopPausedOnBufferingTimer;
-(BOOL)pausePlaySwitchDelayEnabled;
-(BOOL)isPlayOrPause:(int)arg1 ;
-(void)transitionTo:(int)arg1 labels:(id)arg2 delay:(double)arg3 ;
-(void)transitionTo:(int)arg1 labels:(id)arg2 ;
-(id)createMeasurementLabels:(int)arg1 initialLabels:(id)arg2 ;
-(void)dispatch:(id)arg1 snapshot:(BOOL)arg2 ;
-(void)resumeHeartbeatTimer;
-(void)startKeepAliveTimer;
-(BOOL)willCauseMeasurement:(int)arg1 ;
-(BOOL)sendPauseOnRebuffering;
-(void)startPausedOnBufferingTimer;
-(void)releaseTransitionTimer;
-(void)performDelayedTransition:(id)arg1 ;
-(BOOL)canTransitTo:(int)arg1 ;
-(void)onExit:(int)arg1 labels:(id)arg2 ;
-(void)onEnter:(int)arg1 labels:(id)arg2 ;
-(void)setRegisters:(id)arg1 ;
-(void)releaseHeartbeatTimer;
-(double)getHeartbeatInterval:(double)arg1 ;
-(void)dispatchHeartbeatEvent;
-(void)dispatchKeepAliveEvent;
-(void)releaseKeepAliveTimer;
-(void)dispatchPausedOnBufferingEvent;
-(void)releasePausedOnBufferingTimer;
-(void)makeMeasurementSnapshot:(id)arg1 ;
-(BOOL)notify:(int)arg1 position:(long long)arg2 ;
-(id)createMeasurementLabelsWithInitialLabels:(id)arg1 ;
-(void)importState:(id)arg1 ;
-(id)exportState;
-(void)setHeartbeatIntervals:(id)arg1 ;
-(void)setPauseOnBufferingInterval:(double)arg1 ;
-(double)pauseOnBufferingInterval;
-(void)setKeepAliveInterval:(double)arg1 ;
-(double)keepAliveInterval;
-(void)dispatch:(id)arg1 ;
-(void)setLabel:(id)arg1 value:(id)arg2 ;
-(void)dealloc;
-(id)init;
-(int)state;
-(void)setState:(int)arg1 ;
-(void)reset;
-(id)clip;
-(id)version;
-(BOOL)setClip:(id)arg1 ;
-(void)setLabels:(id)arg1 ;
-(BOOL)setPlaylist:(id)arg1 ;
-(id)labels;
-(void)removeDelegate:(id)arg1 ;
-(void)addDelegate:(id)arg1 ;
-(id)playlist;
@end

