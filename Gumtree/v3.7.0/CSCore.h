/*
* This header is generated by classdump-dyld 0.7
* on Friday, August 21, 2015 at 1:28:04 AM British Summer Time
* Operating System: Version 8.4 (Build 12H143)
* Image Source: /private/var/mobile/Containers/Bundle/Application/21F2B006-1C28-48A8-85CE-538D78391B66/Gumtree.app/Gumtree
* classdump-dyld is licensed under GPLv3, Copyright Â© 2013-2014 by Elias Limneos.
*/


@class NSString, NSMutableDictionary, NSArray, NSNumber, CSStorage, CSTaskExecutor, CSMeasurementDispatcher, CSOfflineCache, CSNotificationsObserver, CSKeepAlive, CSCacheFlusher, NSMutableSet;

@interface CSCore : NSObject {

	NSString* _visitorID;
	NSString* _publisherSecret;
	NSString* _appName;
	NSString* _devModel;
	NSMutableDictionary* _labels;
	NSMutableDictionary* _autoStartLabels;
	BOOL _keepAliveEnabled;
	long long cacheFlushingInterval;
	NSString* _crossPublisherId;
	NSString* _md5CrossPublisherRawId;
	BOOL _isCrossPublisherIdBasedOnIFDA;
	BOOL _errorHandlingEnabled;
	/*function pointer*/void* _defaultUncaughtExceptionHandler;
	BOOL _autoStartEnabled;
	BOOL _secure;
	int _liveTransmissionMode;
	int _offlineTransmissionMode;
	NSArray* _measurementLabelOrder;
	NSNumber* _adSupportFrameworkAvailable;
	BOOL _adIdChanged;
	int _adIdEnabled;
	BOOL _idChangedWhenAppNotRunning;
	CSStorage* _storage;
	CSTaskExecutor* _taskExecutor;
	CSMeasurementDispatcher* _measurementDispatcher;
	CSOfflineCache* _offlineCache;
	CSNotificationsObserver* observer;
	CSKeepAlive* _keepAlive;
	CSCacheFlusher* _cacheFlusher;
	NSMutableSet* _ssids;
	long long _autoUpdateInterval;
	BOOL _autoUpdateInForegroundOnly;
	int _runsCount;
	long long _coldStartId;
	int _coldStartCount;
	BOOL _coldStart;
	long long _installId;
	long long _firstInstallId;
	NSString* _currentVersion;
	NSString* _previousVersion;
	int _currentApplicationState;
	int _foregroundComponentsCount;
	int _activeUxComponentsCount;
	int _foregroundTransitionsCount;
	long long _totalForegroundTime;
	long long _accumulatedBackgroundTime;
	long long _accumulatedForegroundTime;
	long long _accumulatedInactiveTime;
	long long _genesis;
	long long _previousGenesis;
	long long _lastApplicationAccumulationTimestamp;
	long long _totalBackgroundTime;
	long long _totalInactiveTime;
	int _currentSessionState;
	long long _accumulatedApplicationSessionTime;
	long long _accumulatedUserSessionTime;
	long long _accumulatedActiveUserSessionTime;
	int _userSessionCount;
	int _activeUserSessionCount;
	long long _lastApplicationSessionTimestamp;
	long long _lastUserSessionTimestamp;
	long long _lastActiveUserSessionTimestamp;
	int _userInteractionCount;
	long long _lastUserInteractionTimestamp;
	long long _lastSessionAccumulationTimestamp;
	int _applicationSessionCount;
	NSString* _userInteractionTimerId;
	NSString* _autoUpdateTimerId;
	BOOL _enabled;
	BOOL _wasErrorHandlingEnabled;
	NSString* pixelURL;

}

@property (assign,getter=isErrorHandlingEnabled,nonatomic) BOOL errorHandlingEnabled;              //@synthesize errorHandlingEnabled=_errorHandlingEnabled - In the implementation block
@property (nonatomic,readonly) NSString * pixelURL; 
-(void)setCustomerC2:(id)arg1 ;
-(void)setPublisherSecret:(id)arg1 ;
-(id)customerC2;
-(id)publisherSecret;
-(id)measurementLabelOrder;
-(int)offlineTransmissionMode;
-(id)label:(id)arg1 ;
-(void)onEnterForeground;
-(void)onExitForeground;
-(void)initializeNotificationObserver;
-(void)initializedContextDependant:(long long)arg1 ;
-(void)loadInitialSettings;
-(void)restorePixelURL;
-(void)restoreVisitorId;
-(void)generateCrossPublisherUniqueId;
-(void)initialezeStorage;
-(void)initializeKeepAliveAlarmReceiver;
-(void)initializeOfflineCache;
-(void)initializeCacheFlusher;
-(void)initializeStateMachines:(long long)arg1 ;
-(BOOL)validateApplicationSession:(long long)arg1 ;
-(id)setPixelURL:(id)arg1 background:(BOOL)arg2 ;
-(void)migrateOldStorageKeys;
-(void)migrateOldKey:(id)arg1 toNewKeys:(id)arg2 ;
-(void)migrateOldKey:(id)arg1 toNewKey:(id)arg2 ;
-(void)disableAutoUpdate;
-(void)setOfflineURL:(id)arg1 background:(BOOL)arg2 ;
-(BOOL)isVisitorIDValid:(id)arg1 ;
-(void)resetVisitorID;
-(void)notifyWithApplicationEventType:(int)arg1 labels:(id)arg2 ;
-(id)generateVisitorId;
-(id)generateVisitorIdWithPublisherSecret:(id)arg1 ;
-(id)getUID;
-(BOOL)isAdFrameworkAvailable;
-(void)setCrossPublisherIdFromRawId:(id)arg1 ;
-(BOOL)isLimitAdTrackingEnabled;
-(BOOL)isMACAddressValid;
-(id)getPlainMACAddress;
-(id)generateInstallationID;
-(void)setPublisherSecret:(id)arg1 background:(BOOL)arg2 ;
-(void)appName:(id)arg1 background:(BOOL)arg2 ;
-(void)setCustomerC2:(id)arg1 background:(BOOL)arg2 ;
-(void)setSecure:(BOOL)arg1 background:(BOOL)arg2 ;
-(void)setKeepAliveEnabled:(BOOL)arg1 background:(BOOL)arg2 ;
-(id)getPlainMACAddress:(id)arg1 ;
-(BOOL)cancelUserInteractionTask;
-(void)stopAutoUpdateTimer;
-(id)readInitialSettingsDictionary;
-(id)retrieveBooleanProperty:(id)arg1 from:(id)arg2 defaultFromStorage:(BOOL)arg3 defaultValue:(BOOL)arg4 ;
-(id)retrieveProperty:(id)arg1 from:(id)arg2 defaultFromStorage:(BOOL)arg3 ;
-(void)allowLiveTransmission:(int)arg1 background:(BOOL)arg2 ;
-(void)allowOfflineTransmission:(int)arg1 background:(BOOL)arg2 ;
-(void)setCacheFlushingInterval:(long long)arg1 background:(BOOL)arg2 ;
-(void)setErrorHandlingEnabled:(BOOL)arg1 ;
-(void)setAutoStartEnabled:(BOOL)arg1 background:(BOOL)arg2 ;
-(BOOL)isNotProperlyInitialized;
-(void)scheduleUserInteractionTask;
-(void)executeTransitionTask:(int)arg1 newSessionState:(int)arg2 timestamp:(long long)arg3 ;
-(void)onExitApplicationState:(int)arg1 timestamp:(long long)arg2 ;
-(void)onEnterApplicationState:(int)arg1 timestamp:(long long)arg2 ;
-(void)accumulateApplicationData:(long long)arg1 store:(BOOL)arg2 ;
-(void)onExitSessionState:(int)arg1 timestamp:(long long)arg2 ;
-(void)onEnterSessionState:(int)arg1 timestamp:(long long)arg2 ;
-(void)accumulateSessionData:(long long)arg1 store:(BOOL)arg2 ;
-(void)onApplicationStateChanged:(int)arg1 timestamp:(long long)arg2 ;
-(void)onSessionStateChanged:(int)arg1 timestamp:(long long)arg2 ;
-(void)startAutoUpdateTimer;
-(void)validateActiveUserSession:(long long)arg1 ;
-(void)validateUserSession:(long long)arg1 ;
-(void)userInteractionTask:(id)arg1 ;
-(void)update:(long long)arg1 store:(BOOL)arg2 ;
-(id)taskExecutor;
-(id)measurementDispatcher;
-(id)cacheFlusher;
-(void)incrementRunsCount;
-(void)setOfflineURL:(id)arg1 ;
-(id)setPixelURL:(NSString *)arg1 ;
-(void)setVisitorId:(id)arg1 ;
-(id)visitorId;
-(BOOL)crossPublisherIdChanged;
-(id)crossPublisherId;
-(void)appName:(id)arg1 ;
-(long long)genesis;
-(long long)previousGenesis;
-(id)devModel;
-(id)autoStartLabels;
-(id)autoStartLabel:(id)arg1 ;
-(void)setAutoStartLabel:(id)arg1 value:(id)arg2 ;
-(void)setAutoStartLabels:(id)arg1 ;
-(BOOL)isKeepAliveEnabled;
-(void)setKeepAliveEnabled:(BOOL)arg1 ;
-(void)allowLiveTransmission:(int)arg1 ;
-(int)liveTransmissionMode;
-(void)allowOfflineTransmission:(int)arg1 ;
-(long long)cacheFlushingInterval;
-(void)setCacheFlushingInterval:(long long)arg1 ;
-(void)setMeasurementLabelOrder:(id)arg1 ;
-(void)onUxActive;
-(void)onUxInactive;
-(void)onUserInteraction;
-(void)enableAutoUpdate:(int)arg1 foregroundOnly:(BOOL)arg2 ;
-(BOOL)isAutoUpdateEnabled;
-(long long)totalBackgroundTime:(BOOL)arg1 ;
-(long long)totalInactiveTime:(BOOL)arg1 ;
-(int)runsCount;
-(long long)installId;
-(long long)firstInstallId;
-(long long)coldStartId;
-(int)coldStartCount;
-(int)foregroundTransitionsCountDelta:(BOOL)arg1 ;
-(long long)totalForegroundTime:(BOOL)arg1 ;
-(long long)foregroundTimeDelta:(BOOL)arg1 ;
-(long long)backgroundTimeDelta:(BOOL)arg1 ;
-(long long)inactiveTimeDelta:(BOOL)arg1 ;
-(long long)applicationSessionTimeDelta:(BOOL)arg1 ;
-(long long)activeUserSessionTimeDelta:(BOOL)arg1 ;
-(long long)userSessionTimeDelta:(BOOL)arg1 ;
-(long long)autoUpdateInterval;
-(int)applicationSessionCountDelta:(BOOL)arg1 ;
-(int)activeUserSessionCountDelta:(BOOL)arg1 ;
-(int)userSessionCountDelta:(BOOL)arg1 ;
-(int)userInteractionCount:(BOOL)arg1 ;
-(BOOL)handleColdStart:(long long)arg1 ;
-(BOOL)coldStart;
-(BOOL)isJailBroken;
-(BOOL)autoStartEnabled;
-(void)setAutoStartEnabled:(BOOL)arg1 ;
-(NSString *)pixelURL;
-(BOOL)isErrorHandlingEnabled;
-(id)appName;
-(void)setLabel:(id)arg1 value:(id)arg2 ;
-(void)dealloc;
-(id)init;
-(int)applicationState;
-(void)reset;
-(void)setEnabled:(BOOL)arg1 ;
-(void)setSecure:(BOOL)arg1 ;
-(BOOL)isSecure;
-(id)observer;
-(BOOL)enabled;
-(void)update;
-(id)version;
-(id)currentVersion;
-(id)storage;
-(id)trackingID;
-(void)setLabels:(id)arg1 ;
-(id)previousVersion;
-(id)offlineCache;
-(id)keepAlive;
-(id)labels;
-(void)updateState:(long long)arg1 ;
@end

