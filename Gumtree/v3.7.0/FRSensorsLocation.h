/*
* This header is generated by classdump-dyld 0.7
* on Friday, August 21, 2015 at 1:28:04 AM British Summer Time
* Operating System: Version 8.4 (Build 12H143)
* Image Source: /private/var/mobile/Containers/Bundle/Application/21F2B006-1C28-48A8-85CE-538D78391B66/Gumtree.app/Gumtree
* classdump-dyld is licensed under GPLv3, Copyright Â© 2013-2014 by Elias Limneos.
*/

#import <Gumtree/Gumtree-Structs.h>
#import <Gumtree/CLLocationManagerDelegate.h>
#import <Gumtree/NSCoding.h>

@protocol CLLocationManagerDelegateExtension;
@class CLLocationManager, NSMutableArray, CLLocation;

@interface FRSensorsLocation : NSObject <CLLocationManagerDelegate, NSCoding> {

	BOOL isAuthorized;
	BOOL locatingIsInOperation;
	BOOL regionMonitoringAvailable;
	BOOL supportsDeferedLocationUpdate;
	BOOL headingIsAvailable;
	BOOL bShouldDisplayCalibrationSetting;
	int previousAuthStatus;
	double distance;
	double speed;
	double accuracy;
	CLLocationManager* locationManager;
	id<CLLocationManagerDelegateExtension> locationDelegate;
	NSMutableArray* locationCallbacks;
	CLLocation* lastReadLocation;
	double _heading;
	CGPoint location;

}

@property (assign) BOOL bShouldDisplayCalibrationSetting; 
@property (assign) double accuracy; 
@property (assign) int previousAuthStatus; 
@property (nonatomic,retain) id<CLLocationManagerDelegateExtension> locationDelegate; 
@property (assign) CGPoint location; 
@property (assign) double distance; 
@property (assign) double speed; 
@property (assign) double heading;                                                                 //@synthesize heading=_heading - In the implementation block
@property (nonatomic,retain) CLLocation * lastReadLocation; 
@property (assign) BOOL isAuthorized; 
@property (assign) BOOL locatingIsInOperation; 
@property (assign) BOOL regionMonitoringAvailable; 
@property (assign) BOOL supportsDeferedLocationUpdate; 
@property (assign) BOOL headingIsAvailable; 
@property (nonatomic,retain) CLLocationManager * locationManager; 
@property (nonatomic,retain) NSMutableArray * locationCallbacks; 
+(BOOL)isRegionMonitoringAvailable;
-(void)initDelegates:(id)arg1 ;
-(BOOL)boolAuthorizationStatus;
-(void)getCurrentLocation:(/*^block*/id)arg1 overrideAuthCheck:(BOOL)arg2 ;
-(void)callLocationCallbacks:(id)arg1 accuracy:(double)arg2 error:(id)arg3 ;
-(void)startUpdateingHeading;
-(id)getLastLocation;
-(void)getCurrentLocation:(/*^block*/id)arg1 ;
-(int)previousAuthorizationStatus;
-(void)startMonitoringForFence:(id)arg1 ;
-(void)stopMonitoringForFence:(id)arg1 ;
-(void)allowDeferLocationUpdates:(double)arg1 distance:(double)arg2 ;
-(void)disallowDeferLocationUpdates;
-(BOOL)isAuthorized;
-(void)setIsAuthorized:(BOOL)arg1 ;
-(BOOL)locatingIsInOperation;
-(void)setLocatingIsInOperation:(BOOL)arg1 ;
-(void)setRegionMonitoringAvailable:(BOOL)arg1 ;
-(BOOL)supportsDeferedLocationUpdate;
-(void)setSupportsDeferedLocationUpdate:(BOOL)arg1 ;
-(BOOL)headingIsAvailable;
-(void)setHeadingIsAvailable:(BOOL)arg1 ;
-(id<CLLocationManagerDelegateExtension>)locationDelegate;
-(void)setLocationDelegate:(id<CLLocationManagerDelegateExtension>)arg1 ;
-(BOOL)bShouldDisplayCalibrationSetting;
-(void)setBShouldDisplayCalibrationSetting:(BOOL)arg1 ;
-(NSMutableArray *)locationCallbacks;
-(void)setLocationCallbacks:(NSMutableArray *)arg1 ;
-(CLLocation *)lastReadLocation;
-(void)setLastReadLocation:(CLLocation *)arg1 ;
-(int)previousAuthStatus;
-(void)setPreviousAuthStatus:(int)arg1 ;
-(BOOL)regionMonitoringAvailable;
-(id)monitoredRegions;
-(void)startMonitoringSignificantLocationChanges;
-(void)stopMonitoringSignificantLocationChanges;
-(void)setAccuracy:(double)arg1 ;
-(id)initWithCoder:(id)arg1 ;
-(void)encodeWithCoder:(id)arg1 ;
-(id)init;
-(void)setSpeed:(double)arg1 ;
-(void)initialize;
-(double)speed;
-(CGPoint)location;
-(int)authorizationStatus;
-(void)setDistance:(double)arg1 ;
-(void)setHeading:(double)arg1 ;
-(void)setLocationManager:(CLLocationManager *)arg1 ;
-(CLLocationManager *)locationManager;
-(void)setLocation:(CGPoint)arg1 ;
-(id)initWithDelegate:(id)arg1 ;
-(void)stopUpdatingHeading;
-(void)startUpdatingLocation;
-(void)stopUpdatingLocation;
-(BOOL)locationServicesEnabled;
-(void)locationManager:(id)arg1 didUpdateToLocation:(id)arg2 fromLocation:(id)arg3 ;
-(void)locationManager:(id)arg1 didUpdateLocations:(id)arg2 ;
-(void)locationManager:(id)arg1 didUpdateHeading:(id)arg2 ;
-(BOOL)locationManagerShouldDisplayHeadingCalibration:(id)arg1 ;
-(void)locationManager:(id)arg1 didEnterRegion:(id)arg2 ;
-(void)locationManager:(id)arg1 didExitRegion:(id)arg2 ;
-(void)locationManager:(id)arg1 didFailWithError:(id)arg2 ;
-(void)locationManager:(id)arg1 monitoringDidFailForRegion:(id)arg2 withError:(id)arg3 ;
-(void)locationManager:(id)arg1 didChangeAuthorizationStatus:(int)arg2 ;
-(void)locationManager:(id)arg1 didStartMonitoringForRegion:(id)arg2 ;
-(void)locationManagerDidPauseLocationUpdates:(id)arg1 ;
-(void)locationManagerDidResumeLocationUpdates:(id)arg1 ;
-(void)locationManager:(id)arg1 didFinishDeferredUpdatesWithError:(id)arg2 ;
-(double)distance;
-(double)accuracy;
-(double)heading;
@end

