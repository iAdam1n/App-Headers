/*
* This header is generated by classdump-dyld 1.0
* on Thursday, August 25, 2016 at 11:49:37 PM British Summer Time
* Operating System: Version 9.3.3 (Build 13G34)
* Image Source: /var/containers/Bundle/Application/A861CD42-DC74-45D3-9030-D3B6F185E279/Gumtree.app/Gumtree
* classdump-dyld is licensed under GPLv3, Copyright Â© 2013-2016 by Elias Limneos.
*/


@class NSString, NSObject;

@interface FRMdns : NSObject {

	NSString* m_Url;
	NSObject* internalState;

}

@property (nonatomic,retain) NSObject * internalState; 
@property (nonatomic,retain) NSString * m_Url; 
+(id)GetClientIdAndMessageType:(id)arg1 messageType:(int*)arg2 ;
+(id)createAuthToken:(id)arg1 token:(id)arg2 ;
+(id)getLibraryVersion;
-(id)initWithParams:(id)arg1 deviceToken:(id)arg2 iafToken:(id)arg3 device3PP:(id)arg4 globalId:(id)arg5 langSelect:(id)arg6 ;
-(id)getDeviceNotificationsSubscriptionsRequestXML:(id)arg1 ;
-(id)defaultHeaderDictionary:(long long)arg1 operationName:(id)arg2 iafToken:(id)arg3 ;
-(id)setDeviceNotificationsSubscriptionsRequestXML:(id)arg1 userId:(id)arg2 locale:(id)arg3 ;
-(id)activateRequestXML:(id)arg1 ;
-(id)deactivateRequestXML:(id)arg1 ;
-(void)sendNotificationToDeviceToken:(id)arg1 destAppDomain:(id)arg2 destClientId:(id)arg3 destDeviceToken:(id)arg4 messageType:(int)arg5 iafToken:(id)arg6 success:(/*^block*/id)arg7 failure:(/*^block*/id)arg8 ;
-(id)decodeNotificationSubscriptions:(id)arg1 ;
-(id)setupRequest:(id)arg1 data:(id)arg2 operationName:(id)arg3 ;
-(void)processResponseActivateUserOnDevice:(/*^block*/id)arg1 failure:(/*^block*/id)arg2 soapBody:(id)arg3 ;
-(void)processResponse:(/*^block*/id)arg1 failure:(/*^block*/id)arg2 selector:(SEL)arg3 responseData:(id)arg4 ;
-(void)processErrorForActivateUserOnDevice:(/*^block*/id)arg1 error:(id)arg2 ;
-(void)processResponseDeactivateUserOnDevice:(/*^block*/id)arg1 failure:(/*^block*/id)arg2 soapBody:(id)arg3 ;
-(void)processResponseGetDeviceNotificationSubscriptions:(/*^block*/id)arg1 failure:(/*^block*/id)arg2 soapBody:(id)arg3 ;
-(id)sendMessageToDeviceTokenXML;
-(void)processResponseSendNotificationDeviceToken:(/*^block*/id)arg1 failure:(/*^block*/id)arg2 responseData:(id)arg3 ;
-(void)processErrorForSendNotificationDeviceToken:(/*^block*/id)arg1 error:(id)arg2 ;
-(id)basicRequestTemplate;
-(id)outputSelectorXml:(id)arg1 ;
-(id)deviceHandleXml;
-(id)genericRequestXML:(id)arg1 userId:(id)arg2 ;
-(void)activateUserOnDevice:(/*^block*/id)arg1 failure:(/*^block*/id)arg2 userId:(id)arg3 ;
-(void)deactivateUserOnDevice:(/*^block*/id)arg1 failure:(/*^block*/id)arg2 userId:(id)arg3 ;
-(void)setDeviceNotificationSubscriptions:(/*^block*/id)arg1 failure:(/*^block*/id)arg2 userId:(id)arg3 locale:(id)arg4 subscriptions:(id)arg5 ;
-(void)getDeviceNotificationSubscriptions:(id)arg1 clientId:(id)arg2 deviceType:(id)arg3 success:(/*^block*/id)arg4 failure:(/*^block*/id)arg5 outputSelectors:(id)arg6 ;
-(id)initWithParams:(BOOL)arg1 domain:(id)arg2 deviceToken:(id)arg3 appName:(id)arg4 longAppName:(id)arg5 globalID:(id)arg6 device3PPIdGuid:(id)arg7 providerLongName:(id)arg8 ;
-(void)setSubscriptions:(id)arg1 subscriptionState:(BOOL)arg2 authToken:(id)arg3 language:(id)arg4 userId:(id)arg5 callback:(/*^block*/id)arg6 ;
-(id)getInternalState;
-(id)getTemplateGetSubscriptions;
-(id)messageAddressXml:(BOOL)arg1 ;
-(id)getMessageAddressFromXml:(id)arg1 ;
-(id)getSecondarySubscriberFromXml:(id)arg1 ;
-(id)getEventGroupFromXml:(id)arg1 ;
-(id)getSubscriberFromXml:(id)arg1 ;
-(id)getSubscriptionFromXml:(id)arg1 ;
-(id)processErrorResponse:(id)arg1 statusCode:(long long)arg2 ;
-(id)getSubscriptionHeaders:(id)arg1 authToken:(id)arg2 ;
-(id)createGetSubscriptionsRequest:(id)arg1 thisDeviceOnly:(BOOL)arg2 ;
-(id)processResponseForGetSubsciptions:(id)arg1 response:(id)arg2 error:(id*)arg3 ;
-(id)getSetSubcscriptionXmlTemplate;
-(id)createSetSubscriptionsRequest:(BOOL)arg1 langauge:(id)arg2 userId:(id)arg3 subscriptions:(id)arg4 ;
-(id)processResponseForSetSubsciptions:(id)arg1 response:(id)arg2 error:(id*)arg3 ;
-(id)testErrorResponseString;
-(id)testResponseStringForGetSubscriptions;
-(void)getSubscriptions:(id)arg1 thisDeviceOnly:(BOOL)arg2 authToken:(id)arg3 callback:(/*^block*/id)arg4 ;
-(void)testSetSubscriptionsResponseDecoding:(id)arg1 callback:(/*^block*/id)arg2 ;
-(void)processResponseForActivateUserOnDevice:(/*^block*/id)arg1 failure:(/*^block*/id)arg2 ack:(id)arg3 ;
-(id)templateSendMessage;
-(NSString *)m_Url;
-(void)setM_Url:(NSString *)arg1 ;
-(void)setInternalState:(NSObject *)arg1 ;
-(NSObject *)internalState;
@end

