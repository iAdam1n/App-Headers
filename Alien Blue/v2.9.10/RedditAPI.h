/*
* This header is generated by classdump-dyld 1.0
* on Thursday, August 25, 2016 at 11:41:45 PM British Summer Time
* Operating System: Version 9.3.3 (Build 13G34)
* Image Source: /var/containers/Bundle/Application/91D74E3C-0E85-4CEF-8E44-3072C9AFF7E4/AlienBlue.app/AlienBlue
* classdump-dyld is licensed under GPLv3, Copyright Â© 2013-2016 by Elias Limneos.
*/


@class NSMutableDictionary, NSString, NSMutableArray;

@interface RedditAPI : NSObject {

	BOOL _loadingMessages;
	NSMutableDictionary* _connections;

}

@property (assign) BOOL loadingPosts; 
@property (readonly) NSString * authenticatedUser; 
@property (readonly) BOOL authenticated; 
@property (assign) unsigned long long base10Id; 
@property (assign) BOOL isMod; 
@property (assign) BOOL hasMail; 
@property (assign) BOOL hasModMail; 
@property (assign) BOOL isOver18; 
@property (assign) BOOL isGold; 
@property (assign) long long karmaLink; 
@property (assign) long long karmaComment; 
@property (assign) BOOL currentlyAuthenticating; 
@property (readonly) NSMutableArray * hideQueue; 
@property (retain) NSMutableDictionary * connections;              //@synthesize connections=_connections - In the implementation block
@property (readonly) NSString * server; 
@property (assign) BOOL loadingMessages;                           //@synthesize loadingMessages=_loadingMessages - In the implementation block
+(id)shared;
-(void)submitPost:(id)arg1 withCallBackTarget:(id)arg2 useJSON:(BOOL)arg3 ;
-(id)getErrorsInPostSubmission:(id)arg1 ;
-(void)setSubmitPostCallBackTarget:(id)arg1 ;
-(void)submitPostResponseReceived:(id)arg1 ;
-(id)submitPostCallBackTarget;
-(id)generateOAuthAuthenticationHeadersForRedditRequest;
-(BOOL)hasAuthenticatableUser;
-(id)recommendedServerForActiveUser;
-(void)deleteLegacyKeychainItemForUsername:(id)arg1 ;
-(void)authenticateAndPersistTokensWithUsername:(id)arg1 password:(id)arg2 onComplete:(/*^block*/id)arg3 onFailure:(/*^block*/id)arg4 ;
-(void)setActiveUsername:(id)arg1 ;
-(void)establishAuthenticationForCurrentUserOnComplete:(/*^block*/id)arg1 onFailure:(/*^block*/id)arg2 ;
-(void)cancelTokenRefreshTimers;
-(void)deauthenticateUsername:(id)arg1 onComplete:(/*^block*/id)arg2 ;
-(id)activeUsername;
-(void)scheduleNextTokenRefreshForAuthenticatedUser;
-(void)retrieveAndUpdateAuthenticatedUserDetailsOnComplete:(/*^block*/id)arg1 onError:(/*^block*/id)arg2 ;
-(void)exchangeForAccessTokensWithUsername:(id)arg1 password:(id)arg2 onComplete:(/*^block*/id)arg3 onError:(/*^block*/id)arg4 ;
-(void)exchangeAuthorizeCodeForTokens:(id)arg1 onComplete:(/*^block*/id)arg2 onError:(/*^block*/id)arg3 ;
-(void)retrieveAuthorizeCodeWithCookie:(id)arg1 modhash:(id)arg2 onComplete:(/*^block*/id)arg3 onError:(/*^block*/id)arg4 ;
-(void)retrieveCookieAndModhashForUsername:(id)arg1 password:(id)arg2 onComplete:(/*^block*/id)arg3 onError:(/*^block*/id)arg4 ;
-(void)performBasicAuthorizedPostRequestWithUrl:(id)arg1 parameters:(id)arg2 httpBodyData:(id)arg3 onComplete:(/*^block*/id)arg4 onError:(/*^block*/id)arg5 ;
-(id)lastSuccessfulAuthenticatedUserDetailsRetrievalTimestamp;
-(void)setLastSuccessfulAuthenticatedUserDetailsRetrievalTimestamp:(id)arg1 ;
-(void)setMostRecentAuthenticationAttemptTimestamp:(id)arg1 ;
-(id)mostRecentAuthenticationAttemptTimestamp;
-(void)refreshTokenIfNecessaryOnComplete:(/*^block*/id)arg1 onError:(/*^block*/id)arg2 ;
-(BOOL)hasStoredDeviceIdentifier;
-(void)setupAnonymousAuthenticationTokensForOnComplete:(/*^block*/id)arg1 onFailure:(/*^block*/id)arg2 ;
-(void)migrateLegacyKeychainAccountToOAuthForUsername:(id)arg1 onComplete:(/*^block*/id)arg2 onFailure:(/*^block*/id)arg3 ;
-(void)performTokenRefreshForAuthenticatedUserOnComplete:(/*^block*/id)arg1 onError:(/*^block*/id)arg2 ;
-(void)checkIfAccessTokenIsStillValid:(/*^block*/id)arg1 ;
-(id)tokenRefreshTimer;
-(void)setTokenRefreshTimer:(id)arg1 ;
-(void)performTokenRevokeForUsername:(id)arg1 onComplete:(/*^block*/id)arg2 ;
-(BOOL)isAnonymous;
-(id)deviceIdentifier;
-(void)setLoadingPosts:(BOOL)arg1 ;
-(BOOL)loadingPosts;
-(void)resetConnectionsForPosts;
-(BOOL)hasMail;
-(BOOL)hasModMail;
-(NSString *)authenticatedUser;
-(void)fetchUserInfo:(id)arg1 withCallback:(id)arg2 ;
-(void)resetConnectionsForUserDetails;
-(void)prepareDefaultUserState;
-(void)setCurrentlyAuthenticating:(BOOL)arg1 ;
-(BOOL)currentlyAuthenticating;
-(BOOL)isOver18;
-(BOOL)isMod;
-(void)setHasMail:(BOOL)arg1 ;
-(void)setHasModMail:(BOOL)arg1 ;
-(unsigned long long)base10Id;
-(BOOL)isGold;
-(long long)karmaLink;
-(long long)karmaComment;
-(void)setKarmaLink:(long long)arg1 ;
-(void)setKarmaComment:(long long)arg1 ;
-(void)setIsMod:(BOOL)arg1 ;
-(void)setIsGold:(BOOL)arg1 ;
-(void)setAuthenticatedUser:(NSString *)arg1 ;
-(void)setIsOver18:(BOOL)arg1 ;
-(void)setUserIdent:(id)arg1 ;
-(unsigned long long)intFromBase36String:(id)arg1 ;
-(void)setBase10Id:(unsigned long long)arg1 ;
-(id)userInfoCallBackTarget;
-(void)setUserInfoCallBackTarget:(id)arg1 ;
-(void)apiUserInfoResponse:(id)arg1 ;
-(id)userIdent;
-(id)loginResultCallBackTarget;
-(void)setLoginResultCallBackTarget:(id)arg1 ;
-(id)runAfterLoginTarget;
-(void)setRunAfterLoginTarget:(id)arg1 ;
-(SEL)runAfterLoginMethod;
-(void)setRunAfterLoginMethod:(SEL)arg1 ;
-(id)runAfterUserCheckTarget;
-(void)setRunAfterUserCheckTarget:(id)arg1 ;
-(SEL)runAfterUserCheckMethod;
-(void)setRunAfterUserCheckMethod:(SEL)arg1 ;
-(void)updateUserStateWithDictionary:(id)arg1 ;
-(BOOL)authenticated;
-(void)setAuthenticated:(BOOL)arg1 ;
-(void)modApproveItemWithName:(id)arg1 ;
-(void)modRemoveItemWithName:(id)arg1 ;
-(void)modMarkAsSpamItemWithName:(id)arg1 ;
-(void)modRemoveItemWithName:(id)arg1 spam:(BOOL)arg2 ;
-(void)modDistinguishItemWithName:(id)arg1 distinguish:(BOOL)arg2 ;
-(void)postImageToImgur:(id)arg1 callBackTarget:(id)arg2 ;
-(void)resetConnectionsForImgur;
-(void)removeImageFromImgurWithDeleteHash:(id)arg1 ;
-(void)setImgurCallBackTarget:(id)arg1 ;
-(id)imgurCallBackTarget;
-(void)imgurPostResponse:(id)arg1 ;
-(void)setCommentReplyResultCallBackTarget:(id)arg1 ;
-(void)replyResponseReceived:(id)arg1 ;
-(void)submitChangeReply:(id)arg1 withCallBackTarget:(id)arg2 ;
-(void)submitReply:(id)arg1 withCallBackTarget:(id)arg2 ;
-(void)displayReplyErrorIfAvailableFromResponse:(id)arg1 ;
-(id)commentReplyResultCallBackTarget;
-(void)deleteCommentWithID:(id)arg1 ;
-(void)replyToItem:(id)arg1 callbackTarget:(id)arg2 ;
-(void)resetConnectionsForComments;
-(void)hidePostWithID:(id)arg1 ;
-(void)reportPostWithID:(id)arg1 ;
-(void)unsavePostWithID:(id)arg1 ;
-(void)savePostWithID:(id)arg1 ;
-(void)unhidePostWithID:(id)arg1 ;
-(void)submitVote:(id)arg1 ;
-(id)subredditListCallBackTarget;
-(void)setSubredditListCallBackTarget:(id)arg1 ;
-(void)searchSubredditsResponse:(id)arg1 ;
-(void)subredditInfoForSubredditName:(id)arg1 callBackTarget:(id)arg2 ;
-(void)resetConnectionsForSubreddits;
-(void)clearAnnouncementCheckCallbacks;
-(void)prepareAnnouncementChecking;
-(void)setCanCheckAnnouncement:(BOOL)arg1 ;
-(void)allowAnnouncementCheck:(id)arg1 ;
-(void)setAnnouncementCheckTimer:(id)arg1 ;
-(BOOL)canCheckAnnouncement;
-(void)setAnnouncementCheckCallBackTarget:(id)arg1 ;
-(void)latestAnnouncementResponse:(id)arg1 ;
-(id)announcementCheckCallBackTarget;
-(id)announcementCheckTimer;
-(void)checkLatestAnnouncementsIfAllowedWithCallBackTarget:(id)arg1 ;
-(void)markAllModMailAsRead;
-(void)setSubmitMessageCallBackTarget:(id)arg1 ;
-(void)submitMessageResponseReceived:(id)arg1 ;
-(id)submitMessageCallBackTarget;
-(id)inboxCallBackTarget;
-(void)setInboxCallBackTarget:(id)arg1 ;
-(void)inboxFetchResponse:(id)arg1 ;
-(void)submitDirectMessage:(id)arg1 withCallBackTarget:(id)arg2 ;
-(void)fetchMessagesWithCategoryUrl:(id)arg1 afterMessageID:(id)arg2 withCallBackTarget:(id)arg3 ;
-(void)markMessageReadWithID:(id)arg1 ;
-(void)resetConnectionsForMessages;
-(void)markAllMessagesAsRead;
-(void)prepareHideQueue;
-(NSMutableArray *)hideQueue;
-(void)addPostToHideQueue:(id)arg1 ;
-(void)setHideQueue:(NSMutableArray *)arg1 ;
-(void)setLocalHideQueue:(id)arg1 ;
-(void)processHideQueue:(id)arg1 ;
-(void)setHideQueueTimer:(id)arg1 ;
-(void)processFirstInPostQueue;
-(id)localHideQueue;
-(id)hideQueueTimer;
-(BOOL)isPostInHideQueue:(id)arg1 ;
-(void)setCaptchaCallBackTarget:(id)arg1 ;
-(void)captchaResponseReceived:(id)arg1 ;
-(id)extractCaptchaFromJQueryResponse:(id)arg1 ;
-(id)captchaCallBackTarget;
-(void)requestCaptchaWithCallBackTarget:(id)arg1 ;
-(void)connectionFailedDialog:(id)arg1 ;
-(void)doPostToURL:(id)arg1 withParams:(id)arg2 connectionCategory:(int)arg3 callBackTarget:(id)arg4 callBackMethod:(SEL)arg5 failedMethod:(SEL)arg6 ;
-(void)showAuthorisationRequiredDialog;
-(id)downloadDictionaryForConnection:(id)arg1 ;
-(void)setLoadingMessages:(BOOL)arg1 ;
-(id)generateAuthenticationHeadersForRedditRequest;
-(void)clearConnectionsWithCategory:(int)arg1 ;
-(id)requestForUrl:(id)arg1 ;
-(void)doGetURL:(id)arg1 withConnectionCategory:(int)arg2 callBackTarget:(id)arg3 callBackMethod:(SEL)arg4 failedMethod:(SEL)arg5 ;
-(BOOL)loadingMessages;
-(id)init;
-(NSString *)server;
-(void)connection:(id)arg1 didFailWithError:(id)arg2 ;
-(void)connection:(id)arg1 didReceiveData:(id)arg2 ;
-(void)connectionDidFinishLoading:(id)arg1 ;
-(void)connection:(id)arg1 didReceiveResponse:(id)arg2 ;
-(NSMutableDictionary *)connections;
-(id)connection:(id)arg1 willSendRequest:(id)arg2 redirectResponse:(id)arg3 ;
-(void)setConnections:(NSMutableDictionary *)arg1 ;
@end

