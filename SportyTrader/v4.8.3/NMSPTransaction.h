/*
* This header is generated by classdump-dyld 1.0
* on Thursday, August 25, 2016 at 10:10:02 PM British Summer Time
* Operating System: Version 9.3.3 (Build 13G34)
* Image Source: /var/containers/Bundle/Application/4C83B32D-E9D7-434B-B0B8-8A6C2C13527D/SportyTrader.app/SportyTrader
* classdump-dyld is licensed under GPLv3, Copyright Â© 2013-2016 by Elias Limneos.
*/

#import <SportyTrader/SportyTrader-Structs.h>
#import <libobjc.A.dylib/AVAudioPlayerDelegate.h>

@protocol NMSPTransactionDelegate;
@class NMSPTransactionSystem, ReleasePool, NSString, NMSPCondition, NSMutableArray, NSLock, AVAudioPlayer;

@interface NMSPTransaction : NSObject <AVAudioPlayerDelegate> {

	NMSPTransactionSystem* transactionSystem;
	ReleasePool* releasePool;
	NSString* commandName;
	nmsp_nmas_Command_Ref command;
	nmsp_general_AudioSink* audio_sink;
	nmsp_audio_Recorder_Ref recorder;
	nmsp_audio_Player_Ref player;
	int transactionState;
	int recordingState;
	int playbackState;
	NMSPCondition* recordingStopped;
	NMSPCondition* commandDestroyed;
	NMSPCondition* recordingStarted;
	NMSPCondition* playbackStopped;
	NMSPCondition* playbackStarted;
	NMSPCondition* transactionCancelling;
	BOOL notifiedPlaybackStart;
	NMSPCondition* startRecording;
	NMSPCondition* lastIgnoredBuffer;
	NMSPCondition* earconState;
	NSMutableArray* queuedEvents;
	NSLock* queueLock;
	AVAudioPlayer* earconStartPlayer;
	AVAudioPlayer* earconStopPlayer;
	AVAudioPlayer* earconCancelPlayer;
	int result_counter;
	int expected_results;
	id<NMSPTransactionDelegate> delegate;
	int commandType;

}

@property (assign,nonatomic) int commandType; 
-(void)setEarcons;
-(void)cleanupNmasCommandElements;
-(BOOL)sendParam:(nmsp_nmas_Parameter_Ref)arg1 ;
-(BOOL)sendAudioParam:(id)arg1 andRecordWithDetection:(unsigned long long)arg2 fromFileNamed:(id)arg3 ;
-(BOOL)sendAudioParamPlayAndRecord:(id)arg1 withParams:(nmsp_Vector_Ref)arg2 ;
-(BOOL)sendAudioParamPlayAndRecord:(id)arg1 withParams:(nmsp_Vector_Ref)arg2 fromFileNamed:(id)arg3 ;
-(BOOL)sendAudioParam:(id)arg1 andRecordWithDetection:(unsigned long long)arg2 ;
-(id)commandEventDesc:(int)arg1 ;
-(float)energyLevel;
-(void)handleRecordEvent:(int)arg1 ;
-(id)initTransaction:(id)arg1 ;
-(void)incExpectedResults;
-(void)waitForRecordingStart;
-(BOOL)sendStart:(id)arg1 withDictionary:(id)arg2 ;
-(BOOL)sendStart:(int)arg1 dictionary:(id)arg2 ;
-(BOOL)sendTextParam:(id)arg1 text:(id)arg2 ;
-(BOOL)sendDictionaryParam:(id)arg1 dictionary:(id)arg2 ;
-(BOOL)sendSequenceStart:(id)arg1 dictionary:(id)arg2 ;
-(BOOL)sendSequenceChunk:(id)arg1 dictionary:(id)arg2 ;
-(BOOL)sendSequenceEnd:(id)arg1 dictionary:(id)arg2 ;
-(BOOL)sendTTSParamAndPlay:(id)arg1 ;
-(BOOL)sendAudioParamAndStartShortRecording:(id)arg1 ;
-(BOOL)sendAudioParamAndStartLongRecording:(id)arg1 ;
-(BOOL)sendEnd;
-(id)firstDictationResult:(id)arg1 ;
-(void)handleCommandResponse:(SCD_Struct_NM39*)arg1 ;
-(void)preHandleRecordEvent:(int)arg1 ;
-(void)handlePlayEvent:(int)arg1 ;
-(void)preHandlePlayEvent:(int)arg1 ;
-(void)handleCommandEvent:(int)arg1 ;
-(void)preHandleCommandEvent:(int)arg1 ;
-(void)cancel;
-(void)dealloc;
-(int)resultCount;
-(void)stopRecording;
-(void)setCommandType:(int)arg1 ;
-(int)commandType;
-(void)stopPlayback;
-(BOOL)recording;
-(void)audioPlayerDidFinishPlaying:(id)arg1 successfully:(BOOL)arg2 ;
-(void)audioPlayerDecodeErrorDidOccur:(id)arg1 error:(id)arg2 ;
-(void)audioPlayerBeginInterruption:(id)arg1 ;
-(void)audioPlayerEndInterruption:(id)arg1 withFlags:(unsigned long long)arg2 ;
-(void)audioPlayerEndInterruption:(id)arg1 ;
@end

