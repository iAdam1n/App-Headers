/*
* This header is generated by classdump-dyld 1.0
* on Thursday, August 25, 2016 at 10:10:00 PM British Summer Time
* Operating System: Version 9.3.3 (Build 13G34)
* Image Source: /var/containers/Bundle/Application/4C83B32D-E9D7-434B-B0B8-8A6C2C13527D/SportyTrader.app/SportyTrader
* classdump-dyld is licensed under GPLv3, Copyright Â© 2013-2016 by Elias Limneos.
*/

#import <SportyTrader/SportyTrader-Structs.h>
#import <Foundation/NSOperation.h>
#import <libobjc.A.dylib/NSCopying.h>

@protocol ASIHTTPRequestDelegate, ASIHTTPRequestDelegateASIProgressDelegate, ASIProgressDelegate, ASICacheDelegate;
@class NSURL, NSString, NSMutableData, NSData, NSOutputStream, NSInputStream, NSMutableDictionary, NSDictionary, NSMutableArray, NSArray, NSError, NSRecursiveLock, NSDate, NSNumber, NSTimer, ASIDataDecompressor;

@interface ASIHTTPRequest : NSOperation <NSCopying> {

	NSURL* url;
	NSURL* originalURL;
	NSURL* redirectURL;
	id<ASIHTTPRequestDelegate> delegate;
	id<ASIHTTPRequestDelegate><ASIProgressDelegate> queue;
	NSString* requestMethod;
	NSMutableData* postBody;
	NSData* compressedPostBody;
	BOOL shouldStreamPostDataFromDisk;
	NSString* postBodyFilePath;
	NSString* compressedPostBodyFilePath;
	BOOL didCreateTemporaryPostDataFile;
	NSOutputStream* postBodyWriteStream;
	NSInputStream* postBodyReadStream;
	NSMutableDictionary* requestHeaders;
	BOOL haveBuiltRequestHeaders;
	NSDictionary* responseHeaders;
	NSMutableArray* requestCookies;
	NSArray* responseCookies;
	BOOL useCookiePersistence;
	BOOL useKeychainPersistence;
	BOOL useSessionPersistence;
	BOOL allowCompressedResponse;
	BOOL shouldCompressRequestBody;
	NSString* downloadDestinationPath;
	NSString* temporaryFileDownloadPath;
	NSString* temporaryUncompressedDataDownloadPath;
	NSOutputStream* fileDownloadOutputStream;
	NSOutputStream* inflatedFileDownloadOutputStream;
	BOOL complete;
	BOOL finished;
	BOOL cancelled;
	NSError* error;
	NSString* username;
	NSString* password;
	NSString* userAgentString;
	NSString* domain;
	NSString* proxyUsername;
	NSString* proxyPassword;
	NSString* proxyDomain;
	id<ASIProgressDelegate> uploadProgressDelegate;
	id<ASIProgressDelegate> downloadProgressDelegate;
	BOOL haveExaminedHeaders;
	NSMutableData* rawResponseData;
	CFHTTPMessageRef request;
	NSInputStream* readStream;
	CFHTTPAuthenticationRef requestAuthentication;
	NSDictionary* requestCredentials;
	int authenticationRetryCount;
	NSString* authenticationScheme;
	NSString* authenticationRealm;
	BOOL shouldPresentAuthenticationDialog;
	BOOL shouldPresentProxyAuthenticationDialog;
	CFHTTPAuthenticationRef proxyAuthentication;
	NSDictionary* proxyCredentials;
	int proxyAuthenticationRetryCount;
	NSString* proxyAuthenticationScheme;
	NSString* proxyAuthenticationRealm;
	int responseStatusCode;
	NSString* responseStatusMessage;
	unsigned long long contentLength;
	unsigned long long partialDownloadSize;
	unsigned long long postLength;
	unsigned long long totalBytesRead;
	unsigned long long totalBytesSent;
	unsigned long long lastBytesRead;
	unsigned long long lastBytesSent;
	NSRecursiveLock* cancelledLock;
	SEL didStartSelector;
	SEL didReceiveResponseHeadersSelector;
	SEL willRedirectSelector;
	SEL didFinishSelector;
	SEL didFailSelector;
	SEL didReceiveDataSelector;
	NSDate* lastActivityTime;
	double timeOutSeconds;
	BOOL shouldResetUploadProgress;
	BOOL shouldResetDownloadProgress;
	ASIHTTPRequest* mainRequest;
	BOOL showAccurateProgress;
	BOOL updatedProgress;
	BOOL haveBuiltPostBody;
	unsigned long long uploadBufferSize;
	unsigned long long defaultResponseEncoding;
	unsigned long long responseEncoding;
	BOOL allowResumeForFileDownloads;
	NSDictionary* userInfo;
	long long tag;
	BOOL useHTTPVersionOne;
	BOOL shouldRedirect;
	BOOL needsRedirect;
	int redirectCount;
	BOOL validatesSecureCertificate;
	SecIdentityRef clientCertificateIdentity;
	NSArray* clientCertificates;
	NSString* proxyHost;
	int proxyPort;
	NSString* proxyType;
	NSURL* PACurl;
	int authenticationNeeded;
	BOOL shouldPresentCredentialsBeforeChallenge;
	BOOL inProgress;
	BOOL readStreamIsScheduled;
	int numberOfTimesToRetryOnTimeout;
	int retryCount;
	BOOL willRetryRequest;
	BOOL shouldAttemptPersistentConnection;
	double persistentConnectionTimeoutSeconds;
	BOOL connectionCanBeReused;
	NSMutableDictionary* connectionInfo;
	BOOL shouldUseRFC2616RedirectBehaviour;
	BOOL downloadComplete;
	NSNumber* requestID;
	NSString* runLoopMode;
	NSTimer* statusTimer;
	id<ASICacheDelegate> downloadCache;
	int cachePolicy;
	int cacheStoragePolicy;
	BOOL didUseCachedResponse;
	double secondsToCache;
	BOOL shouldContinueWhenAppEntersBackground;
	unsigned long long backgroundTask;
	ASIDataDecompressor* dataDecompressor;
	BOOL shouldWaitToInflateCompressedResponses;
	BOOL isPACFileRequest;
	ASIHTTPRequest* PACFileRequest;
	NSInputStream* PACFileReadStream;
	NSMutableData* PACFileData;
	BOOL isSynchronous;
	/*^block*/id startedBlock;
	/*^block*/id headersReceivedBlock;
	/*^block*/id completionBlock;
	/*^block*/id failureBlock;
	/*^block*/id bytesReceivedBlock;
	/*^block*/id bytesSentBlock;
	/*^block*/id downloadSizeIncrementedBlock;
	/*^block*/id uploadSizeIncrementedBlock;
	/*^block*/id dataReceivedBlock;
	/*^block*/id authenticationNeededBlock;
	/*^block*/id proxyAuthenticationNeededBlock;
	/*^block*/id requestRedirectedBlock;

}

@property (assign) BOOL complete; 
@property (retain) NSArray * responseCookies; 
@property (assign) int responseStatusCode; 
@property (nonatomic,retain) NSDate * lastActivityTime; 
@property (assign) unsigned long long partialDownloadSize; 
@property (assign,nonatomic) unsigned long long uploadBufferSize; 
@property (nonatomic,retain) NSOutputStream * postBodyWriteStream; 
@property (nonatomic,retain) NSInputStream * postBodyReadStream; 
@property (assign,nonatomic) unsigned long long lastBytesRead; 
@property (assign,nonatomic) unsigned long long lastBytesSent; 
@property (retain) NSRecursiveLock * cancelledLock; 
@property (nonatomic,retain) NSOutputStream * fileDownloadOutputStream; 
@property (nonatomic,retain) NSOutputStream * inflatedFileDownloadOutputStream; 
@property (assign) int authenticationRetryCount; 
@property (assign) int proxyAuthenticationRetryCount; 
@property (assign,nonatomic) BOOL updatedProgress; 
@property (assign,nonatomic) BOOL needsRedirect; 
@property (assign,nonatomic) int redirectCount; 
@property (nonatomic,retain) NSData * compressedPostBody; 
@property (nonatomic,retain) NSString * compressedPostBodyFilePath; 
@property (retain) NSString * authenticationRealm; 
@property (retain) NSString * proxyAuthenticationRealm; 
@property (retain) NSString * responseStatusMessage; 
@property (assign) BOOL inProgress; 
@property (assign) int retryCount; 
@property (assign) BOOL willRetryRequest; 
@property (assign) BOOL connectionCanBeReused; 
@property (nonatomic,retain) NSMutableDictionary * connectionInfo; 
@property (nonatomic,retain) NSInputStream * readStream; 
@property (assign) int authenticationNeeded; 
@property (assign,nonatomic) BOOL readStreamIsScheduled; 
@property (assign,nonatomic) BOOL downloadComplete; 
@property (retain) NSNumber * requestID; 
@property (assign,nonatomic) NSString * runLoopMode; 
@property (nonatomic,retain) NSTimer * statusTimer; 
@property (assign) BOOL didUseCachedResponse; 
@property (nonatomic,retain) NSURL * redirectURL; 
@property (assign,nonatomic) BOOL isPACFileRequest; 
@property (nonatomic,retain) ASIHTTPRequest * PACFileRequest; 
@property (nonatomic,retain) NSInputStream * PACFileReadStream; 
@property (nonatomic,retain) NSMutableData * PACFileData; 
@property (assign,setter=setSynchronous:,nonatomic) BOOL isSynchronous; 
@property (retain) NSString * username; 
@property (retain) NSString * password; 
@property (retain) NSString * userAgentString; 
@property (retain) NSString * domain; 
@property (retain) NSString * proxyUsername; 
@property (retain) NSString * proxyPassword; 
@property (retain) NSString * proxyDomain; 
@property (retain) NSString * proxyHost; 
@property (assign) int proxyPort; 
@property (retain) NSString * proxyType; 
@property (setter=setURL:,nonatomic,retain) NSURL * url; 
@property (retain) NSURL * originalURL; 
@property (assign,nonatomic) id delegate; 
@property (nonatomic,retain) id queue; 
@property (assign,nonatomic) id uploadProgressDelegate; 
@property (assign,nonatomic) id downloadProgressDelegate; 
@property (assign) BOOL useKeychainPersistence; 
@property (assign) BOOL useSessionPersistence; 
@property (retain) NSString * downloadDestinationPath; 
@property (retain) NSString * temporaryFileDownloadPath; 
@property (retain) NSString * temporaryUncompressedDataDownloadPath; 
@property (assign) SEL didStartSelector; 
@property (assign) SEL didReceiveResponseHeadersSelector; 
@property (assign) SEL willRedirectSelector; 
@property (assign) SEL didFinishSelector; 
@property (assign) SEL didFailSelector; 
@property (assign) SEL didReceiveDataSelector; 
@property (retain) NSError * error; 
@property (retain) NSDictionary * responseHeaders; 
@property (retain) NSMutableDictionary * requestHeaders; 
@property (retain) NSMutableArray * requestCookies; 
@property (assign) BOOL useCookiePersistence; 
@property (retain) NSDictionary * requestCredentials; 
@property (retain) NSDictionary * proxyCredentials; 
@property (retain) NSMutableData * rawResponseData; 
@property (assign) double timeOutSeconds; 
@property (nonatomic,retain) NSString * requestMethod; 
@property (retain) NSMutableData * postBody; 
@property (assign) unsigned long long contentLength; 
@property (assign) unsigned long long postLength; 
@property (assign) BOOL shouldResetDownloadProgress; 
@property (assign) BOOL shouldResetUploadProgress; 
@property (assign) ASIHTTPRequest * mainRequest; 
@property (assign) BOOL showAccurateProgress; 
@property (assign) unsigned long long totalBytesRead; 
@property (assign) unsigned long long totalBytesSent; 
@property (assign) unsigned long long defaultResponseEncoding; 
@property (assign) unsigned long long responseEncoding; 
@property (assign) BOOL allowCompressedResponse; 
@property (assign) BOOL allowResumeForFileDownloads; 
@property (retain) NSDictionary * userInfo; 
@property (assign) long long tag; 
@property (retain) NSString * postBodyFilePath; 
@property (assign) BOOL shouldStreamPostDataFromDisk; 
@property (assign) BOOL didCreateTemporaryPostDataFile; 
@property (assign) BOOL useHTTPVersionOne; 
@property (assign) BOOL shouldRedirect; 
@property (assign) BOOL validatesSecureCertificate; 
@property (assign) BOOL shouldCompressRequestBody; 
@property (retain) NSURL * PACurl; 
@property (retain) NSString * authenticationScheme; 
@property (retain) NSString * proxyAuthenticationScheme; 
@property (assign) BOOL shouldPresentAuthenticationDialog; 
@property (assign) BOOL shouldPresentProxyAuthenticationDialog; 
@property (assign) BOOL shouldPresentCredentialsBeforeChallenge; 
@property (assign) BOOL haveBuiltRequestHeaders; 
@property (assign,nonatomic) BOOL haveBuiltPostBody; 
@property (assign) int numberOfTimesToRetryOnTimeout; 
@property (assign) BOOL shouldAttemptPersistentConnection; 
@property (assign) double persistentConnectionTimeoutSeconds; 
@property (assign) BOOL shouldUseRFC2616RedirectBehaviour; 
@property (assign) id<ASICacheDelegate> downloadCache; 
@property (assign) int cachePolicy; 
@property (assign) int cacheStoragePolicy; 
@property (assign) double secondsToCache; 
@property (retain) NSArray * clientCertificates; 
@property (assign) BOOL shouldContinueWhenAppEntersBackground; 
@property (retain) ASIDataDecompressor * dataDecompressor; 
@property (assign) BOOL shouldWaitToInflateCompressedResponses; 
+(void)setDefaultTimeOutSeconds:(double)arg1 ;
+(BOOL)isBandwidthThrottled;
+(unsigned long long)maxUploadReadLength;
+(void)incrementBandwidthUsedInLastSecond:(unsigned long long)arg1 ;
+(id)mimeTypeForFileAtPath:(id)arg1 ;
+(id)expiryDateForRequest:(id)arg1 maxAge:(double)arg2 ;
+(void)performSelector:(SEL)arg1 onTarget:(id*)arg2 withObject:(id)arg3 amount:(void*)arg4 callerToRetain:(id)arg5 ;
+(void)updateProgressIndicator:(id*)arg1 withProgress:(unsigned long long)arg2 ofTotal:(unsigned long long)arg3 ;
+(double)defaultTimeOutSeconds;
+(id)requestWithURL:(id)arg1 usingCache:(id)arg2 andCachePolicy:(int)arg3 ;
+(void)releaseBlocks:(id)arg1 ;
+(id)threadForRequest:(id)arg1 ;
+(void)removeAuthenticationCredentialsFromSessionStore:(id)arg1 ;
+(void)removeProxyAuthenticationCredentialsFromSessionStore:(id)arg1 ;
+(id)defaultUserAgentString;
+(void)expirePersistentConnections;
+(void)performInvocation:(id)arg1 onTarget:(id*)arg2 releasingObject:(id)arg3 ;
+(void)storeAuthenticationCredentialsInSessionStore:(id)arg1 ;
+(void)addSessionCookie:(id)arg1 ;
+(void)parseMimeType:(id*)arg1 andResponseEncoding:(unsigned long long*)arg2 fromContentType:(id)arg3 ;
+(void)saveCredentials:(id)arg1 forProxy:(id)arg2 port:(int)arg3 realm:(id)arg4 ;
+(void)saveCredentials:(id)arg1 forHost:(id)arg2 port:(int)arg3 protocol:(id)arg4 realm:(id)arg5 ;
+(void)storeProxyAuthenticationCredentialsInSessionStore:(id)arg1 ;
+(id)savedCredentialsForProxy:(id)arg1 port:(int)arg2 protocol:(id)arg3 realm:(id)arg4 ;
+(id)savedCredentialsForHost:(id)arg1 port:(int)arg2 protocol:(id)arg3 realm:(id)arg4 ;
+(id)base64forData:(id)arg1 ;
+(BOOL)removeFileAtPath:(id)arg1 error:(id*)arg2 ;
+(void)showNetworkActivityIndicator;
+(void)hideNetworkActivityIndicatorAfterDelay;
+(id)sessionProxyCredentialsStore;
+(id)sessionCredentialsStore;
+(void)setSessionCookies:(id)arg1 ;
+(id)sessionCookies;
+(void)setDefaultUserAgentString:(id)arg1 ;
+(void)measureBandwidthUsage;
+(void)recordBandwidthUsage;
+(void)throttleBandwidthForWWANUsingLimit:(unsigned long long)arg1 ;
+(void)unsubscribeFromNetworkReachabilityNotifications;
+(void)setMaxBandwidthPerSecond:(unsigned long long)arg1 ;
+(void)registerForNetworkReachabilityNotifications;
+(BOOL)isNetworkReachableViaWWAN;
+(void)hideNetworkActivityIndicatorIfNeeeded;
+(void)hideNetworkActivityIndicator;
+(void)runRequests;
+(id)requestWithURL:(id)arg1 usingCache:(id)arg2 ;
+(void)removeCredentialsForHost:(id)arg1 port:(int)arg2 protocol:(id)arg3 realm:(id)arg4 ;
+(void)removeCredentialsForProxy:(id)arg1 port:(int)arg2 realm:(id)arg3 ;
+(unsigned long long)maxBandwidthPerSecond;
+(unsigned long long)averageBandwidthUsedPerSecond;
+(void)setShouldThrottleBandwidthForWWAN:(BOOL)arg1 ;
+(void)setDefaultCache:(id)arg1 ;
+(BOOL)isNetworkInUse;
+(void)setShouldUpdateNetworkActivityIndicator:(BOOL)arg1 ;
+(void)clearSession;
+(void)initialize;
+(BOOL)isMultitaskingSupported;
+(id)requestWithURL:(id)arg1 ;
+(void)reachabilityChanged:(id)arg1 ;
+(id)sharedQueue;
+(id)dateFromRFC1123String:(id)arg1 ;
+(id)defaultCache;
-(void)setFailedBlock:(/*^block*/id)arg1 ;
-(void)startAsynchronous;
-(void)clearDelegatesAndCancel;
-(id)responseString;
-(int)authenticationNeeded;
-(NSString *)authenticationRealm;
-(NSString *)authenticationScheme;
-(NSString *)proxyAuthenticationScheme;
-(void)setProxyDomain:(NSString *)arg1 ;
-(void)retryUsingSuppliedCredentials;
-(void)performThrottling;
-(BOOL)haveBuiltPostBody;
-(void)buildPostBody;
-(void)setShouldStreamPostDataFromDisk:(BOOL)arg1 ;
-(void)addRequestHeader:(id)arg1 value:(id)arg2 ;
-(void)appendPostDataFromFile:(id)arg1 ;
-(void)appendPostData:(id)arg1 ;
-(BOOL)isResponseCompressed;
-(NSString *)downloadDestinationPath;
-(int)cacheStoragePolicy;
-(void)setDownloadProgressDelegate:(id)arg1 ;
-(void)setUploadProgressDelegate:(id)arg1 ;
-(void)setShowAccurateProgress:(BOOL)arg1 ;
-(BOOL)showAccurateProgress;
-(id)HEADRequest;
-(BOOL)shouldResetDownloadProgress;
-(void)setShouldResetDownloadProgress:(BOOL)arg1 ;
-(unsigned long long)postLength;
-(BOOL)shouldResetUploadProgress;
-(void)setShouldResetUploadProgress:(BOOL)arg1 ;
-(id)downloadProgressDelegate;
-(id)uploadProgressDelegate;
-(void)setShouldAttemptPersistentConnection:(BOOL)arg1 ;
-(void)setPersistentConnectionTimeoutSeconds:(double)arg1 ;
-(void)setShouldPresentCredentialsBeforeChallenge:(BOOL)arg1 ;
-(void)setShouldRedirect:(BOOL)arg1 ;
-(void)setAllowCompressedResponse:(BOOL)arg1 ;
-(void)setShouldWaitToInflateCompressedResponses:(BOOL)arg1 ;
-(void)setDefaultResponseEncoding:(unsigned long long)arg1 ;
-(void)setShouldPresentProxyAuthenticationDialog:(BOOL)arg1 ;
-(void)setTimeOutSeconds:(double)arg1 ;
-(void)setUseSessionPersistence:(BOOL)arg1 ;
-(void)setUseCookiePersistence:(BOOL)arg1 ;
-(void)setValidatesSecureCertificate:(BOOL)arg1 ;
-(void)setRequestCookies:(NSMutableArray *)arg1 ;
-(void)setDidStartSelector:(SEL)arg1 ;
-(void)setDidReceiveResponseHeadersSelector:(SEL)arg1 ;
-(void)setWillRedirectSelector:(SEL)arg1 ;
-(void)setDidFinishSelector:(SEL)arg1 ;
-(void)setDidFailSelector:(SEL)arg1 ;
-(void)setDidReceiveDataSelector:(SEL)arg1 ;
-(void)setCancelledLock:(NSRecursiveLock *)arg1 ;
-(void)setDownloadCache:(id<ASICacheDelegate>)arg1 ;
-(void)setAuthenticationNeeded:(int)arg1 ;
-(void)releaseBlocksOnMainThread;
-(NSString *)postBodyFilePath;
-(NSOutputStream *)postBodyWriteStream;
-(void)setPostBodyWriteStream:(NSOutputStream *)arg1 ;
-(BOOL)shouldCompressRequestBody;
-(NSString *)compressedPostBodyFilePath;
-(void)setCompressedPostBodyFilePath:(NSString *)arg1 ;
-(void)setPostLength:(unsigned long long)arg1 ;
-(void)setCompressedPostBody:(NSData *)arg1 ;
-(NSData *)compressedPostBody;
-(void)setHaveBuiltPostBody:(BOOL)arg1 ;
-(BOOL)shouldStreamPostDataFromDisk;
-(void)setPostBodyFilePath:(NSString *)arg1 ;
-(void)setDidCreateTemporaryPostDataFile:(BOOL)arg1 ;
-(void)setupPostBody;
-(NSRecursiveLock *)cancelledLock;
-(void)cancelOnRequestThread;
-(unsigned long long)responseEncoding;
-(BOOL)shouldWaitToInflateCompressedResponses;
-(BOOL)shouldContinueWhenAppEntersBackground;
-(void)setDidUseCachedResponse:(BOOL)arg1 ;
-(ASIHTTPRequest *)mainRequest;
-(BOOL)useHTTPVersionOne;
-(void)buildRequestHeaders;
-(void)useDataFromCache;
-(void)applyAuthorizationHeader;
-(BOOL)configureProxies;
-(BOOL)shouldPresentCredentialsBeforeChallenge;
-(void)addBasicAuthenticationHeaderWithUsername:(id)arg1 andPassword:(id)arg2 ;
-(BOOL)useSessionPersistence;
-(id)findSessionAuthenticationCredentials;
-(void)setAuthenticationScheme:(NSString *)arg1 ;
-(id)findSessionProxyAuthenticationCredentials;
-(BOOL)useCookiePersistence;
-(NSMutableArray *)requestCookies;
-(BOOL)haveBuiltRequestHeaders;
-(void)setHaveBuiltRequestHeaders:(BOOL)arg1 ;
-(void)applyCookieHeader;
-(BOOL)allowCompressedResponse;
-(void)updatePartialDownloadSize;
-(unsigned long long)partialDownloadSize;
-(BOOL)allowResumeForFileDownloads;
-(NSString *)temporaryFileDownloadPath;
-(void)setPartialDownloadSize:(unsigned long long)arg1 ;
-(void)requestStarted;
-(void)setDownloadComplete:(BOOL)arg1 ;
-(void)setTotalBytesRead:(unsigned long long)arg1 ;
-(void)setLastBytesRead:(unsigned long long)arg1 ;
-(void)setOriginalURL:(NSURL *)arg1 ;
-(unsigned long long)lastBytesSent;
-(void)removeUploadProgressSoFar;
-(void)setLastBytesSent:(unsigned long long)arg1 ;
-(void)setReadStreamIsScheduled:(BOOL)arg1 ;
-(void)setPostBodyReadStream:(NSInputStream *)arg1 ;
-(NSInputStream *)postBodyReadStream;
-(void)setReadStream:(NSInputStream *)arg1 ;
-(NSInputStream *)readStream;
-(BOOL)validatesSecureCertificate;
-(BOOL)shouldAttemptPersistentConnection;
-(BOOL)readStreamIsScheduled;
-(void)scheduleReadStream;
-(void)setConnectionCanBeReused:(BOOL)arg1 ;
-(void)destroyReadStream;
-(void)incrementUploadSizeBy:(long long)arg1 ;
-(void)setStatusTimer:(NSTimer *)arg1 ;
-(NSTimer *)statusTimer;
-(void)checkRequestStatus;
-(void)setNeedsRedirect:(BOOL)arg1 ;
-(void)performRedirect;
-(double)timeOutSeconds;
-(unsigned long long)uploadBufferSize;
-(unsigned long long)totalBytesSent;
-(BOOL)shouldTimeOut;
-(int)numberOfTimesToRetryOnTimeout;
-(void)unscheduleReadStream;
-(void)updateProgressIndicators;
-(void)setPACFileReadStream:(NSInputStream *)arg1 ;
-(void)setPACFileData:(NSMutableData *)arg1 ;
-(void)setPACFileRequest:(ASIHTTPRequest *)arg1 ;
-(NSOutputStream *)fileDownloadOutputStream;
-(void)setFileDownloadOutputStream:(NSOutputStream *)arg1 ;
-(NSOutputStream *)inflatedFileDownloadOutputStream;
-(void)setInflatedFileDownloadOutputStream:(NSOutputStream *)arg1 ;
-(BOOL)removeTemporaryDownloadFile;
-(BOOL)removeTemporaryUncompressedDownloadFile;
-(BOOL)willRetryRequest;
-(BOOL)didCreateTemporaryPostDataFile;
-(BOOL)removeTemporaryUploadFile;
-(BOOL)removeTemporaryCompressedUploadFile;
-(BOOL)useKeychainPersistence;
-(void)setUseKeychainPersistence:(BOOL)arg1 ;
-(NSString *)proxyDomain;
-(void)setProxyHost:(NSString *)arg1 ;
-(BOOL)shouldPresentAuthenticationDialog;
-(void)setShouldPresentAuthenticationDialog:(BOOL)arg1 ;
-(BOOL)shouldPresentProxyAuthenticationDialog;
-(void)setUseHTTPVersionOne:(BOOL)arg1 ;
-(void)setClientCertificateIdentity:(SecIdentityRef)arg1 ;
-(NSURL *)PACurl;
-(void)setPACurl:(NSURL *)arg1 ;
-(void)setNumberOfTimesToRetryOnTimeout:(int)arg1 ;
-(BOOL)shouldUseRFC2616RedirectBehaviour;
-(void)setShouldUseRFC2616RedirectBehaviour:(BOOL)arg1 ;
-(double)persistentConnectionTimeoutSeconds;
-(void)setMainRequest:(ASIHTTPRequest *)arg1 ;
-(BOOL)updatedProgress;
-(void)updateUploadProgress;
-(void)updateDownloadProgress;
-(BOOL)needsRedirect;
-(unsigned long long)totalBytesRead;
-(unsigned long long)lastBytesRead;
-(void)setUpdatedProgress:(BOOL)arg1 ;
-(void)setUploadBufferSize:(unsigned long long)arg1 ;
-(void)callBlock:(/*^block*/id)arg1 ;
-(BOOL)isPACFileRequest;
-(void)reportFinished;
-(BOOL)connectionCanBeReused;
-(void)reportFailure;
-(void)setResponseStatusMessage:(NSString *)arg1 ;
-(double)secondsToCache;
-(void)parseStringEncodingFromHeaders;
-(void)setResponseCookies:(NSArray *)arg1 ;
-(BOOL)willRedirect;
-(void)incrementDownloadSizeBy:(long long)arg1 ;
-(void)requestReceivedResponseHeaders:(id)arg1 ;
-(BOOL)shouldRedirect;
-(void)requestRedirected;
-(void)setResponseEncoding:(unsigned long long)arg1 ;
-(unsigned long long)defaultResponseEncoding;
-(NSString *)proxyAuthenticationRealm;
-(int)proxyAuthenticationRetryCount;
-(void)setProxyAuthenticationRetryCount:(int)arg1 ;
-(void)saveProxyCredentialsToKeychain:(id)arg1 ;
-(void)setProxyCredentials:(NSDictionary *)arg1 ;
-(int)authenticationRetryCount;
-(void)setAuthenticationRetryCount:(int)arg1 ;
-(void)saveCredentialsToKeychain:(id)arg1 ;
-(void)setRequestCredentials:(NSDictionary *)arg1 ;
-(void)attemptToApplyCredentialsAndResume;
-(void)failAuthentication;
-(void)askDelegateForProxyCredentials;
-(void)askDelegateForCredentials;
-(void)setProxyAuthenticationScheme:(NSString *)arg1 ;
-(void)setProxyAuthenticationRealm:(NSString *)arg1 ;
-(BOOL)applyProxyCredentials:(id)arg1 ;
-(BOOL)willAskDelegateForProxyCredentials;
-(void)attemptToApplyProxyCredentialsAndResume;
-(BOOL)showProxyAuthenticationDialog;
-(id)findProxyCredentials;
-(void)setAuthenticationRealm:(NSString *)arg1 ;
-(BOOL)applyCredentials:(id)arg1 ;
-(BOOL)willAskDelegateForCredentials;
-(BOOL)showAuthenticationDialog;
-(id)findCredentials;
-(void)handleStreamComplete;
-(void)handleStreamError;
-(BOOL)downloadComplete;
-(BOOL)willAskDelegateToConfirmRedirect;
-(SEL)willRedirectSelector;
-(void)requestWillRedirectToURL:(id)arg1 ;
-(void)readResponseHeaders;
-(ASIDataDecompressor *)dataDecompressor;
-(void)setDataDecompressor:(ASIDataDecompressor *)arg1 ;
-(SEL)didReceiveDataSelector;
-(void)passOnReceivedData:(id)arg1 ;
-(void)setTemporaryFileDownloadPath:(NSString *)arg1 ;
-(NSString *)temporaryUncompressedDataDownloadPath;
-(void)setTemporaryUncompressedDataDownloadPath:(NSString *)arg1 ;
-(BOOL)didUseCachedResponse;
-(void)requestFinished;
-(void)setDownloadDestinationPath:(NSString *)arg1 ;
-(void)setWillRetryRequest:(BOOL)arg1 ;
-(BOOL)retryUsingNewConnection;
-(void)fetchPACFile;
-(void)timeOutPACRead;
-(void)setIsPACFileRequest:(BOOL)arg1 ;
-(void)startSynchronous;
-(void)runPACScript:(id)arg1 ;
-(void)finishedDownloadingPACFile:(id)arg1 ;
-(NSInputStream *)PACFileReadStream;
-(NSMutableData *)PACFileData;
-(SEL)didStartSelector;
-(SEL)didFinishSelector;
-(SEL)didFailSelector;
-(void)setAllowResumeForFileDownloads:(BOOL)arg1 ;
-(void)handleNetworkEvent:(unsigned long long)arg1 ;
-(void)setStartedBlock:(/*^block*/id)arg1 ;
-(void)setHeadersReceivedBlock:(/*^block*/id)arg1 ;
-(void)setBytesReceivedBlock:(/*^block*/id)arg1 ;
-(void)setBytesSentBlock:(/*^block*/id)arg1 ;
-(void)setDownloadSizeIncrementedBlock:(/*^block*/id)arg1 ;
-(void)setUploadSizeIncrementedBlock:(/*^block*/id)arg1 ;
-(void)setDataReceivedBlock:(/*^block*/id)arg1 ;
-(void)setAuthenticationNeededBlock:(/*^block*/id)arg1 ;
-(void)setProxyAuthenticationNeededBlock:(/*^block*/id)arg1 ;
-(void)setRequestRedirectedBlock:(/*^block*/id)arg1 ;
-(SEL)didReceiveResponseHeadersSelector;
-(NSArray *)responseCookies;
-(NSDictionary *)requestCredentials;
-(void)setShouldCompressRequestBody:(BOOL)arg1 ;
-(NSDictionary *)proxyCredentials;
-(NSString *)responseStatusMessage;
-(void)setCacheStoragePolicy:(int)arg1 ;
-(void)setSecondsToCache:(double)arg1 ;
-(void)setShouldContinueWhenAppEntersBackground:(BOOL)arg1 ;
-(ASIHTTPRequest *)PACFileRequest;
-(BOOL)isConcurrent;
-(void)stream:(id)arg1 handleEvent:(unsigned long long)arg2 ;
-(NSString *)password;
-(void)setPassword:(NSString *)arg1 ;
-(int)proxyPort;
-(void)setProxyPort:(int)arg1 ;
-(void)setProxyType:(NSString *)arg1 ;
-(NSString *)proxyUsername;
-(NSString *)proxyPassword;
-(void)setProxyUsername:(NSString *)arg1 ;
-(void)setProxyPassword:(NSString *)arg1 ;
-(void)redirectToURL:(id)arg1 ;
-(void)setRawResponseData:(NSMutableData *)arg1 ;
-(NSMutableData *)rawResponseData;
-(void)cancel;
-(void)setDelegate:(id)arg1 ;
-(void)dealloc;
-(id)delegate;
-(void)setCompletionBlock:(/*^block*/id)arg1 ;
-(NSURL *)url;
-(void)setUserInfo:(NSDictionary *)arg1 ;
-(NSString *)domain;
-(id)copyWithZone:(NSZone*)arg1 ;
-(NSDictionary *)userInfo;
-(long long)tag;
-(void)setTag:(long long)arg1 ;
-(void)start;
-(BOOL)isCancelled;
-(id)initWithURL:(id)arg1 ;
-(NSURL *)originalURL;
-(void)setURL:(id)arg1 ;
-(void)main;
-(id)queue;
-(void)setSynchronous:(BOOL)arg1 ;
-(void)setComplete:(BOOL)arg1 ;
-(BOOL)complete;
-(BOOL)isFinished;
-(BOOL)isExecuting;
-(id)connectionID;
-(void)setContentLength:(unsigned long long)arg1 ;
-(NSString *)userAgentString;
-(unsigned long long)contentLength;
-(int)retryCount;
-(void)setRetryCount:(int)arg1 ;
-(void)startRequest;
-(void)setResponseStatusCode:(int)arg1 ;
-(NSArray *)clientCertificates;
-(void)setClientCertificates:(NSArray *)arg1 ;
-(void)setRedirectCount:(int)arg1 ;
-(int)redirectCount;
-(BOOL)isSynchronous;
-(void)setRequestID:(NSNumber *)arg1 ;
-(void)setUserAgentString:(NSString *)arg1 ;
-(void)setConnectionInfo:(NSMutableDictionary *)arg1 ;
-(NSMutableDictionary *)connectionInfo;
-(void)setRequestMethod:(NSString *)arg1 ;
-(void)handleBytesAvailable;
-(id<ASICacheDelegate>)downloadCache;
-(NSString *)requestMethod;
-(void)setRequestHeaders:(NSMutableDictionary *)arg1 ;
-(NSMutableDictionary *)requestHeaders;
-(NSString *)proxyType;
-(void)setCachePolicy:(int)arg1 ;
-(void)setUsername:(NSString *)arg1 ;
-(NSString *)username;
-(NSURL *)redirectURL;
-(void)setRedirectURL:(NSURL *)arg1 ;
-(void)cancelLoad;
-(NSNumber *)requestID;
-(void)setError:(NSError *)arg1 ;
-(NSError *)error;
-(void)failWithError:(id)arg1 ;
-(void)setQueue:(id)arg1 ;
-(void)setResponseHeaders:(NSDictionary *)arg1 ;
-(void)cancelAuthentication;
-(NSString *)proxyHost;
-(void)setDomain:(NSString *)arg1 ;
-(id)responseData;
-(void)updateStatus:(id)arg1 ;
-(void)setLastActivityTime:(NSDate *)arg1 ;
-(NSDate *)lastActivityTime;
-(void)performBlockOnMainThread:(/*^block*/id)arg1 ;
-(void)markAsFinished;
-(NSDictionary *)responseHeaders;
-(int)cachePolicy;
-(int)responseStatusCode;
-(NSString *)runLoopMode;
-(void)setRunLoopMode:(NSString *)arg1 ;
-(void)setPostBody:(NSMutableData *)arg1 ;
-(NSMutableData *)postBody;
-(BOOL)inProgress;
-(void)setInProgress:(BOOL)arg1 ;
-(void)setTotalBytesSent:(unsigned long long)arg1 ;
@end

